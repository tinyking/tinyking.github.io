{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/bdunion.txt","path":"bdunion.txt","modified":0,"renderable":0},{"_id":"source/jd_root.txt","path":"jd_root.txt","modified":0,"renderable":0},{"_id":"source/robots.txt","path":"robots.txt","modified":0,"renderable":0},{"_id":"source/root.txt","path":"root.txt","modified":0,"renderable":0},{"_id":"source/ads.txt","path":"ads.txt","modified":0,"renderable":0},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/fluid/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/clipboard-use.js","path":"js/clipboard-use.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/debouncer.js","path":"js/debouncer.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/lazyload.js","path":"js/lazyload.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/lib/hint/hint.min.css","path":"lib/hint/hint.min.css","modified":0,"renderable":1}],"Cache":[{"_id":"themes/fluid/.editorconfig","hash":"b595159772f3ee1ef5e6780ce307270e741cb309","modified":1594954171998},{"_id":"themes/fluid/.git","hash":"a44722ec69e7107b1deca4a5d1aa8ae506f69227","modified":1594954171853},{"_id":"themes/fluid/.gitattributes","hash":"3e00e1fb043438cd820d94ee3dc9ffb6718996f3","modified":1594954172000},{"_id":"themes/fluid/.gitignore","hash":"5d7e78749ba0a1efcf61253d4a9e50fc6ce0b4bc","modified":1594954172012},{"_id":"themes/fluid/LICENSE","hash":"653274b0f005f82768a7e5e17a32d38bfe38d492","modified":1594954172013},{"_id":"themes/fluid/README.md","hash":"3878ebcd4f4c5717f984d6d916f110fe4b929c0f","modified":1594954172014},{"_id":"themes/fluid/README_en.md","hash":"72727fcd6e32ec8f39b6731070715fa1ed6b6d04","modified":1594954172015},{"_id":"themes/fluid/_config.yml","hash":"e990817370ee49a73b1d2cd49fe91c361480cd64","modified":1594956518732},{"_id":"themes/fluid/_static_prefix.yml","hash":"d49bc7c44a96516386f21bf871be21fc2b336075","modified":1594954172017},{"_id":"themes/fluid/.eslintrc","hash":"3df89453e1f63051fafc90f16a8d83951050e316","modified":1594954171999},{"_id":"themes/fluid/gulpfile.js","hash":"1ad8861ce4f702c164f908efb6c1c6504154ed2d","modified":1594954172018},{"_id":"themes/fluid/local-search.xml","hash":"85fcc23b4db654a7f91fc55b6fb0442bb3ed3a9a","modified":1594954172066},{"_id":"themes/fluid/package.json","hash":"780255ca5596ce7e6849d1790556ff025ae166c6","modified":1594954172067},{"_id":"source/bdunion.txt","hash":"8535368ebb7bf1c5fbbcf5f9741240e6e01b356c","modified":1594953121236},{"_id":"source/googlee0755d86d3b42c82.html","hash":"a2ab57e9f9126deb581cc277e56115f71ced4d0e","modified":1594953121241},{"_id":"source/jd_root.txt","hash":"119e57ede492fc6899337f363a98b6ec626a0ef6","modified":1594953121242},{"_id":"source/robots.txt","hash":"105f9bb1313862119440b3e64fd170c5547088f1","modified":1594953121244},{"_id":"source/root.txt","hash":"f97a722b622d4ae50cfc132cd42ea53996c9e75e","modified":1594953121245},{"_id":"themes/fluid/languages/en.yml","hash":"31f2867619a768606166778d4ee51f3d00ac33a0","modified":1594954172020},{"_id":"themes/fluid/languages/ja.yml","hash":"dc43be11a300893ebef47283c22f2f946ca21260","modified":1594954172021},{"_id":"themes/fluid/languages/zh-CN.yml","hash":"3b92f4428d66c31610f6cde13b82ee723aff00d2","modified":1594954172022},{"_id":"themes/fluid/layout/404.ejs","hash":"79a598e43c40d48b23076361720f1e77df466e41","modified":1594954172023},{"_id":"themes/fluid/layout/about.ejs","hash":"3753755fcba5e25183b4a44ce27cf6f45f47d35f","modified":1594954172054},{"_id":"themes/fluid/layout/archive.ejs","hash":"df4510c4e6653803a35ab8bfaca60c2d7e2bb16e","modified":1594954172055},{"_id":"themes/fluid/layout/category.ejs","hash":"395ed0ef33d1e735e8597c12bb6e03fba1ff93e0","modified":1594954172057},{"_id":"themes/fluid/layout/index.ejs","hash":"421dffc2b9061e65fa9fbd7ae99e99789cde1317","modified":1594954172058},{"_id":"themes/fluid/layout/layout.ejs","hash":"2aa7f00bb1641a5912bcec0068464a657a76e2a0","modified":1594954172060},{"_id":"themes/fluid/layout/categories.ejs","hash":"d956999db7b9da50876d1297cf69b5f1c0de86de","modified":1594954172056},{"_id":"themes/fluid/layout/links.ejs","hash":"8efaa2ab9804df1b3f72b6940b47247eb7853b66","modified":1594954172061},{"_id":"themes/fluid/layout/page.ejs","hash":"9f4a66735082127fd0792ba747029212e63c90a1","modified":1594954172062},{"_id":"themes/fluid/layout/post.ejs","hash":"b280341534453431f627af7ca12d3f1850294d94","modified":1594954172063},{"_id":"themes/fluid/layout/tag.ejs","hash":"512b999d6ba6dc0ccc4617ad5f60ce024f81e62e","modified":1594954172064},{"_id":"themes/fluid/layout/tags.ejs","hash":"b7c1a6d8fc1097fc16d2300260297013cb692153","modified":1594954172065},{"_id":"source/ads.txt","hash":"73c989d561f395db523cd16a75b39bb607b2bacf","modified":1594953121235},{"_id":"source/CNAME","hash":"b396c6b97de847265026126a2a73a79ff472d2e0","modified":1594953121129},{"_id":"source/404/index.html","hash":"6a41a0d83fc0d3a138f8cb976ae83d820b13881b","modified":1594953121127},{"_id":"source/_drafts/Angular系列-01-Angular介绍.md","hash":"9551e23a915b07b15229c6ca9473de0c4cec5b57","modified":1594953121132},{"_id":"source/_drafts/Angular-ViewChild深度解析.md","hash":"e4a9fbaa83535399f7c66a9d06e58723395e849b","modified":1594953121131},{"_id":"source/_drafts/在Angular中使用Firebase-Database.md","hash":"4302738d5f0d4ac3693a66b249a4491cf9c3f110","modified":1594953121134},{"_id":"source/_drafts/详解ng-container、ng-template、ngTemplateOutlet.md","hash":"a93e15b16745a67121b61aac5f09491d2fb915be","modified":1594953121135},{"_id":"source/about/index.md","hash":"e9fced64824abe2640cae7c2135d537123b27e43","modified":1594956786086},{"_id":"source/tags/index.md","hash":"38dbc6a430676e4c3706796b6ffea851cd3b460c","modified":1594953121247},{"_id":"source/_posts/0002-config-springboot-dashboard.md","hash":"45291d15e5cb0069100b5690130a56fbfc3f5694","modified":1594953121140},{"_id":"source/_posts/0001-how-to-manage-different-environments-with-angular-cli.md","hash":"38e4d38fb28b8c972b01abf45e73584f2cbaf519","modified":1594953121139},{"_id":"source/_posts/0003-custom-async-validators-in-angular.md","hash":"11c637ed865b531e3a6bab3ba577d752d377ade8","modified":1594953121141},{"_id":"source/_posts/0006-idea-maven-javadoc-charset.md","hash":"68d57f8194e20f632dbc9c91bea9463664b277b2","modified":1594953121146},{"_id":"source/_posts/0004-a-guide-to-oauth2-grants.md","hash":"9ebba10d091a27fa8ebf1c02a52af65db3402d2d","modified":1594953121143},{"_id":"source/_posts/0005-obtain-principal-with-custom-provider.md","hash":"e05a3fd3a4e7f3ad9753256d5c96eddd77c5436d","modified":1594953121144},{"_id":"source/_posts/0007-spring-boot-integrate-security.md","hash":"40c13dc79a1cb20479c2ae623fd5ffca898971d2","modified":1594953121147},{"_id":"source/_posts/0009-msyql-use-double-quotes.md","hash":"0ff655614c437dd61cf3f36e89f0da84cde8fa28","modified":1594953121151},{"_id":"source/_posts/0008-nginx-all.md","hash":"315a684e398c31490974cc65aaaa25751d02218c","modified":1594953121149},{"_id":"source/_posts/0010-spring-cloud-zuul-integrate-static-resource.md","hash":"2e9f53cefeb5d37f1ef81aa41042487e3137553c","modified":1594953121152},{"_id":"source/_posts/0013-angular-output-input-analysis.md","hash":"ca7be7701a575582b106fbd083187c2a61744e59","modified":1594953121157},{"_id":"source/_posts/0011-jdk-and-cglib-proxy.md","hash":"800f47ef49030ff7981cf5e28fa83f7e3aea0f66","modified":1594953121154},{"_id":"source/_posts/0012-custom-material-paginator-label.md","hash":"b6507de779e6af9411666df094e67b27ba94ce8d","modified":1594953121155},{"_id":"source/_posts/0014-create-npm-repository-with-nexus.md","hash":"536fab59d30e93006e4b61e6711737cc0954d5b6","modified":1594953121158},{"_id":"source/_posts/0015-angular-font-awesome.md","hash":"cb2f45a2d7fc38e6564e7db165ca1f7074e225cc","modified":1594953121160},{"_id":"source/_posts/0015-如何用Angular6创建各种动画效果.md","hash":"59f3dbaab483aaa89fc9bdf71b20a93b2c8b92da","modified":1594953121161},{"_id":"source/_posts/0016-面向对象.md","hash":"bf619dfead3ab990eaa9a0aa9f1c77c8f208fe19","modified":1594953121163},{"_id":"source/_posts/0017-Accurate assessment of working hours.md","hash":"70ae7f7ffcb6d89b3d406127c5ea215985bfbf89","modified":1594953121164},{"_id":"source/_posts/0018-使用 Docker 部署 Spring Boot.md","hash":"392fdacc130a76cf7a2dfc4146c2e36c15e08aed","modified":1594953121165},{"_id":"source/_posts/0019-typescript-guidelines.md","hash":"df2e3026bdc5095f210c3f478d54a736311eb3cb","modified":1594953121167},{"_id":"source/_posts/0020-code-review-best-practice.md","hash":"10241ae2aa50aefd1d28a74f476e28e5cc030f6a","modified":1594953121169},{"_id":"source/_posts/Angular之自定义组件添加默认样式.md","hash":"713aff77a3395817cfa6bb8c32fefcd5b364495f","modified":1594953121170},{"_id":"source/_posts/Angular开发必不可少的代理配置.md","hash":"594e7c608b8754c68143d7ebbd0da5a6776907f2","modified":1594953121172},{"_id":"source/_posts/Angular打包优化之momentjs瘦身.md","hash":"d5c27097b5596cc1f0a04e6ad298da5a3a3f3ecc","modified":1594953121173},{"_id":"source/_posts/Angular核心技术之组件.md","hash":"701d63890a25d64147e0633daa30f28f499763f4","modified":1594953121174},{"_id":"source/_posts/HashMap.md","hash":"7504e3d834672f0ef362bffd2b74a6f9035464d2","modified":1594953121176},{"_id":"source/_posts/Keepalived.md","hash":"9d6c783617c09748baa4c7894b04b298cfc11660","modified":1594953121177},{"_id":"source/_posts/VS code调试Angular.md","hash":"bb43d0d31b925e844bfcd54195cb19658021258e","modified":1594953121179},{"_id":"source/_posts/WebStorm-VSCode集成cmder.md","hash":"f3193746f5ac109387fd36b51bd77e4dee6e0d87","modified":1594953121180},{"_id":"source/_posts/build-angular-desktop-apps-with-electron.md","hash":"7d2061684e098917a4f4f85bce0a53b5d55b69f0","modified":1594953121181},{"_id":"source/_posts/build-spring-on-win10.md","hash":"eaddc0df8b35575dac357994b217f7ac1ed89c98","modified":1594953121183},{"_id":"source/_posts/display-real-time-data-in-angular.md","hash":"1a67e60aa9473e5bfbae47ed6196b09e48a83c0a","modified":1594953121184},{"_id":"source/_posts/firewalld.md","hash":"f2076fee1a2b0c0cdeb37bfcb6e4c8bd9223b721","modified":1594953121186},{"_id":"source/_posts/front-framework.md","hash":"d6438a9a35ee63e19a411f840a06015d0e16e289","modified":1594953121187},{"_id":"source/_posts/future-of-java-each-version.md","hash":"3657924e3239c25905fa191b038897af3658887b","modified":1594953121189},{"_id":"source/_posts/how-to-import-springboot.md","hash":"c050b3257f8d2fe225c6a47029211b653be8d7c9","modified":1594953121190},{"_id":"source/_posts/jdk-profile.md","hash":"82dbdaa36d06970c9eb6641d25ae60bbc5cdea36","modified":1594953121195},{"_id":"source/_posts/how-to-monitor-java-garbage-collection.md","hash":"c7a76d573ff1a2768c753214c15008f61c3d215d","modified":1594953121192},{"_id":"source/_posts/java-history.md","hash":"a4ea03f612829c8cfbc35e5d3bdd909fe0a55b32","modified":1594953121193},{"_id":"source/_posts/javascript-rule.md","hash":"ea17fd35f79cd34ce34b43ba2d3a3c8856d519e5","modified":1594953121194},{"_id":"source/_posts/linux-command.md","hash":"82f856a72212a55dcf744dc91d912f35b1823d3f","modified":1594953121197},{"_id":"source/_posts/linux-profile.md","hash":"095bb909e11640f2b9038936a5b96b8b5268d88c","modified":1594953121198},{"_id":"source/_posts/mysql-password.md","hash":"4cf624e05ee60bf7fb87a84010a2af3215052422","modified":1594953121201},{"_id":"source/_posts/online-question-resolve.md","hash":"4f203e334c507b15239df0bff9ae0a77069d9962","modified":1594953121202},{"_id":"source/_posts/logback-xml.md","hash":"33d8577a188669a6316928f3b9725dc3ad9c3538","modified":1594953121199},{"_id":"source/_posts/rocketmq-architecture.md","hash":"898e8571ac066ef839774c6498c68345e138401e","modified":1594953121203},{"_id":"source/_posts/spring-annotation.md","hash":"7fccd48e960366626fe3b2288025b6e905540693","modified":1594953121206},{"_id":"source/_posts/squid.md","hash":"9f5b217503255013216a0d82e894d60f48563471","modified":1594953121209},{"_id":"source/_posts/rocketmq-quickstart.md","hash":"39eb9ff376af294af1646180054c3a6296612a32","modified":1594953121205},{"_id":"source/_posts/spring.md","hash":"17d0a4f512eb15d849b3a7444be84c1131f09813","modified":1594953121207},{"_id":"source/_posts/vue.md","hash":"ee44fcff25f9758190b837931504563cef6bb691","modified":1594953121210},{"_id":"source/_posts/webupload.md","hash":"31bb84596a2b4614c4ff0994bd81015194e3b41a","modified":1594953121212},{"_id":"source/_posts/使用Prettier来规范你的Angular项目.md","hash":"f27bf54a6b8f15726c43a07a92a0645a65212802","modified":1594953121213},{"_id":"source/_posts/使用webpack-bundle-analyzer分析Angular应用.md","hash":"2394c1938aa1ed89f57feb26e32aed23a3c8b8d5","modified":1594953121214},{"_id":"source/_posts/如何实现Angular-Material自定义主题.md","hash":"8d3f8d1b935f101b349f26d3d83dc3fdf849b51a","modified":1594953121216},{"_id":"source/_posts/如何用Angular-Reactive-Form的实现领域模型one-to-many.md","hash":"caf82d7b46eda09995fec455630fb553f31d01a3","modified":1594953121226},{"_id":"source/_posts/当ThreadLocal碰上线程池.md","hash":"0e79991502f5d660c5fc9d6086aa4f4187d1618f","modified":1594953121232},{"_id":"source/categories/index.md","hash":"38bc73214d5de5fdcbab2c12b7ec3321b049b1bb","modified":1594953121240},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"afc585d28c7fcbc045d2279f09ebab5f24b857b5","modified":1594954172003},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"3bb59da264ea70f30cc8f2c9b8cee71a04e3dd78","modified":1594954172004},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"a9d5164f9a7930d2561c58e7dbc3dba5b7b74747","modified":1594954172005},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"62dd795d0ff88804687427f00bb50ec06f5cbacd","modified":1594954172006},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question.md","hash":"0e54aa4b4d723579ba0d6157672592227ff1534e","modified":1594954172007},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"18381d03518526d7cefd024a0bdd8d9e7c6440f5","modified":1594954172008},{"_id":"themes/fluid/.github/workflows/limit.yaml","hash":"bdbdb66da69ab7353b546f02150a6792f4787975","modified":1594954172010},{"_id":"themes/fluid/.github/workflows/lint.yaml","hash":"eed3050d5e6bc1d45337f9a8b1f3581199a9740e","modified":1594954172011},{"_id":"themes/fluid/layout/_partial/beian.ejs","hash":"072cd1b3dc44af65fdfb525da440b7af6a591d11","modified":1594954172025},{"_id":"themes/fluid/layout/_partial/css.ejs","hash":"c732f71ba5eb96f04968ac0bdbec86b3fd8f4848","modified":1594954172033},{"_id":"themes/fluid/layout/_partial/footer.ejs","hash":"e0113683ceab4be2f79d0c9b5df4b77defaec614","modified":1594954172034},{"_id":"themes/fluid/layout/_partial/head.ejs","hash":"89238587a33212525acfee0882755819b1ee11aa","modified":1594954172034},{"_id":"themes/fluid/layout/_partial/nav.ejs","hash":"a2c16035ea5690882159f9df3a9ddb77ea74b4af","modified":1594954172035},{"_id":"themes/fluid/layout/_partial/paginator.ejs","hash":"8191c630b3db4dd1dd8aad56defad93334a7b691","modified":1594954172036},{"_id":"themes/fluid/layout/_partial/post-meta.ejs","hash":"dc698e6293885c3557e60453689a0f89a48e3a47","modified":1594954172049},{"_id":"themes/fluid/layout/_partial/scripts.ejs","hash":"bc112eff06da969b8f05232248130dd8b78cee93","modified":1594954172050},{"_id":"themes/fluid/layout/_partial/search.ejs","hash":"bea21f1b5de61badd6c068080315c201fc80bc36","modified":1594954172051},{"_id":"themes/fluid/layout/_partial/statistics.ejs","hash":"a70c26e415a27f07f38b9384e7eb48d1f2b30328","modified":1594954172052},{"_id":"themes/fluid/layout/_partial/toc.ejs","hash":"a3f22d478aa18d376ab2de44a63271398e495c20","modified":1594954172053},{"_id":"themes/fluid/scripts/events/index.js","hash":"8b717129a6357e337b20036e2ff1ebd4ff131cf6","modified":1594954172070},{"_id":"themes/fluid/scripts/filters/post-filter.js","hash":"cf6ff2a54d08ad8b3727dcdb7dd0b9fb744eecf9","modified":1594954172079},{"_id":"themes/fluid/scripts/generators/local-search.js","hash":"91addd219f3fde1a90bdd6b99e653f0b67f29a52","modified":1594954172080},{"_id":"themes/fluid/scripts/generators/pages.js","hash":"7981f58ba853d9c34be99a48bdd1094227084005","modified":1594954172081},{"_id":"themes/fluid/scripts/helpers/page.js","hash":"109ae26697f623a9fd1b1c2b20d50a2522037751","modified":1594954172083},{"_id":"themes/fluid/scripts/helpers/url.js","hash":"1664f8faa028898bd6f91d6db61c7dbf7463ee01","modified":1594954172084},{"_id":"themes/fluid/scripts/helpers/utils.js","hash":"4acb213f90f1e7ba3696ef08d894a2a84807b669","modified":1594954172085},{"_id":"themes/fluid/scripts/helpers/wordcount.js","hash":"da6144ee040fed0a9b9f45da3478bc33087b5ac9","modified":1594954172086},{"_id":"themes/fluid/scripts/tags/button.js","hash":"1093f53dccdf75c0ca93d0aba15a2b0b790ed9e5","modified":1594954172087},{"_id":"themes/fluid/scripts/tags/checkbox.js","hash":"21f4cd0c05d2636dd4d87a32e47462cdc6e3a2ef","modified":1594954172088},{"_id":"themes/fluid/scripts/tags/group-image.js","hash":"cc176cc1d7e7cc28cedf8397ae748c691d140be2","modified":1594954172089},{"_id":"themes/fluid/scripts/tags/label.js","hash":"ffec621d003aa282b6bffca4cfaeccf65321f785","modified":1594954172090},{"_id":"themes/fluid/scripts/tags/note.js","hash":"0410e9f982f19e71eb166da31e967a628dfbddcf","modified":1594954172091},{"_id":"themes/fluid/scripts/utils/join-path.js","hash":"ec068c699155565aea4aa4ab55d8a10b2947a114","modified":1594954172093},{"_id":"themes/fluid/scripts/utils/object.js","hash":"d07abe58481ab097fc4e5b9f573cdc46bce4bfec","modified":1594954172095},{"_id":"themes/fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1594954172135},{"_id":"themes/fluid/source/img/default.png","hash":"7bb2b8ee07db305bcadee2985b81b942027ae940","modified":1594954172136},{"_id":"themes/fluid/source/img/favicon.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1594954172137},{"_id":"themes/fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1594954172138},{"_id":"themes/fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1594954172139},{"_id":"themes/fluid/source/css/main.styl","hash":"bf536db598434c36cc0c752196bfde46e584a92e","modified":1594954172133},{"_id":"themes/fluid/source/js/clipboard-use.js","hash":"78cd93cd97e3eb497dc37e3c63029e4e248c90a5","modified":1594954172141},{"_id":"themes/fluid/source/js/color-schema.js","hash":"ab6f9f5eba9c599e66f2bfe7cbe1382a41d8637d","modified":1594954172141},{"_id":"themes/fluid/source/js/debouncer.js","hash":"8833902327af7beac17ab97227fcd835329abfa2","modified":1594954172143},{"_id":"themes/fluid/source/js/local-search.js","hash":"bb899b1ddb2f3c2565d846def2f742ca15407cae","modified":1594954172145},{"_id":"themes/fluid/source/js/lazyload.js","hash":"9d4c9b670f578f9d7179053d16a5e5f5c35022db","modified":1594954172144},{"_id":"themes/fluid/source/js/main.js","hash":"49139224530b05f12d6b28865321e791cd836844","modified":1594954172146},{"_id":"themes/fluid/source/js/utils.js","hash":"7183cd026bdf4f85a77cd624ad27c7cbebee3674","modified":1594954172147},{"_id":"themes/fluid/layout/_partial/comments/changyan.ejs","hash":"ab12042aa68ee05942efec8fa7c7591c73d8c099","modified":1594954172027},{"_id":"themes/fluid/layout/_partial/comments/disqus.ejs","hash":"e752792515cd4770efb27f184f1461033475d05b","modified":1594954172028},{"_id":"themes/fluid/layout/_partial/comments/gitalk.ejs","hash":"9a6b62378b4102e0bd4ad89461b8446fa55d01fd","modified":1594954172029},{"_id":"themes/fluid/layout/_partial/comments/livere.ejs","hash":"4cdc718b8fde0cfa80849484cd75738b04706c7b","modified":1594954172030},{"_id":"themes/fluid/layout/_partial/comments/utterances.ejs","hash":"8cc1559146b05336aec7134d713a686bcc1d4671","modified":1594954172031},{"_id":"themes/fluid/layout/_partial/comments/valine.ejs","hash":"821ff3dd0d8b3c7bb19892eb186ff92ac9186fd6","modified":1594954172032},{"_id":"themes/fluid/layout/_partial/plugins/analytics.ejs","hash":"2e4b66d562335cd980c0a2b8875d32e4c1bdd7d6","modified":1594954172038},{"_id":"themes/fluid/layout/_partial/plugins/anchor.ejs","hash":"64321f2ab171d4750edee0413c5036549820e6d0","modified":1594954172039},{"_id":"themes/fluid/layout/_partial/plugins/aplayer.ejs","hash":"d43ece36655f3831960bbe8f0c920ea25ae03b10","modified":1594954172040},{"_id":"themes/fluid/layout/_partial/plugins/daovoice.ejs","hash":"804d12424d4c4ebbb26198865cc989ccb90e6a6a","modified":1594954172041},{"_id":"themes/fluid/layout/_partial/plugins/fancybox.ejs","hash":"78b11d3506f71419d1e8b755cd97376046e88011","modified":1594954172041},{"_id":"themes/fluid/layout/_partial/plugins/leancloud.ejs","hash":"393fb6d61127975592b575707592050a8b0ea412","modified":1594954172042},{"_id":"themes/fluid/layout/_partial/plugins/local-search.ejs","hash":"a12e81a59d95963102e9455b9430354f04b16f2a","modified":1594954172043},{"_id":"themes/fluid/layout/_partial/plugins/math.ejs","hash":"a49a0064b55cf6d8f2a61abfecd41f0083757e04","modified":1594954172044},{"_id":"themes/fluid/layout/_partial/plugins/mermaid.ejs","hash":"fd1f78287c868ccab78b6244b66e3f9b0968c4a8","modified":1594954172045},{"_id":"themes/fluid/layout/_partial/plugins/mouse-click.ejs","hash":"80261b4d705bd0181b8570821df645149bb1b5f1","modified":1594954172046},{"_id":"themes/fluid/layout/_partial/plugins/tocjs.ejs","hash":"8e30fbc54ca99f1d1730cb21a86cf3fb08ed0351","modified":1594954172047},{"_id":"themes/fluid/layout/_partial/plugins/typed.ejs","hash":"3741b0df043a804efcf61b9733b37a51748515d3","modified":1594954172048},{"_id":"themes/fluid/scripts/events/lib/footnote.js","hash":"13d8466cd4c98367131b5f3d6a30b3d4ce8de26f","modified":1594954172071},{"_id":"themes/fluid/scripts/events/lib/hello.js","hash":"6dba541e1539d038e658050b0f0384e37af45e3f","modified":1594954172072},{"_id":"themes/fluid/scripts/events/lib/highlight.js","hash":"f2683301696f3c8680e742031b85123331d22e84","modified":1594954172073},{"_id":"themes/fluid/scripts/events/lib/lazyload.js","hash":"a0392ed82014eed8ff4e4f0fc0d01fde5e689a12","modified":1594954172074},{"_id":"themes/fluid/scripts/events/lib/merge-configs.js","hash":"b3b53c55d91696a53f9b46df94851b4005affe38","modified":1594954172075},{"_id":"themes/fluid/scripts/events/lib/version.js","hash":"868c01f1f79375724c07dfce74f5fbc0897b92f7","modified":1594954172077},{"_id":"themes/fluid/source/css/_functions/base.styl","hash":"171697018fd384fce0834875ca94b91f16564cac","modified":1594954172098},{"_id":"themes/fluid/source/css/_mixins/base.styl","hash":"046979dbd8cdabd21d89f9c1d8f1bb3f2fd06d6f","modified":1594954172100},{"_id":"themes/fluid/source/css/_pages/pages.styl","hash":"92c062cf55457b6549497244d09ec34e9c0c95c2","modified":1594954172131},{"_id":"themes/fluid/source/css/_variables/base.styl","hash":"3c8fb9bbc4931bc83a3c461024cae3fd755c3b70","modified":1594954172132},{"_id":"themes/fluid/source/lib/hint/hint.min.css","hash":"64fa8c328dc93432ec822de2818aef21a4f63b29","modified":1594954172149},{"_id":"themes/fluid/source/css/_pages/_category/category.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1594954172121},{"_id":"themes/fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1594954172129},{"_id":"themes/fluid/source/css/_pages/_about/about.styl","hash":"f1f7eb13928caff04e9019dbdd37a96f47bd7ed5","modified":1594954172102},{"_id":"themes/fluid/source/css/_pages/_archive/archive.styl","hash":"86926a80bf6f39a7f47789b1a8f44b5984b4683f","modified":1594954172104},{"_id":"themes/fluid/source/css/_pages/_base/base.styl","hash":"574a9c64f071d938a31a768451aad64b2999a1d6","modified":1594954172115},{"_id":"themes/fluid/source/css/_pages/_base/color-schema.styl","hash":"4fb8c2d02dd4073c46b4a959f1ad18161ac73d73","modified":1594954172117},{"_id":"themes/fluid/source/css/_pages/_base/inline.styl","hash":"c98c4be12ae65b5db335527509e89af6d1451dbd","modified":1594954172118},{"_id":"themes/fluid/source/css/_pages/_base/keyframes.styl","hash":"58a7f8f2baea2d58cf5f7edfc91314ee5d7156ca","modified":1594954172118},{"_id":"themes/fluid/source/css/_pages/_base/rewrite.styl","hash":"581c3fc529bbd9ccd1ad48b1b946ac3e64ffa965","modified":1594954172119},{"_id":"themes/fluid/source/css/_pages/_category/categories.styl","hash":"0924e35eff2ec84e2d9e4772abccda452d9463ef","modified":1594954172121},{"_id":"themes/fluid/source/css/_pages/_index/index.styl","hash":"7936e86324d014639bbbda9938e7843943aea743","modified":1594954172123},{"_id":"themes/fluid/source/css/_pages/_post/post.styl","hash":"28269efb4b9275ed9b11691160e043d3c15dbe0e","modified":1594954172126},{"_id":"themes/fluid/source/css/_pages/_post/tag_plugin.styl","hash":"81daa88456f7bc9053b08ec667b3b0ca82565059","modified":1594954172128},{"_id":"themes/fluid/source/css/_pages/_tag/tags.styl","hash":"29e9b72cfda2f2baf9cf2597fcd7f9e66303a9bd","modified":1594954172130},{"_id":"themes/fluid/source/css/_pages/_links/links.styl","hash":"83694b28209c548ef38bee78e473b02e90cbcf9f","modified":1594954172124},{"_id":"themes/fluid/source/css/_pages/_base/_widget/banner.styl","hash":"25c51a4d55dc5aeee39dcb66460ba0098d765572","modified":1594954172106},{"_id":"themes/fluid/source/css/_pages/_base/_widget/board.styl","hash":"bb9cdde191b9b1287ba19414bab862f30be6a8a0","modified":1594954172107},{"_id":"themes/fluid/source/css/_pages/_base/_widget/copy-btn.styl","hash":"fd44a4da774afc00fd49638a9fe6b9d925e52810","modified":1594954172108},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footer.styl","hash":"5b38b485dc3e683aa1d227797412ba41e52b934a","modified":1594954172109},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"41935973a66c14ab2bea0539d4b1f15c62534fa4","modified":1594954172111},{"_id":"themes/fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"1c78485de1008738bf9063826120faeb8abcead4","modified":1594954172113},{"_id":"themes/fluid/source/css/_pages/_base/_widget/header.styl","hash":"64a2c98711b1765a7d8eb99f9e3cd0b9b0673f40","modified":1594954172111},{"_id":"themes/fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"2ee17a8b85e0347ffd81d5703341b47e7a34a1da","modified":1594954172114},{"_id":"themes/fluid/source/css/_pages/_base/_widget/search.styl","hash":"1f4e678d7219815ab62de1b92ec75e021247f90b","modified":1594954172114},{"_id":"source/_data/fluid_config.yml","hash":"a57bbc763e8729ae84d15ca460a8b56ebc079537","modified":1594960606714}],"Category":[{"name":"前端","_id":"ckcpntufa000804oiwo3idnwb"},{"name":"工具","_id":"ckcpntufs000s04oih4e8wttr"},{"name":"后端","_id":"ckcpntufw001004oimy48q328"}],"Data":[{"_id":"fluid_config","data":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"style":"Github Gist","bg_color":false,"copy_btn":true},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"tencent":{"sid":null,"cid":null},"tajs":null,"woyaola":null,"cnzz":null,"leancloud":{"app_id":null,"app_key":null,"server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"Fluid","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/","icon":"iconfont icon-archive-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"https://static.zkqiang.cn/images/20200307203002.jpg","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"大象无形，大音希声"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"disqus"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"archive":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length"},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"myname","introduce":"一句简短的介绍","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}],"Page":[{"_content":"google-site-verification: googlee0755d86d3b42c82.html","source":"googlee0755d86d3b42c82.html","raw":"google-site-verification: googlee0755d86d3b42c82.html","date":"2020-07-17T02:32:01.241Z","updated":"2020-07-17T02:32:01.241Z","path":"googlee0755d86d3b42c82.html","title":"","comments":1,"layout":"page","_id":"ckcpntudq000004oidn5l41gj","content":"google-site-verification: googlee0755d86d3b42c82.html","site":{"data":{}},"excerpt":"","more":"google-site-verification: googlee0755d86d3b42c82.html"},{"_content":"<!doctype html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\"\n          content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>梦语仙境</title>\n</head>\n<body>\n<script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"http://wangjianchao.cn\" homePageName=\"回到我的主页\"></script>\n</body>\n</html>","source":"404/index.html","raw":"<!doctype html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\"\n          content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>梦语仙境</title>\n</head>\n<body>\n<script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"http://wangjianchao.cn\" homePageName=\"回到我的主页\"></script>\n</body>\n</html>","date":"2020-07-17T02:32:01.127Z","updated":"2020-07-17T02:32:01.127Z","path":"404/index.html","title":"","comments":1,"layout":"page","_id":"ckcpntuf3000204oiobhktmkw","content":"<!doctype html>\n<html lang=\"en\">\n<head><meta name=\"generator\" content=\"Hexo 3.9.0\">\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>梦语仙境</title>\n</head>\n<body>\n<script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\" homepageurl=\"http://wangjianchao.cn\" homepagename=\"回到我的主页\"></script>\n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"<!doctype html>\n<html lang=\"en\">\n<head><meta name=\"generator\" content=\"Hexo 3.9.0\">\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>梦语仙境</title>\n</head>\n<body>\n<script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\" homepageurl=\"http://wangjianchao.cn\" homepagename=\"回到我的主页\"></script>\n</body>\n</html>"},{"title":"About","date":"2016-10-18T15:16:06.000Z","layout":"about","_content":"\n\n我的微博: [TinyKing](http://weibo.com/tinyking86)\n\n我的博客园：[博客园TinyKing](http://www.cnblogs.com/tinyking)\n\n我的51CTO: [TinyKing](http://tinyking.blog.51cto.com)\n\n我的微信：![TingKiny](http://ww1.sinaimg.cn/large/806e3151ly1fffzr8uu0zj20e80e8my0.jpg)\n","source":"about/index.md","raw":"---\ntitle: About\ndate: 2016-10-18 23:16:06\nlayout: about\n---\n\n\n我的微博: [TinyKing](http://weibo.com/tinyking86)\n\n我的博客园：[博客园TinyKing](http://www.cnblogs.com/tinyking)\n\n我的51CTO: [TinyKing](http://tinyking.blog.51cto.com)\n\n我的微信：![TingKiny](http://ww1.sinaimg.cn/large/806e3151ly1fffzr8uu0zj20e80e8my0.jpg)\n","updated":"2020-07-17T03:33:06.086Z","path":"about/index.html","_id":"ckcpntuf6000404oio8g7u5cd","comments":1,"content":"<p>我的微博: <a href=\"http://weibo.com/tinyking86\" target=\"_blank\" rel=\"noopener\">TinyKing</a></p>\n<p>我的博客园：<a href=\"http://www.cnblogs.com/tinyking\" target=\"_blank\" rel=\"noopener\">博客园TinyKing</a></p>\n<p>我的51CTO: <a href=\"http://tinyking.blog.51cto.com\" target=\"_blank\" rel=\"noopener\">TinyKing</a></p>\n<p>我的微信：<img src=\"http://ww1.sinaimg.cn/large/806e3151ly1fffzr8uu0zj20e80e8my0.jpg\" srcset=\"/img/loading.gif\" alt=\"TingKiny\"></p>\n","site":{"data":{"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"style":"Github Gist","bg_color":false,"copy_btn":true},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"tencent":{"sid":null,"cid":null},"tajs":null,"woyaola":null,"cnzz":null,"leancloud":{"app_id":null,"app_key":null,"server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"Fluid","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/","icon":"iconfont icon-archive-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"https://static.zkqiang.cn/images/20200307203002.jpg","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"大象无形，大音希声"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"disqus"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"archive":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length"},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"myname","introduce":"一句简短的介绍","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com","tip":"GitHub"},{"class":"iconfont icon-douban-fill","link":"https://douban.com","tip":"豆瓣"},{"class":"iconfont icon-wechat-fill","qrcode":"/img/favicon.png"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<p>我的微博: <a href=\"http://weibo.com/tinyking86\" target=\"_blank\" rel=\"noopener\">TinyKing</a></p>\n<p>我的博客园：<a href=\"http://www.cnblogs.com/tinyking\" target=\"_blank\" rel=\"noopener\">博客园TinyKing</a></p>\n<p>我的51CTO: <a href=\"http://tinyking.blog.51cto.com\" target=\"_blank\" rel=\"noopener\">TinyKing</a></p>\n<p>我的微信：<img src=\"http://ww1.sinaimg.cn/large/806e3151ly1fffzr8uu0zj20e80e8my0.jpg\" srcset=\"/img/loading.gif\" alt=\"TingKiny\"></p>\n"},{"title":"标签","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ntype: \"tags\"\ncomments: false\n---\n","date":"2020-07-17T02:32:01.247Z","updated":"2020-07-17T02:32:01.247Z","path":"tags/index.html","layout":"page","_id":"ckcpntuf9000704oinixw0tu9","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","date":"2018-01-16T06:11:13.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2018-01-16 14:11:13\ntype: \"categories\"\n---","updated":"2020-07-17T02:32:01.240Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckcpntujt006904oig7p1uqdg","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"[Angular系列]01-Angular介绍","photos":["https://i.loli.net/2019/06/10/5cfdf6dca539f47762.png"],"_content":"\n\n![Angular Framework](https://i.loli.net/2019/06/10/5cfdf6dca539f47762.png)","source":"_drafts/Angular系列-01-Angular介绍.md","raw":"---\ntitle: '[Angular系列]01-Angular介绍'\nphotos:\n    - https://i.loli.net/2019/06/10/5cfdf6dca539f47762.png\ntags:\n    - Angular\n---\n\n\n![Angular Framework](https://i.loli.net/2019/06/10/5cfdf6dca539f47762.png)","slug":"Angular系列-01-Angular介绍","published":0,"date":"2020-07-17T02:32:01.132Z","updated":"2020-07-17T02:32:01.132Z","comments":1,"layout":"post","link":"","_id":"ckcpntuey000104oirjzgtura","content":"<p><img src=\"https://i.loli.net/2019/06/10/5cfdf6dca539f47762.png\" srcset=\"/img/loading.gif\" alt=\"Angular Framework\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://i.loli.net/2019/06/10/5cfdf6dca539f47762.png\" srcset=\"/img/loading.gif\" alt=\"Angular Framework\"></p>\n"},{"title":"Angular @ViewChild深度解析","photos":["https://i.loli.net/2019/06/10/5cfdf6dca539f47762.png"],"_content":"\n![Angular Framework](https://i.loli.net/2019/06/10/5cfdf6dca539f47762.png)\n\nAngular `@ViewChild`装饰器是我们在学习Angular的过程中常用的装饰器之一。这个装饰器有很多特性，其中的一些特性可能不是很常见，但却非常有用。\n\n本文中，我们将快速的介绍这个装饰器中所有可用的特性。\n\n## 目录\n\n在本文中，主要涉及一下内容：\n\n- 我们什么时候需要`@ViewChild`装饰器\n- `AfterViewInit`生命周期钩子\n- `@ViewChild`模板查询的范围是什么\n- 使用`@ViewChild`插入组件\n- 如何使用`@ViewChild`插入纯HTML元素\n- 使用`@ViewChild`插入组件的纯HTML元素\n- 如何使用`@ViewChild`注入应用于单个元素或组件的多个指令之一\n- 代码示例（Github存储库）\n- 结论\n\n\n## 我们什么时候需要`@ViewChild`装饰器\n\n如我们所知，在Angular中，我们通过将纯HTML元素与其他Angular组件组合来定义组件模板。\n\n举个例子，我们这里有一个Angular AppComponent模板，它在模板中混合了HTML和自定义组件：\n\n如我们所见，此模板包含几个不同的元素类型，例如：\n\n- 纯HTML元素，如`h2`和`div`\n- 自定义应用程序组件，如`<color sample>`组件\n- 第三方组件（如颜色选择器）\n- 以及多个Angular Material组件\n\n这就是AppComponent在屏幕上的样子：\n\n![color picker](https://s3-us-west-1.amazonaws.com/angular-university/blog-images/angular-viewchild/view-child-1.png)\n\n我们将在这个初始模板中建立所有示例的基础。`<color sample>`组件是小调色板蓝色方块，旁边有一个链接到颜色选择器弹出窗口的输入。\n\n\n## 何时使用@viewchild装饰器？\n\n很多时候，我们可以通过使用模板引用（如`#primaryinput`或`#primarycolorsample`）直接在模板中协调这些多个组件和HTML元素，而不使用`AppComponent`类。\n\n但情况并非总是如此！有时，`AppComponent`可能需要引用其模板中包含的多个元素，以调解它们的交互。\n\n如果是这样的话，那么我们可以获取对这些模板元素的引用，并通过查询模板将它们注入`AppComponent`类：这就是`@ViewChild`的目的。\n\n\n## 使用@viewchild插入对组件的引用\n\n假设`AppComponent`需要在其模板内使用的`<color sample>`组件的引用，以便直接对其调用方法。\n\n在这种情况下，我们可以使用`@ViewChild`插入对名为`#primaryColorSample`的`<color sample>`实例的引用：\n\n通过使用`@ViewChild`，`primarySampleComponent`成员变量将由带有`ColorSampleComponent`实例的Angular填充。\n\n此注入的`ColorSampleComponent`实例与模板中存在的`<color sample>`自定义元素链接的实例相同。\n\n### 通过@viewchild注入的变量何时可用？\n\n此注入成员变量的值在组件构造时不立即可用！\n\n在视图初始化完成后，Angular将自动填充此属性，但只能在组件生命周期的后期填充。\n\n## `AfterViewInit`生命周期钩子\n如果我们想编写使用@viewchild注入的引用的组件初始化代码，我们需要在afterviewinit生命周期钩子中完成。\n\n\n\n下面是如何使用此生命周期挂钩的示例：\n\n\n\n如果我们现在运行这个程序，下面是我们在控制台中得到的输出：\n\n![](https://s3-us-west-1.amazonaws.com/angular-university/blog-images/angular-viewchild/view-child-2.png)\n\n如我们所见，angular已经自动地用对组件的引用填充了成员变量primarycolorsample！\n\n### 我们可以使用ngoninit（）而不是ngafterview init（）吗？\n\n如果我们想确保@viewchild注入的引用存在，我们应该始终使用ngafterview init（）编写初始化代码。\n\n\n\n根据具体情况，模板引用可能已经存在于ngoninit（）上，但我们不应该指望它。\n\n## @viewchild模板查询的范围是什么？\n\n使用@viewchild，我们可以将给定组件模板上的任何组件或指令（或HTML元素）注入到组件本身。\n\n\n\n但是我们可以在组件树下查询组件多远？让我们尝试使用@viewschild查询组件树中更深的组件。\n\n\n\n例如，让我们来看一下<color sample>组件：\n\n\n\n如我们所见，该组件内部使用<mat icon>组件来显示小调色板图标。\n\n\n\n现在让我们继续，看看是否可以查询<mat icon>组件并将其直接注入AppComponent：\n\n\n\n如果我们尝试运行这个，这就是我们在控制台中得到的：\n\n![](https://s3-us-west-1.amazonaws.com/angular-university/blog-images/angular-viewchild/view-child-3.png)\n\n正如我们在控制台结果中看到的那样：\n\n> @viewchild装饰器无法跨组件边界查看！\n\n### @viewchild模板查询的可见性范围\n\n这意味着使用@viewchild完成的查询只能看到组件本身模板内的元素。必须认识到@viewchild不能用于注入：\n\n\n\n其子组件模板中的任何内容\n\n父组件模板中也没有任何内容\n\n总而言之，@viewchild修饰符是组件本地的模板查询机制。\n\n\n\n有了这个，我们已经介绍了@viewchild最常见的用例，但是还有很多其他的用例：让我们看看更多的用例！\n\n## 使用@viewchild插入对dom元素的引用\n\n我们可能希望直接与模板的纯HTML元素（例如appcomponent内的h2标题标记）交互，而不是直接插入子组件。\n\n\n\n为了做到这一点，我们需要首先为要注入的HTML标记分配一个模板引用：\n\n\n\n如我们所见，我们已经将标题模板引用分配给了h2标记。我们现在可以通过以下方式将h2元素直接注入组件类：\n\n\n\n如我们所见，我们正在将字符串“title”传递给@viewchild decorator，它对应于应用于h2标记的模板引用的名称。\n\n\n\n因为h2是一个普通的html元素，而不是一个角组件，所以这次注入的是对h2标记的本机dom元素的包装引用：\n\n![](https://s3-us-west-1.amazonaws.com/angular-university/blog-images/angular-viewchild/view-child-4.png)\n\nelementRef简单地包装了本机DOM元素，我们可以通过访问nativeElement属性来检索它。\n\n\n\n使用nativeElement属性，我们现在可以将任何本地DOM操作应用于h2标题标记，例如addEventListener（）。\n\n\n\n这就是我们如何使用@viewschild与模板中的纯HTML元素进行交互的方法，但这就引出了一个问题：\n\n\n\n如果我们需要与角组件相关联的DOM元素，该怎么办？\n\n\n\n毕竟，<color sample>html标记仍然是一个dom元素，即使它有一个colorsamplecomponent实例附加在它上面。\n\n## 使用@viewchild插入对组件的dom元素的引用\n\n---\n\n> 原文地址：https://blog.angular-university.io/angular-viewchild/","source":"_drafts/Angular-ViewChild深度解析.md","raw":"---\ntitle: Angular @ViewChild深度解析\nphotos:\n    - https://i.loli.net/2019/06/10/5cfdf6dca539f47762.png\ntags:\n    - Angular\ncategories:\n    - 前端\n---\n\n![Angular Framework](https://i.loli.net/2019/06/10/5cfdf6dca539f47762.png)\n\nAngular `@ViewChild`装饰器是我们在学习Angular的过程中常用的装饰器之一。这个装饰器有很多特性，其中的一些特性可能不是很常见，但却非常有用。\n\n本文中，我们将快速的介绍这个装饰器中所有可用的特性。\n\n## 目录\n\n在本文中，主要涉及一下内容：\n\n- 我们什么时候需要`@ViewChild`装饰器\n- `AfterViewInit`生命周期钩子\n- `@ViewChild`模板查询的范围是什么\n- 使用`@ViewChild`插入组件\n- 如何使用`@ViewChild`插入纯HTML元素\n- 使用`@ViewChild`插入组件的纯HTML元素\n- 如何使用`@ViewChild`注入应用于单个元素或组件的多个指令之一\n- 代码示例（Github存储库）\n- 结论\n\n\n## 我们什么时候需要`@ViewChild`装饰器\n\n如我们所知，在Angular中，我们通过将纯HTML元素与其他Angular组件组合来定义组件模板。\n\n举个例子，我们这里有一个Angular AppComponent模板，它在模板中混合了HTML和自定义组件：\n\n如我们所见，此模板包含几个不同的元素类型，例如：\n\n- 纯HTML元素，如`h2`和`div`\n- 自定义应用程序组件，如`<color sample>`组件\n- 第三方组件（如颜色选择器）\n- 以及多个Angular Material组件\n\n这就是AppComponent在屏幕上的样子：\n\n![color picker](https://s3-us-west-1.amazonaws.com/angular-university/blog-images/angular-viewchild/view-child-1.png)\n\n我们将在这个初始模板中建立所有示例的基础。`<color sample>`组件是小调色板蓝色方块，旁边有一个链接到颜色选择器弹出窗口的输入。\n\n\n## 何时使用@viewchild装饰器？\n\n很多时候，我们可以通过使用模板引用（如`#primaryinput`或`#primarycolorsample`）直接在模板中协调这些多个组件和HTML元素，而不使用`AppComponent`类。\n\n但情况并非总是如此！有时，`AppComponent`可能需要引用其模板中包含的多个元素，以调解它们的交互。\n\n如果是这样的话，那么我们可以获取对这些模板元素的引用，并通过查询模板将它们注入`AppComponent`类：这就是`@ViewChild`的目的。\n\n\n## 使用@viewchild插入对组件的引用\n\n假设`AppComponent`需要在其模板内使用的`<color sample>`组件的引用，以便直接对其调用方法。\n\n在这种情况下，我们可以使用`@ViewChild`插入对名为`#primaryColorSample`的`<color sample>`实例的引用：\n\n通过使用`@ViewChild`，`primarySampleComponent`成员变量将由带有`ColorSampleComponent`实例的Angular填充。\n\n此注入的`ColorSampleComponent`实例与模板中存在的`<color sample>`自定义元素链接的实例相同。\n\n### 通过@viewchild注入的变量何时可用？\n\n此注入成员变量的值在组件构造时不立即可用！\n\n在视图初始化完成后，Angular将自动填充此属性，但只能在组件生命周期的后期填充。\n\n## `AfterViewInit`生命周期钩子\n如果我们想编写使用@viewchild注入的引用的组件初始化代码，我们需要在afterviewinit生命周期钩子中完成。\n\n\n\n下面是如何使用此生命周期挂钩的示例：\n\n\n\n如果我们现在运行这个程序，下面是我们在控制台中得到的输出：\n\n![](https://s3-us-west-1.amazonaws.com/angular-university/blog-images/angular-viewchild/view-child-2.png)\n\n如我们所见，angular已经自动地用对组件的引用填充了成员变量primarycolorsample！\n\n### 我们可以使用ngoninit（）而不是ngafterview init（）吗？\n\n如果我们想确保@viewchild注入的引用存在，我们应该始终使用ngafterview init（）编写初始化代码。\n\n\n\n根据具体情况，模板引用可能已经存在于ngoninit（）上，但我们不应该指望它。\n\n## @viewchild模板查询的范围是什么？\n\n使用@viewchild，我们可以将给定组件模板上的任何组件或指令（或HTML元素）注入到组件本身。\n\n\n\n但是我们可以在组件树下查询组件多远？让我们尝试使用@viewschild查询组件树中更深的组件。\n\n\n\n例如，让我们来看一下<color sample>组件：\n\n\n\n如我们所见，该组件内部使用<mat icon>组件来显示小调色板图标。\n\n\n\n现在让我们继续，看看是否可以查询<mat icon>组件并将其直接注入AppComponent：\n\n\n\n如果我们尝试运行这个，这就是我们在控制台中得到的：\n\n![](https://s3-us-west-1.amazonaws.com/angular-university/blog-images/angular-viewchild/view-child-3.png)\n\n正如我们在控制台结果中看到的那样：\n\n> @viewchild装饰器无法跨组件边界查看！\n\n### @viewchild模板查询的可见性范围\n\n这意味着使用@viewchild完成的查询只能看到组件本身模板内的元素。必须认识到@viewchild不能用于注入：\n\n\n\n其子组件模板中的任何内容\n\n父组件模板中也没有任何内容\n\n总而言之，@viewchild修饰符是组件本地的模板查询机制。\n\n\n\n有了这个，我们已经介绍了@viewchild最常见的用例，但是还有很多其他的用例：让我们看看更多的用例！\n\n## 使用@viewchild插入对dom元素的引用\n\n我们可能希望直接与模板的纯HTML元素（例如appcomponent内的h2标题标记）交互，而不是直接插入子组件。\n\n\n\n为了做到这一点，我们需要首先为要注入的HTML标记分配一个模板引用：\n\n\n\n如我们所见，我们已经将标题模板引用分配给了h2标记。我们现在可以通过以下方式将h2元素直接注入组件类：\n\n\n\n如我们所见，我们正在将字符串“title”传递给@viewchild decorator，它对应于应用于h2标记的模板引用的名称。\n\n\n\n因为h2是一个普通的html元素，而不是一个角组件，所以这次注入的是对h2标记的本机dom元素的包装引用：\n\n![](https://s3-us-west-1.amazonaws.com/angular-university/blog-images/angular-viewchild/view-child-4.png)\n\nelementRef简单地包装了本机DOM元素，我们可以通过访问nativeElement属性来检索它。\n\n\n\n使用nativeElement属性，我们现在可以将任何本地DOM操作应用于h2标题标记，例如addEventListener（）。\n\n\n\n这就是我们如何使用@viewschild与模板中的纯HTML元素进行交互的方法，但这就引出了一个问题：\n\n\n\n如果我们需要与角组件相关联的DOM元素，该怎么办？\n\n\n\n毕竟，<color sample>html标记仍然是一个dom元素，即使它有一个colorsamplecomponent实例附加在它上面。\n\n## 使用@viewchild插入对组件的dom元素的引用\n\n---\n\n> 原文地址：https://blog.angular-university.io/angular-viewchild/","slug":"Angular-ViewChild深度解析","published":0,"date":"2020-07-17T02:32:01.130Z","updated":"2020-07-17T02:32:01.131Z","comments":1,"layout":"post","link":"","_id":"ckcpntuf4000304oi8x8q2nei","content":"<p><img src=\"https://i.loli.net/2019/06/10/5cfdf6dca539f47762.png\" srcset=\"/img/loading.gif\" alt=\"Angular Framework\"></p>\n<p>Angular <code>@ViewChild</code>装饰器是我们在学习Angular的过程中常用的装饰器之一。这个装饰器有很多特性，其中的一些特性可能不是很常见，但却非常有用。</p>\n<p>本文中，我们将快速的介绍这个装饰器中所有可用的特性。</p>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><p>在本文中，主要涉及一下内容：</p>\n<ul>\n<li>我们什么时候需要<code>@ViewChild</code>装饰器</li>\n<li><code>AfterViewInit</code>生命周期钩子</li>\n<li><code>@ViewChild</code>模板查询的范围是什么</li>\n<li>使用<code>@ViewChild</code>插入组件</li>\n<li>如何使用<code>@ViewChild</code>插入纯HTML元素</li>\n<li>使用<code>@ViewChild</code>插入组件的纯HTML元素</li>\n<li>如何使用<code>@ViewChild</code>注入应用于单个元素或组件的多个指令之一</li>\n<li>代码示例（Github存储库）</li>\n<li>结论</li>\n</ul>\n<h2 id=\"我们什么时候需要-ViewChild装饰器\"><a href=\"#我们什么时候需要-ViewChild装饰器\" class=\"headerlink\" title=\"我们什么时候需要@ViewChild装饰器\"></a>我们什么时候需要<code>@ViewChild</code>装饰器</h2><p>如我们所知，在Angular中，我们通过将纯HTML元素与其他Angular组件组合来定义组件模板。</p>\n<p>举个例子，我们这里有一个Angular AppComponent模板，它在模板中混合了HTML和自定义组件：</p>\n<p>如我们所见，此模板包含几个不同的元素类型，例如：</p>\n<ul>\n<li>纯HTML元素，如<code>h2</code>和<code>div</code></li>\n<li>自定义应用程序组件，如<code>&lt;color sample&gt;</code>组件</li>\n<li>第三方组件（如颜色选择器）</li>\n<li>以及多个Angular Material组件</li>\n</ul>\n<p>这就是AppComponent在屏幕上的样子：</p>\n<p><img src=\"https://s3-us-west-1.amazonaws.com/angular-university/blog-images/angular-viewchild/view-child-1.png\" srcset=\"/img/loading.gif\" alt=\"color picker\"></p>\n<p>我们将在这个初始模板中建立所有示例的基础。<code>&lt;color sample&gt;</code>组件是小调色板蓝色方块，旁边有一个链接到颜色选择器弹出窗口的输入。</p>\n<h2 id=\"何时使用-viewchild装饰器？\"><a href=\"#何时使用-viewchild装饰器？\" class=\"headerlink\" title=\"何时使用@viewchild装饰器？\"></a>何时使用@viewchild装饰器？</h2><p>很多时候，我们可以通过使用模板引用（如<code>#primaryinput</code>或<code>#primarycolorsample</code>）直接在模板中协调这些多个组件和HTML元素，而不使用<code>AppComponent</code>类。</p>\n<p>但情况并非总是如此！有时，<code>AppComponent</code>可能需要引用其模板中包含的多个元素，以调解它们的交互。</p>\n<p>如果是这样的话，那么我们可以获取对这些模板元素的引用，并通过查询模板将它们注入<code>AppComponent</code>类：这就是<code>@ViewChild</code>的目的。</p>\n<h2 id=\"使用-viewchild插入对组件的引用\"><a href=\"#使用-viewchild插入对组件的引用\" class=\"headerlink\" title=\"使用@viewchild插入对组件的引用\"></a>使用@viewchild插入对组件的引用</h2><p>假设<code>AppComponent</code>需要在其模板内使用的<code>&lt;color sample&gt;</code>组件的引用，以便直接对其调用方法。</p>\n<p>在这种情况下，我们可以使用<code>@ViewChild</code>插入对名为<code>#primaryColorSample</code>的<code>&lt;color sample&gt;</code>实例的引用：</p>\n<p>通过使用<code>@ViewChild</code>，<code>primarySampleComponent</code>成员变量将由带有<code>ColorSampleComponent</code>实例的Angular填充。</p>\n<p>此注入的<code>ColorSampleComponent</code>实例与模板中存在的<code>&lt;color sample&gt;</code>自定义元素链接的实例相同。</p>\n<h3 id=\"通过-viewchild注入的变量何时可用？\"><a href=\"#通过-viewchild注入的变量何时可用？\" class=\"headerlink\" title=\"通过@viewchild注入的变量何时可用？\"></a>通过@viewchild注入的变量何时可用？</h3><p>此注入成员变量的值在组件构造时不立即可用！</p>\n<p>在视图初始化完成后，Angular将自动填充此属性，但只能在组件生命周期的后期填充。</p>\n<h2 id=\"AfterViewInit生命周期钩子\"><a href=\"#AfterViewInit生命周期钩子\" class=\"headerlink\" title=\"AfterViewInit生命周期钩子\"></a><code>AfterViewInit</code>生命周期钩子</h2><p>如果我们想编写使用@viewchild注入的引用的组件初始化代码，我们需要在afterviewinit生命周期钩子中完成。</p>\n<p>下面是如何使用此生命周期挂钩的示例：</p>\n<p>如果我们现在运行这个程序，下面是我们在控制台中得到的输出：</p>\n<p><img src=\"https://s3-us-west-1.amazonaws.com/angular-university/blog-images/angular-viewchild/view-child-2.png\" srcset=\"/img/loading.gif\" alt></p>\n<p>如我们所见，angular已经自动地用对组件的引用填充了成员变量primarycolorsample！</p>\n<h3 id=\"我们可以使用ngoninit（）而不是ngafterview-init（）吗？\"><a href=\"#我们可以使用ngoninit（）而不是ngafterview-init（）吗？\" class=\"headerlink\" title=\"我们可以使用ngoninit（）而不是ngafterview init（）吗？\"></a>我们可以使用ngoninit（）而不是ngafterview init（）吗？</h3><p>如果我们想确保@viewchild注入的引用存在，我们应该始终使用ngafterview init（）编写初始化代码。</p>\n<p>根据具体情况，模板引用可能已经存在于ngoninit（）上，但我们不应该指望它。</p>\n<h2 id=\"viewchild模板查询的范围是什么？\"><a href=\"#viewchild模板查询的范围是什么？\" class=\"headerlink\" title=\"@viewchild模板查询的范围是什么？\"></a>@viewchild模板查询的范围是什么？</h2><p>使用@viewchild，我们可以将给定组件模板上的任何组件或指令（或HTML元素）注入到组件本身。</p>\n<p>但是我们可以在组件树下查询组件多远？让我们尝试使用@viewschild查询组件树中更深的组件。</p>\n<p>例如，让我们来看一下<color sample>组件：</color></p>\n<p>如我们所见，该组件内部使用<mat icon>组件来显示小调色板图标。</mat></p>\n<p>现在让我们继续，看看是否可以查询<mat icon>组件并将其直接注入AppComponent：</mat></p>\n<p>如果我们尝试运行这个，这就是我们在控制台中得到的：</p>\n<p><img src=\"https://s3-us-west-1.amazonaws.com/angular-university/blog-images/angular-viewchild/view-child-3.png\" srcset=\"/img/loading.gif\" alt></p>\n<p>正如我们在控制台结果中看到的那样：</p>\n<blockquote>\n<p>@viewchild装饰器无法跨组件边界查看！</p>\n</blockquote>\n<h3 id=\"viewchild模板查询的可见性范围\"><a href=\"#viewchild模板查询的可见性范围\" class=\"headerlink\" title=\"@viewchild模板查询的可见性范围\"></a>@viewchild模板查询的可见性范围</h3><p>这意味着使用@viewchild完成的查询只能看到组件本身模板内的元素。必须认识到@viewchild不能用于注入：</p>\n<p>其子组件模板中的任何内容</p>\n<p>父组件模板中也没有任何内容</p>\n<p>总而言之，@viewchild修饰符是组件本地的模板查询机制。</p>\n<p>有了这个，我们已经介绍了@viewchild最常见的用例，但是还有很多其他的用例：让我们看看更多的用例！</p>\n<h2 id=\"使用-viewchild插入对dom元素的引用\"><a href=\"#使用-viewchild插入对dom元素的引用\" class=\"headerlink\" title=\"使用@viewchild插入对dom元素的引用\"></a>使用@viewchild插入对dom元素的引用</h2><p>我们可能希望直接与模板的纯HTML元素（例如appcomponent内的h2标题标记）交互，而不是直接插入子组件。</p>\n<p>为了做到这一点，我们需要首先为要注入的HTML标记分配一个模板引用：</p>\n<p>如我们所见，我们已经将标题模板引用分配给了h2标记。我们现在可以通过以下方式将h2元素直接注入组件类：</p>\n<p>如我们所见，我们正在将字符串“title”传递给@viewchild decorator，它对应于应用于h2标记的模板引用的名称。</p>\n<p>因为h2是一个普通的html元素，而不是一个角组件，所以这次注入的是对h2标记的本机dom元素的包装引用：</p>\n<p><img src=\"https://s3-us-west-1.amazonaws.com/angular-university/blog-images/angular-viewchild/view-child-4.png\" srcset=\"/img/loading.gif\" alt></p>\n<p>elementRef简单地包装了本机DOM元素，我们可以通过访问nativeElement属性来检索它。</p>\n<p>使用nativeElement属性，我们现在可以将任何本地DOM操作应用于h2标题标记，例如addEventListener（）。</p>\n<p>这就是我们如何使用@viewschild与模板中的纯HTML元素进行交互的方法，但这就引出了一个问题：</p>\n<p>如果我们需要与角组件相关联的DOM元素，该怎么办？</p>\n<p>毕竟，<color sample>html标记仍然是一个dom元素，即使它有一个colorsamplecomponent实例附加在它上面。</color></p>\n<h2 id=\"使用-viewchild插入对组件的dom元素的引用\"><a href=\"#使用-viewchild插入对组件的dom元素的引用\" class=\"headerlink\" title=\"使用@viewchild插入对组件的dom元素的引用\"></a>使用@viewchild插入对组件的dom元素的引用</h2><hr>\n<blockquote>\n<p>原文地址：<a href=\"https://blog.angular-university.io/angular-viewchild/\" target=\"_blank\" rel=\"noopener\">https://blog.angular-university.io/angular-viewchild/</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://i.loli.net/2019/06/10/5cfdf6dca539f47762.png\" srcset=\"/img/loading.gif\" alt=\"Angular Framework\"></p>\n<p>Angular <code>@ViewChild</code>装饰器是我们在学习Angular的过程中常用的装饰器之一。这个装饰器有很多特性，其中的一些特性可能不是很常见，但却非常有用。</p>\n<p>本文中，我们将快速的介绍这个装饰器中所有可用的特性。</p>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><p>在本文中，主要涉及一下内容：</p>\n<ul>\n<li>我们什么时候需要<code>@ViewChild</code>装饰器</li>\n<li><code>AfterViewInit</code>生命周期钩子</li>\n<li><code>@ViewChild</code>模板查询的范围是什么</li>\n<li>使用<code>@ViewChild</code>插入组件</li>\n<li>如何使用<code>@ViewChild</code>插入纯HTML元素</li>\n<li>使用<code>@ViewChild</code>插入组件的纯HTML元素</li>\n<li>如何使用<code>@ViewChild</code>注入应用于单个元素或组件的多个指令之一</li>\n<li>代码示例（Github存储库）</li>\n<li>结论</li>\n</ul>\n<h2 id=\"我们什么时候需要-ViewChild装饰器\"><a href=\"#我们什么时候需要-ViewChild装饰器\" class=\"headerlink\" title=\"我们什么时候需要@ViewChild装饰器\"></a>我们什么时候需要<code>@ViewChild</code>装饰器</h2><p>如我们所知，在Angular中，我们通过将纯HTML元素与其他Angular组件组合来定义组件模板。</p>\n<p>举个例子，我们这里有一个Angular AppComponent模板，它在模板中混合了HTML和自定义组件：</p>\n<p>如我们所见，此模板包含几个不同的元素类型，例如：</p>\n<ul>\n<li>纯HTML元素，如<code>h2</code>和<code>div</code></li>\n<li>自定义应用程序组件，如<code>&lt;color sample&gt;</code>组件</li>\n<li>第三方组件（如颜色选择器）</li>\n<li>以及多个Angular Material组件</li>\n</ul>\n<p>这就是AppComponent在屏幕上的样子：</p>\n<p><img src=\"https://s3-us-west-1.amazonaws.com/angular-university/blog-images/angular-viewchild/view-child-1.png\" srcset=\"/img/loading.gif\" alt=\"color picker\"></p>\n<p>我们将在这个初始模板中建立所有示例的基础。<code>&lt;color sample&gt;</code>组件是小调色板蓝色方块，旁边有一个链接到颜色选择器弹出窗口的输入。</p>\n<h2 id=\"何时使用-viewchild装饰器？\"><a href=\"#何时使用-viewchild装饰器？\" class=\"headerlink\" title=\"何时使用@viewchild装饰器？\"></a>何时使用@viewchild装饰器？</h2><p>很多时候，我们可以通过使用模板引用（如<code>#primaryinput</code>或<code>#primarycolorsample</code>）直接在模板中协调这些多个组件和HTML元素，而不使用<code>AppComponent</code>类。</p>\n<p>但情况并非总是如此！有时，<code>AppComponent</code>可能需要引用其模板中包含的多个元素，以调解它们的交互。</p>\n<p>如果是这样的话，那么我们可以获取对这些模板元素的引用，并通过查询模板将它们注入<code>AppComponent</code>类：这就是<code>@ViewChild</code>的目的。</p>\n<h2 id=\"使用-viewchild插入对组件的引用\"><a href=\"#使用-viewchild插入对组件的引用\" class=\"headerlink\" title=\"使用@viewchild插入对组件的引用\"></a>使用@viewchild插入对组件的引用</h2><p>假设<code>AppComponent</code>需要在其模板内使用的<code>&lt;color sample&gt;</code>组件的引用，以便直接对其调用方法。</p>\n<p>在这种情况下，我们可以使用<code>@ViewChild</code>插入对名为<code>#primaryColorSample</code>的<code>&lt;color sample&gt;</code>实例的引用：</p>\n<p>通过使用<code>@ViewChild</code>，<code>primarySampleComponent</code>成员变量将由带有<code>ColorSampleComponent</code>实例的Angular填充。</p>\n<p>此注入的<code>ColorSampleComponent</code>实例与模板中存在的<code>&lt;color sample&gt;</code>自定义元素链接的实例相同。</p>\n<h3 id=\"通过-viewchild注入的变量何时可用？\"><a href=\"#通过-viewchild注入的变量何时可用？\" class=\"headerlink\" title=\"通过@viewchild注入的变量何时可用？\"></a>通过@viewchild注入的变量何时可用？</h3><p>此注入成员变量的值在组件构造时不立即可用！</p>\n<p>在视图初始化完成后，Angular将自动填充此属性，但只能在组件生命周期的后期填充。</p>\n<h2 id=\"AfterViewInit生命周期钩子\"><a href=\"#AfterViewInit生命周期钩子\" class=\"headerlink\" title=\"AfterViewInit生命周期钩子\"></a><code>AfterViewInit</code>生命周期钩子</h2><p>如果我们想编写使用@viewchild注入的引用的组件初始化代码，我们需要在afterviewinit生命周期钩子中完成。</p>\n<p>下面是如何使用此生命周期挂钩的示例：</p>\n<p>如果我们现在运行这个程序，下面是我们在控制台中得到的输出：</p>\n<p><img src=\"https://s3-us-west-1.amazonaws.com/angular-university/blog-images/angular-viewchild/view-child-2.png\" srcset=\"/img/loading.gif\" alt></p>\n<p>如我们所见，angular已经自动地用对组件的引用填充了成员变量primarycolorsample！</p>\n<h3 id=\"我们可以使用ngoninit（）而不是ngafterview-init（）吗？\"><a href=\"#我们可以使用ngoninit（）而不是ngafterview-init（）吗？\" class=\"headerlink\" title=\"我们可以使用ngoninit（）而不是ngafterview init（）吗？\"></a>我们可以使用ngoninit（）而不是ngafterview init（）吗？</h3><p>如果我们想确保@viewchild注入的引用存在，我们应该始终使用ngafterview init（）编写初始化代码。</p>\n<p>根据具体情况，模板引用可能已经存在于ngoninit（）上，但我们不应该指望它。</p>\n<h2 id=\"viewchild模板查询的范围是什么？\"><a href=\"#viewchild模板查询的范围是什么？\" class=\"headerlink\" title=\"@viewchild模板查询的范围是什么？\"></a>@viewchild模板查询的范围是什么？</h2><p>使用@viewchild，我们可以将给定组件模板上的任何组件或指令（或HTML元素）注入到组件本身。</p>\n<p>但是我们可以在组件树下查询组件多远？让我们尝试使用@viewschild查询组件树中更深的组件。</p>\n<p>例如，让我们来看一下<color sample>组件：</color></p>\n<p>如我们所见，该组件内部使用<mat icon>组件来显示小调色板图标。</mat></p>\n<p>现在让我们继续，看看是否可以查询<mat icon>组件并将其直接注入AppComponent：</mat></p>\n<p>如果我们尝试运行这个，这就是我们在控制台中得到的：</p>\n<p><img src=\"https://s3-us-west-1.amazonaws.com/angular-university/blog-images/angular-viewchild/view-child-3.png\" srcset=\"/img/loading.gif\" alt></p>\n<p>正如我们在控制台结果中看到的那样：</p>\n<blockquote>\n<p>@viewchild装饰器无法跨组件边界查看！</p>\n</blockquote>\n<h3 id=\"viewchild模板查询的可见性范围\"><a href=\"#viewchild模板查询的可见性范围\" class=\"headerlink\" title=\"@viewchild模板查询的可见性范围\"></a>@viewchild模板查询的可见性范围</h3><p>这意味着使用@viewchild完成的查询只能看到组件本身模板内的元素。必须认识到@viewchild不能用于注入：</p>\n<p>其子组件模板中的任何内容</p>\n<p>父组件模板中也没有任何内容</p>\n<p>总而言之，@viewchild修饰符是组件本地的模板查询机制。</p>\n<p>有了这个，我们已经介绍了@viewchild最常见的用例，但是还有很多其他的用例：让我们看看更多的用例！</p>\n<h2 id=\"使用-viewchild插入对dom元素的引用\"><a href=\"#使用-viewchild插入对dom元素的引用\" class=\"headerlink\" title=\"使用@viewchild插入对dom元素的引用\"></a>使用@viewchild插入对dom元素的引用</h2><p>我们可能希望直接与模板的纯HTML元素（例如appcomponent内的h2标题标记）交互，而不是直接插入子组件。</p>\n<p>为了做到这一点，我们需要首先为要注入的HTML标记分配一个模板引用：</p>\n<p>如我们所见，我们已经将标题模板引用分配给了h2标记。我们现在可以通过以下方式将h2元素直接注入组件类：</p>\n<p>如我们所见，我们正在将字符串“title”传递给@viewchild decorator，它对应于应用于h2标记的模板引用的名称。</p>\n<p>因为h2是一个普通的html元素，而不是一个角组件，所以这次注入的是对h2标记的本机dom元素的包装引用：</p>\n<p><img src=\"https://s3-us-west-1.amazonaws.com/angular-university/blog-images/angular-viewchild/view-child-4.png\" srcset=\"/img/loading.gif\" alt></p>\n<p>elementRef简单地包装了本机DOM元素，我们可以通过访问nativeElement属性来检索它。</p>\n<p>使用nativeElement属性，我们现在可以将任何本地DOM操作应用于h2标题标记，例如addEventListener（）。</p>\n<p>这就是我们如何使用@viewschild与模板中的纯HTML元素进行交互的方法，但这就引出了一个问题：</p>\n<p>如果我们需要与角组件相关联的DOM元素，该怎么办？</p>\n<p>毕竟，<color sample>html标记仍然是一个dom元素，即使它有一个colorsamplecomponent实例附加在它上面。</color></p>\n<h2 id=\"使用-viewchild插入对组件的dom元素的引用\"><a href=\"#使用-viewchild插入对组件的dom元素的引用\" class=\"headerlink\" title=\"使用@viewchild插入对组件的dom元素的引用\"></a>使用@viewchild插入对组件的dom元素的引用</h2><hr>\n<blockquote>\n<p>原文地址：<a href=\"https://blog.angular-university.io/angular-viewchild/\" target=\"_blank\" rel=\"noopener\">https://blog.angular-university.io/angular-viewchild/</a></p>\n</blockquote>\n"},{"title":"在Angular中使用Firebase Database","photos":["https://i.loli.net/2019/06/10/5cfdf6dca539f47762.png"],"_content":"\n## Firebase是什么？\n\n## Angular集成Firebase","source":"_drafts/在Angular中使用Firebase-Database.md","raw":"---\ntitle: 在Angular中使用Firebase Database\nphotos:\n    - https://i.loli.net/2019/06/10/5cfdf6dca539f47762.png\ntags:\n    - Angular\ncategories:\n    - 前端\n---\n\n## Firebase是什么？\n\n## Angular集成Firebase","slug":"在Angular中使用Firebase-Database","published":0,"date":"2020-07-17T02:32:01.133Z","updated":"2020-07-17T02:32:01.134Z","comments":1,"layout":"post","link":"","_id":"ckcpntuf8000604oiu32npwlf","content":"<h2 id=\"Firebase是什么？\"><a href=\"#Firebase是什么？\" class=\"headerlink\" title=\"Firebase是什么？\"></a>Firebase是什么？</h2><h2 id=\"Angular集成Firebase\"><a href=\"#Angular集成Firebase\" class=\"headerlink\" title=\"Angular集成Firebase\"></a>Angular集成Firebase</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Firebase是什么？\"><a href=\"#Firebase是什么？\" class=\"headerlink\" title=\"Firebase是什么？\"></a>Firebase是什么？</h2><h2 id=\"Angular集成Firebase\"><a href=\"#Angular集成Firebase\" class=\"headerlink\" title=\"Angular集成Firebase\"></a>Angular集成Firebase</h2>"},{"title":"详解ng-container、ng-template、ngTemplateOutlet","photos":["https://i.loli.net/2019/06/10/5cfdf6dca539f47762.png"],"_content":"\n![Angular Framework](https://i.loli.net/2019/06/10/5cfdf6dca539f47762.png)\n\n\n## ng-container\n\n在Angular中，`ng-container`是一个虚拟的节点元素，在实际渲染时，`ng-container`标签不会渲染。也就是使用`ng-container`包含的dom元素，实际渲染后只能看到被包含的dom元素。\n\n如：\n```html\n<ng-container>\n    <p>这是一个包含在\n</ng-container>\n```","source":"_drafts/详解ng-container、ng-template、ngTemplateOutlet.md","raw":"---\ntitle: 详解ng-container、ng-template、ngTemplateOutlet\nphotos:\n    - https://i.loli.net/2019/06/10/5cfdf6dca539f47762.png\ntags:\n    - Angular\ncategories:\n    - 前端\n---\n\n![Angular Framework](https://i.loli.net/2019/06/10/5cfdf6dca539f47762.png)\n\n\n## ng-container\n\n在Angular中，`ng-container`是一个虚拟的节点元素，在实际渲染时，`ng-container`标签不会渲染。也就是使用`ng-container`包含的dom元素，实际渲染后只能看到被包含的dom元素。\n\n如：\n```html\n<ng-container>\n    <p>这是一个包含在\n</ng-container>\n```","slug":"详解ng-container、ng-template、ngTemplateOutlet","published":0,"date":"2020-07-17T02:32:01.135Z","updated":"2020-07-17T02:32:01.135Z","comments":1,"layout":"post","link":"","_id":"ckcpntufb000904oiamr7kcio","content":"<p><img src=\"https://i.loli.net/2019/06/10/5cfdf6dca539f47762.png\" srcset=\"/img/loading.gif\" alt=\"Angular Framework\"></p>\n<h2 id=\"ng-container\"><a href=\"#ng-container\" class=\"headerlink\" title=\"ng-container\"></a>ng-container</h2><p>在Angular中，<code>ng-container</code>是一个虚拟的节点元素，在实际渲染时，<code>ng-container</code>标签不会渲染。也就是使用<code>ng-container</code>包含的dom元素，实际渲染后只能看到被包含的dom元素。</p>\n<p>如：<br><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ng-container</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>这是一个包含在\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ng-container</span>&gt;</span></code></pre></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://i.loli.net/2019/06/10/5cfdf6dca539f47762.png\" srcset=\"/img/loading.gif\" alt=\"Angular Framework\"></p>\n<h2 id=\"ng-container\"><a href=\"#ng-container\" class=\"headerlink\" title=\"ng-container\"></a>ng-container</h2><p>在Angular中，<code>ng-container</code>是一个虚拟的节点元素，在实际渲染时，<code>ng-container</code>标签不会渲染。也就是使用<code>ng-container</code>包含的dom元素，实际渲染后只能看到被包含的dom元素。</p>\n<p>如：<br><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ng-container</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>这是一个包含在\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ng-container</span>&gt;</span></code></pre></p>\n"},{"title":"Idea手动设置Spring Boot项目使用Run Dashboard运行","date":"2018-10-17T01:24:30.000Z","_content":"\n最近在做基于Spring cloud的微服务开发，开发过程中，要启动很多Spring Boot项目，Idea提供了`Run Dashboard`功能，来方便管理Spring Boot项目。\n\n![](http://ww1.sinaimg.cn/large/806e3151ly1fwazgrcb0yj20gc095t8t.jpg)\n\n<!--more-->\n\n通常Idea会自动提示是否要用`Run Dashboard`管理。\n\n如果没有自动提示，可以手动打开`view >> Tool Windows >> Run Dashboard`\n![](http://ww1.sinaimg.cn/large/806e3151ly1fwazjtuwvuj20f80gz0to.jpg)\n\n如果还没有找到`Run Dashboard`，就需要手动添加，打开workspace.xml，找到`<component name=\"RunDashboard\">`，将其设置成如下：\n\n```xml\n<component name=\"RunDashboard\">\n    <option name=\"configurationTypes\">\n        <set>\n        <option value=\"SpringBootApplicationConfigurationType\" />\n        </set>\n    </option>\n    <option name=\"ruleStates\">\n        <list>\n        <RuleState>\n            <option name=\"name\" value=\"ConfigurationTypeDashboardGroupingRule\" />\n        </RuleState>\n        <RuleState>\n            <option name=\"name\" value=\"StatusDashboardGroupingRule\" />\n        </RuleState>\n        </list>\n    </option>\n</component>\n```\n","source":"_posts/0002-config-springboot-dashboard.md","raw":"---\ntitle: Idea手动设置Spring Boot项目使用Run Dashboard运行\ndate: 2018-10-17 09:24:30\ntags:\n    - Idea\n    - Java\ncategories:\n    - 工具\n---\n\n最近在做基于Spring cloud的微服务开发，开发过程中，要启动很多Spring Boot项目，Idea提供了`Run Dashboard`功能，来方便管理Spring Boot项目。\n\n![](http://ww1.sinaimg.cn/large/806e3151ly1fwazgrcb0yj20gc095t8t.jpg)\n\n<!--more-->\n\n通常Idea会自动提示是否要用`Run Dashboard`管理。\n\n如果没有自动提示，可以手动打开`view >> Tool Windows >> Run Dashboard`\n![](http://ww1.sinaimg.cn/large/806e3151ly1fwazjtuwvuj20f80gz0to.jpg)\n\n如果还没有找到`Run Dashboard`，就需要手动添加，打开workspace.xml，找到`<component name=\"RunDashboard\">`，将其设置成如下：\n\n```xml\n<component name=\"RunDashboard\">\n    <option name=\"configurationTypes\">\n        <set>\n        <option value=\"SpringBootApplicationConfigurationType\" />\n        </set>\n    </option>\n    <option name=\"ruleStates\">\n        <list>\n        <RuleState>\n            <option name=\"name\" value=\"ConfigurationTypeDashboardGroupingRule\" />\n        </RuleState>\n        <RuleState>\n            <option name=\"name\" value=\"StatusDashboardGroupingRule\" />\n        </RuleState>\n        </list>\n    </option>\n</component>\n```\n","slug":"0002-config-springboot-dashboard","published":1,"updated":"2020-07-17T02:32:01.140Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcpntufc000a04oid3u12dsi","content":"<p>最近在做基于Spring cloud的微服务开发，开发过程中，要启动很多Spring Boot项目，Idea提供了<code>Run Dashboard</code>功能，来方便管理Spring Boot项目。</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/806e3151ly1fwazgrcb0yj20gc095t8t.jpg\" srcset=\"/img/loading.gif\" alt></p>\n<a id=\"more\"></a>\n<p>通常Idea会自动提示是否要用<code>Run Dashboard</code>管理。</p>\n<p>如果没有自动提示，可以手动打开<code>view &gt;&gt; Tool Windows &gt;&gt; Run Dashboard</code><br><img src=\"http://ww1.sinaimg.cn/large/806e3151ly1fwazjtuwvuj20f80gz0to.jpg\" srcset=\"/img/loading.gif\" alt></p>\n<p>如果还没有找到<code>Run Dashboard</code>，就需要手动添加，打开workspace.xml，找到<code>&lt;component name=&quot;RunDashboard&quot;&gt;</code>，将其设置成如下：</p>\n<pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">component</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"RunDashboard\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"configurationTypes\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">set</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"SpringBootApplicationConfigurationType\"</span> /&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">set</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"ruleStates\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">list</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">RuleState</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"name\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"ConfigurationTypeDashboardGroupingRule\"</span> /&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">RuleState</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">RuleState</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"name\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"StatusDashboardGroupingRule\"</span> /&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">RuleState</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">list</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">component</span>&gt;</span></code></pre>\n","site":{"data":{}},"excerpt":"<p>最近在做基于Spring cloud的微服务开发，开发过程中，要启动很多Spring Boot项目，Idea提供了<code>Run Dashboard</code>功能，来方便管理Spring Boot项目。</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/806e3151ly1fwazgrcb0yj20gc095t8t.jpg\" srcset=\"/img/loading.gif\" alt></p>","more":"<p>通常Idea会自动提示是否要用<code>Run Dashboard</code>管理。</p>\n<p>如果没有自动提示，可以手动打开<code>view &gt;&gt; Tool Windows &gt;&gt; Run Dashboard</code><br><img src=\"http://ww1.sinaimg.cn/large/806e3151ly1fwazjtuwvuj20f80gz0to.jpg\" srcset=\"/img/loading.gif\" alt></p>\n<p>如果还没有找到<code>Run Dashboard</code>，就需要手动添加，打开workspace.xml，找到<code>&lt;component name=&quot;RunDashboard&quot;&gt;</code>，将其设置成如下：</p>\n<pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">component</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"RunDashboard\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"configurationTypes\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">set</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"SpringBootApplicationConfigurationType\"</span> /&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">set</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"ruleStates\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">list</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">RuleState</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"name\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"ConfigurationTypeDashboardGroupingRule\"</span> /&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">RuleState</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">RuleState</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"name\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"StatusDashboardGroupingRule\"</span> /&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">RuleState</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">list</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">component</span>&gt;</span></code></pre>"},{"title":"使用Angular cli管理多种环境配置","date":"2018-10-16T10:24:30.000Z","_content":"\n大多数的web应用在发布生产之前，需要在多种环境下去运行。例如，您可能需要为QA团队构建一个构建以执行某些测试，或者在您的持续集成服务器上运行特定构建。\n\n这些构建需要不同的配置：\n  - 不同的服务URLS\n  - 不同的logging选项\n  - 等等\n\nAngular CLI提供了一种环境功能，允许运行针对特定环境的构建。 例如，以下是如何运行生产构建：\n\n```\nng build --env=prod   // For Angular 2 to 5\n```\n在升级到Angular 6+后，构建命令如下：\n```\nng build --configuration=production\n```\n上面代码中的prod标志是指v6之前的.angular-cli.json的环境部分的prod（v6+则是production）属性。\n默认情况下有两个选项：dev和prod\n```json\n\"environments\": {\n  \"dev\": \"environments/environment.ts\",\n  \"prod\": \"environments/environment.prod.ts\"\n}\n```\n您可以在此处添加所需的环境。 例如，如果您需要QA构建选项，只需在.angular-cli.json中添加以下条目：\n\n```json\n\"environments\": {\n  \"dev\": \"environments/environment.ts\",\n  \"prod\": \"environments/environment.prod.ts\",\n  \"qa\": \"environments/environment.qa.ts\"\n}\n```\n对于v6 +，angular.json environments现在称为configurations。 以下是在v6之后添加新qa环境的方法：\n```json\n\"configurations\": {\n  \"production\": { ... },\n  \"qa\": {\n    \"fileReplacements\": [\n      {\n        \"replace\": \"src/environments/environment.ts\",\n        \"with\": \"src/environments/environment.qa.ts\"\n      }\n    ]\n  }\n}\n```\n然后，您必须在environments目录中创建实际文件environment.qa.ts。\n\n下面是默认的dev配置：\n```\n// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `.angular-cli.json`.\nexport const environment = {\n  production: false\n};\n```\n您可以在上面的environment对象中添加任何特定于环境的属性。 例如，让我们添加一个服务器URL：\n```\nexport const environment = {\n  production: false,\n  serverUrl: \"http://dev.server.mycompany.com\"\n};\n```\n然后，您需要做的就是为QA提供不同的URL，即在environment.qa.ts中定义具有正确值的相同属性：\n```\nexport const environment = {\n  production: false,\n  serverUrl: \"http://qa.server.mycompany.com\"\n};\n```\n既然已经定义了您的环境，那么如何在代码中使用这些属性？ 很简单，您只需要导入环境对象，如下所示：\n```\nimport {environment} from '../../environments/environment';\n\n\n@Injectable()\nexport class AuthService {\n\n  LOGIN_URL: string = environment.serverUrl + '/login' ;\n```\n然后，当您运行QA构建时，Angular CLI将使用environment.qa.ts来读取environment.serverUrl属性值，并且您已设置为将该构建部署到QA环境。\n","source":"_posts/0001-how-to-manage-different-environments-with-angular-cli.md","raw":"---\ntitle: 使用Angular cli管理多种环境配置\ndate: 2018-10-16 18:24:30\ntags:\n    - Angular\ncategories:\n    - 前端\n---\n\n大多数的web应用在发布生产之前，需要在多种环境下去运行。例如，您可能需要为QA团队构建一个构建以执行某些测试，或者在您的持续集成服务器上运行特定构建。\n\n这些构建需要不同的配置：\n  - 不同的服务URLS\n  - 不同的logging选项\n  - 等等\n\nAngular CLI提供了一种环境功能，允许运行针对特定环境的构建。 例如，以下是如何运行生产构建：\n\n```\nng build --env=prod   // For Angular 2 to 5\n```\n在升级到Angular 6+后，构建命令如下：\n```\nng build --configuration=production\n```\n上面代码中的prod标志是指v6之前的.angular-cli.json的环境部分的prod（v6+则是production）属性。\n默认情况下有两个选项：dev和prod\n```json\n\"environments\": {\n  \"dev\": \"environments/environment.ts\",\n  \"prod\": \"environments/environment.prod.ts\"\n}\n```\n您可以在此处添加所需的环境。 例如，如果您需要QA构建选项，只需在.angular-cli.json中添加以下条目：\n\n```json\n\"environments\": {\n  \"dev\": \"environments/environment.ts\",\n  \"prod\": \"environments/environment.prod.ts\",\n  \"qa\": \"environments/environment.qa.ts\"\n}\n```\n对于v6 +，angular.json environments现在称为configurations。 以下是在v6之后添加新qa环境的方法：\n```json\n\"configurations\": {\n  \"production\": { ... },\n  \"qa\": {\n    \"fileReplacements\": [\n      {\n        \"replace\": \"src/environments/environment.ts\",\n        \"with\": \"src/environments/environment.qa.ts\"\n      }\n    ]\n  }\n}\n```\n然后，您必须在environments目录中创建实际文件environment.qa.ts。\n\n下面是默认的dev配置：\n```\n// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `.angular-cli.json`.\nexport const environment = {\n  production: false\n};\n```\n您可以在上面的environment对象中添加任何特定于环境的属性。 例如，让我们添加一个服务器URL：\n```\nexport const environment = {\n  production: false,\n  serverUrl: \"http://dev.server.mycompany.com\"\n};\n```\n然后，您需要做的就是为QA提供不同的URL，即在environment.qa.ts中定义具有正确值的相同属性：\n```\nexport const environment = {\n  production: false,\n  serverUrl: \"http://qa.server.mycompany.com\"\n};\n```\n既然已经定义了您的环境，那么如何在代码中使用这些属性？ 很简单，您只需要导入环境对象，如下所示：\n```\nimport {environment} from '../../environments/environment';\n\n\n@Injectable()\nexport class AuthService {\n\n  LOGIN_URL: string = environment.serverUrl + '/login' ;\n```\n然后，当您运行QA构建时，Angular CLI将使用environment.qa.ts来读取environment.serverUrl属性值，并且您已设置为将该构建部署到QA环境。\n","slug":"0001-how-to-manage-different-environments-with-angular-cli","published":1,"updated":"2020-07-17T02:32:01.139Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcpntufh000d04oialws7euj","content":"<p>大多数的web应用在发布生产之前，需要在多种环境下去运行。例如，您可能需要为QA团队构建一个构建以执行某些测试，或者在您的持续集成服务器上运行特定构建。</p>\n<p>这些构建需要不同的配置：</p>\n<ul>\n<li>不同的服务URLS</li>\n<li>不同的logging选项</li>\n<li>等等</li>\n</ul>\n<p>Angular CLI提供了一种环境功能，允许运行针对特定环境的构建。 例如，以下是如何运行生产构建：</p>\n<pre><code class=\"hljs undefined\">ng build --env=<span class=\"hljs-keyword\">prod</span>   <span class=\"hljs-comment\">// For Angular 2 to 5</span></code></pre>\n<p>在升级到Angular 6+后，构建命令如下：<br><pre><code class=\"hljs undefined\">ng build <span class=\"hljs-attribute\">--configuration</span>=production</code></pre></p>\n<p>上面代码中的prod标志是指v6之前的.angular-cli.json的环境部分的prod（v6+则是production）属性。<br>默认情况下有两个选项：dev和prod<br><pre><code class=\"hljs json\">\"environments\": &#123;\n  \"dev\": \"environments/environment.ts\",\n  \"prod\": \"environments/environment.prod.ts\"\n&#125;</code></pre></p>\n<p>您可以在此处添加所需的环境。 例如，如果您需要QA构建选项，只需在.angular-cli.json中添加以下条目：</p>\n<pre><code class=\"hljs json\">\"environments\": &#123;\n  \"dev\": \"environments/environment.ts\",\n  \"prod\": \"environments/environment.prod.ts\",\n  \"qa\": \"environments/environment.qa.ts\"\n&#125;</code></pre>\n<p>对于v6 +，angular.json environments现在称为configurations。 以下是在v6之后添加新qa环境的方法：<br><pre><code class=\"hljs json\">\"configurations\": &#123;\n  \"production\": &#123; ... &#125;,\n  \"qa\": &#123;\n    \"fileReplacements\": [\n      &#123;\n        \"replace\": \"src/environments/environment.ts\",\n        \"with\": \"src/environments/environment.qa.ts\"\n      &#125;\n    ]\n  &#125;\n&#125;</code></pre></p>\n<p>然后，您必须在environments目录中创建实际文件environment.qa.ts。</p>\n<p>下面是默认的dev配置：<br><pre><code class=\"hljs undefined\">// The file contents for the current environment will overwrite these during <span class=\"hljs-keyword\">build</span>.\n// The <span class=\"hljs-keyword\">build</span> <span class=\"hljs-keyword\">system</span> defaults <span class=\"hljs-keyword\">to</span> the dev environment which uses <span class=\"hljs-symbol\">`environment.ts`</span>, but <span class=\"hljs-keyword\">if</span> you <span class=\"hljs-keyword\">do</span>\n// <span class=\"hljs-symbol\">`ng build --env=prod`</span> <span class=\"hljs-keyword\">then</span> <span class=\"hljs-symbol\">`environment.prod.ts`</span> will be used instead.\n// The list of which env maps <span class=\"hljs-keyword\">to</span> which file can be found <span class=\"hljs-keyword\">in</span> <span class=\"hljs-symbol\">`.angular-cli.json`</span>.\nexport const environment = &#123;\n  production: <span class=\"hljs-literal\">false</span>\n&#125;;</code></pre></p>\n<p>您可以在上面的environment对象中添加任何特定于环境的属性。 例如，让我们添加一个服务器URL：<br><pre><code class=\"hljs undefined\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> environment = &#123;\n  production: <span class=\"hljs-literal\">false</span>,\n  serverUrl: <span class=\"hljs-string\">\"http://dev.server.mycompany.com\"</span>\n&#125;;</code></pre></p>\n<p>然后，您需要做的就是为QA提供不同的URL，即在environment.qa.ts中定义具有正确值的相同属性：<br><pre><code class=\"hljs undefined\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> environment = &#123;\n  production: <span class=\"hljs-literal\">false</span>,\n  serverUrl: <span class=\"hljs-string\">\"http://qa.server.mycompany.com\"</span>\n&#125;;</code></pre></p>\n<p>既然已经定义了您的环境，那么如何在代码中使用这些属性？ 很简单，您只需要导入环境对象，如下所示：<br><pre><code class=\"hljs undefined\"><span class=\"hljs-keyword\">import</span> &#123;environment&#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../../environments/environment'</span>;\n\n\n@Injectable()\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AuthService</span> &#123;</span>\n\n  <span class=\"hljs-name\">LOGIN_URL</span>: <span class=\"hljs-built_in\">string</span> = environment.serverUrl + <span class=\"hljs-string\">'/login'</span> ;</code></pre></p>\n<p>然后，当您运行QA构建时，Angular CLI将使用environment.qa.ts来读取environment.serverUrl属性值，并且您已设置为将该构建部署到QA环境。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>大多数的web应用在发布生产之前，需要在多种环境下去运行。例如，您可能需要为QA团队构建一个构建以执行某些测试，或者在您的持续集成服务器上运行特定构建。</p>\n<p>这些构建需要不同的配置：</p>\n<ul>\n<li>不同的服务URLS</li>\n<li>不同的logging选项</li>\n<li>等等</li>\n</ul>\n<p>Angular CLI提供了一种环境功能，允许运行针对特定环境的构建。 例如，以下是如何运行生产构建：</p>\n<pre><code class=\"hljs undefined\">ng build --env=<span class=\"hljs-keyword\">prod</span>   <span class=\"hljs-comment\">// For Angular 2 to 5</span></code></pre>\n<p>在升级到Angular 6+后，构建命令如下：<br><pre><code class=\"hljs undefined\">ng build <span class=\"hljs-attribute\">--configuration</span>=production</code></pre></p>\n<p>上面代码中的prod标志是指v6之前的.angular-cli.json的环境部分的prod（v6+则是production）属性。<br>默认情况下有两个选项：dev和prod<br><pre><code class=\"hljs json\">\"environments\": &#123;\n  \"dev\": \"environments/environment.ts\",\n  \"prod\": \"environments/environment.prod.ts\"\n&#125;</code></pre></p>\n<p>您可以在此处添加所需的环境。 例如，如果您需要QA构建选项，只需在.angular-cli.json中添加以下条目：</p>\n<pre><code class=\"hljs json\">\"environments\": &#123;\n  \"dev\": \"environments/environment.ts\",\n  \"prod\": \"environments/environment.prod.ts\",\n  \"qa\": \"environments/environment.qa.ts\"\n&#125;</code></pre>\n<p>对于v6 +，angular.json environments现在称为configurations。 以下是在v6之后添加新qa环境的方法：<br><pre><code class=\"hljs json\">\"configurations\": &#123;\n  \"production\": &#123; ... &#125;,\n  \"qa\": &#123;\n    \"fileReplacements\": [\n      &#123;\n        \"replace\": \"src/environments/environment.ts\",\n        \"with\": \"src/environments/environment.qa.ts\"\n      &#125;\n    ]\n  &#125;\n&#125;</code></pre></p>\n<p>然后，您必须在environments目录中创建实际文件environment.qa.ts。</p>\n<p>下面是默认的dev配置：<br><pre><code class=\"hljs undefined\">// The file contents for the current environment will overwrite these during <span class=\"hljs-keyword\">build</span>.\n// The <span class=\"hljs-keyword\">build</span> <span class=\"hljs-keyword\">system</span> defaults <span class=\"hljs-keyword\">to</span> the dev environment which uses <span class=\"hljs-symbol\">`environment.ts`</span>, but <span class=\"hljs-keyword\">if</span> you <span class=\"hljs-keyword\">do</span>\n// <span class=\"hljs-symbol\">`ng build --env=prod`</span> <span class=\"hljs-keyword\">then</span> <span class=\"hljs-symbol\">`environment.prod.ts`</span> will be used instead.\n// The list of which env maps <span class=\"hljs-keyword\">to</span> which file can be found <span class=\"hljs-keyword\">in</span> <span class=\"hljs-symbol\">`.angular-cli.json`</span>.\nexport const environment = &#123;\n  production: <span class=\"hljs-literal\">false</span>\n&#125;;</code></pre></p>\n<p>您可以在上面的environment对象中添加任何特定于环境的属性。 例如，让我们添加一个服务器URL：<br><pre><code class=\"hljs undefined\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> environment = &#123;\n  production: <span class=\"hljs-literal\">false</span>,\n  serverUrl: <span class=\"hljs-string\">\"http://dev.server.mycompany.com\"</span>\n&#125;;</code></pre></p>\n<p>然后，您需要做的就是为QA提供不同的URL，即在environment.qa.ts中定义具有正确值的相同属性：<br><pre><code class=\"hljs undefined\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> environment = &#123;\n  production: <span class=\"hljs-literal\">false</span>,\n  serverUrl: <span class=\"hljs-string\">\"http://qa.server.mycompany.com\"</span>\n&#125;;</code></pre></p>\n<p>既然已经定义了您的环境，那么如何在代码中使用这些属性？ 很简单，您只需要导入环境对象，如下所示：<br><pre><code class=\"hljs undefined\"><span class=\"hljs-keyword\">import</span> &#123;environment&#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../../environments/environment'</span>;\n\n\n@Injectable()\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AuthService</span> &#123;</span>\n\n  <span class=\"hljs-name\">LOGIN_URL</span>: <span class=\"hljs-built_in\">string</span> = environment.serverUrl + <span class=\"hljs-string\">'/login'</span> ;</code></pre></p>\n<p>然后，当您运行QA构建时，Angular CLI将使用environment.qa.ts来读取environment.serverUrl属性值，并且您已设置为将该构建部署到QA环境。</p>\n"},{"title":"Angular中的自定义异步验证器","date":"2018-10-25T01:24:30.000Z","_content":"\n在实际工作中，我们经常需要一个基于后端API验证值的验证器。为此，Angular提供了一种定义自定义异步验证器的简便方法。\n\n本文将介绍如何为Angular应用程序创建自定义异步验证器。\n\n<!--more-->\n\n通常你会调用一个真正的后端，但是在这里我们将创建一个虚拟的JSON文件，我们可以通过使用Http服务来调用它。如果正在使用Angular CLI，则可以将JSON文件放在/assets文件夹中，它将自动可用；\n\n`/assets/users.json`\n\n```json\n[\n  { \"name\": \"Paul\", \"email\": \"paul@example.com\" },\n  { \"name\": \"Ringo\", \"email\": \"ringo@example.com\" },\n  { \"name\": \"John\", \"email\": \"john@example.com\" },\n  { \"name\": \"George\", \"email\": \"george@example.com\" }\n]\n```\n\n# 注册服务\n\n接下来，让我们创建一个具有`checkEmailNotTaken`方法的服务，该方法触发对我们的JSON文件的http GET调用。这里我们使用`RxJS`的延迟运算符来模拟一些延迟：\n\n`signup.service.ts`\n\n```typescript\nimport { Injectable } from '@angular/core';\nimport { Http } from '@angular/http';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/filter';\nimport 'rxjs/add/operator/delay';\n\n@Injectable()\nexport class SignupService {\n  constructor(private http: Http) {}\n\n  checkEmailNotTaken(email: string) {\n    return this.http\n      .get('assets/users.json')\n      .delay(1000)\n      .map(res => res.json())\n      .map(users => users.filter(user => user.email === email))\n      .map(users => !users.length);\n  }\n}\n```\n\n请注意我们如何筛选与提供给方法的用户具有相同电子邮件的用户。然后我们再次映射结果并进行测试以确保我们得到一个空置对象。\n\n在真实场景中，您可能还想使用debounceTime和distinctUntilChanged运算符的组合，如我们在创建实时搜索的帖子中所讨论的。引入一些这样的去抖动将有助于将发送到后端API的请求数量保持在最低水平。\n\n## 组件和异步验证器\n\n我们的简单组件初始化我们的反应形式并定义我们的异步验证器：*validateEmailNotTaken*。请注意我们的`FormBuilder.group`声明中的表单控件如何将异步验证器作为第三个参数。这里我们只使用一个异步验证器，但是你想在数组中包含多个异步验证器：\n\napp.component.ts\n\n```typescript\nimport { Component, OnInit } from '@angular/core';\nimport {\n  FormBuilder,\n  FormGroup,\n  Validators,\n  AbstractControl\n} from '@angular/forms';\n\nimport { SignupService } from './signup.service';\n\n@Component({ ... })\nexport class AppComponent implements OnInit {\n  myForm: FormGroup;\n\n  constructor(\n    private fb: FormBuilder,\n    private signupService: SignupService\n  ) {}\n\n  ngOnInit() {\n    this.myForm = this.fb.group({\n      name: ['', Validators.required],\n      email: [\n        '',\n        [Validators.required, Validators.email],\n        this.validateEmailNotTaken.bind(this)\n      ]\n    });\n  }\n\n  validateEmailNotTaken(control: AbstractControl) {\n    return this.signupService.checkEmailNotTaken(control.value).map(res => {\n      return res ? null : { emailTaken: true };\n    });\n  }\n}\n```\n\n我们的验证器与典型的自定义验证器非常相似。这里我们直接在组件类中定义了验证器而不是单独的文件。这样可以更轻松地访问我们注入的服务实例。另请注意我们如何绑定**此**值以确保它指向组件类。\n\n我们还可以在自己的文件中定义我们的异步验证器，以便更容易地重用和分离关注点。唯一棘手的部分是找到一种方法来提供我们的服务实例。在这里，例如，我们创建一个具有*createValidator*静态方法的类，该方法接收我们的服务实例并返回我们的验证器函数：\n\n/validators/async-email.validator.ts\n\n```\nimport { AbstractControl } from '@angular/forms';\nimport { SignupService } from '../signup.service';\n\nexport class ValidateEmailNotTaken {\n  static createValidator(signupService: SignupService) {\n    return (control: AbstractControl) => {\n      return signupService.checkEmailNotTaken(control.value).map(res => {\n        return res ? null : { emailTaken: true };\n      });\n    };\n  }\n}\n```\n\n然后，回到我们的组件中，我们导入*ValidateEmailNotTaken*类，我们可以使用这样的验证器：\n\n```\nngOnInit() {\n  this.myForm = this.fb.group({\n    name: ['', Validators.required],\n    email: [\n      '',\n      [Validators.required, Validators.email],\n      ValidateEmailNotTaken.createValidator(this.signupService)\n    ]\n  });\n}\n```\n\n## 模板\n\n在模板中，事情真的很简单：\n\napp.component.html\n\n```\n<form [formGroup]=\"myForm\">\n  <input type=\"text\" formControlName=\"name\">\n  <input type=\"email\" formControlName=\"email\">\n\n  <div *ngIf=\"myForm.get('email').status === 'PENDING'\">\n    Checking...\n  </div>\n  <div *ngIf=\"myForm.get('email').status === 'VALID'\">\n    😺 Email is available!\n  </div>\n\n  <div *ngIf=\"myForm.get('email').errors && myForm.get('email').errors.emailTaken\">\n    😢 Oh noes, this email is already taken!\n  </div>\n</form>\n```\n\n您可以看到我们根据*电子邮件*表单控件上status属性的值显示不同的消息。对于可能的值**状态**是*VALID*，*INVALID*，*PENDING*和*禁用*。如果异步验证错误输出我们的*emailTaken*错误，我们也会显示错误消息。\n\n使用异步验证器验证的表单字段在验证*待处理*时也将具有*ng-pending*类。这样可以轻松设置当前待验证字段的样式。\n\n✨你有它！使用后端API检查有效性的简便方法。\n","source":"_posts/0003-custom-async-validators-in-angular.md","raw":"---\ntitle: Angular中的自定义异步验证器\ndate: 2018-10-25 09:24:30\ntags:\n    - Angular\ncategories:\n    - 前端\n---\n\n在实际工作中，我们经常需要一个基于后端API验证值的验证器。为此，Angular提供了一种定义自定义异步验证器的简便方法。\n\n本文将介绍如何为Angular应用程序创建自定义异步验证器。\n\n<!--more-->\n\n通常你会调用一个真正的后端，但是在这里我们将创建一个虚拟的JSON文件，我们可以通过使用Http服务来调用它。如果正在使用Angular CLI，则可以将JSON文件放在/assets文件夹中，它将自动可用；\n\n`/assets/users.json`\n\n```json\n[\n  { \"name\": \"Paul\", \"email\": \"paul@example.com\" },\n  { \"name\": \"Ringo\", \"email\": \"ringo@example.com\" },\n  { \"name\": \"John\", \"email\": \"john@example.com\" },\n  { \"name\": \"George\", \"email\": \"george@example.com\" }\n]\n```\n\n# 注册服务\n\n接下来，让我们创建一个具有`checkEmailNotTaken`方法的服务，该方法触发对我们的JSON文件的http GET调用。这里我们使用`RxJS`的延迟运算符来模拟一些延迟：\n\n`signup.service.ts`\n\n```typescript\nimport { Injectable } from '@angular/core';\nimport { Http } from '@angular/http';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/filter';\nimport 'rxjs/add/operator/delay';\n\n@Injectable()\nexport class SignupService {\n  constructor(private http: Http) {}\n\n  checkEmailNotTaken(email: string) {\n    return this.http\n      .get('assets/users.json')\n      .delay(1000)\n      .map(res => res.json())\n      .map(users => users.filter(user => user.email === email))\n      .map(users => !users.length);\n  }\n}\n```\n\n请注意我们如何筛选与提供给方法的用户具有相同电子邮件的用户。然后我们再次映射结果并进行测试以确保我们得到一个空置对象。\n\n在真实场景中，您可能还想使用debounceTime和distinctUntilChanged运算符的组合，如我们在创建实时搜索的帖子中所讨论的。引入一些这样的去抖动将有助于将发送到后端API的请求数量保持在最低水平。\n\n## 组件和异步验证器\n\n我们的简单组件初始化我们的反应形式并定义我们的异步验证器：*validateEmailNotTaken*。请注意我们的`FormBuilder.group`声明中的表单控件如何将异步验证器作为第三个参数。这里我们只使用一个异步验证器，但是你想在数组中包含多个异步验证器：\n\napp.component.ts\n\n```typescript\nimport { Component, OnInit } from '@angular/core';\nimport {\n  FormBuilder,\n  FormGroup,\n  Validators,\n  AbstractControl\n} from '@angular/forms';\n\nimport { SignupService } from './signup.service';\n\n@Component({ ... })\nexport class AppComponent implements OnInit {\n  myForm: FormGroup;\n\n  constructor(\n    private fb: FormBuilder,\n    private signupService: SignupService\n  ) {}\n\n  ngOnInit() {\n    this.myForm = this.fb.group({\n      name: ['', Validators.required],\n      email: [\n        '',\n        [Validators.required, Validators.email],\n        this.validateEmailNotTaken.bind(this)\n      ]\n    });\n  }\n\n  validateEmailNotTaken(control: AbstractControl) {\n    return this.signupService.checkEmailNotTaken(control.value).map(res => {\n      return res ? null : { emailTaken: true };\n    });\n  }\n}\n```\n\n我们的验证器与典型的自定义验证器非常相似。这里我们直接在组件类中定义了验证器而不是单独的文件。这样可以更轻松地访问我们注入的服务实例。另请注意我们如何绑定**此**值以确保它指向组件类。\n\n我们还可以在自己的文件中定义我们的异步验证器，以便更容易地重用和分离关注点。唯一棘手的部分是找到一种方法来提供我们的服务实例。在这里，例如，我们创建一个具有*createValidator*静态方法的类，该方法接收我们的服务实例并返回我们的验证器函数：\n\n/validators/async-email.validator.ts\n\n```\nimport { AbstractControl } from '@angular/forms';\nimport { SignupService } from '../signup.service';\n\nexport class ValidateEmailNotTaken {\n  static createValidator(signupService: SignupService) {\n    return (control: AbstractControl) => {\n      return signupService.checkEmailNotTaken(control.value).map(res => {\n        return res ? null : { emailTaken: true };\n      });\n    };\n  }\n}\n```\n\n然后，回到我们的组件中，我们导入*ValidateEmailNotTaken*类，我们可以使用这样的验证器：\n\n```\nngOnInit() {\n  this.myForm = this.fb.group({\n    name: ['', Validators.required],\n    email: [\n      '',\n      [Validators.required, Validators.email],\n      ValidateEmailNotTaken.createValidator(this.signupService)\n    ]\n  });\n}\n```\n\n## 模板\n\n在模板中，事情真的很简单：\n\napp.component.html\n\n```\n<form [formGroup]=\"myForm\">\n  <input type=\"text\" formControlName=\"name\">\n  <input type=\"email\" formControlName=\"email\">\n\n  <div *ngIf=\"myForm.get('email').status === 'PENDING'\">\n    Checking...\n  </div>\n  <div *ngIf=\"myForm.get('email').status === 'VALID'\">\n    😺 Email is available!\n  </div>\n\n  <div *ngIf=\"myForm.get('email').errors && myForm.get('email').errors.emailTaken\">\n    😢 Oh noes, this email is already taken!\n  </div>\n</form>\n```\n\n您可以看到我们根据*电子邮件*表单控件上status属性的值显示不同的消息。对于可能的值**状态**是*VALID*，*INVALID*，*PENDING*和*禁用*。如果异步验证错误输出我们的*emailTaken*错误，我们也会显示错误消息。\n\n使用异步验证器验证的表单字段在验证*待处理*时也将具有*ng-pending*类。这样可以轻松设置当前待验证字段的样式。\n\n✨你有它！使用后端API检查有效性的简便方法。\n","slug":"0003-custom-async-validators-in-angular","published":1,"updated":"2020-07-17T02:32:01.141Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcpntufk000g04oil3eb3d5n","content":"<p>在实际工作中，我们经常需要一个基于后端API验证值的验证器。为此，Angular提供了一种定义自定义异步验证器的简便方法。</p>\n<p>本文将介绍如何为Angular应用程序创建自定义异步验证器。</p>\n<a id=\"more\"></a>\n<p>通常你会调用一个真正的后端，但是在这里我们将创建一个虚拟的JSON文件，我们可以通过使用Http服务来调用它。如果正在使用Angular CLI，则可以将JSON文件放在/assets文件夹中，它将自动可用；</p>\n<p><code>/assets/users.json</code></p>\n<pre><code class=\"hljs json\">[\n  &#123; <span class=\"hljs-attr\">\"name\"</span>: <span class=\"hljs-string\">\"Paul\"</span>, <span class=\"hljs-attr\">\"email\"</span>: <span class=\"hljs-string\">\"paul@example.com\"</span> &#125;,\n  &#123; <span class=\"hljs-attr\">\"name\"</span>: <span class=\"hljs-string\">\"Ringo\"</span>, <span class=\"hljs-attr\">\"email\"</span>: <span class=\"hljs-string\">\"ringo@example.com\"</span> &#125;,\n  &#123; <span class=\"hljs-attr\">\"name\"</span>: <span class=\"hljs-string\">\"John\"</span>, <span class=\"hljs-attr\">\"email\"</span>: <span class=\"hljs-string\">\"john@example.com\"</span> &#125;,\n  &#123; <span class=\"hljs-attr\">\"name\"</span>: <span class=\"hljs-string\">\"George\"</span>, <span class=\"hljs-attr\">\"email\"</span>: <span class=\"hljs-string\">\"george@example.com\"</span> &#125;\n]</code></pre>\n<h1 id=\"注册服务\"><a href=\"#注册服务\" class=\"headerlink\" title=\"注册服务\"></a>注册服务</h1><p>接下来，让我们创建一个具有<code>checkEmailNotTaken</code>方法的服务，该方法触发对我们的JSON文件的http GET调用。这里我们使用<code>RxJS</code>的延迟运算符来模拟一些延迟：</p>\n<p><code>signup.service.ts</code></p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">import</span> &#123; Injectable &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n<span class=\"hljs-keyword\">import</span> &#123; Http &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/http'</span>;\n<span class=\"hljs-keyword\">import</span> &#123; Observable &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'rxjs/Observable'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'rxjs/add/operator/map'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'rxjs/add/operator/filter'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'rxjs/add/operator/delay'</span>;\n\n<span class=\"hljs-meta\">@Injectable</span>()\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> SignupService &#123;\n  <span class=\"hljs-keyword\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">private</span> http: Http</span>) &#123;&#125;\n\n  checkEmailNotTaken(email: <span class=\"hljs-built_in\">string</span>) &#123;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.http\n      .get(<span class=\"hljs-string\">'assets/users.json'</span>)\n      .delay(<span class=\"hljs-number\">1000</span>)\n      .map(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> res.json())\n      .map(<span class=\"hljs-function\"><span class=\"hljs-params\">users</span> =&gt;</span> users.filter(<span class=\"hljs-function\"><span class=\"hljs-params\">user</span> =&gt;</span> user.email === email))\n      .map(<span class=\"hljs-function\"><span class=\"hljs-params\">users</span> =&gt;</span> !users.length);\n  &#125;\n&#125;</code></pre>\n<p>请注意我们如何筛选与提供给方法的用户具有相同电子邮件的用户。然后我们再次映射结果并进行测试以确保我们得到一个空置对象。</p>\n<p>在真实场景中，您可能还想使用debounceTime和distinctUntilChanged运算符的组合，如我们在创建实时搜索的帖子中所讨论的。引入一些这样的去抖动将有助于将发送到后端API的请求数量保持在最低水平。</p>\n<h2 id=\"组件和异步验证器\"><a href=\"#组件和异步验证器\" class=\"headerlink\" title=\"组件和异步验证器\"></a>组件和异步验证器</h2><p>我们的简单组件初始化我们的反应形式并定义我们的异步验证器：<em>validateEmailNotTaken</em>。请注意我们的<code>FormBuilder.group</code>声明中的表单控件如何将异步验证器作为第三个参数。这里我们只使用一个异步验证器，但是你想在数组中包含多个异步验证器：</p>\n<p>app.component.ts</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">import</span> &#123; Component, OnInit &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n<span class=\"hljs-keyword\">import</span> &#123;\n  FormBuilder,\n  FormGroup,\n  Validators,\n  AbstractControl\n&#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/forms'</span>;\n\n<span class=\"hljs-keyword\">import</span> &#123; SignupService &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./signup.service'</span>;\n\n<span class=\"hljs-meta\">@Component</span>(&#123; ... &#125;)\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> AppComponent <span class=\"hljs-keyword\">implements</span> OnInit &#123;\n  myForm: FormGroup;\n\n  <span class=\"hljs-keyword\">constructor</span>(<span class=\"hljs-params\">\n    <span class=\"hljs-keyword\">private</span> fb: FormBuilder,\n    <span class=\"hljs-keyword\">private</span> signupService: SignupService\n  </span>) &#123;&#125;\n\n  ngOnInit() &#123;\n    <span class=\"hljs-keyword\">this</span>.myForm = <span class=\"hljs-keyword\">this</span>.fb.group(&#123;\n      name: [<span class=\"hljs-string\">''</span>, Validators.required],\n      email: [\n        <span class=\"hljs-string\">''</span>,\n        [Validators.required, Validators.email],\n        <span class=\"hljs-keyword\">this</span>.validateEmailNotTaken.bind(<span class=\"hljs-keyword\">this</span>)\n      ]\n    &#125;);\n  &#125;\n\n  validateEmailNotTaken(control: AbstractControl) &#123;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.signupService.checkEmailNotTaken(control.value).map(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> &#123;\n      <span class=\"hljs-keyword\">return</span> res ? <span class=\"hljs-literal\">null</span> : &#123; emailTaken: <span class=\"hljs-literal\">true</span> &#125;;\n    &#125;);\n  &#125;\n&#125;</code></pre>\n<p>我们的验证器与典型的自定义验证器非常相似。这里我们直接在组件类中定义了验证器而不是单独的文件。这样可以更轻松地访问我们注入的服务实例。另请注意我们如何绑定<strong>此</strong>值以确保它指向组件类。</p>\n<p>我们还可以在自己的文件中定义我们的异步验证器，以便更容易地重用和分离关注点。唯一棘手的部分是找到一种方法来提供我们的服务实例。在这里，例如，我们创建一个具有<em>createValidator</em>静态方法的类，该方法接收我们的服务实例并返回我们的验证器函数：</p>\n<p>/validators/async-email.validator.ts</p>\n<pre><code class=\"hljs undefined\"><span class=\"hljs-keyword\">import</span> &#123; AbstractControl &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/forms'</span>;\n<span class=\"hljs-keyword\">import</span> &#123; SignupService &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../signup.service'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ValidateEmailNotTaken</span> </span>&#123;\n  <span class=\"hljs-keyword\">static</span> createValidator(signupService: SignupService) &#123;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">(<span class=\"hljs-params\">control: AbstractControl</span>) =&gt;</span> &#123;\n      <span class=\"hljs-keyword\">return</span> signupService.checkEmailNotTaken(control.value).map(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> &#123;\n        <span class=\"hljs-keyword\">return</span> res ? <span class=\"hljs-literal\">null</span> : &#123; <span class=\"hljs-attr\">emailTaken</span>: <span class=\"hljs-literal\">true</span> &#125;;\n      &#125;);\n    &#125;;\n  &#125;\n&#125;</code></pre>\n<p>然后，回到我们的组件中，我们导入<em>ValidateEmailNotTaken</em>类，我们可以使用这样的验证器：</p>\n<pre><code class=\"hljs undefined\">ngOnInit() &#123;\n  <span class=\"hljs-keyword\">this</span>.myForm = <span class=\"hljs-keyword\">this</span>.fb.group(&#123;\n    name: [<span class=\"hljs-string\">''</span>, Validators.required],\n    email: [\n      <span class=\"hljs-string\">''</span>,\n      [Validators.required, Validators.email],\n      ValidateEmailNotTaken.createValidator(<span class=\"hljs-keyword\">this</span>.signupService)\n    ]\n  &#125;);\n&#125;</code></pre>\n<h2 id=\"模板\"><a href=\"#模板\" class=\"headerlink\" title=\"模板\"></a>模板</h2><p>在模板中，事情真的很简单：</p>\n<p>app.component.html</p>\n<pre><code class=\"hljs undefined\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> [<span class=\"hljs-attr\">formGroup</span>]=<span class=\"hljs-string\">\"myForm\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">formControlName</span>=<span class=\"hljs-string\">\"name\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"email\"</span> <span class=\"hljs-attr\">formControlName</span>=<span class=\"hljs-string\">\"email\"</span>&gt;</span>\n\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> *<span class=\"hljs-attr\">ngIf</span>=<span class=\"hljs-string\">\"myForm.get('email').status === 'PENDING'\"</span>&gt;</span>\n    Checking...\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> *<span class=\"hljs-attr\">ngIf</span>=<span class=\"hljs-string\">\"myForm.get('email').status === 'VALID'\"</span>&gt;</span>\n    😺 Email is available!\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> *<span class=\"hljs-attr\">ngIf</span>=<span class=\"hljs-string\">\"myForm.get('email').errors &amp;&amp; myForm.get('email').errors.emailTaken\"</span>&gt;</span>\n    😢 Oh noes, this email is already taken!\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span></code></pre>\n<p>您可以看到我们根据<em>电子邮件</em>表单控件上status属性的值显示不同的消息。对于可能的值<strong>状态</strong>是<em>VALID</em>，<em>INVALID</em>，<em>PENDING</em>和<em>禁用</em>。如果异步验证错误输出我们的<em>emailTaken</em>错误，我们也会显示错误消息。</p>\n<p>使用异步验证器验证的表单字段在验证<em>待处理</em>时也将具有<em>ng-pending</em>类。这样可以轻松设置当前待验证字段的样式。</p>\n<p>✨你有它！使用后端API检查有效性的简便方法。</p>\n","site":{"data":{}},"excerpt":"<p>在实际工作中，我们经常需要一个基于后端API验证值的验证器。为此，Angular提供了一种定义自定义异步验证器的简便方法。</p>\n<p>本文将介绍如何为Angular应用程序创建自定义异步验证器。</p>","more":"<p>通常你会调用一个真正的后端，但是在这里我们将创建一个虚拟的JSON文件，我们可以通过使用Http服务来调用它。如果正在使用Angular CLI，则可以将JSON文件放在/assets文件夹中，它将自动可用；</p>\n<p><code>/assets/users.json</code></p>\n<pre><code class=\"hljs json\">[\n  &#123; <span class=\"hljs-attr\">\"name\"</span>: <span class=\"hljs-string\">\"Paul\"</span>, <span class=\"hljs-attr\">\"email\"</span>: <span class=\"hljs-string\">\"paul@example.com\"</span> &#125;,\n  &#123; <span class=\"hljs-attr\">\"name\"</span>: <span class=\"hljs-string\">\"Ringo\"</span>, <span class=\"hljs-attr\">\"email\"</span>: <span class=\"hljs-string\">\"ringo@example.com\"</span> &#125;,\n  &#123; <span class=\"hljs-attr\">\"name\"</span>: <span class=\"hljs-string\">\"John\"</span>, <span class=\"hljs-attr\">\"email\"</span>: <span class=\"hljs-string\">\"john@example.com\"</span> &#125;,\n  &#123; <span class=\"hljs-attr\">\"name\"</span>: <span class=\"hljs-string\">\"George\"</span>, <span class=\"hljs-attr\">\"email\"</span>: <span class=\"hljs-string\">\"george@example.com\"</span> &#125;\n]</code></pre>\n<h1 id=\"注册服务\"><a href=\"#注册服务\" class=\"headerlink\" title=\"注册服务\"></a>注册服务</h1><p>接下来，让我们创建一个具有<code>checkEmailNotTaken</code>方法的服务，该方法触发对我们的JSON文件的http GET调用。这里我们使用<code>RxJS</code>的延迟运算符来模拟一些延迟：</p>\n<p><code>signup.service.ts</code></p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">import</span> &#123; Injectable &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n<span class=\"hljs-keyword\">import</span> &#123; Http &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/http'</span>;\n<span class=\"hljs-keyword\">import</span> &#123; Observable &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'rxjs/Observable'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'rxjs/add/operator/map'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'rxjs/add/operator/filter'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'rxjs/add/operator/delay'</span>;\n\n<span class=\"hljs-meta\">@Injectable</span>()\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> SignupService &#123;\n  <span class=\"hljs-keyword\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">private</span> http: Http</span>) &#123;&#125;\n\n  checkEmailNotTaken(email: <span class=\"hljs-built_in\">string</span>) &#123;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.http\n      .get(<span class=\"hljs-string\">'assets/users.json'</span>)\n      .delay(<span class=\"hljs-number\">1000</span>)\n      .map(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> res.json())\n      .map(<span class=\"hljs-function\"><span class=\"hljs-params\">users</span> =&gt;</span> users.filter(<span class=\"hljs-function\"><span class=\"hljs-params\">user</span> =&gt;</span> user.email === email))\n      .map(<span class=\"hljs-function\"><span class=\"hljs-params\">users</span> =&gt;</span> !users.length);\n  &#125;\n&#125;</code></pre>\n<p>请注意我们如何筛选与提供给方法的用户具有相同电子邮件的用户。然后我们再次映射结果并进行测试以确保我们得到一个空置对象。</p>\n<p>在真实场景中，您可能还想使用debounceTime和distinctUntilChanged运算符的组合，如我们在创建实时搜索的帖子中所讨论的。引入一些这样的去抖动将有助于将发送到后端API的请求数量保持在最低水平。</p>\n<h2 id=\"组件和异步验证器\"><a href=\"#组件和异步验证器\" class=\"headerlink\" title=\"组件和异步验证器\"></a>组件和异步验证器</h2><p>我们的简单组件初始化我们的反应形式并定义我们的异步验证器：<em>validateEmailNotTaken</em>。请注意我们的<code>FormBuilder.group</code>声明中的表单控件如何将异步验证器作为第三个参数。这里我们只使用一个异步验证器，但是你想在数组中包含多个异步验证器：</p>\n<p>app.component.ts</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">import</span> &#123; Component, OnInit &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n<span class=\"hljs-keyword\">import</span> &#123;\n  FormBuilder,\n  FormGroup,\n  Validators,\n  AbstractControl\n&#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/forms'</span>;\n\n<span class=\"hljs-keyword\">import</span> &#123; SignupService &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./signup.service'</span>;\n\n<span class=\"hljs-meta\">@Component</span>(&#123; ... &#125;)\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> AppComponent <span class=\"hljs-keyword\">implements</span> OnInit &#123;\n  myForm: FormGroup;\n\n  <span class=\"hljs-keyword\">constructor</span>(<span class=\"hljs-params\">\n    <span class=\"hljs-keyword\">private</span> fb: FormBuilder,\n    <span class=\"hljs-keyword\">private</span> signupService: SignupService\n  </span>) &#123;&#125;\n\n  ngOnInit() &#123;\n    <span class=\"hljs-keyword\">this</span>.myForm = <span class=\"hljs-keyword\">this</span>.fb.group(&#123;\n      name: [<span class=\"hljs-string\">''</span>, Validators.required],\n      email: [\n        <span class=\"hljs-string\">''</span>,\n        [Validators.required, Validators.email],\n        <span class=\"hljs-keyword\">this</span>.validateEmailNotTaken.bind(<span class=\"hljs-keyword\">this</span>)\n      ]\n    &#125;);\n  &#125;\n\n  validateEmailNotTaken(control: AbstractControl) &#123;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.signupService.checkEmailNotTaken(control.value).map(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> &#123;\n      <span class=\"hljs-keyword\">return</span> res ? <span class=\"hljs-literal\">null</span> : &#123; emailTaken: <span class=\"hljs-literal\">true</span> &#125;;\n    &#125;);\n  &#125;\n&#125;</code></pre>\n<p>我们的验证器与典型的自定义验证器非常相似。这里我们直接在组件类中定义了验证器而不是单独的文件。这样可以更轻松地访问我们注入的服务实例。另请注意我们如何绑定<strong>此</strong>值以确保它指向组件类。</p>\n<p>我们还可以在自己的文件中定义我们的异步验证器，以便更容易地重用和分离关注点。唯一棘手的部分是找到一种方法来提供我们的服务实例。在这里，例如，我们创建一个具有<em>createValidator</em>静态方法的类，该方法接收我们的服务实例并返回我们的验证器函数：</p>\n<p>/validators/async-email.validator.ts</p>\n<pre><code class=\"hljs undefined\"><span class=\"hljs-keyword\">import</span> &#123; AbstractControl &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/forms'</span>;\n<span class=\"hljs-keyword\">import</span> &#123; SignupService &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../signup.service'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ValidateEmailNotTaken</span> </span>&#123;\n  <span class=\"hljs-keyword\">static</span> createValidator(signupService: SignupService) &#123;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">(<span class=\"hljs-params\">control: AbstractControl</span>) =&gt;</span> &#123;\n      <span class=\"hljs-keyword\">return</span> signupService.checkEmailNotTaken(control.value).map(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> &#123;\n        <span class=\"hljs-keyword\">return</span> res ? <span class=\"hljs-literal\">null</span> : &#123; <span class=\"hljs-attr\">emailTaken</span>: <span class=\"hljs-literal\">true</span> &#125;;\n      &#125;);\n    &#125;;\n  &#125;\n&#125;</code></pre>\n<p>然后，回到我们的组件中，我们导入<em>ValidateEmailNotTaken</em>类，我们可以使用这样的验证器：</p>\n<pre><code class=\"hljs undefined\">ngOnInit() &#123;\n  <span class=\"hljs-keyword\">this</span>.myForm = <span class=\"hljs-keyword\">this</span>.fb.group(&#123;\n    name: [<span class=\"hljs-string\">''</span>, Validators.required],\n    email: [\n      <span class=\"hljs-string\">''</span>,\n      [Validators.required, Validators.email],\n      ValidateEmailNotTaken.createValidator(<span class=\"hljs-keyword\">this</span>.signupService)\n    ]\n  &#125;);\n&#125;</code></pre>\n<h2 id=\"模板\"><a href=\"#模板\" class=\"headerlink\" title=\"模板\"></a>模板</h2><p>在模板中，事情真的很简单：</p>\n<p>app.component.html</p>\n<pre><code class=\"hljs undefined\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> [<span class=\"hljs-attr\">formGroup</span>]=<span class=\"hljs-string\">\"myForm\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">formControlName</span>=<span class=\"hljs-string\">\"name\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"email\"</span> <span class=\"hljs-attr\">formControlName</span>=<span class=\"hljs-string\">\"email\"</span>&gt;</span>\n\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> *<span class=\"hljs-attr\">ngIf</span>=<span class=\"hljs-string\">\"myForm.get('email').status === 'PENDING'\"</span>&gt;</span>\n    Checking...\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> *<span class=\"hljs-attr\">ngIf</span>=<span class=\"hljs-string\">\"myForm.get('email').status === 'VALID'\"</span>&gt;</span>\n    😺 Email is available!\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> *<span class=\"hljs-attr\">ngIf</span>=<span class=\"hljs-string\">\"myForm.get('email').errors &amp;&amp; myForm.get('email').errors.emailTaken\"</span>&gt;</span>\n    😢 Oh noes, this email is already taken!\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span></code></pre>\n<p>您可以看到我们根据<em>电子邮件</em>表单控件上status属性的值显示不同的消息。对于可能的值<strong>状态</strong>是<em>VALID</em>，<em>INVALID</em>，<em>PENDING</em>和<em>禁用</em>。如果异步验证错误输出我们的<em>emailTaken</em>错误，我们也会显示错误消息。</p>\n<p>使用异步验证器验证的表单字段在验证<em>待处理</em>时也将具有<em>ng-pending</em>类。这样可以轻松设置当前待验证字段的样式。</p>\n<p>✨你有它！使用后端API检查有效性的简便方法。</p>"},{"title":"Idea下maven package时，javadoc乱码","date":"2018-10-30T12:24:30.000Z","_content":"\n在idea中，使用maven打包应用的，javadoc在console输出乱码。解决方法如下：\n1. 设置环境变量JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF-8\n2. 在idea64.exe.vmoptions中设置-Dfile.encoding=UTF-8\n\n<!--more-->\n\n","source":"_posts/0006-idea-maven-javadoc-charset.md","raw":"---\ntitle: Idea下maven package时，javadoc乱码\ndate: 2018-10-30 20:24:30\ntags:\n    - Java\ncategories:\n    - 后端\n---\n\n在idea中，使用maven打包应用的，javadoc在console输出乱码。解决方法如下：\n1. 设置环境变量JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF-8\n2. 在idea64.exe.vmoptions中设置-Dfile.encoding=UTF-8\n\n<!--more-->\n\n","slug":"0006-idea-maven-javadoc-charset","published":1,"updated":"2020-07-17T02:32:01.146Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcpntufn000j04oikozmi137","content":"<p>在idea中，使用maven打包应用的，javadoc在console输出乱码。解决方法如下：</p>\n<ol>\n<li>设置环境变量JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF-8</li>\n<li>在idea64.exe.vmoptions中设置-Dfile.encoding=UTF-8</li>\n</ol>\n<a id=\"more\"></a>\n","site":{"data":{}},"excerpt":"<p>在idea中，使用maven打包应用的，javadoc在console输出乱码。解决方法如下：</p>\n<ol>\n<li>设置环境变量JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF-8</li>\n<li>在idea64.exe.vmoptions中设置-Dfile.encoding=UTF-8</li>\n</ol>","more":""},{"title":"A Guide To OAuth 2.0 Grants","date":"2018-10-26T06:24:30.000Z","_content":"\nThe [OAuth 2.0 specification](http://tools.ietf.org/html/rfc6749) is a flexibile authorization framework that describes a number of grants (“methods”) for a client application to acquire an access token (which represents a user’s permission for the client to access their data) which can be used to authenticate a request to an API endpoint.\n\n<!--more-->\n\nThe specification describes five grants for acquiring an access token:\n\n- Authorization code grant\n- Implicit grant\n- Resource owner credentials grant\n- Client credentials grant\n- Refresh token grant\n\nIn this post I’m going to describe each of the above grants and their appropriate use cases.\n\nAs a refresher here is a quick glossary of OAuth terms (taken from the core spec):\n\n- **Resource owner (a.k.a. the User)** - An entity capable of granting access to a protected resource. When the resource owner is a person, it is referred to as an end-user.\n- **Resource server (a.k.a. the API server)** - The server hosting the protected resources, capable of accepting and responding to protected resource requests using access tokens.\n- **Client** - An application making protected resource requests on behalf of the resource owner and with its authorization. The term client does not imply any particular implementation characteristics (e.g. whether the application executes on a server, a desktop, or other devices).\n- **Authorization server** - The server issuing access tokens to the client after successfully authenticating the resource owner and obtaining authorization.\n\n\n\n## Authorisation Code Grant ([section 4.1](http://tools.ietf.org/html/rfc6749#section-4.1))\n\nThe authorization code grant should be very familiar if you’ve ever signed into an application using your Facebook or Google account.\n\n### The Flow (Part One)\n\nThe client will redirect the user to the authorization server with the following parameters in the query string:\n\n- `response_type` with the value `code`\n- `client_id` with the client identifier\n- `redirect_uri` with the client redirect URI. This parameter is optional, but if not send the user will be redirected to a pre-registered redirect URI.\n- `scope` a space delimited list of scopes\n- `state` with a [CSRF](https://en.wikipedia.org/wiki/Cross-site_request_forgery) token. This parameter is optional but highly recommended. You should store the value of the CSRF token in the user’s session to be validated when they return.\n\nAll of these parameters will be validated by the authorization server.\n\nThe user will then be asked to login to the authorization server and approve the client.\n\nIf the user approves the client they will be redirected from the authorisation server back to the client (specifically to the redirect URI) with the following parameters in the query string:\n\n- `code` with the authorization code\n- `state` with the state parameter sent in the original request. You should compare this value with the value stored in the user’s session to ensure the authorization code obtained is in response to requests made by this client rather than another client application.\n\n### The Flow (Part Two)\n\nThe client will now send a POST request to the authorization server with the following parameters:\n\n- `grant_type` with the value of `authorization_code`\n- `client_id` with the client identifier\n- `client_secret` with the client secret\n- `redirect_uri` with the same redirect URI the user was redirect back to\n- `code` with the authorization code from the query string\n\nThe authorization server will respond with a JSON object containing the following properties:\n\n- `token_type` this will usually be the word “Bearer” (to indicate a bearer token)\n- `expires_in` with an integer representing the TTL of the access token (i.e. when the token will expire)\n- `access_token` the access token itself\n- `refresh_token` a refresh token that can be used to acquire a new access token when the original expires\n\n## Implicit grant ([section 4.2](http://tools.ietf.org/html/rfc6749#section-4.2))\n\nThe implicit grant is similar to the authorization code grant with two distinct differences.\n\nIt is intended to be used for user-agent-based clients (e.g. single page web apps) that can’t keep a client secret because all of the application code and storage is easily accessible.\n\nSecondly instead of the authorization server returning an authorization code which is exchanged for an access token, the authorization server returns an access token.\n\n### The Flow\n\nThe client will redirect the user to the authorization server with the following parameters in the query string:\n\n- `response_type` with the value `token`\n- `client_id` with the client identifier\n- `redirect_uri` with the client redirect URI. This parameter is optional, but if not sent the user will be redirected to a pre-registered redirect URI.\n- `scope` a space delimited list of scopes\n- `state` with a [CSRF](https://en.wikipedia.org/wiki/Cross-site_request_forgery) token. This parameter is optional but highly recommended. You should store the value of the CSRF token in the user’s session to be validated when they return.\n\nAll of these parameters will be validated by the authorization server.\n\nThe user will then be asked to login to the authorization server and approve the client.\n\nIf the user approves the client they will be redirected back to the authorization server with the following parameters in the query string:\n\n- `token_type` with the value `Bearer`\n- `expires_in` with an integer representing the TTL of the access token\n- `access_token` the access token itself\n- `state` with the state parameter sent in the original request. You should compare this value with the value stored in the user’s session to ensure the authorization code obtained is in response to requests made by this client rather than another client application.\n\n**Note:** this grant does not return a refresh token because the browser has no means of keeping it private\n\n\n\n## Resource owner credentials grant ([section 4.3](http://tools.ietf.org/html/rfc6749#section-4.3))\n\nThis grant is a great user experience for trusted first party clients both on the web and in native device applications.\n\n### The Flow\n\nThe client will ask the user for their authorization credentials (ususally a username and password).\n\nThe client then sends a POST request with following body parameters to the authorization server:\n\n- `grant_type` with the value `password`\n- `client_id` with the the client’s ID\n- `client_secret` with the client’s secret\n- `scope` with a space-delimited list of requested scope permissions.\n- `username` with the user’s username\n- `password` with the user’s password\n\nThe authorization server will respond with a JSON object containing the following properties:\n\n- `token_type` with the value `Bearer`\n- `expires_in` with an integer representing the TTL of the access token\n- `access_token` the access token itself\n- `refresh_token` a refresh token that can be used to acquire a new access token when the original expires\n\n## Client credentials grant ([section 4.4](http://tools.ietf.org/html/rfc6749#section-4.4))\n\nThe simplest of all of the OAuth 2.0 grants, this grant is suitable for machine-to-machine authentication where a specific user’s permission to access data is not required.\n\n### The Flow\n\nThe client sends a POST request with following body parameters to the authorization server:\n\n- `grant_type` with the value `client_credentials`\n- `client_id` with the the client’s ID\n- `client_secret` with the client’s secret\n- `scope` with a space-delimited list of requested scope permissions.\n\nThe authorization server will respond with a JSON object containing the following properties:\n\n- `token_type` with the value `Bearer`\n- `expires_in` with an integer representing the TTL of the access token\n- `access_token` the access token itself\n\n## Refresh token grant ([section 1.5](http://tools.ietf.org/html/rfc6749#section-1.5))\n\nAccess tokens eventually expire; however some grants respond with a refresh token which enables the client to get a new access token without requiring the user to be redirected.\n\n### The Flow\n\nThe client sends a POST request with following body parameters to the authorization server:\n\n- `grant_type` with the value `refresh_token`\n- `refresh_token` with the refresh token\n- `client_id` with the the client’s ID\n- `client_secret` with the client’s secret\n- `scope` with a space-delimited list of requested scope permissions. This is optional; if not sent the original scopes will be used, otherwise you can request a reduced set of scopes.\n\nThe authorization server will respond with a JSON object containing the following properties:\n\n- `token_type` with the value `Bearer`\n- `expires_in` with an integer representing the TTL of the access token\n- `access_token` the access token itself\n- `refresh_token` a refresh token that can be used to acquire a new access token when the original expires\n\n## Additonal Grants\n\nThere are additional grants that have been published in other specifications that I will cover in a future article.\n\n## Which OAuth 2.0 grant should I use?\n\nA grant is a method of acquiring an access token. Deciding which grants to implement depends on the type of client the end user will be using, and the experience you want for your users.\n\n![img](http://alexbilbie.com/images/oauth-grants.svg)\n\n### First party or third party client?\n\nA first party client is a client that you trust enough to handle the end user’s authorization credentials. For example Spotify’s iPhone app is owned and developed by Spotify so therefore they implicitly trust it.\n\nA third party client is a client that you don’t trust.\n\n### Access Token Owner?\n\nAn access token represents a permission granted to a client to access some protected resources.\n\nIf you are authorizing a machine to access resources and you don’t require the permission of a user to access said resources you should implement the client credentials grant.\n\nIf you require the permission of a user to access resources you need to determine the client type.\n\n### Client Type?\n\nDepending on whether or not the client is capable of keeping a secret will depend on which grant the client should use.\n\nIf the client is a web application that has a server side component then you should implement the authorization code grant.\n\nIf the client is a web application that has runs entirely on the front end (e.g. a single page web application) you should implement the password grant for a first party clients and the implicit grant for a third party clients.\n\nIf the client is a native application such as a mobile app you should implement the password grant.\n\nThird party native applications should use the authorization code grant (via the native browser, not an embedded browser - e.g. for iOS push the user to Safari or use [SFSafariViewController](https://developer.apple.com/library/ios/documentation/SafariServices/Reference/SFSafariViewController_Ref/), don't use an embedded [WKWebView](https://developer.apple.com/library/ios/documentation/WebKit/Reference/WKWebView_Ref/)).\n\n---\n\n> [alexbilbie.com](http://alexbilbie.com/guide-to-oauth-2-grants/) · by Alex Bilbie\n\n","source":"_posts/0004-a-guide-to-oauth2-grants.md","raw":"---\ntitle: A Guide To OAuth 2.0 Grants\ndate: 2018-10-26 14:24:30\ntags:\n    - Oauth\ncategories:\n    - 后端\n---\n\nThe [OAuth 2.0 specification](http://tools.ietf.org/html/rfc6749) is a flexibile authorization framework that describes a number of grants (“methods”) for a client application to acquire an access token (which represents a user’s permission for the client to access their data) which can be used to authenticate a request to an API endpoint.\n\n<!--more-->\n\nThe specification describes five grants for acquiring an access token:\n\n- Authorization code grant\n- Implicit grant\n- Resource owner credentials grant\n- Client credentials grant\n- Refresh token grant\n\nIn this post I’m going to describe each of the above grants and their appropriate use cases.\n\nAs a refresher here is a quick glossary of OAuth terms (taken from the core spec):\n\n- **Resource owner (a.k.a. the User)** - An entity capable of granting access to a protected resource. When the resource owner is a person, it is referred to as an end-user.\n- **Resource server (a.k.a. the API server)** - The server hosting the protected resources, capable of accepting and responding to protected resource requests using access tokens.\n- **Client** - An application making protected resource requests on behalf of the resource owner and with its authorization. The term client does not imply any particular implementation characteristics (e.g. whether the application executes on a server, a desktop, or other devices).\n- **Authorization server** - The server issuing access tokens to the client after successfully authenticating the resource owner and obtaining authorization.\n\n\n\n## Authorisation Code Grant ([section 4.1](http://tools.ietf.org/html/rfc6749#section-4.1))\n\nThe authorization code grant should be very familiar if you’ve ever signed into an application using your Facebook or Google account.\n\n### The Flow (Part One)\n\nThe client will redirect the user to the authorization server with the following parameters in the query string:\n\n- `response_type` with the value `code`\n- `client_id` with the client identifier\n- `redirect_uri` with the client redirect URI. This parameter is optional, but if not send the user will be redirected to a pre-registered redirect URI.\n- `scope` a space delimited list of scopes\n- `state` with a [CSRF](https://en.wikipedia.org/wiki/Cross-site_request_forgery) token. This parameter is optional but highly recommended. You should store the value of the CSRF token in the user’s session to be validated when they return.\n\nAll of these parameters will be validated by the authorization server.\n\nThe user will then be asked to login to the authorization server and approve the client.\n\nIf the user approves the client they will be redirected from the authorisation server back to the client (specifically to the redirect URI) with the following parameters in the query string:\n\n- `code` with the authorization code\n- `state` with the state parameter sent in the original request. You should compare this value with the value stored in the user’s session to ensure the authorization code obtained is in response to requests made by this client rather than another client application.\n\n### The Flow (Part Two)\n\nThe client will now send a POST request to the authorization server with the following parameters:\n\n- `grant_type` with the value of `authorization_code`\n- `client_id` with the client identifier\n- `client_secret` with the client secret\n- `redirect_uri` with the same redirect URI the user was redirect back to\n- `code` with the authorization code from the query string\n\nThe authorization server will respond with a JSON object containing the following properties:\n\n- `token_type` this will usually be the word “Bearer” (to indicate a bearer token)\n- `expires_in` with an integer representing the TTL of the access token (i.e. when the token will expire)\n- `access_token` the access token itself\n- `refresh_token` a refresh token that can be used to acquire a new access token when the original expires\n\n## Implicit grant ([section 4.2](http://tools.ietf.org/html/rfc6749#section-4.2))\n\nThe implicit grant is similar to the authorization code grant with two distinct differences.\n\nIt is intended to be used for user-agent-based clients (e.g. single page web apps) that can’t keep a client secret because all of the application code and storage is easily accessible.\n\nSecondly instead of the authorization server returning an authorization code which is exchanged for an access token, the authorization server returns an access token.\n\n### The Flow\n\nThe client will redirect the user to the authorization server with the following parameters in the query string:\n\n- `response_type` with the value `token`\n- `client_id` with the client identifier\n- `redirect_uri` with the client redirect URI. This parameter is optional, but if not sent the user will be redirected to a pre-registered redirect URI.\n- `scope` a space delimited list of scopes\n- `state` with a [CSRF](https://en.wikipedia.org/wiki/Cross-site_request_forgery) token. This parameter is optional but highly recommended. You should store the value of the CSRF token in the user’s session to be validated when they return.\n\nAll of these parameters will be validated by the authorization server.\n\nThe user will then be asked to login to the authorization server and approve the client.\n\nIf the user approves the client they will be redirected back to the authorization server with the following parameters in the query string:\n\n- `token_type` with the value `Bearer`\n- `expires_in` with an integer representing the TTL of the access token\n- `access_token` the access token itself\n- `state` with the state parameter sent in the original request. You should compare this value with the value stored in the user’s session to ensure the authorization code obtained is in response to requests made by this client rather than another client application.\n\n**Note:** this grant does not return a refresh token because the browser has no means of keeping it private\n\n\n\n## Resource owner credentials grant ([section 4.3](http://tools.ietf.org/html/rfc6749#section-4.3))\n\nThis grant is a great user experience for trusted first party clients both on the web and in native device applications.\n\n### The Flow\n\nThe client will ask the user for their authorization credentials (ususally a username and password).\n\nThe client then sends a POST request with following body parameters to the authorization server:\n\n- `grant_type` with the value `password`\n- `client_id` with the the client’s ID\n- `client_secret` with the client’s secret\n- `scope` with a space-delimited list of requested scope permissions.\n- `username` with the user’s username\n- `password` with the user’s password\n\nThe authorization server will respond with a JSON object containing the following properties:\n\n- `token_type` with the value `Bearer`\n- `expires_in` with an integer representing the TTL of the access token\n- `access_token` the access token itself\n- `refresh_token` a refresh token that can be used to acquire a new access token when the original expires\n\n## Client credentials grant ([section 4.4](http://tools.ietf.org/html/rfc6749#section-4.4))\n\nThe simplest of all of the OAuth 2.0 grants, this grant is suitable for machine-to-machine authentication where a specific user’s permission to access data is not required.\n\n### The Flow\n\nThe client sends a POST request with following body parameters to the authorization server:\n\n- `grant_type` with the value `client_credentials`\n- `client_id` with the the client’s ID\n- `client_secret` with the client’s secret\n- `scope` with a space-delimited list of requested scope permissions.\n\nThe authorization server will respond with a JSON object containing the following properties:\n\n- `token_type` with the value `Bearer`\n- `expires_in` with an integer representing the TTL of the access token\n- `access_token` the access token itself\n\n## Refresh token grant ([section 1.5](http://tools.ietf.org/html/rfc6749#section-1.5))\n\nAccess tokens eventually expire; however some grants respond with a refresh token which enables the client to get a new access token without requiring the user to be redirected.\n\n### The Flow\n\nThe client sends a POST request with following body parameters to the authorization server:\n\n- `grant_type` with the value `refresh_token`\n- `refresh_token` with the refresh token\n- `client_id` with the the client’s ID\n- `client_secret` with the client’s secret\n- `scope` with a space-delimited list of requested scope permissions. This is optional; if not sent the original scopes will be used, otherwise you can request a reduced set of scopes.\n\nThe authorization server will respond with a JSON object containing the following properties:\n\n- `token_type` with the value `Bearer`\n- `expires_in` with an integer representing the TTL of the access token\n- `access_token` the access token itself\n- `refresh_token` a refresh token that can be used to acquire a new access token when the original expires\n\n## Additonal Grants\n\nThere are additional grants that have been published in other specifications that I will cover in a future article.\n\n## Which OAuth 2.0 grant should I use?\n\nA grant is a method of acquiring an access token. Deciding which grants to implement depends on the type of client the end user will be using, and the experience you want for your users.\n\n![img](http://alexbilbie.com/images/oauth-grants.svg)\n\n### First party or third party client?\n\nA first party client is a client that you trust enough to handle the end user’s authorization credentials. For example Spotify’s iPhone app is owned and developed by Spotify so therefore they implicitly trust it.\n\nA third party client is a client that you don’t trust.\n\n### Access Token Owner?\n\nAn access token represents a permission granted to a client to access some protected resources.\n\nIf you are authorizing a machine to access resources and you don’t require the permission of a user to access said resources you should implement the client credentials grant.\n\nIf you require the permission of a user to access resources you need to determine the client type.\n\n### Client Type?\n\nDepending on whether or not the client is capable of keeping a secret will depend on which grant the client should use.\n\nIf the client is a web application that has a server side component then you should implement the authorization code grant.\n\nIf the client is a web application that has runs entirely on the front end (e.g. a single page web application) you should implement the password grant for a first party clients and the implicit grant for a third party clients.\n\nIf the client is a native application such as a mobile app you should implement the password grant.\n\nThird party native applications should use the authorization code grant (via the native browser, not an embedded browser - e.g. for iOS push the user to Safari or use [SFSafariViewController](https://developer.apple.com/library/ios/documentation/SafariServices/Reference/SFSafariViewController_Ref/), don't use an embedded [WKWebView](https://developer.apple.com/library/ios/documentation/WebKit/Reference/WKWebView_Ref/)).\n\n---\n\n> [alexbilbie.com](http://alexbilbie.com/guide-to-oauth-2-grants/) · by Alex Bilbie\n\n","slug":"0004-a-guide-to-oauth2-grants","published":1,"updated":"2020-07-17T02:32:01.143Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcpntufp000n04oirfs1gudr","content":"<p>The <a href=\"http://tools.ietf.org/html/rfc6749\" target=\"_blank\" rel=\"noopener\">OAuth 2.0 specification</a> is a flexibile authorization framework that describes a number of grants (“methods”) for a client application to acquire an access token (which represents a user’s permission for the client to access their data) which can be used to authenticate a request to an API endpoint.</p>\n<a id=\"more\"></a>\n<p>The specification describes five grants for acquiring an access token:</p>\n<ul>\n<li>Authorization code grant</li>\n<li>Implicit grant</li>\n<li>Resource owner credentials grant</li>\n<li>Client credentials grant</li>\n<li>Refresh token grant</li>\n</ul>\n<p>In this post I’m going to describe each of the above grants and their appropriate use cases.</p>\n<p>As a refresher here is a quick glossary of OAuth terms (taken from the core spec):</p>\n<ul>\n<li><strong>Resource owner (a.k.a. the User)</strong> - An entity capable of granting access to a protected resource. When the resource owner is a person, it is referred to as an end-user.</li>\n<li><strong>Resource server (a.k.a. the API server)</strong> - The server hosting the protected resources, capable of accepting and responding to protected resource requests using access tokens.</li>\n<li><strong>Client</strong> - An application making protected resource requests on behalf of the resource owner and with its authorization. The term client does not imply any particular implementation characteristics (e.g. whether the application executes on a server, a desktop, or other devices).</li>\n<li><strong>Authorization server</strong> - The server issuing access tokens to the client after successfully authenticating the resource owner and obtaining authorization.</li>\n</ul>\n<h2 id=\"Authorisation-Code-Grant-section-4-1\"><a href=\"#Authorisation-Code-Grant-section-4-1\" class=\"headerlink\" title=\"Authorisation Code Grant (section 4.1)\"></a>Authorisation Code Grant (<a href=\"http://tools.ietf.org/html/rfc6749#section-4.1\" target=\"_blank\" rel=\"noopener\">section 4.1</a>)</h2><p>The authorization code grant should be very familiar if you’ve ever signed into an application using your Facebook or Google account.</p>\n<h3 id=\"The-Flow-Part-One\"><a href=\"#The-Flow-Part-One\" class=\"headerlink\" title=\"The Flow (Part One)\"></a>The Flow (Part One)</h3><p>The client will redirect the user to the authorization server with the following parameters in the query string:</p>\n<ul>\n<li><code>response_type</code> with the value <code>code</code></li>\n<li><code>client_id</code> with the client identifier</li>\n<li><code>redirect_uri</code> with the client redirect URI. This parameter is optional, but if not send the user will be redirected to a pre-registered redirect URI.</li>\n<li><code>scope</code> a space delimited list of scopes</li>\n<li><code>state</code> with a <a href=\"https://en.wikipedia.org/wiki/Cross-site_request_forgery\" target=\"_blank\" rel=\"noopener\">CSRF</a> token. This parameter is optional but highly recommended. You should store the value of the CSRF token in the user’s session to be validated when they return.</li>\n</ul>\n<p>All of these parameters will be validated by the authorization server.</p>\n<p>The user will then be asked to login to the authorization server and approve the client.</p>\n<p>If the user approves the client they will be redirected from the authorisation server back to the client (specifically to the redirect URI) with the following parameters in the query string:</p>\n<ul>\n<li><code>code</code> with the authorization code</li>\n<li><code>state</code> with the state parameter sent in the original request. You should compare this value with the value stored in the user’s session to ensure the authorization code obtained is in response to requests made by this client rather than another client application.</li>\n</ul>\n<h3 id=\"The-Flow-Part-Two\"><a href=\"#The-Flow-Part-Two\" class=\"headerlink\" title=\"The Flow (Part Two)\"></a>The Flow (Part Two)</h3><p>The client will now send a POST request to the authorization server with the following parameters:</p>\n<ul>\n<li><code>grant_type</code> with the value of <code>authorization_code</code></li>\n<li><code>client_id</code> with the client identifier</li>\n<li><code>client_secret</code> with the client secret</li>\n<li><code>redirect_uri</code> with the same redirect URI the user was redirect back to</li>\n<li><code>code</code> with the authorization code from the query string</li>\n</ul>\n<p>The authorization server will respond with a JSON object containing the following properties:</p>\n<ul>\n<li><code>token_type</code> this will usually be the word “Bearer” (to indicate a bearer token)</li>\n<li><code>expires_in</code> with an integer representing the TTL of the access token (i.e. when the token will expire)</li>\n<li><code>access_token</code> the access token itself</li>\n<li><code>refresh_token</code> a refresh token that can be used to acquire a new access token when the original expires</li>\n</ul>\n<h2 id=\"Implicit-grant-section-4-2\"><a href=\"#Implicit-grant-section-4-2\" class=\"headerlink\" title=\"Implicit grant (section 4.2)\"></a>Implicit grant (<a href=\"http://tools.ietf.org/html/rfc6749#section-4.2\" target=\"_blank\" rel=\"noopener\">section 4.2</a>)</h2><p>The implicit grant is similar to the authorization code grant with two distinct differences.</p>\n<p>It is intended to be used for user-agent-based clients (e.g. single page web apps) that can’t keep a client secret because all of the application code and storage is easily accessible.</p>\n<p>Secondly instead of the authorization server returning an authorization code which is exchanged for an access token, the authorization server returns an access token.</p>\n<h3 id=\"The-Flow\"><a href=\"#The-Flow\" class=\"headerlink\" title=\"The Flow\"></a>The Flow</h3><p>The client will redirect the user to the authorization server with the following parameters in the query string:</p>\n<ul>\n<li><code>response_type</code> with the value <code>token</code></li>\n<li><code>client_id</code> with the client identifier</li>\n<li><code>redirect_uri</code> with the client redirect URI. This parameter is optional, but if not sent the user will be redirected to a pre-registered redirect URI.</li>\n<li><code>scope</code> a space delimited list of scopes</li>\n<li><code>state</code> with a <a href=\"https://en.wikipedia.org/wiki/Cross-site_request_forgery\" target=\"_blank\" rel=\"noopener\">CSRF</a> token. This parameter is optional but highly recommended. You should store the value of the CSRF token in the user’s session to be validated when they return.</li>\n</ul>\n<p>All of these parameters will be validated by the authorization server.</p>\n<p>The user will then be asked to login to the authorization server and approve the client.</p>\n<p>If the user approves the client they will be redirected back to the authorization server with the following parameters in the query string:</p>\n<ul>\n<li><code>token_type</code> with the value <code>Bearer</code></li>\n<li><code>expires_in</code> with an integer representing the TTL of the access token</li>\n<li><code>access_token</code> the access token itself</li>\n<li><code>state</code> with the state parameter sent in the original request. You should compare this value with the value stored in the user’s session to ensure the authorization code obtained is in response to requests made by this client rather than another client application.</li>\n</ul>\n<p><strong>Note:</strong> this grant does not return a refresh token because the browser has no means of keeping it private</p>\n<h2 id=\"Resource-owner-credentials-grant-section-4-3\"><a href=\"#Resource-owner-credentials-grant-section-4-3\" class=\"headerlink\" title=\"Resource owner credentials grant (section 4.3)\"></a>Resource owner credentials grant (<a href=\"http://tools.ietf.org/html/rfc6749#section-4.3\" target=\"_blank\" rel=\"noopener\">section 4.3</a>)</h2><p>This grant is a great user experience for trusted first party clients both on the web and in native device applications.</p>\n<h3 id=\"The-Flow-1\"><a href=\"#The-Flow-1\" class=\"headerlink\" title=\"The Flow\"></a>The Flow</h3><p>The client will ask the user for their authorization credentials (ususally a username and password).</p>\n<p>The client then sends a POST request with following body parameters to the authorization server:</p>\n<ul>\n<li><code>grant_type</code> with the value <code>password</code></li>\n<li><code>client_id</code> with the the client’s ID</li>\n<li><code>client_secret</code> with the client’s secret</li>\n<li><code>scope</code> with a space-delimited list of requested scope permissions.</li>\n<li><code>username</code> with the user’s username</li>\n<li><code>password</code> with the user’s password</li>\n</ul>\n<p>The authorization server will respond with a JSON object containing the following properties:</p>\n<ul>\n<li><code>token_type</code> with the value <code>Bearer</code></li>\n<li><code>expires_in</code> with an integer representing the TTL of the access token</li>\n<li><code>access_token</code> the access token itself</li>\n<li><code>refresh_token</code> a refresh token that can be used to acquire a new access token when the original expires</li>\n</ul>\n<h2 id=\"Client-credentials-grant-section-4-4\"><a href=\"#Client-credentials-grant-section-4-4\" class=\"headerlink\" title=\"Client credentials grant (section 4.4)\"></a>Client credentials grant (<a href=\"http://tools.ietf.org/html/rfc6749#section-4.4\" target=\"_blank\" rel=\"noopener\">section 4.4</a>)</h2><p>The simplest of all of the OAuth 2.0 grants, this grant is suitable for machine-to-machine authentication where a specific user’s permission to access data is not required.</p>\n<h3 id=\"The-Flow-2\"><a href=\"#The-Flow-2\" class=\"headerlink\" title=\"The Flow\"></a>The Flow</h3><p>The client sends a POST request with following body parameters to the authorization server:</p>\n<ul>\n<li><code>grant_type</code> with the value <code>client_credentials</code></li>\n<li><code>client_id</code> with the the client’s ID</li>\n<li><code>client_secret</code> with the client’s secret</li>\n<li><code>scope</code> with a space-delimited list of requested scope permissions.</li>\n</ul>\n<p>The authorization server will respond with a JSON object containing the following properties:</p>\n<ul>\n<li><code>token_type</code> with the value <code>Bearer</code></li>\n<li><code>expires_in</code> with an integer representing the TTL of the access token</li>\n<li><code>access_token</code> the access token itself</li>\n</ul>\n<h2 id=\"Refresh-token-grant-section-1-5\"><a href=\"#Refresh-token-grant-section-1-5\" class=\"headerlink\" title=\"Refresh token grant (section 1.5)\"></a>Refresh token grant (<a href=\"http://tools.ietf.org/html/rfc6749#section-1.5\" target=\"_blank\" rel=\"noopener\">section 1.5</a>)</h2><p>Access tokens eventually expire; however some grants respond with a refresh token which enables the client to get a new access token without requiring the user to be redirected.</p>\n<h3 id=\"The-Flow-3\"><a href=\"#The-Flow-3\" class=\"headerlink\" title=\"The Flow\"></a>The Flow</h3><p>The client sends a POST request with following body parameters to the authorization server:</p>\n<ul>\n<li><code>grant_type</code> with the value <code>refresh_token</code></li>\n<li><code>refresh_token</code> with the refresh token</li>\n<li><code>client_id</code> with the the client’s ID</li>\n<li><code>client_secret</code> with the client’s secret</li>\n<li><code>scope</code> with a space-delimited list of requested scope permissions. This is optional; if not sent the original scopes will be used, otherwise you can request a reduced set of scopes.</li>\n</ul>\n<p>The authorization server will respond with a JSON object containing the following properties:</p>\n<ul>\n<li><code>token_type</code> with the value <code>Bearer</code></li>\n<li><code>expires_in</code> with an integer representing the TTL of the access token</li>\n<li><code>access_token</code> the access token itself</li>\n<li><code>refresh_token</code> a refresh token that can be used to acquire a new access token when the original expires</li>\n</ul>\n<h2 id=\"Additonal-Grants\"><a href=\"#Additonal-Grants\" class=\"headerlink\" title=\"Additonal Grants\"></a>Additonal Grants</h2><p>There are additional grants that have been published in other specifications that I will cover in a future article.</p>\n<h2 id=\"Which-OAuth-2-0-grant-should-I-use\"><a href=\"#Which-OAuth-2-0-grant-should-I-use\" class=\"headerlink\" title=\"Which OAuth 2.0 grant should I use?\"></a>Which OAuth 2.0 grant should I use?</h2><p>A grant is a method of acquiring an access token. Deciding which grants to implement depends on the type of client the end user will be using, and the experience you want for your users.</p>\n<p><img src=\"http://alexbilbie.com/images/oauth-grants.svg\" srcset=\"/img/loading.gif\" alt=\"img\"></p>\n<h3 id=\"First-party-or-third-party-client\"><a href=\"#First-party-or-third-party-client\" class=\"headerlink\" title=\"First party or third party client?\"></a>First party or third party client?</h3><p>A first party client is a client that you trust enough to handle the end user’s authorization credentials. For example Spotify’s iPhone app is owned and developed by Spotify so therefore they implicitly trust it.</p>\n<p>A third party client is a client that you don’t trust.</p>\n<h3 id=\"Access-Token-Owner\"><a href=\"#Access-Token-Owner\" class=\"headerlink\" title=\"Access Token Owner?\"></a>Access Token Owner?</h3><p>An access token represents a permission granted to a client to access some protected resources.</p>\n<p>If you are authorizing a machine to access resources and you don’t require the permission of a user to access said resources you should implement the client credentials grant.</p>\n<p>If you require the permission of a user to access resources you need to determine the client type.</p>\n<h3 id=\"Client-Type\"><a href=\"#Client-Type\" class=\"headerlink\" title=\"Client Type?\"></a>Client Type?</h3><p>Depending on whether or not the client is capable of keeping a secret will depend on which grant the client should use.</p>\n<p>If the client is a web application that has a server side component then you should implement the authorization code grant.</p>\n<p>If the client is a web application that has runs entirely on the front end (e.g. a single page web application) you should implement the password grant for a first party clients and the implicit grant for a third party clients.</p>\n<p>If the client is a native application such as a mobile app you should implement the password grant.</p>\n<p>Third party native applications should use the authorization code grant (via the native browser, not an embedded browser - e.g. for iOS push the user to Safari or use <a href=\"https://developer.apple.com/library/ios/documentation/SafariServices/Reference/SFSafariViewController_Ref/\" target=\"_blank\" rel=\"noopener\">SFSafariViewController</a>, don’t use an embedded <a href=\"https://developer.apple.com/library/ios/documentation/WebKit/Reference/WKWebView_Ref/\" target=\"_blank\" rel=\"noopener\">WKWebView</a>).</p>\n<hr>\n<blockquote>\n<p><a href=\"http://alexbilbie.com/guide-to-oauth-2-grants/\" target=\"_blank\" rel=\"noopener\">alexbilbie.com</a> · by Alex Bilbie</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>The <a href=\"http://tools.ietf.org/html/rfc6749\" target=\"_blank\" rel=\"noopener\">OAuth 2.0 specification</a> is a flexibile authorization framework that describes a number of grants (“methods”) for a client application to acquire an access token (which represents a user’s permission for the client to access their data) which can be used to authenticate a request to an API endpoint.</p>","more":"<p>The specification describes five grants for acquiring an access token:</p>\n<ul>\n<li>Authorization code grant</li>\n<li>Implicit grant</li>\n<li>Resource owner credentials grant</li>\n<li>Client credentials grant</li>\n<li>Refresh token grant</li>\n</ul>\n<p>In this post I’m going to describe each of the above grants and their appropriate use cases.</p>\n<p>As a refresher here is a quick glossary of OAuth terms (taken from the core spec):</p>\n<ul>\n<li><strong>Resource owner (a.k.a. the User)</strong> - An entity capable of granting access to a protected resource. When the resource owner is a person, it is referred to as an end-user.</li>\n<li><strong>Resource server (a.k.a. the API server)</strong> - The server hosting the protected resources, capable of accepting and responding to protected resource requests using access tokens.</li>\n<li><strong>Client</strong> - An application making protected resource requests on behalf of the resource owner and with its authorization. The term client does not imply any particular implementation characteristics (e.g. whether the application executes on a server, a desktop, or other devices).</li>\n<li><strong>Authorization server</strong> - The server issuing access tokens to the client after successfully authenticating the resource owner and obtaining authorization.</li>\n</ul>\n<h2 id=\"Authorisation-Code-Grant-section-4-1\"><a href=\"#Authorisation-Code-Grant-section-4-1\" class=\"headerlink\" title=\"Authorisation Code Grant (section 4.1)\"></a>Authorisation Code Grant (<a href=\"http://tools.ietf.org/html/rfc6749#section-4.1\" target=\"_blank\" rel=\"noopener\">section 4.1</a>)</h2><p>The authorization code grant should be very familiar if you’ve ever signed into an application using your Facebook or Google account.</p>\n<h3 id=\"The-Flow-Part-One\"><a href=\"#The-Flow-Part-One\" class=\"headerlink\" title=\"The Flow (Part One)\"></a>The Flow (Part One)</h3><p>The client will redirect the user to the authorization server with the following parameters in the query string:</p>\n<ul>\n<li><code>response_type</code> with the value <code>code</code></li>\n<li><code>client_id</code> with the client identifier</li>\n<li><code>redirect_uri</code> with the client redirect URI. This parameter is optional, but if not send the user will be redirected to a pre-registered redirect URI.</li>\n<li><code>scope</code> a space delimited list of scopes</li>\n<li><code>state</code> with a <a href=\"https://en.wikipedia.org/wiki/Cross-site_request_forgery\" target=\"_blank\" rel=\"noopener\">CSRF</a> token. This parameter is optional but highly recommended. You should store the value of the CSRF token in the user’s session to be validated when they return.</li>\n</ul>\n<p>All of these parameters will be validated by the authorization server.</p>\n<p>The user will then be asked to login to the authorization server and approve the client.</p>\n<p>If the user approves the client they will be redirected from the authorisation server back to the client (specifically to the redirect URI) with the following parameters in the query string:</p>\n<ul>\n<li><code>code</code> with the authorization code</li>\n<li><code>state</code> with the state parameter sent in the original request. You should compare this value with the value stored in the user’s session to ensure the authorization code obtained is in response to requests made by this client rather than another client application.</li>\n</ul>\n<h3 id=\"The-Flow-Part-Two\"><a href=\"#The-Flow-Part-Two\" class=\"headerlink\" title=\"The Flow (Part Two)\"></a>The Flow (Part Two)</h3><p>The client will now send a POST request to the authorization server with the following parameters:</p>\n<ul>\n<li><code>grant_type</code> with the value of <code>authorization_code</code></li>\n<li><code>client_id</code> with the client identifier</li>\n<li><code>client_secret</code> with the client secret</li>\n<li><code>redirect_uri</code> with the same redirect URI the user was redirect back to</li>\n<li><code>code</code> with the authorization code from the query string</li>\n</ul>\n<p>The authorization server will respond with a JSON object containing the following properties:</p>\n<ul>\n<li><code>token_type</code> this will usually be the word “Bearer” (to indicate a bearer token)</li>\n<li><code>expires_in</code> with an integer representing the TTL of the access token (i.e. when the token will expire)</li>\n<li><code>access_token</code> the access token itself</li>\n<li><code>refresh_token</code> a refresh token that can be used to acquire a new access token when the original expires</li>\n</ul>\n<h2 id=\"Implicit-grant-section-4-2\"><a href=\"#Implicit-grant-section-4-2\" class=\"headerlink\" title=\"Implicit grant (section 4.2)\"></a>Implicit grant (<a href=\"http://tools.ietf.org/html/rfc6749#section-4.2\" target=\"_blank\" rel=\"noopener\">section 4.2</a>)</h2><p>The implicit grant is similar to the authorization code grant with two distinct differences.</p>\n<p>It is intended to be used for user-agent-based clients (e.g. single page web apps) that can’t keep a client secret because all of the application code and storage is easily accessible.</p>\n<p>Secondly instead of the authorization server returning an authorization code which is exchanged for an access token, the authorization server returns an access token.</p>\n<h3 id=\"The-Flow\"><a href=\"#The-Flow\" class=\"headerlink\" title=\"The Flow\"></a>The Flow</h3><p>The client will redirect the user to the authorization server with the following parameters in the query string:</p>\n<ul>\n<li><code>response_type</code> with the value <code>token</code></li>\n<li><code>client_id</code> with the client identifier</li>\n<li><code>redirect_uri</code> with the client redirect URI. This parameter is optional, but if not sent the user will be redirected to a pre-registered redirect URI.</li>\n<li><code>scope</code> a space delimited list of scopes</li>\n<li><code>state</code> with a <a href=\"https://en.wikipedia.org/wiki/Cross-site_request_forgery\" target=\"_blank\" rel=\"noopener\">CSRF</a> token. This parameter is optional but highly recommended. You should store the value of the CSRF token in the user’s session to be validated when they return.</li>\n</ul>\n<p>All of these parameters will be validated by the authorization server.</p>\n<p>The user will then be asked to login to the authorization server and approve the client.</p>\n<p>If the user approves the client they will be redirected back to the authorization server with the following parameters in the query string:</p>\n<ul>\n<li><code>token_type</code> with the value <code>Bearer</code></li>\n<li><code>expires_in</code> with an integer representing the TTL of the access token</li>\n<li><code>access_token</code> the access token itself</li>\n<li><code>state</code> with the state parameter sent in the original request. You should compare this value with the value stored in the user’s session to ensure the authorization code obtained is in response to requests made by this client rather than another client application.</li>\n</ul>\n<p><strong>Note:</strong> this grant does not return a refresh token because the browser has no means of keeping it private</p>\n<h2 id=\"Resource-owner-credentials-grant-section-4-3\"><a href=\"#Resource-owner-credentials-grant-section-4-3\" class=\"headerlink\" title=\"Resource owner credentials grant (section 4.3)\"></a>Resource owner credentials grant (<a href=\"http://tools.ietf.org/html/rfc6749#section-4.3\" target=\"_blank\" rel=\"noopener\">section 4.3</a>)</h2><p>This grant is a great user experience for trusted first party clients both on the web and in native device applications.</p>\n<h3 id=\"The-Flow-1\"><a href=\"#The-Flow-1\" class=\"headerlink\" title=\"The Flow\"></a>The Flow</h3><p>The client will ask the user for their authorization credentials (ususally a username and password).</p>\n<p>The client then sends a POST request with following body parameters to the authorization server:</p>\n<ul>\n<li><code>grant_type</code> with the value <code>password</code></li>\n<li><code>client_id</code> with the the client’s ID</li>\n<li><code>client_secret</code> with the client’s secret</li>\n<li><code>scope</code> with a space-delimited list of requested scope permissions.</li>\n<li><code>username</code> with the user’s username</li>\n<li><code>password</code> with the user’s password</li>\n</ul>\n<p>The authorization server will respond with a JSON object containing the following properties:</p>\n<ul>\n<li><code>token_type</code> with the value <code>Bearer</code></li>\n<li><code>expires_in</code> with an integer representing the TTL of the access token</li>\n<li><code>access_token</code> the access token itself</li>\n<li><code>refresh_token</code> a refresh token that can be used to acquire a new access token when the original expires</li>\n</ul>\n<h2 id=\"Client-credentials-grant-section-4-4\"><a href=\"#Client-credentials-grant-section-4-4\" class=\"headerlink\" title=\"Client credentials grant (section 4.4)\"></a>Client credentials grant (<a href=\"http://tools.ietf.org/html/rfc6749#section-4.4\" target=\"_blank\" rel=\"noopener\">section 4.4</a>)</h2><p>The simplest of all of the OAuth 2.0 grants, this grant is suitable for machine-to-machine authentication where a specific user’s permission to access data is not required.</p>\n<h3 id=\"The-Flow-2\"><a href=\"#The-Flow-2\" class=\"headerlink\" title=\"The Flow\"></a>The Flow</h3><p>The client sends a POST request with following body parameters to the authorization server:</p>\n<ul>\n<li><code>grant_type</code> with the value <code>client_credentials</code></li>\n<li><code>client_id</code> with the the client’s ID</li>\n<li><code>client_secret</code> with the client’s secret</li>\n<li><code>scope</code> with a space-delimited list of requested scope permissions.</li>\n</ul>\n<p>The authorization server will respond with a JSON object containing the following properties:</p>\n<ul>\n<li><code>token_type</code> with the value <code>Bearer</code></li>\n<li><code>expires_in</code> with an integer representing the TTL of the access token</li>\n<li><code>access_token</code> the access token itself</li>\n</ul>\n<h2 id=\"Refresh-token-grant-section-1-5\"><a href=\"#Refresh-token-grant-section-1-5\" class=\"headerlink\" title=\"Refresh token grant (section 1.5)\"></a>Refresh token grant (<a href=\"http://tools.ietf.org/html/rfc6749#section-1.5\" target=\"_blank\" rel=\"noopener\">section 1.5</a>)</h2><p>Access tokens eventually expire; however some grants respond with a refresh token which enables the client to get a new access token without requiring the user to be redirected.</p>\n<h3 id=\"The-Flow-3\"><a href=\"#The-Flow-3\" class=\"headerlink\" title=\"The Flow\"></a>The Flow</h3><p>The client sends a POST request with following body parameters to the authorization server:</p>\n<ul>\n<li><code>grant_type</code> with the value <code>refresh_token</code></li>\n<li><code>refresh_token</code> with the refresh token</li>\n<li><code>client_id</code> with the the client’s ID</li>\n<li><code>client_secret</code> with the client’s secret</li>\n<li><code>scope</code> with a space-delimited list of requested scope permissions. This is optional; if not sent the original scopes will be used, otherwise you can request a reduced set of scopes.</li>\n</ul>\n<p>The authorization server will respond with a JSON object containing the following properties:</p>\n<ul>\n<li><code>token_type</code> with the value <code>Bearer</code></li>\n<li><code>expires_in</code> with an integer representing the TTL of the access token</li>\n<li><code>access_token</code> the access token itself</li>\n<li><code>refresh_token</code> a refresh token that can be used to acquire a new access token when the original expires</li>\n</ul>\n<h2 id=\"Additonal-Grants\"><a href=\"#Additonal-Grants\" class=\"headerlink\" title=\"Additonal Grants\"></a>Additonal Grants</h2><p>There are additional grants that have been published in other specifications that I will cover in a future article.</p>\n<h2 id=\"Which-OAuth-2-0-grant-should-I-use\"><a href=\"#Which-OAuth-2-0-grant-should-I-use\" class=\"headerlink\" title=\"Which OAuth 2.0 grant should I use?\"></a>Which OAuth 2.0 grant should I use?</h2><p>A grant is a method of acquiring an access token. Deciding which grants to implement depends on the type of client the end user will be using, and the experience you want for your users.</p>\n<p><img src=\"http://alexbilbie.com/images/oauth-grants.svg\" srcset=\"/img/loading.gif\" alt=\"img\"></p>\n<h3 id=\"First-party-or-third-party-client\"><a href=\"#First-party-or-third-party-client\" class=\"headerlink\" title=\"First party or third party client?\"></a>First party or third party client?</h3><p>A first party client is a client that you trust enough to handle the end user’s authorization credentials. For example Spotify’s iPhone app is owned and developed by Spotify so therefore they implicitly trust it.</p>\n<p>A third party client is a client that you don’t trust.</p>\n<h3 id=\"Access-Token-Owner\"><a href=\"#Access-Token-Owner\" class=\"headerlink\" title=\"Access Token Owner?\"></a>Access Token Owner?</h3><p>An access token represents a permission granted to a client to access some protected resources.</p>\n<p>If you are authorizing a machine to access resources and you don’t require the permission of a user to access said resources you should implement the client credentials grant.</p>\n<p>If you require the permission of a user to access resources you need to determine the client type.</p>\n<h3 id=\"Client-Type\"><a href=\"#Client-Type\" class=\"headerlink\" title=\"Client Type?\"></a>Client Type?</h3><p>Depending on whether or not the client is capable of keeping a secret will depend on which grant the client should use.</p>\n<p>If the client is a web application that has a server side component then you should implement the authorization code grant.</p>\n<p>If the client is a web application that has runs entirely on the front end (e.g. a single page web application) you should implement the password grant for a first party clients and the implicit grant for a third party clients.</p>\n<p>If the client is a native application such as a mobile app you should implement the password grant.</p>\n<p>Third party native applications should use the authorization code grant (via the native browser, not an embedded browser - e.g. for iOS push the user to Safari or use <a href=\"https://developer.apple.com/library/ios/documentation/SafariServices/Reference/SFSafariViewController_Ref/\" target=\"_blank\" rel=\"noopener\">SFSafariViewController</a>, don’t use an embedded <a href=\"https://developer.apple.com/library/ios/documentation/WebKit/Reference/WKWebView_Ref/\" target=\"_blank\" rel=\"noopener\">WKWebView</a>).</p>\n<hr>\n<blockquote>\n<p><a href=\"http://alexbilbie.com/guide-to-oauth-2-grants/\" target=\"_blank\" rel=\"noopener\">alexbilbie.com</a> · by Alex Bilbie</p>\n</blockquote>"},{"title":"Security自定义Provider如何获取更多用户信息","date":"2018-10-30T02:24:30.000Z","_content":"\n在使用Spring Security集成Oauth2.0做Auth server时，使用自定义的UserDetailsService实现时，在Controller层通过自动注入，可以获取详细的用户信息。\n\n<!--more-->\n\n```java\n@GetMapping(\"/user\")\npublic Principal user(Principal user) {\n  return user;\n}\n```\n\n但是，使用自定义的Provider去做账户校验时，获取的Principal就只含有用户名信息。\n\n分析原码发现\n\n```java\n// org.springframework.security.oauth2.provider.token.DefaultUserAuthenticationConverter\npublic Authentication extractAuthentication(Map<String, ?> map) {\n  if (map.containsKey(USERNAME)) {\n    Object principal = map.get(USERNAME);\n    Collection<? extends GrantedAuthority> authorities = getAuthorities(map);\n    if (userDetailsService != null) {\n      UserDetails user = userDetailsService.loadUserByUsername((String) map.get(USERNAME));\n      authorities = user.getAuthorities();\n      principal = user;\n    }\n    return new UsernamePasswordAuthenticationToken(principal, \"N/A\", authorities);\n  }\n  return null;\n}\n```\n通过jwt方式进行认证的会执行`DefaultUserAuthenticationConverter`代码，其中的userDetailsService是null，所以返回的principal就只有用户名。\n\n可以通过在创建`DefaultUserAuthenticationConverter`时，给他set上userDetailsService，这样就获取更多的信息了。\n\n如下：\n\n```java\n@Bean\npublic JwtAccessTokenConverter jwtAccessTokenConverter() {\n    JwtAccessTokenConverter jwtAccessTokenConverter = new JwtAccessTokenConverter();\n    jwtAccessTokenConverter.setSigningKey(\"demo\");\n    final AccessTokenConverter accessTokenConverter = jwtAccessTokenConverter.getAccessTokenConverter();\n    if (accessTokenConverter instanceof DefaultAccessTokenConverter) {\n        ((DefaultAccessTokenConverter) accessTokenConverter).setUserTokenConverter(userAuthenticationConverter());\n    }\n    return jwtAccessTokenConverter;\n}\n\n@Bean\npublic UserAuthenticationConverter userAuthenticationConverter() {\n    DefaultUserAuthenticationConverter defaultUserAuthenticationConverter = new DefaultUserAuthenticationConverter();\n    defaultUserAuthenticationConverter.setUserDetailsService(userDetailsService);\n    return defaultUserAuthenticationConverter;\n}\n```\n","source":"_posts/0005-obtain-principal-with-custom-provider.md","raw":"---\ntitle: Security自定义Provider如何获取更多用户信息\ndate: 2018-10-30 10:24:30\ntags:\n    - Java\ncategories:\n    - 后端\n---\n\n在使用Spring Security集成Oauth2.0做Auth server时，使用自定义的UserDetailsService实现时，在Controller层通过自动注入，可以获取详细的用户信息。\n\n<!--more-->\n\n```java\n@GetMapping(\"/user\")\npublic Principal user(Principal user) {\n  return user;\n}\n```\n\n但是，使用自定义的Provider去做账户校验时，获取的Principal就只含有用户名信息。\n\n分析原码发现\n\n```java\n// org.springframework.security.oauth2.provider.token.DefaultUserAuthenticationConverter\npublic Authentication extractAuthentication(Map<String, ?> map) {\n  if (map.containsKey(USERNAME)) {\n    Object principal = map.get(USERNAME);\n    Collection<? extends GrantedAuthority> authorities = getAuthorities(map);\n    if (userDetailsService != null) {\n      UserDetails user = userDetailsService.loadUserByUsername((String) map.get(USERNAME));\n      authorities = user.getAuthorities();\n      principal = user;\n    }\n    return new UsernamePasswordAuthenticationToken(principal, \"N/A\", authorities);\n  }\n  return null;\n}\n```\n通过jwt方式进行认证的会执行`DefaultUserAuthenticationConverter`代码，其中的userDetailsService是null，所以返回的principal就只有用户名。\n\n可以通过在创建`DefaultUserAuthenticationConverter`时，给他set上userDetailsService，这样就获取更多的信息了。\n\n如下：\n\n```java\n@Bean\npublic JwtAccessTokenConverter jwtAccessTokenConverter() {\n    JwtAccessTokenConverter jwtAccessTokenConverter = new JwtAccessTokenConverter();\n    jwtAccessTokenConverter.setSigningKey(\"demo\");\n    final AccessTokenConverter accessTokenConverter = jwtAccessTokenConverter.getAccessTokenConverter();\n    if (accessTokenConverter instanceof DefaultAccessTokenConverter) {\n        ((DefaultAccessTokenConverter) accessTokenConverter).setUserTokenConverter(userAuthenticationConverter());\n    }\n    return jwtAccessTokenConverter;\n}\n\n@Bean\npublic UserAuthenticationConverter userAuthenticationConverter() {\n    DefaultUserAuthenticationConverter defaultUserAuthenticationConverter = new DefaultUserAuthenticationConverter();\n    defaultUserAuthenticationConverter.setUserDetailsService(userDetailsService);\n    return defaultUserAuthenticationConverter;\n}\n```\n","slug":"0005-obtain-principal-with-custom-provider","published":1,"updated":"2020-07-17T02:32:01.144Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcpntufr000r04oi5vas76q8","content":"<p>在使用Spring Security集成Oauth2.0做Auth server时，使用自定义的UserDetailsService实现时，在Controller层通过自动注入，可以获取详细的用户信息。</p>\n<a id=\"more\"></a>\n<pre><code class=\"hljs java\"><span class=\"hljs-meta\">@GetMapping</span>(<span class=\"hljs-string\">\"/user\"</span>)\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Principal <span class=\"hljs-title\">user</span><span class=\"hljs-params\">(Principal user)</span> </span>&#123;\n  <span class=\"hljs-keyword\">return</span> user;\n&#125;</code></pre>\n<p>但是，使用自定义的Provider去做账户校验时，获取的Principal就只含有用户名信息。</p>\n<p>分析原码发现</p>\n<pre><code class=\"hljs java\"><span class=\"hljs-comment\">// org.springframework.security.oauth2.provider.token.DefaultUserAuthenticationConverter</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Authentication <span class=\"hljs-title\">extractAuthentication</span><span class=\"hljs-params\">(Map&lt;String, ?&gt; map)</span> </span>&#123;\n  <span class=\"hljs-keyword\">if</span> (map.containsKey(USERNAME)) &#123;\n    Object principal = map.get(USERNAME);\n    Collection&lt;? extends GrantedAuthority&gt; authorities = getAuthorities(map);\n    <span class=\"hljs-keyword\">if</span> (userDetailsService != <span class=\"hljs-keyword\">null</span>) &#123;\n      UserDetails user = userDetailsService.loadUserByUsername((String) map.get(USERNAME));\n      authorities = user.getAuthorities();\n      principal = user;\n    &#125;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> UsernamePasswordAuthenticationToken(principal, <span class=\"hljs-string\">\"N/A\"</span>, authorities);\n  &#125;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;\n&#125;</code></pre>\n<p>通过jwt方式进行认证的会执行<code>DefaultUserAuthenticationConverter</code>代码，其中的userDetailsService是null，所以返回的principal就只有用户名。</p>\n<p>可以通过在创建<code>DefaultUserAuthenticationConverter</code>时，给他set上userDetailsService，这样就获取更多的信息了。</p>\n<p>如下：</p>\n<pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Bean</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> JwtAccessTokenConverter <span class=\"hljs-title\">jwtAccessTokenConverter</span><span class=\"hljs-params\">()</span> </span>&#123;\n    JwtAccessTokenConverter jwtAccessTokenConverter = <span class=\"hljs-keyword\">new</span> JwtAccessTokenConverter();\n    jwtAccessTokenConverter.setSigningKey(<span class=\"hljs-string\">\"demo\"</span>);\n    <span class=\"hljs-keyword\">final</span> AccessTokenConverter accessTokenConverter = jwtAccessTokenConverter.getAccessTokenConverter();\n    <span class=\"hljs-keyword\">if</span> (accessTokenConverter <span class=\"hljs-keyword\">instanceof</span> DefaultAccessTokenConverter) &#123;\n        ((DefaultAccessTokenConverter) accessTokenConverter).setUserTokenConverter(userAuthenticationConverter());\n    &#125;\n    <span class=\"hljs-keyword\">return</span> jwtAccessTokenConverter;\n&#125;\n\n<span class=\"hljs-meta\">@Bean</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> UserAuthenticationConverter <span class=\"hljs-title\">userAuthenticationConverter</span><span class=\"hljs-params\">()</span> </span>&#123;\n    DefaultUserAuthenticationConverter defaultUserAuthenticationConverter = <span class=\"hljs-keyword\">new</span> DefaultUserAuthenticationConverter();\n    defaultUserAuthenticationConverter.setUserDetailsService(userDetailsService);\n    <span class=\"hljs-keyword\">return</span> defaultUserAuthenticationConverter;\n&#125;</code></pre>\n","site":{"data":{}},"excerpt":"<p>在使用Spring Security集成Oauth2.0做Auth server时，使用自定义的UserDetailsService实现时，在Controller层通过自动注入，可以获取详细的用户信息。</p>","more":"<pre><code class=\"hljs java\"><span class=\"hljs-meta\">@GetMapping</span>(<span class=\"hljs-string\">\"/user\"</span>)\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Principal <span class=\"hljs-title\">user</span><span class=\"hljs-params\">(Principal user)</span> </span>&#123;\n  <span class=\"hljs-keyword\">return</span> user;\n&#125;</code></pre>\n<p>但是，使用自定义的Provider去做账户校验时，获取的Principal就只含有用户名信息。</p>\n<p>分析原码发现</p>\n<pre><code class=\"hljs java\"><span class=\"hljs-comment\">// org.springframework.security.oauth2.provider.token.DefaultUserAuthenticationConverter</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Authentication <span class=\"hljs-title\">extractAuthentication</span><span class=\"hljs-params\">(Map&lt;String, ?&gt; map)</span> </span>&#123;\n  <span class=\"hljs-keyword\">if</span> (map.containsKey(USERNAME)) &#123;\n    Object principal = map.get(USERNAME);\n    Collection&lt;? extends GrantedAuthority&gt; authorities = getAuthorities(map);\n    <span class=\"hljs-keyword\">if</span> (userDetailsService != <span class=\"hljs-keyword\">null</span>) &#123;\n      UserDetails user = userDetailsService.loadUserByUsername((String) map.get(USERNAME));\n      authorities = user.getAuthorities();\n      principal = user;\n    &#125;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> UsernamePasswordAuthenticationToken(principal, <span class=\"hljs-string\">\"N/A\"</span>, authorities);\n  &#125;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;\n&#125;</code></pre>\n<p>通过jwt方式进行认证的会执行<code>DefaultUserAuthenticationConverter</code>代码，其中的userDetailsService是null，所以返回的principal就只有用户名。</p>\n<p>可以通过在创建<code>DefaultUserAuthenticationConverter</code>时，给他set上userDetailsService，这样就获取更多的信息了。</p>\n<p>如下：</p>\n<pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Bean</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> JwtAccessTokenConverter <span class=\"hljs-title\">jwtAccessTokenConverter</span><span class=\"hljs-params\">()</span> </span>&#123;\n    JwtAccessTokenConverter jwtAccessTokenConverter = <span class=\"hljs-keyword\">new</span> JwtAccessTokenConverter();\n    jwtAccessTokenConverter.setSigningKey(<span class=\"hljs-string\">\"demo\"</span>);\n    <span class=\"hljs-keyword\">final</span> AccessTokenConverter accessTokenConverter = jwtAccessTokenConverter.getAccessTokenConverter();\n    <span class=\"hljs-keyword\">if</span> (accessTokenConverter <span class=\"hljs-keyword\">instanceof</span> DefaultAccessTokenConverter) &#123;\n        ((DefaultAccessTokenConverter) accessTokenConverter).setUserTokenConverter(userAuthenticationConverter());\n    &#125;\n    <span class=\"hljs-keyword\">return</span> jwtAccessTokenConverter;\n&#125;\n\n<span class=\"hljs-meta\">@Bean</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> UserAuthenticationConverter <span class=\"hljs-title\">userAuthenticationConverter</span><span class=\"hljs-params\">()</span> </span>&#123;\n    DefaultUserAuthenticationConverter defaultUserAuthenticationConverter = <span class=\"hljs-keyword\">new</span> DefaultUserAuthenticationConverter();\n    defaultUserAuthenticationConverter.setUserDetailsService(userDetailsService);\n    <span class=\"hljs-keyword\">return</span> defaultUserAuthenticationConverter;\n&#125;</code></pre>"},{"title":"SpringBoot整合SpringSecurity简单实现登入登出从零搭建","date":"2018-11-12T02:24:30.000Z","_content":"\n\n\n1 . 新建一个spring-security-login的maven项目 ，pom.xml添加基本依赖 :\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.wuxicloud</groupId>\n    <artifactId>spring-security-login</artifactId>\n    <version>1.0</version>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.5.6.RELEASE</version>\n    </parent>\n    <properties>\n        <author>EalenXie</author>\n        <description>SpringBoot整合SpringSecurity实现简单登入登出</description>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-jpa</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-security</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-freemarker</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-aop</artifactId>\n        </dependency>\n        <!--alibaba-->\n        <dependency>\n            <groupId>com.alibaba</groupId>\n            <artifactId>druid</artifactId>\n            <version>1.0.24</version>\n        </dependency>\n        <dependency>\n            <groupId>com.alibaba</groupId>\n            <artifactId>fastjson</artifactId>\n            <version>1.2.31</version>\n        </dependency>\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <scope>runtime</scope>\n        </dependency>\n    </dependencies>\n</project>\n```\n\n2 . 准备你的数据库，设计表结构，要用户使用登入登出，新建用户表。\n\n```sql\nDROP TABLE IF EXISTS `user`;\nCREATE TABLE `user`  (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `user_uuid` varchar(70) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,\n  `username` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,\n  `password` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,\n  `email` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,\n  `telephone` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,\n  `role` int(10) DEFAULT NULL,\n  `image` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,\n  `last_ip` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,\n  `last_time` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,\n  PRIMARY KEY (`id`) USING BTREE\n) ENGINE = InnoDB AUTO_INCREMENT = 2 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;\n\nSET FOREIGN_KEY_CHECKS = 1;\n```\n\n3 . 用户对象User.java :\n\n```java\nimport javax.persistence.*;\n\n/**\n * Created by EalenXie on 2018/7/5 15:17\n */\n@Entity\n@Table(name = \"USER\")\npublic class User {\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    private Integer id;\n    private String user_uuid;   //用户UUID\n    private String username;    //用户名\n    private String password;    //用户密码\n    private String email;       //用户邮箱\n    private String telephone;   //电话号码\n    private String role;        //用户角色\n    private String image;       //用户头像\n    private String last_ip;     //上次登录IP\n    private String last_time;   //上次登录时间\n\n    public Integer getId() {\n        return id;\n    }\n\n    public String getRole() {\n        return role;\n    }\n\n    public void setRole(String role) {\n        this.role = role;\n    }\n\n    public String getImage() {\n        return image;\n    }\n\n    public void setImage(String image) {\n        this.image = image;\n    }\n\n    public void setId(Integer id) {\n        this.id = id;\n    }\n\n\n    public String getUsername() {\n        return username;\n    }\n\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        this.email = email;\n    }\n\n    public String getTelephone() {\n        return telephone;\n    }\n\n    public void setTelephone(String telephone) {\n        this.telephone = telephone;\n    }\n\n    public String getPassword() {\n        return password;\n    }\n\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    public String getUser_uuid() {\n        return user_uuid;\n    }\n\n    public void setUser_uuid(String user_uuid) {\n        this.user_uuid = user_uuid;\n    }\n\n    public String getLast_ip() {\n        return last_ip;\n    }\n\n    public void setLast_ip(String last_ip) {\n        this.last_ip = last_ip;\n    }\n\n    public String getLast_time() {\n        return last_time;\n    }\n\n    public void setLast_time(String last_time) {\n        this.last_time = last_time;\n    }\n\n    @Override\n    public String toString() {\n        return \"User{\" +\n                \"id=\" + id +\n                \", user_uuid='\" + user_uuid + '\\'' +\n                \", username='\" + username + '\\'' +\n                \", password='\" + password + '\\'' +\n                \", email='\" + email + '\\'' +\n                \", telephone='\" + telephone + '\\'' +\n                \", role='\" + role + '\\'' +\n                \", image='\" + image + '\\'' +\n                \", last_ip='\" + last_ip + '\\'' +\n                \", last_time='\" + last_time + '\\'' +\n                '}';\n    }\n}\n```\n\n4 . application.yml配置一些基本属性\n\n```yaml\nspring:\n  resources:\n    static-locations: classpath:/\n  freemarker:\n    template-loader-path: classpath:/templates/\n    suffix: .html\n    content-type: text/html\n    charset: UTF-8\n  datasource:\n      url: jdbc:mysql://localhost:3306/yourdatabase\n      username: yourname\n      password: yourpass\n      driver-class-name: com.mysql.jdbc.Driver\n      type: com.alibaba.druid.pool.DruidDataSource\nserver:\n  port: 8083\n  error:\n    whitelabel:\n      enabled: true\n```\n\n5 . 考虑我们应用的效率 , 可以配置数据源和线程池 :\n\n```java\npackage com.wuxicloud.config;\n\nimport com.alibaba.druid.pool.DruidDataSource;\nimport com.alibaba.druid.pool.DruidDataSourceFactory;\nimport com.alibaba.druid.support.http.StatViewServlet;\nimport com.alibaba.druid.support.http.WebStatFilter;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.boot.web.servlet.FilterRegistrationBean;\nimport org.springframework.boot.web.servlet.ServletRegistrationBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.env.*;\n\nimport javax.sql.DataSource;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Properties;\n\n@Configuration\npublic class DruidConfig {\n    private static final String DB_PREFIX = \"spring.datasource.\";\n\n    @Autowired\n    private Environment environment;\n\n    @Bean\n    @ConfigurationProperties(prefix = DB_PREFIX)\n    public DataSource druidDataSource() {\n        Properties dbProperties = new Properties();\n        Map<String, Object> map = new HashMap<>();\n        for (PropertySource<?> propertySource : ((AbstractEnvironment) environment).getPropertySources()) {\n            getPropertiesFromSource(propertySource, map);\n        }\n        dbProperties.putAll(map);\n        DruidDataSource dds;\n        try {\n            dds = (DruidDataSource) DruidDataSourceFactory.createDataSource(dbProperties);\n            dds.init();\n        } catch (Exception e) {\n            throw new RuntimeException(\"load datasource error, dbProperties is :\" + dbProperties, e);\n        }\n        return dds;\n    }\n\n    private void getPropertiesFromSource(PropertySource<?> propertySource, Map<String, Object> map) {\n        if (propertySource instanceof MapPropertySource) {\n            for (String key : ((MapPropertySource) propertySource).getPropertyNames()) {\n                if (key.startsWith(DB_PREFIX))\n                    map.put(key.replaceFirst(DB_PREFIX, \"\"), propertySource.getProperty(key));\n                else if (key.startsWith(DB_PREFIX))\n                    map.put(key.replaceFirst(DB_PREFIX, \"\"), propertySource.getProperty(key));\n            }\n        }\n\n        if (propertySource instanceof CompositePropertySource) {\n            for (PropertySource<?> s : ((CompositePropertySource) propertySource).getPropertySources()) {\n                getPropertiesFromSource(s, map);\n            }\n        }\n    }\n\n    @Bean\n    public ServletRegistrationBean druidServlet() {\n        return new ServletRegistrationBean(new StatViewServlet(), \"/druid/*\");\n    }\n\n    @Bean\n    public FilterRegistrationBean filterRegistrationBean() {\n        FilterRegistrationBean filterRegistrationBean = new FilterRegistrationBean();\n        filterRegistrationBean.setFilter(new WebStatFilter());\n        filterRegistrationBean.addUrlPatterns(\"/*\");\n        filterRegistrationBean.addInitParameter(\"exclusions\", \"*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*\");\n        return filterRegistrationBean;\n    }\n}\n```\n\n配置线程池 :\n\n```java\npackage com.wuxicloud.config;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.scheduling.annotation.EnableAsync;\nimport org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;\n\nimport java.util.concurrent.Executor;\nimport java.util.concurrent.ThreadPoolExecutor;\n\n@Configuration\n@EnableAsync\npublic class ThreadPoolConfig {\n    @Bean\n    public Executor getExecutor() {\n        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();\n        executor.setCorePoolSize(5);//线程池维护线程的最少数量\n        executor.setMaxPoolSize(30);//线程池维护线程的最大数量\n        executor.setQueueCapacity(8); //缓存队列\n        executor.setRejectedExecutionHandler(new ThreadPoolExecutor.CallerRunsPolicy()); //对拒绝task的处理策略\n        executor.setKeepAliveSeconds(60);//允许的空闲时间\n        executor.initialize();\n        return executor;\n    }\n}\n```\n\n6.用户需要根据用户名进行登录，访问数据库 :\n\n```java\nimport com.wuxicloud.model.User;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\n/**\n * Created by EalenXie on 2018/7/11 14:23\n */\npublic interface UserRepository extends JpaRepository<User, Integer> {\n\n    User findByUsername(String username);\n\n}\n```\n\n7.构建真正用于SpringSecurity登录的安全用户(UserDetails)，我这里使用新建了一个POJO来实现 :\n\n```java\npackage com.wuxicloud.security;\n\nimport com.wuxicloud.model.User;\nimport org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.core.authority.SimpleGrantedAuthority;\nimport org.springframework.security.core.userdetails.UserDetails;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\n\npublic class SecurityUser extends User implements UserDetails {\n    private static final long serialVersionUID = 1L;\n\n    public SecurityUser(User user) {\n        if (user != null) {\n            this.setUser_uuid(user.getUser_uuid());\n            this.setUsername(user.getUsername());\n            this.setPassword(user.getPassword());\n            this.setEmail(user.getEmail());\n            this.setTelephone(user.getTelephone());\n            this.setRole(user.getRole());\n            this.setImage(user.getImage());\n            this.setLast_ip(user.getLast_ip());\n            this.setLast_time(user.getLast_time());\n        }\n    }\n\n    @Override\n    public Collection<? extends GrantedAuthority> getAuthorities() {\n        Collection<GrantedAuthority> authorities = new ArrayList<>();\n        String username = this.getUsername();\n        if (username != null) {\n            SimpleGrantedAuthority authority = new SimpleGrantedAuthority(username);\n            authorities.add(authority);\n        }\n        return authorities;\n    }\n\n    @Override\n    public boolean isAccountNonExpired() {\n        return true;\n    }\n\n    @Override\n    public boolean isAccountNonLocked() {\n        return true;\n    }\n\n    @Override\n    public boolean isCredentialsNonExpired() {\n        return true;\n    }\n\n    @Override\n    public boolean isEnabled() {\n        return true;\n    }\n}\n```\n\n8 . 核心配置，配置SpringSecurity访问策略，包括登录处理，登出处理，资源访问，密码基本加密。\n\n```java\npackage com.wuxicloud.config;\n\nimport com.wuxicloud.dao.UserRepository;\nimport com.wuxicloud.model.User;\nimport com.wuxicloud.security.SecurityUser;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.core.userdetails.UsernameNotFoundException;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler;\nimport org.springframework.security.web.authentication.logout.LogoutSuccessHandler;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\n\n/**\n * Created by EalenXie on 2018/1/11.\n */\n@Configuration\n@EnableWebSecurity\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n    private static final Logger logger = LoggerFactory.getLogger(WebSecurityConfig.class);\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception { //配置策略\n        http.csrf().disable();\n        http.authorizeRequests().\n                antMatchers(\"/static/**\").permitAll().anyRequest().authenticated().\n                and().formLogin().loginPage(\"/login\").permitAll().successHandler(loginSuccessHandler()).\n                and().logout().permitAll().invalidateHttpSession(true).\n                deleteCookies(\"JSESSIONID\").logoutSuccessHandler(logoutSuccessHandler()).\n                and().sessionManagement().maximumSessions(10).expiredUrl(\"/login\");\n    }\n\n    @Autowired\n    public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {\n        auth.userDetailsService(userDetailsService()).passwordEncoder(passwordEncoder());\n        auth.eraseCredentials(false);\n    }\n\n    @Bean\n    public BCryptPasswordEncoder passwordEncoder() { //密码加密\n        return new BCryptPasswordEncoder(4);\n    }\n\n    @Bean\n    public LogoutSuccessHandler logoutSuccessHandler() { //登出处理\n        return new LogoutSuccessHandler() {\n            @Override\n            public void onLogoutSuccess(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Authentication authentication) throws IOException, ServletException {\n                try {\n                    SecurityUser user = (SecurityUser) authentication.getPrincipal();\n                    logger.info(\"USER : \" + user.getUsername() + \" LOGOUT SUCCESS !  \");\n                } catch (Exception e) {\n                    logger.info(\"LOGOUT EXCEPTION , e : \" + e.getMessage());\n                }\n                httpServletResponse.sendRedirect(\"/login\");\n            }\n        };\n    }\n\n    @Bean\n    public SavedRequestAwareAuthenticationSuccessHandler loginSuccessHandler() { //登入处理\n        return new SavedRequestAwareAuthenticationSuccessHandler() {\n            @Override\n            public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication) throws IOException, ServletException {\n                User userDetails = (User) authentication.getPrincipal();\n                logger.info(\"USER : \" + userDetails.getUsername() + \" LOGIN SUCCESS !  \");\n                super.onAuthenticationSuccess(request, response, authentication);\n            }\n        };\n    }\n    @Bean\n    public UserDetailsService userDetailsService() {    //用户登录实现\n        return new UserDetailsService() {\n            @Autowired\n            private UserRepository userRepository;\n\n            @Override\n            public UserDetails loadUserByUsername(String s) throws UsernameNotFoundException {\n                User user = userRepository.findByUsername(s);\n                if (user == null) throw new UsernameNotFoundException(\"Username \" + s + \" not found\");\n                return new SecurityUser(user);\n            }\n        };\n    }\n}\n```\n\n9.至此，已经基本将配置搭建好了，从上面核心可以看出，配置的登录页的url 为/login，可以创建基本的Controller来验证登录了。\n\n```java\npackage com.wuxicloud.web;\n\nimport com.wuxicloud.model.User;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.context.SecurityContext;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.context.request.RequestContextHolder;\nimport org.springframework.web.context.request.ServletRequestAttributes;\n\nimport javax.servlet.http.HttpServletRequest;\n\n/**\n * Created by EalenXie on 2018/1/11.\n */\n@Controller\npublic class LoginController {\n\n    @RequestMapping(value = \"/login\", method = RequestMethod.GET)\n    public String login() {\n        return \"login\";\n    }\n\n    @RequestMapping(\"/\")\n    public String root() {\n        return \"index\";\n    }\n\n    public User getUser() { //为了session从获取用户信息,可以配置如下\n        User user = new User();\n        SecurityContext ctx = SecurityContextHolder.getContext();\n        Authentication auth = ctx.getAuthentication();\n        if (auth.getPrincipal() instanceof UserDetails) user = (User) auth.getPrincipal();\n        return user;\n    }\n\n    public HttpServletRequest getRequest() {\n        return ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();\n    }\n}\n```\n\n11 . SpringBoot基本的启动类 Application.class\n\n```java\npackage com.wuxicloud;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n/**\n * Created by EalenXie on 2018/7/11 15:01\n */\n@SpringBootApplication\npublic class Application {\n\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n    }\n}\n```\n\n11.根据Freemark和Controller里面可看出配置的视图为 /templates/index.html和/templates/index.login。所以创建基本的登录页面和登录成功页面。\n\nlogin.html\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>用户登录</title>\n</head>\n<body>\n<form action=\"/login\" method=\"post\">\n    用户名 : <input type=\"text\" name=\"username\"/>\n    密码 : <input type=\"password\" name=\"password\"/>\n    <input type=\"submit\" value=\"登录\">\n</form>\n</body>\n</html>\n```\n\n注意 : 这里方法必须是POST，因为GET在controller被重写了，用户名的name属性必须是username，密码的name属性必须是password\n\nindex.html\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>首页</title>\n    <#assign  user=Session.SPRING_SECURITY_CONTEXT.authentication.principal/>\n</head>\n<body>\n欢迎你,${user.username}<br/>\n<a href=\"/logout\">注销</a>\n</body>\n</html>\n```\n\n注意 : 为了从session中获取到登录的用户信息，根据配置SpringSecurity的用户信息会放在Session.SPRING_SECURITY_CONTEXT.authentication.principal里面，根据FreeMarker模板引擎的特点，可以通过这种方式进行获取 : <#assign user=Session.SPRING_SECURITY_CONTEXT.authentication.principal/>\n\n12 . 为了方便测试，我们在数据库中插入一条记录，注意，从WebSecurity.java配置可以知道密码会被加密，所以我们插入的用户密码应该是被加密的。\n\n这里假如我们使用的密码为admin，则加密过后的字符串是 $2a$04$1OiUa3yEchBXQBJI8JaMyuKZNlwzWvfeQjKAHnwAEQwnacjt6ukqu\n\n　测试类如下 :\n\n```java\npackage com.wuxicloud.security;\n\nimport org.junit.Test;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\n\n/**\n * Created by EalenXie on 2018/7/11 15:13\n */\npublic class TestEncoder {\n\n    @Test\n    public void encoder() {\n        String password = \"admin\";\n        BCryptPasswordEncoder encoder = new BCryptPasswordEncoder(4);\n        String enPassword = encoder.encode(password);\n        System.out.println(enPassword);\n    }\n}\n```\n\n测试登录，从上面的加密的密码我们插入一条数据到数据库中。\n\n```sql\nINSERT INTO `USER` VALUES (1, 'd242ae49-4734-411e-8c8d-d2b09e87c3c8', 'EalenXie', '$2a$04$petEXpgcLKfdLN4TYFxK0u8ryAzmZDHLASWLX/XXm8hgQar1C892W', 'SSSSS', 'ssssssssss', 1, 'g', '0:0:0:0:0:0:0:1', '2018-07-11 11:26:27');\n```\n\n13 . 启动项目进行测试 ，访问 localhost:8083\n\n![img](https://images2018.cnblogs.com/blog/994599/201807/994599-20180711154124007-1732228495.png)\n\n点击登录，登录失败会留在当前页面重新登录，成功则进入index.html\n\n登录如果成功，可以看到后台打印登录成功的日志 :\n\n![img](https://images2018.cnblogs.com/blog/994599/201807/994599-20180711154258208-1381186085.png)\n\n页面进入index.html :\n\n![img](https://images2018.cnblogs.com/blog/994599/201807/994599-20180711154337891-1871092340.png)\n\n点击注销 ，则回重新跳转到login.html，后台也会打印登出成功的日志 :\n\n![img](https://images2018.cnblogs.com/blog/994599/201807/994599-20180711154539312-15547252.png)\n\n\n> 技术栈 : SpringBoot + SpringSecurity + jpa + freemark ，完整项目地址 : <https://github.com/EalenXie/spring-security-login>\n\n\n","source":"_posts/0007-spring-boot-integrate-security.md","raw":"---\ntitle: SpringBoot整合SpringSecurity简单实现登入登出从零搭建\ndate: 2018-11-12 10:24:30\ntags:\n    - Java\ncategories:\n    - 后端\n---\n\n\n\n1 . 新建一个spring-security-login的maven项目 ，pom.xml添加基本依赖 :\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.wuxicloud</groupId>\n    <artifactId>spring-security-login</artifactId>\n    <version>1.0</version>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.5.6.RELEASE</version>\n    </parent>\n    <properties>\n        <author>EalenXie</author>\n        <description>SpringBoot整合SpringSecurity实现简单登入登出</description>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-jpa</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-security</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-freemarker</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-aop</artifactId>\n        </dependency>\n        <!--alibaba-->\n        <dependency>\n            <groupId>com.alibaba</groupId>\n            <artifactId>druid</artifactId>\n            <version>1.0.24</version>\n        </dependency>\n        <dependency>\n            <groupId>com.alibaba</groupId>\n            <artifactId>fastjson</artifactId>\n            <version>1.2.31</version>\n        </dependency>\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <scope>runtime</scope>\n        </dependency>\n    </dependencies>\n</project>\n```\n\n2 . 准备你的数据库，设计表结构，要用户使用登入登出，新建用户表。\n\n```sql\nDROP TABLE IF EXISTS `user`;\nCREATE TABLE `user`  (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `user_uuid` varchar(70) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,\n  `username` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,\n  `password` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,\n  `email` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,\n  `telephone` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,\n  `role` int(10) DEFAULT NULL,\n  `image` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,\n  `last_ip` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,\n  `last_time` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,\n  PRIMARY KEY (`id`) USING BTREE\n) ENGINE = InnoDB AUTO_INCREMENT = 2 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;\n\nSET FOREIGN_KEY_CHECKS = 1;\n```\n\n3 . 用户对象User.java :\n\n```java\nimport javax.persistence.*;\n\n/**\n * Created by EalenXie on 2018/7/5 15:17\n */\n@Entity\n@Table(name = \"USER\")\npublic class User {\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    private Integer id;\n    private String user_uuid;   //用户UUID\n    private String username;    //用户名\n    private String password;    //用户密码\n    private String email;       //用户邮箱\n    private String telephone;   //电话号码\n    private String role;        //用户角色\n    private String image;       //用户头像\n    private String last_ip;     //上次登录IP\n    private String last_time;   //上次登录时间\n\n    public Integer getId() {\n        return id;\n    }\n\n    public String getRole() {\n        return role;\n    }\n\n    public void setRole(String role) {\n        this.role = role;\n    }\n\n    public String getImage() {\n        return image;\n    }\n\n    public void setImage(String image) {\n        this.image = image;\n    }\n\n    public void setId(Integer id) {\n        this.id = id;\n    }\n\n\n    public String getUsername() {\n        return username;\n    }\n\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        this.email = email;\n    }\n\n    public String getTelephone() {\n        return telephone;\n    }\n\n    public void setTelephone(String telephone) {\n        this.telephone = telephone;\n    }\n\n    public String getPassword() {\n        return password;\n    }\n\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    public String getUser_uuid() {\n        return user_uuid;\n    }\n\n    public void setUser_uuid(String user_uuid) {\n        this.user_uuid = user_uuid;\n    }\n\n    public String getLast_ip() {\n        return last_ip;\n    }\n\n    public void setLast_ip(String last_ip) {\n        this.last_ip = last_ip;\n    }\n\n    public String getLast_time() {\n        return last_time;\n    }\n\n    public void setLast_time(String last_time) {\n        this.last_time = last_time;\n    }\n\n    @Override\n    public String toString() {\n        return \"User{\" +\n                \"id=\" + id +\n                \", user_uuid='\" + user_uuid + '\\'' +\n                \", username='\" + username + '\\'' +\n                \", password='\" + password + '\\'' +\n                \", email='\" + email + '\\'' +\n                \", telephone='\" + telephone + '\\'' +\n                \", role='\" + role + '\\'' +\n                \", image='\" + image + '\\'' +\n                \", last_ip='\" + last_ip + '\\'' +\n                \", last_time='\" + last_time + '\\'' +\n                '}';\n    }\n}\n```\n\n4 . application.yml配置一些基本属性\n\n```yaml\nspring:\n  resources:\n    static-locations: classpath:/\n  freemarker:\n    template-loader-path: classpath:/templates/\n    suffix: .html\n    content-type: text/html\n    charset: UTF-8\n  datasource:\n      url: jdbc:mysql://localhost:3306/yourdatabase\n      username: yourname\n      password: yourpass\n      driver-class-name: com.mysql.jdbc.Driver\n      type: com.alibaba.druid.pool.DruidDataSource\nserver:\n  port: 8083\n  error:\n    whitelabel:\n      enabled: true\n```\n\n5 . 考虑我们应用的效率 , 可以配置数据源和线程池 :\n\n```java\npackage com.wuxicloud.config;\n\nimport com.alibaba.druid.pool.DruidDataSource;\nimport com.alibaba.druid.pool.DruidDataSourceFactory;\nimport com.alibaba.druid.support.http.StatViewServlet;\nimport com.alibaba.druid.support.http.WebStatFilter;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.boot.web.servlet.FilterRegistrationBean;\nimport org.springframework.boot.web.servlet.ServletRegistrationBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.env.*;\n\nimport javax.sql.DataSource;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Properties;\n\n@Configuration\npublic class DruidConfig {\n    private static final String DB_PREFIX = \"spring.datasource.\";\n\n    @Autowired\n    private Environment environment;\n\n    @Bean\n    @ConfigurationProperties(prefix = DB_PREFIX)\n    public DataSource druidDataSource() {\n        Properties dbProperties = new Properties();\n        Map<String, Object> map = new HashMap<>();\n        for (PropertySource<?> propertySource : ((AbstractEnvironment) environment).getPropertySources()) {\n            getPropertiesFromSource(propertySource, map);\n        }\n        dbProperties.putAll(map);\n        DruidDataSource dds;\n        try {\n            dds = (DruidDataSource) DruidDataSourceFactory.createDataSource(dbProperties);\n            dds.init();\n        } catch (Exception e) {\n            throw new RuntimeException(\"load datasource error, dbProperties is :\" + dbProperties, e);\n        }\n        return dds;\n    }\n\n    private void getPropertiesFromSource(PropertySource<?> propertySource, Map<String, Object> map) {\n        if (propertySource instanceof MapPropertySource) {\n            for (String key : ((MapPropertySource) propertySource).getPropertyNames()) {\n                if (key.startsWith(DB_PREFIX))\n                    map.put(key.replaceFirst(DB_PREFIX, \"\"), propertySource.getProperty(key));\n                else if (key.startsWith(DB_PREFIX))\n                    map.put(key.replaceFirst(DB_PREFIX, \"\"), propertySource.getProperty(key));\n            }\n        }\n\n        if (propertySource instanceof CompositePropertySource) {\n            for (PropertySource<?> s : ((CompositePropertySource) propertySource).getPropertySources()) {\n                getPropertiesFromSource(s, map);\n            }\n        }\n    }\n\n    @Bean\n    public ServletRegistrationBean druidServlet() {\n        return new ServletRegistrationBean(new StatViewServlet(), \"/druid/*\");\n    }\n\n    @Bean\n    public FilterRegistrationBean filterRegistrationBean() {\n        FilterRegistrationBean filterRegistrationBean = new FilterRegistrationBean();\n        filterRegistrationBean.setFilter(new WebStatFilter());\n        filterRegistrationBean.addUrlPatterns(\"/*\");\n        filterRegistrationBean.addInitParameter(\"exclusions\", \"*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*\");\n        return filterRegistrationBean;\n    }\n}\n```\n\n配置线程池 :\n\n```java\npackage com.wuxicloud.config;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.scheduling.annotation.EnableAsync;\nimport org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;\n\nimport java.util.concurrent.Executor;\nimport java.util.concurrent.ThreadPoolExecutor;\n\n@Configuration\n@EnableAsync\npublic class ThreadPoolConfig {\n    @Bean\n    public Executor getExecutor() {\n        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();\n        executor.setCorePoolSize(5);//线程池维护线程的最少数量\n        executor.setMaxPoolSize(30);//线程池维护线程的最大数量\n        executor.setQueueCapacity(8); //缓存队列\n        executor.setRejectedExecutionHandler(new ThreadPoolExecutor.CallerRunsPolicy()); //对拒绝task的处理策略\n        executor.setKeepAliveSeconds(60);//允许的空闲时间\n        executor.initialize();\n        return executor;\n    }\n}\n```\n\n6.用户需要根据用户名进行登录，访问数据库 :\n\n```java\nimport com.wuxicloud.model.User;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\n/**\n * Created by EalenXie on 2018/7/11 14:23\n */\npublic interface UserRepository extends JpaRepository<User, Integer> {\n\n    User findByUsername(String username);\n\n}\n```\n\n7.构建真正用于SpringSecurity登录的安全用户(UserDetails)，我这里使用新建了一个POJO来实现 :\n\n```java\npackage com.wuxicloud.security;\n\nimport com.wuxicloud.model.User;\nimport org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.core.authority.SimpleGrantedAuthority;\nimport org.springframework.security.core.userdetails.UserDetails;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\n\npublic class SecurityUser extends User implements UserDetails {\n    private static final long serialVersionUID = 1L;\n\n    public SecurityUser(User user) {\n        if (user != null) {\n            this.setUser_uuid(user.getUser_uuid());\n            this.setUsername(user.getUsername());\n            this.setPassword(user.getPassword());\n            this.setEmail(user.getEmail());\n            this.setTelephone(user.getTelephone());\n            this.setRole(user.getRole());\n            this.setImage(user.getImage());\n            this.setLast_ip(user.getLast_ip());\n            this.setLast_time(user.getLast_time());\n        }\n    }\n\n    @Override\n    public Collection<? extends GrantedAuthority> getAuthorities() {\n        Collection<GrantedAuthority> authorities = new ArrayList<>();\n        String username = this.getUsername();\n        if (username != null) {\n            SimpleGrantedAuthority authority = new SimpleGrantedAuthority(username);\n            authorities.add(authority);\n        }\n        return authorities;\n    }\n\n    @Override\n    public boolean isAccountNonExpired() {\n        return true;\n    }\n\n    @Override\n    public boolean isAccountNonLocked() {\n        return true;\n    }\n\n    @Override\n    public boolean isCredentialsNonExpired() {\n        return true;\n    }\n\n    @Override\n    public boolean isEnabled() {\n        return true;\n    }\n}\n```\n\n8 . 核心配置，配置SpringSecurity访问策略，包括登录处理，登出处理，资源访问，密码基本加密。\n\n```java\npackage com.wuxicloud.config;\n\nimport com.wuxicloud.dao.UserRepository;\nimport com.wuxicloud.model.User;\nimport com.wuxicloud.security.SecurityUser;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.core.userdetails.UsernameNotFoundException;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler;\nimport org.springframework.security.web.authentication.logout.LogoutSuccessHandler;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\n\n/**\n * Created by EalenXie on 2018/1/11.\n */\n@Configuration\n@EnableWebSecurity\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n    private static final Logger logger = LoggerFactory.getLogger(WebSecurityConfig.class);\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception { //配置策略\n        http.csrf().disable();\n        http.authorizeRequests().\n                antMatchers(\"/static/**\").permitAll().anyRequest().authenticated().\n                and().formLogin().loginPage(\"/login\").permitAll().successHandler(loginSuccessHandler()).\n                and().logout().permitAll().invalidateHttpSession(true).\n                deleteCookies(\"JSESSIONID\").logoutSuccessHandler(logoutSuccessHandler()).\n                and().sessionManagement().maximumSessions(10).expiredUrl(\"/login\");\n    }\n\n    @Autowired\n    public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {\n        auth.userDetailsService(userDetailsService()).passwordEncoder(passwordEncoder());\n        auth.eraseCredentials(false);\n    }\n\n    @Bean\n    public BCryptPasswordEncoder passwordEncoder() { //密码加密\n        return new BCryptPasswordEncoder(4);\n    }\n\n    @Bean\n    public LogoutSuccessHandler logoutSuccessHandler() { //登出处理\n        return new LogoutSuccessHandler() {\n            @Override\n            public void onLogoutSuccess(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Authentication authentication) throws IOException, ServletException {\n                try {\n                    SecurityUser user = (SecurityUser) authentication.getPrincipal();\n                    logger.info(\"USER : \" + user.getUsername() + \" LOGOUT SUCCESS !  \");\n                } catch (Exception e) {\n                    logger.info(\"LOGOUT EXCEPTION , e : \" + e.getMessage());\n                }\n                httpServletResponse.sendRedirect(\"/login\");\n            }\n        };\n    }\n\n    @Bean\n    public SavedRequestAwareAuthenticationSuccessHandler loginSuccessHandler() { //登入处理\n        return new SavedRequestAwareAuthenticationSuccessHandler() {\n            @Override\n            public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication) throws IOException, ServletException {\n                User userDetails = (User) authentication.getPrincipal();\n                logger.info(\"USER : \" + userDetails.getUsername() + \" LOGIN SUCCESS !  \");\n                super.onAuthenticationSuccess(request, response, authentication);\n            }\n        };\n    }\n    @Bean\n    public UserDetailsService userDetailsService() {    //用户登录实现\n        return new UserDetailsService() {\n            @Autowired\n            private UserRepository userRepository;\n\n            @Override\n            public UserDetails loadUserByUsername(String s) throws UsernameNotFoundException {\n                User user = userRepository.findByUsername(s);\n                if (user == null) throw new UsernameNotFoundException(\"Username \" + s + \" not found\");\n                return new SecurityUser(user);\n            }\n        };\n    }\n}\n```\n\n9.至此，已经基本将配置搭建好了，从上面核心可以看出，配置的登录页的url 为/login，可以创建基本的Controller来验证登录了。\n\n```java\npackage com.wuxicloud.web;\n\nimport com.wuxicloud.model.User;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.context.SecurityContext;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.context.request.RequestContextHolder;\nimport org.springframework.web.context.request.ServletRequestAttributes;\n\nimport javax.servlet.http.HttpServletRequest;\n\n/**\n * Created by EalenXie on 2018/1/11.\n */\n@Controller\npublic class LoginController {\n\n    @RequestMapping(value = \"/login\", method = RequestMethod.GET)\n    public String login() {\n        return \"login\";\n    }\n\n    @RequestMapping(\"/\")\n    public String root() {\n        return \"index\";\n    }\n\n    public User getUser() { //为了session从获取用户信息,可以配置如下\n        User user = new User();\n        SecurityContext ctx = SecurityContextHolder.getContext();\n        Authentication auth = ctx.getAuthentication();\n        if (auth.getPrincipal() instanceof UserDetails) user = (User) auth.getPrincipal();\n        return user;\n    }\n\n    public HttpServletRequest getRequest() {\n        return ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();\n    }\n}\n```\n\n11 . SpringBoot基本的启动类 Application.class\n\n```java\npackage com.wuxicloud;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n/**\n * Created by EalenXie on 2018/7/11 15:01\n */\n@SpringBootApplication\npublic class Application {\n\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n    }\n}\n```\n\n11.根据Freemark和Controller里面可看出配置的视图为 /templates/index.html和/templates/index.login。所以创建基本的登录页面和登录成功页面。\n\nlogin.html\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>用户登录</title>\n</head>\n<body>\n<form action=\"/login\" method=\"post\">\n    用户名 : <input type=\"text\" name=\"username\"/>\n    密码 : <input type=\"password\" name=\"password\"/>\n    <input type=\"submit\" value=\"登录\">\n</form>\n</body>\n</html>\n```\n\n注意 : 这里方法必须是POST，因为GET在controller被重写了，用户名的name属性必须是username，密码的name属性必须是password\n\nindex.html\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>首页</title>\n    <#assign  user=Session.SPRING_SECURITY_CONTEXT.authentication.principal/>\n</head>\n<body>\n欢迎你,${user.username}<br/>\n<a href=\"/logout\">注销</a>\n</body>\n</html>\n```\n\n注意 : 为了从session中获取到登录的用户信息，根据配置SpringSecurity的用户信息会放在Session.SPRING_SECURITY_CONTEXT.authentication.principal里面，根据FreeMarker模板引擎的特点，可以通过这种方式进行获取 : <#assign user=Session.SPRING_SECURITY_CONTEXT.authentication.principal/>\n\n12 . 为了方便测试，我们在数据库中插入一条记录，注意，从WebSecurity.java配置可以知道密码会被加密，所以我们插入的用户密码应该是被加密的。\n\n这里假如我们使用的密码为admin，则加密过后的字符串是 $2a$04$1OiUa3yEchBXQBJI8JaMyuKZNlwzWvfeQjKAHnwAEQwnacjt6ukqu\n\n　测试类如下 :\n\n```java\npackage com.wuxicloud.security;\n\nimport org.junit.Test;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\n\n/**\n * Created by EalenXie on 2018/7/11 15:13\n */\npublic class TestEncoder {\n\n    @Test\n    public void encoder() {\n        String password = \"admin\";\n        BCryptPasswordEncoder encoder = new BCryptPasswordEncoder(4);\n        String enPassword = encoder.encode(password);\n        System.out.println(enPassword);\n    }\n}\n```\n\n测试登录，从上面的加密的密码我们插入一条数据到数据库中。\n\n```sql\nINSERT INTO `USER` VALUES (1, 'd242ae49-4734-411e-8c8d-d2b09e87c3c8', 'EalenXie', '$2a$04$petEXpgcLKfdLN4TYFxK0u8ryAzmZDHLASWLX/XXm8hgQar1C892W', 'SSSSS', 'ssssssssss', 1, 'g', '0:0:0:0:0:0:0:1', '2018-07-11 11:26:27');\n```\n\n13 . 启动项目进行测试 ，访问 localhost:8083\n\n![img](https://images2018.cnblogs.com/blog/994599/201807/994599-20180711154124007-1732228495.png)\n\n点击登录，登录失败会留在当前页面重新登录，成功则进入index.html\n\n登录如果成功，可以看到后台打印登录成功的日志 :\n\n![img](https://images2018.cnblogs.com/blog/994599/201807/994599-20180711154258208-1381186085.png)\n\n页面进入index.html :\n\n![img](https://images2018.cnblogs.com/blog/994599/201807/994599-20180711154337891-1871092340.png)\n\n点击注销 ，则回重新跳转到login.html，后台也会打印登出成功的日志 :\n\n![img](https://images2018.cnblogs.com/blog/994599/201807/994599-20180711154539312-15547252.png)\n\n\n> 技术栈 : SpringBoot + SpringSecurity + jpa + freemark ，完整项目地址 : <https://github.com/EalenXie/spring-security-login>\n\n\n","slug":"0007-spring-boot-integrate-security","published":1,"updated":"2020-07-17T02:32:01.147Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcpntuft000v04oi9ktdz5lp","content":"<p>1 . 新建一个spring-security-login的maven项目 ，pom.xml添加基本依赖 :</p>\n<pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">project</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">\"http://maven.apache.org/POM/4.0.0\"</span>\n         <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n         <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">modelVersion</span>&gt;</span>4.0.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">modelVersion</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.wuxicloud<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-security-login<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">parent</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.5.6.RELEASE<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">parent</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">properties</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">author</span>&gt;</span>EalenXie<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">author</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">description</span>&gt;</span>SpringBoot整合SpringSecurity实现简单登入登出<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">description</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">properties</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependencies</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-security<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-freemarker<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-aop<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n        <span class=\"hljs-comment\">&lt;!--alibaba--&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.alibaba<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>druid<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.0.24<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.alibaba<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>fastjson<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.2.31<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>mysql<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scope</span>&gt;</span>runtime<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scope</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependencies</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">project</span>&gt;</span></code></pre>\n<p>2 . 准备你的数据库，设计表结构，要用户使用登入登出，新建用户表。</p>\n<pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">DROP</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-keyword\">IF</span> <span class=\"hljs-keyword\">EXISTS</span> <span class=\"hljs-string\">`user`</span>;\n<span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-string\">`user`</span>  (\n  <span class=\"hljs-string\">`id`</span> <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-number\">11</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span> AUTO_INCREMENT,\n  <span class=\"hljs-string\">`user_uuid`</span> <span class=\"hljs-built_in\">varchar</span>(<span class=\"hljs-number\">70</span>) <span class=\"hljs-built_in\">CHARACTER</span> <span class=\"hljs-keyword\">SET</span> utf8 <span class=\"hljs-keyword\">COLLATE</span> utf8_general_ci <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-literal\">NULL</span>,\n  <span class=\"hljs-string\">`username`</span> <span class=\"hljs-built_in\">varchar</span>(<span class=\"hljs-number\">255</span>) <span class=\"hljs-built_in\">CHARACTER</span> <span class=\"hljs-keyword\">SET</span> utf8 <span class=\"hljs-keyword\">COLLATE</span> utf8_general_ci <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-literal\">NULL</span>,\n  <span class=\"hljs-string\">`password`</span> <span class=\"hljs-built_in\">varchar</span>(<span class=\"hljs-number\">255</span>) <span class=\"hljs-built_in\">CHARACTER</span> <span class=\"hljs-keyword\">SET</span> utf8 <span class=\"hljs-keyword\">COLLATE</span> utf8_general_ci <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-literal\">NULL</span>,\n  <span class=\"hljs-string\">`email`</span> <span class=\"hljs-built_in\">varchar</span>(<span class=\"hljs-number\">255</span>) <span class=\"hljs-built_in\">CHARACTER</span> <span class=\"hljs-keyword\">SET</span> utf8 <span class=\"hljs-keyword\">COLLATE</span> utf8_general_ci <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-literal\">NULL</span>,\n  <span class=\"hljs-string\">`telephone`</span> <span class=\"hljs-built_in\">varchar</span>(<span class=\"hljs-number\">255</span>) <span class=\"hljs-built_in\">CHARACTER</span> <span class=\"hljs-keyword\">SET</span> utf8 <span class=\"hljs-keyword\">COLLATE</span> utf8_general_ci <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-literal\">NULL</span>,\n  <span class=\"hljs-string\">`role`</span> <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-number\">10</span>) <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-literal\">NULL</span>,\n  <span class=\"hljs-string\">`image`</span> <span class=\"hljs-built_in\">varchar</span>(<span class=\"hljs-number\">255</span>) <span class=\"hljs-built_in\">CHARACTER</span> <span class=\"hljs-keyword\">SET</span> utf8 <span class=\"hljs-keyword\">COLLATE</span> utf8_general_ci <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-literal\">NULL</span>,\n  <span class=\"hljs-string\">`last_ip`</span> <span class=\"hljs-built_in\">varchar</span>(<span class=\"hljs-number\">255</span>) <span class=\"hljs-built_in\">CHARACTER</span> <span class=\"hljs-keyword\">SET</span> utf8 <span class=\"hljs-keyword\">COLLATE</span> utf8_general_ci <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-literal\">NULL</span>,\n  <span class=\"hljs-string\">`last_time`</span> <span class=\"hljs-built_in\">varchar</span>(<span class=\"hljs-number\">255</span>) <span class=\"hljs-built_in\">CHARACTER</span> <span class=\"hljs-keyword\">SET</span> utf8 <span class=\"hljs-keyword\">COLLATE</span> utf8_general_ci <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-literal\">NULL</span>,\n  PRIMARY <span class=\"hljs-keyword\">KEY</span> (<span class=\"hljs-string\">`id`</span>) <span class=\"hljs-keyword\">USING</span> BTREE\n) <span class=\"hljs-keyword\">ENGINE</span> = <span class=\"hljs-keyword\">InnoDB</span> AUTO_INCREMENT = <span class=\"hljs-number\">2</span> <span class=\"hljs-built_in\">CHARACTER</span> <span class=\"hljs-keyword\">SET</span> = utf8 <span class=\"hljs-keyword\">COLLATE</span> = utf8_general_ci ROW_FORMAT = <span class=\"hljs-keyword\">Compact</span>;\n\n<span class=\"hljs-keyword\">SET</span> FOREIGN_KEY_CHECKS = <span class=\"hljs-number\">1</span>;</code></pre>\n<p>3 . 用户对象User.java :</p>\n<pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> javax.persistence.*;\n\n<span class=\"hljs-comment\">/**\n * Created by EalenXie on 2018/7/5 15:17\n */</span>\n<span class=\"hljs-meta\">@Entity</span>\n<span class=\"hljs-meta\">@Table</span>(name = <span class=\"hljs-string\">\"USER\"</span>)\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">User</span> </span>&#123;\n    <span class=\"hljs-meta\">@Id</span>\n    <span class=\"hljs-meta\">@GeneratedValue</span>(strategy = GenerationType.AUTO)\n    <span class=\"hljs-keyword\">private</span> Integer id;\n    <span class=\"hljs-keyword\">private</span> String user_uuid;   <span class=\"hljs-comment\">//用户UUID</span>\n    <span class=\"hljs-keyword\">private</span> String username;    <span class=\"hljs-comment\">//用户名</span>\n    <span class=\"hljs-keyword\">private</span> String password;    <span class=\"hljs-comment\">//用户密码</span>\n    <span class=\"hljs-keyword\">private</span> String email;       <span class=\"hljs-comment\">//用户邮箱</span>\n    <span class=\"hljs-keyword\">private</span> String telephone;   <span class=\"hljs-comment\">//电话号码</span>\n    <span class=\"hljs-keyword\">private</span> String role;        <span class=\"hljs-comment\">//用户角色</span>\n    <span class=\"hljs-keyword\">private</span> String image;       <span class=\"hljs-comment\">//用户头像</span>\n    <span class=\"hljs-keyword\">private</span> String last_ip;     <span class=\"hljs-comment\">//上次登录IP</span>\n    <span class=\"hljs-keyword\">private</span> String last_time;   <span class=\"hljs-comment\">//上次登录时间</span>\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Integer <span class=\"hljs-title\">getId</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-keyword\">return</span> id;\n    &#125;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getRole</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-keyword\">return</span> role;\n    &#125;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setRole</span><span class=\"hljs-params\">(String role)</span> </span>&#123;\n        <span class=\"hljs-keyword\">this</span>.role = role;\n    &#125;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getImage</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-keyword\">return</span> image;\n    &#125;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setImage</span><span class=\"hljs-params\">(String image)</span> </span>&#123;\n        <span class=\"hljs-keyword\">this</span>.image = image;\n    &#125;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setId</span><span class=\"hljs-params\">(Integer id)</span> </span>&#123;\n        <span class=\"hljs-keyword\">this</span>.id = id;\n    &#125;\n\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getUsername</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-keyword\">return</span> username;\n    &#125;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setUsername</span><span class=\"hljs-params\">(String username)</span> </span>&#123;\n        <span class=\"hljs-keyword\">this</span>.username = username;\n    &#125;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getEmail</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-keyword\">return</span> email;\n    &#125;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setEmail</span><span class=\"hljs-params\">(String email)</span> </span>&#123;\n        <span class=\"hljs-keyword\">this</span>.email = email;\n    &#125;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getTelephone</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-keyword\">return</span> telephone;\n    &#125;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setTelephone</span><span class=\"hljs-params\">(String telephone)</span> </span>&#123;\n        <span class=\"hljs-keyword\">this</span>.telephone = telephone;\n    &#125;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getPassword</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-keyword\">return</span> password;\n    &#125;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setPassword</span><span class=\"hljs-params\">(String password)</span> </span>&#123;\n        <span class=\"hljs-keyword\">this</span>.password = password;\n    &#125;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getUser_uuid</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-keyword\">return</span> user_uuid;\n    &#125;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setUser_uuid</span><span class=\"hljs-params\">(String user_uuid)</span> </span>&#123;\n        <span class=\"hljs-keyword\">this</span>.user_uuid = user_uuid;\n    &#125;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getLast_ip</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-keyword\">return</span> last_ip;\n    &#125;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setLast_ip</span><span class=\"hljs-params\">(String last_ip)</span> </span>&#123;\n        <span class=\"hljs-keyword\">this</span>.last_ip = last_ip;\n    &#125;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getLast_time</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-keyword\">return</span> last_time;\n    &#125;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setLast_time</span><span class=\"hljs-params\">(String last_time)</span> </span>&#123;\n        <span class=\"hljs-keyword\">this</span>.last_time = last_time;\n    &#125;\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">toString</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"User&#123;\"</span> +\n                <span class=\"hljs-string\">\"id=\"</span> + id +\n                <span class=\"hljs-string\">\", user_uuid='\"</span> + user_uuid + <span class=\"hljs-string\">'\\''</span> +\n                <span class=\"hljs-string\">\", username='\"</span> + username + <span class=\"hljs-string\">'\\''</span> +\n                <span class=\"hljs-string\">\", password='\"</span> + password + <span class=\"hljs-string\">'\\''</span> +\n                <span class=\"hljs-string\">\", email='\"</span> + email + <span class=\"hljs-string\">'\\''</span> +\n                <span class=\"hljs-string\">\", telephone='\"</span> + telephone + <span class=\"hljs-string\">'\\''</span> +\n                <span class=\"hljs-string\">\", role='\"</span> + role + <span class=\"hljs-string\">'\\''</span> +\n                <span class=\"hljs-string\">\", image='\"</span> + image + <span class=\"hljs-string\">'\\''</span> +\n                <span class=\"hljs-string\">\", last_ip='\"</span> + last_ip + <span class=\"hljs-string\">'\\''</span> +\n                <span class=\"hljs-string\">\", last_time='\"</span> + last_time + <span class=\"hljs-string\">'\\''</span> +\n                <span class=\"hljs-string\">'&#125;'</span>;\n    &#125;\n&#125;</code></pre>\n<p>4 . application.yml配置一些基本属性</p>\n<pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">spring:</span>\n  <span class=\"hljs-attr\">resources:</span>\n    <span class=\"hljs-attr\">static-locations:</span> <span class=\"hljs-string\">classpath:/</span>\n  <span class=\"hljs-attr\">freemarker:</span>\n    <span class=\"hljs-attr\">template-loader-path:</span> <span class=\"hljs-string\">classpath:/templates/</span>\n    <span class=\"hljs-attr\">suffix:</span> <span class=\"hljs-string\">.html</span>\n    <span class=\"hljs-attr\">content-type:</span> <span class=\"hljs-string\">text/html</span>\n    <span class=\"hljs-attr\">charset:</span> <span class=\"hljs-string\">UTF-8</span>\n  <span class=\"hljs-attr\">datasource:</span>\n      <span class=\"hljs-attr\">url:</span> <span class=\"hljs-string\">jdbc:mysql://localhost:3306/yourdatabase</span>\n      <span class=\"hljs-attr\">username:</span> <span class=\"hljs-string\">yourname</span>\n      <span class=\"hljs-attr\">password:</span> <span class=\"hljs-string\">yourpass</span>\n      <span class=\"hljs-attr\">driver-class-name:</span> <span class=\"hljs-string\">com.mysql.jdbc.Driver</span>\n      <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">com.alibaba.druid.pool.DruidDataSource</span>\n<span class=\"hljs-attr\">server:</span>\n  <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">8083</span>\n  <span class=\"hljs-attr\">error:</span>\n    <span class=\"hljs-attr\">whitelabel:</span>\n      <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">true</span></code></pre>\n<p>5 . 考虑我们应用的效率 , 可以配置数据源和线程池 :</p>\n<pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.wuxicloud.config;\n\n<span class=\"hljs-keyword\">import</span> com.alibaba.druid.pool.DruidDataSource;\n<span class=\"hljs-keyword\">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;\n<span class=\"hljs-keyword\">import</span> com.alibaba.druid.support.http.StatViewServlet;\n<span class=\"hljs-keyword\">import</span> com.alibaba.druid.support.http.WebStatFilter;\n<span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;\n<span class=\"hljs-keyword\">import</span> org.springframework.boot.context.properties.ConfigurationProperties;\n<span class=\"hljs-keyword\">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;\n<span class=\"hljs-keyword\">import</span> org.springframework.boot.web.servlet.ServletRegistrationBean;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Bean;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Configuration;\n<span class=\"hljs-keyword\">import</span> org.springframework.core.env.*;\n\n<span class=\"hljs-keyword\">import</span> javax.sql.DataSource;\n<span class=\"hljs-keyword\">import</span> java.util.HashMap;\n<span class=\"hljs-keyword\">import</span> java.util.Map;\n<span class=\"hljs-keyword\">import</span> java.util.Properties;\n\n<span class=\"hljs-meta\">@Configuration</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DruidConfig</span> </span>&#123;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> String DB_PREFIX = <span class=\"hljs-string\">\"spring.datasource.\"</span>;\n\n    <span class=\"hljs-meta\">@Autowired</span>\n    <span class=\"hljs-keyword\">private</span> Environment environment;\n\n    <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-meta\">@ConfigurationProperties</span>(prefix = DB_PREFIX)\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> DataSource <span class=\"hljs-title\">druidDataSource</span><span class=\"hljs-params\">()</span> </span>&#123;\n        Properties dbProperties = <span class=\"hljs-keyword\">new</span> Properties();\n        Map&lt;String, Object&gt; map = <span class=\"hljs-keyword\">new</span> HashMap&lt;&gt;();\n        <span class=\"hljs-keyword\">for</span> (PropertySource&lt;?&gt; propertySource : ((AbstractEnvironment) environment).getPropertySources()) &#123;\n            getPropertiesFromSource(propertySource, map);\n        &#125;\n        dbProperties.putAll(map);\n        DruidDataSource dds;\n        <span class=\"hljs-keyword\">try</span> &#123;\n            dds = (DruidDataSource) DruidDataSourceFactory.createDataSource(dbProperties);\n            dds.init();\n        &#125; <span class=\"hljs-keyword\">catch</span> (Exception e) &#123;\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> RuntimeException(<span class=\"hljs-string\">\"load datasource error, dbProperties is :\"</span> + dbProperties, e);\n        &#125;\n        <span class=\"hljs-keyword\">return</span> dds;\n    &#125;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">getPropertiesFromSource</span><span class=\"hljs-params\">(PropertySource&lt;?&gt; propertySource, Map&lt;String, Object&gt; map)</span> </span>&#123;\n        <span class=\"hljs-keyword\">if</span> (propertySource <span class=\"hljs-keyword\">instanceof</span> MapPropertySource) &#123;\n            <span class=\"hljs-keyword\">for</span> (String key : ((MapPropertySource) propertySource).getPropertyNames()) &#123;\n                <span class=\"hljs-keyword\">if</span> (key.startsWith(DB_PREFIX))\n                    map.put(key.replaceFirst(DB_PREFIX, <span class=\"hljs-string\">\"\"</span>), propertySource.getProperty(key));\n                <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (key.startsWith(DB_PREFIX))\n                    map.put(key.replaceFirst(DB_PREFIX, <span class=\"hljs-string\">\"\"</span>), propertySource.getProperty(key));\n            &#125;\n        &#125;\n\n        <span class=\"hljs-keyword\">if</span> (propertySource <span class=\"hljs-keyword\">instanceof</span> CompositePropertySource) &#123;\n            <span class=\"hljs-keyword\">for</span> (PropertySource&lt;?&gt; s : ((CompositePropertySource) propertySource).getPropertySources()) &#123;\n                getPropertiesFromSource(s, map);\n            &#125;\n        &#125;\n    &#125;\n\n    <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> ServletRegistrationBean <span class=\"hljs-title\">druidServlet</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> ServletRegistrationBean(<span class=\"hljs-keyword\">new</span> StatViewServlet(), <span class=\"hljs-string\">\"/druid/*\"</span>);\n    &#125;\n\n    <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> FilterRegistrationBean <span class=\"hljs-title\">filterRegistrationBean</span><span class=\"hljs-params\">()</span> </span>&#123;\n        FilterRegistrationBean filterRegistrationBean = <span class=\"hljs-keyword\">new</span> FilterRegistrationBean();\n        filterRegistrationBean.setFilter(<span class=\"hljs-keyword\">new</span> WebStatFilter());\n        filterRegistrationBean.addUrlPatterns(<span class=\"hljs-string\">\"/*\"</span>);\n        filterRegistrationBean.addInitParameter(<span class=\"hljs-string\">\"exclusions\"</span>, <span class=\"hljs-string\">\"*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*\"</span>);\n        <span class=\"hljs-keyword\">return</span> filterRegistrationBean;\n    &#125;\n&#125;</code></pre>\n<p>配置线程池 :</p>\n<pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.wuxicloud.config;\n\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Bean;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Configuration;\n<span class=\"hljs-keyword\">import</span> org.springframework.scheduling.annotation.EnableAsync;\n<span class=\"hljs-keyword\">import</span> org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;\n\n<span class=\"hljs-keyword\">import</span> java.util.concurrent.Executor;\n<span class=\"hljs-keyword\">import</span> java.util.concurrent.ThreadPoolExecutor;\n\n<span class=\"hljs-meta\">@Configuration</span>\n<span class=\"hljs-meta\">@EnableAsync</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ThreadPoolConfig</span> </span>&#123;\n    <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Executor <span class=\"hljs-title\">getExecutor</span><span class=\"hljs-params\">()</span> </span>&#123;\n        ThreadPoolTaskExecutor executor = <span class=\"hljs-keyword\">new</span> ThreadPoolTaskExecutor();\n        executor.setCorePoolSize(<span class=\"hljs-number\">5</span>);<span class=\"hljs-comment\">//线程池维护线程的最少数量</span>\n        executor.setMaxPoolSize(<span class=\"hljs-number\">30</span>);<span class=\"hljs-comment\">//线程池维护线程的最大数量</span>\n        executor.setQueueCapacity(<span class=\"hljs-number\">8</span>); <span class=\"hljs-comment\">//缓存队列</span>\n        executor.setRejectedExecutionHandler(<span class=\"hljs-keyword\">new</span> ThreadPoolExecutor.CallerRunsPolicy()); <span class=\"hljs-comment\">//对拒绝task的处理策略</span>\n        executor.setKeepAliveSeconds(<span class=\"hljs-number\">60</span>);<span class=\"hljs-comment\">//允许的空闲时间</span>\n        executor.initialize();\n        <span class=\"hljs-keyword\">return</span> executor;\n    &#125;\n&#125;</code></pre>\n<p>6.用户需要根据用户名进行登录，访问数据库 :</p>\n<pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> com.wuxicloud.model.User;\n<span class=\"hljs-keyword\">import</span> org.springframework.data.jpa.repository.JpaRepository;\n\n<span class=\"hljs-comment\">/**\n * Created by EalenXie on 2018/7/11 14:23\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">UserRepository</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">JpaRepository</span>&lt;<span class=\"hljs-title\">User</span>, <span class=\"hljs-title\">Integer</span>&gt; </span>&#123;\n\n    <span class=\"hljs-function\">User <span class=\"hljs-title\">findByUsername</span><span class=\"hljs-params\">(String username)</span></span>;\n\n&#125;</code></pre>\n<p>7.构建真正用于SpringSecurity登录的安全用户(UserDetails)，我这里使用新建了一个POJO来实现 :</p>\n<pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.wuxicloud.security;\n\n<span class=\"hljs-keyword\">import</span> com.wuxicloud.model.User;\n<span class=\"hljs-keyword\">import</span> org.springframework.security.core.GrantedAuthority;\n<span class=\"hljs-keyword\">import</span> org.springframework.security.core.authority.SimpleGrantedAuthority;\n<span class=\"hljs-keyword\">import</span> org.springframework.security.core.userdetails.UserDetails;\n\n<span class=\"hljs-keyword\">import</span> java.util.ArrayList;\n<span class=\"hljs-keyword\">import</span> java.util.Collection;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SecurityUser</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">User</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">UserDetails</span> </span>&#123;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">long</span> serialVersionUID = <span class=\"hljs-number\">1L</span>;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">SecurityUser</span><span class=\"hljs-params\">(User user)</span> </span>&#123;\n        <span class=\"hljs-keyword\">if</span> (user != <span class=\"hljs-keyword\">null</span>) &#123;\n            <span class=\"hljs-keyword\">this</span>.setUser_uuid(user.getUser_uuid());\n            <span class=\"hljs-keyword\">this</span>.setUsername(user.getUsername());\n            <span class=\"hljs-keyword\">this</span>.setPassword(user.getPassword());\n            <span class=\"hljs-keyword\">this</span>.setEmail(user.getEmail());\n            <span class=\"hljs-keyword\">this</span>.setTelephone(user.getTelephone());\n            <span class=\"hljs-keyword\">this</span>.setRole(user.getRole());\n            <span class=\"hljs-keyword\">this</span>.setImage(user.getImage());\n            <span class=\"hljs-keyword\">this</span>.setLast_ip(user.getLast_ip());\n            <span class=\"hljs-keyword\">this</span>.setLast_time(user.getLast_time());\n        &#125;\n    &#125;\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> Collection&lt;? extends GrantedAuthority&gt; getAuthorities() &#123;\n        Collection&lt;GrantedAuthority&gt; authorities = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();\n        String username = <span class=\"hljs-keyword\">this</span>.getUsername();\n        <span class=\"hljs-keyword\">if</span> (username != <span class=\"hljs-keyword\">null</span>) &#123;\n            SimpleGrantedAuthority authority = <span class=\"hljs-keyword\">new</span> SimpleGrantedAuthority(username);\n            authorities.add(authority);\n        &#125;\n        <span class=\"hljs-keyword\">return</span> authorities;\n    &#125;\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">isAccountNonExpired</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">true</span>;\n    &#125;\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">isAccountNonLocked</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">true</span>;\n    &#125;\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">isCredentialsNonExpired</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">true</span>;\n    &#125;\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">isEnabled</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">true</span>;\n    &#125;\n&#125;</code></pre>\n<p>8 . 核心配置，配置SpringSecurity访问策略，包括登录处理，登出处理，资源访问，密码基本加密。</p>\n<pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.wuxicloud.config;\n\n<span class=\"hljs-keyword\">import</span> com.wuxicloud.dao.UserRepository;\n<span class=\"hljs-keyword\">import</span> com.wuxicloud.model.User;\n<span class=\"hljs-keyword\">import</span> com.wuxicloud.security.SecurityUser;\n<span class=\"hljs-keyword\">import</span> org.slf4j.Logger;\n<span class=\"hljs-keyword\">import</span> org.slf4j.LoggerFactory;\n<span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Bean;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Configuration;\n<span class=\"hljs-keyword\">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\n<span class=\"hljs-keyword\">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;\n<span class=\"hljs-keyword\">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n<span class=\"hljs-keyword\">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n<span class=\"hljs-keyword\">import</span> org.springframework.security.core.Authentication;\n<span class=\"hljs-keyword\">import</span> org.springframework.security.core.userdetails.UserDetails;\n<span class=\"hljs-keyword\">import</span> org.springframework.security.core.userdetails.UserDetailsService;\n<span class=\"hljs-keyword\">import</span> org.springframework.security.core.userdetails.UsernameNotFoundException;\n<span class=\"hljs-keyword\">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\n<span class=\"hljs-keyword\">import</span> org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler;\n<span class=\"hljs-keyword\">import</span> org.springframework.security.web.authentication.logout.LogoutSuccessHandler;\n\n<span class=\"hljs-keyword\">import</span> javax.servlet.ServletException;\n<span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpServletRequest;\n<span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpServletResponse;\n<span class=\"hljs-keyword\">import</span> java.io.IOException;\n\n<span class=\"hljs-comment\">/**\n * Created by EalenXie on 2018/1/11.\n */</span>\n<span class=\"hljs-meta\">@Configuration</span>\n<span class=\"hljs-meta\">@EnableWebSecurity</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">WebSecurityConfig</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">WebSecurityConfigurerAdapter</span> </span>&#123;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> Logger logger = LoggerFactory.getLogger(WebSecurityConfig<span class=\"hljs-class\">.<span class=\"hljs-keyword\">class</span>)</span>;\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">configure</span><span class=\"hljs-params\">(HttpSecurity http)</span> <span class=\"hljs-keyword\">throws</span> Exception </span>&#123; <span class=\"hljs-comment\">//配置策略</span>\n        http.csrf().disable();\n        http.authorizeRequests().\n                antMatchers(<span class=\"hljs-string\">\"/static/**\"</span>).permitAll().anyRequest().authenticated().\n                and().formLogin().loginPage(<span class=\"hljs-string\">\"/login\"</span>).permitAll().successHandler(loginSuccessHandler()).\n                and().logout().permitAll().invalidateHttpSession(<span class=\"hljs-keyword\">true</span>).\n                deleteCookies(<span class=\"hljs-string\">\"JSESSIONID\"</span>).logoutSuccessHandler(logoutSuccessHandler()).\n                and().sessionManagement().maximumSessions(<span class=\"hljs-number\">10</span>).expiredUrl(<span class=\"hljs-string\">\"/login\"</span>);\n    &#125;\n\n    <span class=\"hljs-meta\">@Autowired</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">configureGlobal</span><span class=\"hljs-params\">(AuthenticationManagerBuilder auth)</span> <span class=\"hljs-keyword\">throws</span> Exception </span>&#123;\n        auth.userDetailsService(userDetailsService()).passwordEncoder(passwordEncoder());\n        auth.eraseCredentials(<span class=\"hljs-keyword\">false</span>);\n    &#125;\n\n    <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> BCryptPasswordEncoder <span class=\"hljs-title\">passwordEncoder</span><span class=\"hljs-params\">()</span> </span>&#123; <span class=\"hljs-comment\">//密码加密</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> BCryptPasswordEncoder(<span class=\"hljs-number\">4</span>);\n    &#125;\n\n    <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> LogoutSuccessHandler <span class=\"hljs-title\">logoutSuccessHandler</span><span class=\"hljs-params\">()</span> </span>&#123; <span class=\"hljs-comment\">//登出处理</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> LogoutSuccessHandler() &#123;\n            <span class=\"hljs-meta\">@Override</span>\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">onLogoutSuccess</span><span class=\"hljs-params\">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Authentication authentication)</span> <span class=\"hljs-keyword\">throws</span> IOException, ServletException </span>&#123;\n                <span class=\"hljs-keyword\">try</span> &#123;\n                    SecurityUser user = (SecurityUser) authentication.getPrincipal();\n                    logger.info(<span class=\"hljs-string\">\"USER : \"</span> + user.getUsername() + <span class=\"hljs-string\">\" LOGOUT SUCCESS !  \"</span>);\n                &#125; <span class=\"hljs-keyword\">catch</span> (Exception e) &#123;\n                    logger.info(<span class=\"hljs-string\">\"LOGOUT EXCEPTION , e : \"</span> + e.getMessage());\n                &#125;\n                httpServletResponse.sendRedirect(<span class=\"hljs-string\">\"/login\"</span>);\n            &#125;\n        &#125;;\n    &#125;\n\n    <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> SavedRequestAwareAuthenticationSuccessHandler <span class=\"hljs-title\">loginSuccessHandler</span><span class=\"hljs-params\">()</span> </span>&#123; <span class=\"hljs-comment\">//登入处理</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> SavedRequestAwareAuthenticationSuccessHandler() &#123;\n            <span class=\"hljs-meta\">@Override</span>\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">onAuthenticationSuccess</span><span class=\"hljs-params\">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> <span class=\"hljs-keyword\">throws</span> IOException, ServletException </span>&#123;\n                User userDetails = (User) authentication.getPrincipal();\n                logger.info(<span class=\"hljs-string\">\"USER : \"</span> + userDetails.getUsername() + <span class=\"hljs-string\">\" LOGIN SUCCESS !  \"</span>);\n                <span class=\"hljs-keyword\">super</span>.onAuthenticationSuccess(request, response, authentication);\n            &#125;\n        &#125;;\n    &#125;\n    <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> UserDetailsService <span class=\"hljs-title\">userDetailsService</span><span class=\"hljs-params\">()</span> </span>&#123;    <span class=\"hljs-comment\">//用户登录实现</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> UserDetailsService() &#123;\n            <span class=\"hljs-meta\">@Autowired</span>\n            <span class=\"hljs-keyword\">private</span> UserRepository userRepository;\n\n            <span class=\"hljs-meta\">@Override</span>\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> UserDetails <span class=\"hljs-title\">loadUserByUsername</span><span class=\"hljs-params\">(String s)</span> <span class=\"hljs-keyword\">throws</span> UsernameNotFoundException </span>&#123;\n                User user = userRepository.findByUsername(s);\n                <span class=\"hljs-keyword\">if</span> (user == <span class=\"hljs-keyword\">null</span>) <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> UsernameNotFoundException(<span class=\"hljs-string\">\"Username \"</span> + s + <span class=\"hljs-string\">\" not found\"</span>);\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> SecurityUser(user);\n            &#125;\n        &#125;;\n    &#125;\n&#125;</code></pre>\n<p>9.至此，已经基本将配置搭建好了，从上面核心可以看出，配置的登录页的url 为/login，可以创建基本的Controller来验证登录了。</p>\n<pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.wuxicloud.web;\n\n<span class=\"hljs-keyword\">import</span> com.wuxicloud.model.User;\n<span class=\"hljs-keyword\">import</span> org.springframework.security.core.Authentication;\n<span class=\"hljs-keyword\">import</span> org.springframework.security.core.context.SecurityContext;\n<span class=\"hljs-keyword\">import</span> org.springframework.security.core.context.SecurityContextHolder;\n<span class=\"hljs-keyword\">import</span> org.springframework.security.core.userdetails.UserDetails;\n<span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Controller;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.RequestMethod;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.context.request.RequestContextHolder;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.context.request.ServletRequestAttributes;\n\n<span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpServletRequest;\n\n<span class=\"hljs-comment\">/**\n * Created by EalenXie on 2018/1/11.\n */</span>\n<span class=\"hljs-meta\">@Controller</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LoginController</span> </span>&#123;\n\n    <span class=\"hljs-meta\">@RequestMapping</span>(value = <span class=\"hljs-string\">\"/login\"</span>, method = RequestMethod.GET)\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">login</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"login\"</span>;\n    &#125;\n\n    <span class=\"hljs-meta\">@RequestMapping</span>(<span class=\"hljs-string\">\"/\"</span>)\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">root</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"index\"</span>;\n    &#125;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> User <span class=\"hljs-title\">getUser</span><span class=\"hljs-params\">()</span> </span>&#123; <span class=\"hljs-comment\">//为了session从获取用户信息,可以配置如下</span>\n        User user = <span class=\"hljs-keyword\">new</span> User();\n        SecurityContext ctx = SecurityContextHolder.getContext();\n        Authentication auth = ctx.getAuthentication();\n        <span class=\"hljs-keyword\">if</span> (auth.getPrincipal() <span class=\"hljs-keyword\">instanceof</span> UserDetails) user = (User) auth.getPrincipal();\n        <span class=\"hljs-keyword\">return</span> user;\n    &#125;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> HttpServletRequest <span class=\"hljs-title\">getRequest</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-keyword\">return</span> ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();\n    &#125;\n&#125;</code></pre>\n<p>11 . SpringBoot基本的启动类 Application.class</p>\n<pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.wuxicloud;\n\n<span class=\"hljs-keyword\">import</span> org.springframework.boot.SpringApplication;\n<span class=\"hljs-keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;\n\n<span class=\"hljs-comment\">/**\n * Created by EalenXie on 2018/7/11 15:01\n */</span>\n<span class=\"hljs-meta\">@SpringBootApplication</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Application</span> </span>&#123;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;\n        SpringApplication.run(Application<span class=\"hljs-class\">.<span class=\"hljs-keyword\">class</span>, <span class=\"hljs-title\">args</span>)</span>;\n    &#125;\n&#125;</code></pre>\n<p>11.根据Freemark和Controller里面可看出配置的视图为 /templates/index.html和/templates/index.login。所以创建基本的登录页面和登录成功页面。</p>\n<p>login.html</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>用户登录<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">\"/login\"</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">\"post\"</span>&gt;</span>\n    用户名 : <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"username\"</span>/&gt;</span>\n    密码 : <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"password\"</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"password\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"submit\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"登录\"</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span></code></pre>\n<p>注意 : 这里方法必须是POST，因为GET在controller被重写了，用户名的name属性必须是username，密码的name属性必须是password</p>\n<p>index.html</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>首页<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">#assign</span>  <span class=\"hljs-attr\">user</span>=<span class=\"hljs-string\">Session.SPRING_SECURITY_CONTEXT.authentication.principal/</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n欢迎你,$&#123;user.username&#125;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"/logout\"</span>&gt;</span>注销<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span></code></pre>\n<p>注意 : 为了从session中获取到登录的用户信息，根据配置SpringSecurity的用户信息会放在Session.SPRING_SECURITY_CONTEXT.authentication.principal里面，根据FreeMarker模板引擎的特点，可以通过这种方式进行获取 : &lt;#assign user=Session.SPRING_SECURITY_CONTEXT.authentication.principal/&gt;</p>\n<p>12 . 为了方便测试，我们在数据库中插入一条记录，注意，从WebSecurity.java配置可以知道密码会被加密，所以我们插入的用户密码应该是被加密的。</p>\n<p>这里假如我们使用的密码为admin，则加密过后的字符串是 $2a$04$1OiUa3yEchBXQBJI8JaMyuKZNlwzWvfeQjKAHnwAEQwnacjt6ukqu</p>\n<p>　测试类如下 :</p>\n<pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.wuxicloud.security;\n\n<span class=\"hljs-keyword\">import</span> org.junit.Test;\n<span class=\"hljs-keyword\">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\n\n<span class=\"hljs-comment\">/**\n * Created by EalenXie on 2018/7/11 15:13\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TestEncoder</span> </span>&#123;\n\n    <span class=\"hljs-meta\">@Test</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">encoder</span><span class=\"hljs-params\">()</span> </span>&#123;\n        String password = <span class=\"hljs-string\">\"admin\"</span>;\n        BCryptPasswordEncoder encoder = <span class=\"hljs-keyword\">new</span> BCryptPasswordEncoder(<span class=\"hljs-number\">4</span>);\n        String enPassword = encoder.encode(password);\n        System.out.println(enPassword);\n    &#125;\n&#125;</code></pre>\n<p>测试登录，从上面的加密的密码我们插入一条数据到数据库中。</p>\n<pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> <span class=\"hljs-string\">`USER`</span> <span class=\"hljs-keyword\">VALUES</span> (<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">'d242ae49-4734-411e-8c8d-d2b09e87c3c8'</span>, <span class=\"hljs-string\">'EalenXie'</span>, <span class=\"hljs-string\">'$2a$04$petEXpgcLKfdLN4TYFxK0u8ryAzmZDHLASWLX/XXm8hgQar1C892W'</span>, <span class=\"hljs-string\">'SSSSS'</span>, <span class=\"hljs-string\">'ssssssssss'</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">'g'</span>, <span class=\"hljs-string\">'0:0:0:0:0:0:0:1'</span>, <span class=\"hljs-string\">'2018-07-11 11:26:27'</span>);</code></pre>\n<p>13 . 启动项目进行测试 ，访问 localhost:8083</p>\n<p><img src=\"https://images2018.cnblogs.com/blog/994599/201807/994599-20180711154124007-1732228495.png\" srcset=\"/img/loading.gif\" alt=\"img\"></p>\n<p>点击登录，登录失败会留在当前页面重新登录，成功则进入index.html</p>\n<p>登录如果成功，可以看到后台打印登录成功的日志 :</p>\n<p><img src=\"https://images2018.cnblogs.com/blog/994599/201807/994599-20180711154258208-1381186085.png\" srcset=\"/img/loading.gif\" alt=\"img\"></p>\n<p>页面进入index.html :</p>\n<p><img src=\"https://images2018.cnblogs.com/blog/994599/201807/994599-20180711154337891-1871092340.png\" srcset=\"/img/loading.gif\" alt=\"img\"></p>\n<p>点击注销 ，则回重新跳转到login.html，后台也会打印登出成功的日志 :</p>\n<p><img src=\"https://images2018.cnblogs.com/blog/994599/201807/994599-20180711154539312-15547252.png\" srcset=\"/img/loading.gif\" alt=\"img\"></p>\n<blockquote>\n<p>技术栈 : SpringBoot + SpringSecurity + jpa + freemark ，完整项目地址 : <a href=\"https://github.com/EalenXie/spring-security-login\" target=\"_blank\" rel=\"noopener\">https://github.com/EalenXie/spring-security-login</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>1 . 新建一个spring-security-login的maven项目 ，pom.xml添加基本依赖 :</p>\n<pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">project</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">\"http://maven.apache.org/POM/4.0.0\"</span>\n         <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n         <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">modelVersion</span>&gt;</span>4.0.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">modelVersion</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.wuxicloud<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-security-login<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">parent</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.5.6.RELEASE<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">parent</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">properties</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">author</span>&gt;</span>EalenXie<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">author</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">description</span>&gt;</span>SpringBoot整合SpringSecurity实现简单登入登出<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">description</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">properties</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependencies</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-security<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-freemarker<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-aop<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n        <span class=\"hljs-comment\">&lt;!--alibaba--&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.alibaba<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>druid<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.0.24<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.alibaba<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>fastjson<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.2.31<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>mysql<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scope</span>&gt;</span>runtime<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scope</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependencies</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">project</span>&gt;</span></code></pre>\n<p>2 . 准备你的数据库，设计表结构，要用户使用登入登出，新建用户表。</p>\n<pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">DROP</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-keyword\">IF</span> <span class=\"hljs-keyword\">EXISTS</span> <span class=\"hljs-string\">`user`</span>;\n<span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-string\">`user`</span>  (\n  <span class=\"hljs-string\">`id`</span> <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-number\">11</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span> AUTO_INCREMENT,\n  <span class=\"hljs-string\">`user_uuid`</span> <span class=\"hljs-built_in\">varchar</span>(<span class=\"hljs-number\">70</span>) <span class=\"hljs-built_in\">CHARACTER</span> <span class=\"hljs-keyword\">SET</span> utf8 <span class=\"hljs-keyword\">COLLATE</span> utf8_general_ci <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-literal\">NULL</span>,\n  <span class=\"hljs-string\">`username`</span> <span class=\"hljs-built_in\">varchar</span>(<span class=\"hljs-number\">255</span>) <span class=\"hljs-built_in\">CHARACTER</span> <span class=\"hljs-keyword\">SET</span> utf8 <span class=\"hljs-keyword\">COLLATE</span> utf8_general_ci <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-literal\">NULL</span>,\n  <span class=\"hljs-string\">`password`</span> <span class=\"hljs-built_in\">varchar</span>(<span class=\"hljs-number\">255</span>) <span class=\"hljs-built_in\">CHARACTER</span> <span class=\"hljs-keyword\">SET</span> utf8 <span class=\"hljs-keyword\">COLLATE</span> utf8_general_ci <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-literal\">NULL</span>,\n  <span class=\"hljs-string\">`email`</span> <span class=\"hljs-built_in\">varchar</span>(<span class=\"hljs-number\">255</span>) <span class=\"hljs-built_in\">CHARACTER</span> <span class=\"hljs-keyword\">SET</span> utf8 <span class=\"hljs-keyword\">COLLATE</span> utf8_general_ci <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-literal\">NULL</span>,\n  <span class=\"hljs-string\">`telephone`</span> <span class=\"hljs-built_in\">varchar</span>(<span class=\"hljs-number\">255</span>) <span class=\"hljs-built_in\">CHARACTER</span> <span class=\"hljs-keyword\">SET</span> utf8 <span class=\"hljs-keyword\">COLLATE</span> utf8_general_ci <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-literal\">NULL</span>,\n  <span class=\"hljs-string\">`role`</span> <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-number\">10</span>) <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-literal\">NULL</span>,\n  <span class=\"hljs-string\">`image`</span> <span class=\"hljs-built_in\">varchar</span>(<span class=\"hljs-number\">255</span>) <span class=\"hljs-built_in\">CHARACTER</span> <span class=\"hljs-keyword\">SET</span> utf8 <span class=\"hljs-keyword\">COLLATE</span> utf8_general_ci <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-literal\">NULL</span>,\n  <span class=\"hljs-string\">`last_ip`</span> <span class=\"hljs-built_in\">varchar</span>(<span class=\"hljs-number\">255</span>) <span class=\"hljs-built_in\">CHARACTER</span> <span class=\"hljs-keyword\">SET</span> utf8 <span class=\"hljs-keyword\">COLLATE</span> utf8_general_ci <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-literal\">NULL</span>,\n  <span class=\"hljs-string\">`last_time`</span> <span class=\"hljs-built_in\">varchar</span>(<span class=\"hljs-number\">255</span>) <span class=\"hljs-built_in\">CHARACTER</span> <span class=\"hljs-keyword\">SET</span> utf8 <span class=\"hljs-keyword\">COLLATE</span> utf8_general_ci <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-literal\">NULL</span>,\n  PRIMARY <span class=\"hljs-keyword\">KEY</span> (<span class=\"hljs-string\">`id`</span>) <span class=\"hljs-keyword\">USING</span> BTREE\n) <span class=\"hljs-keyword\">ENGINE</span> = <span class=\"hljs-keyword\">InnoDB</span> AUTO_INCREMENT = <span class=\"hljs-number\">2</span> <span class=\"hljs-built_in\">CHARACTER</span> <span class=\"hljs-keyword\">SET</span> = utf8 <span class=\"hljs-keyword\">COLLATE</span> = utf8_general_ci ROW_FORMAT = <span class=\"hljs-keyword\">Compact</span>;\n\n<span class=\"hljs-keyword\">SET</span> FOREIGN_KEY_CHECKS = <span class=\"hljs-number\">1</span>;</code></pre>\n<p>3 . 用户对象User.java :</p>\n<pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> javax.persistence.*;\n\n<span class=\"hljs-comment\">/**\n * Created by EalenXie on 2018/7/5 15:17\n */</span>\n<span class=\"hljs-meta\">@Entity</span>\n<span class=\"hljs-meta\">@Table</span>(name = <span class=\"hljs-string\">\"USER\"</span>)\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">User</span> </span>&#123;\n    <span class=\"hljs-meta\">@Id</span>\n    <span class=\"hljs-meta\">@GeneratedValue</span>(strategy = GenerationType.AUTO)\n    <span class=\"hljs-keyword\">private</span> Integer id;\n    <span class=\"hljs-keyword\">private</span> String user_uuid;   <span class=\"hljs-comment\">//用户UUID</span>\n    <span class=\"hljs-keyword\">private</span> String username;    <span class=\"hljs-comment\">//用户名</span>\n    <span class=\"hljs-keyword\">private</span> String password;    <span class=\"hljs-comment\">//用户密码</span>\n    <span class=\"hljs-keyword\">private</span> String email;       <span class=\"hljs-comment\">//用户邮箱</span>\n    <span class=\"hljs-keyword\">private</span> String telephone;   <span class=\"hljs-comment\">//电话号码</span>\n    <span class=\"hljs-keyword\">private</span> String role;        <span class=\"hljs-comment\">//用户角色</span>\n    <span class=\"hljs-keyword\">private</span> String image;       <span class=\"hljs-comment\">//用户头像</span>\n    <span class=\"hljs-keyword\">private</span> String last_ip;     <span class=\"hljs-comment\">//上次登录IP</span>\n    <span class=\"hljs-keyword\">private</span> String last_time;   <span class=\"hljs-comment\">//上次登录时间</span>\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Integer <span class=\"hljs-title\">getId</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-keyword\">return</span> id;\n    &#125;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getRole</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-keyword\">return</span> role;\n    &#125;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setRole</span><span class=\"hljs-params\">(String role)</span> </span>&#123;\n        <span class=\"hljs-keyword\">this</span>.role = role;\n    &#125;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getImage</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-keyword\">return</span> image;\n    &#125;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setImage</span><span class=\"hljs-params\">(String image)</span> </span>&#123;\n        <span class=\"hljs-keyword\">this</span>.image = image;\n    &#125;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setId</span><span class=\"hljs-params\">(Integer id)</span> </span>&#123;\n        <span class=\"hljs-keyword\">this</span>.id = id;\n    &#125;\n\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getUsername</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-keyword\">return</span> username;\n    &#125;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setUsername</span><span class=\"hljs-params\">(String username)</span> </span>&#123;\n        <span class=\"hljs-keyword\">this</span>.username = username;\n    &#125;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getEmail</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-keyword\">return</span> email;\n    &#125;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setEmail</span><span class=\"hljs-params\">(String email)</span> </span>&#123;\n        <span class=\"hljs-keyword\">this</span>.email = email;\n    &#125;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getTelephone</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-keyword\">return</span> telephone;\n    &#125;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setTelephone</span><span class=\"hljs-params\">(String telephone)</span> </span>&#123;\n        <span class=\"hljs-keyword\">this</span>.telephone = telephone;\n    &#125;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getPassword</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-keyword\">return</span> password;\n    &#125;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setPassword</span><span class=\"hljs-params\">(String password)</span> </span>&#123;\n        <span class=\"hljs-keyword\">this</span>.password = password;\n    &#125;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getUser_uuid</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-keyword\">return</span> user_uuid;\n    &#125;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setUser_uuid</span><span class=\"hljs-params\">(String user_uuid)</span> </span>&#123;\n        <span class=\"hljs-keyword\">this</span>.user_uuid = user_uuid;\n    &#125;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getLast_ip</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-keyword\">return</span> last_ip;\n    &#125;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setLast_ip</span><span class=\"hljs-params\">(String last_ip)</span> </span>&#123;\n        <span class=\"hljs-keyword\">this</span>.last_ip = last_ip;\n    &#125;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getLast_time</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-keyword\">return</span> last_time;\n    &#125;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setLast_time</span><span class=\"hljs-params\">(String last_time)</span> </span>&#123;\n        <span class=\"hljs-keyword\">this</span>.last_time = last_time;\n    &#125;\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">toString</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"User&#123;\"</span> +\n                <span class=\"hljs-string\">\"id=\"</span> + id +\n                <span class=\"hljs-string\">\", user_uuid='\"</span> + user_uuid + <span class=\"hljs-string\">'\\''</span> +\n                <span class=\"hljs-string\">\", username='\"</span> + username + <span class=\"hljs-string\">'\\''</span> +\n                <span class=\"hljs-string\">\", password='\"</span> + password + <span class=\"hljs-string\">'\\''</span> +\n                <span class=\"hljs-string\">\", email='\"</span> + email + <span class=\"hljs-string\">'\\''</span> +\n                <span class=\"hljs-string\">\", telephone='\"</span> + telephone + <span class=\"hljs-string\">'\\''</span> +\n                <span class=\"hljs-string\">\", role='\"</span> + role + <span class=\"hljs-string\">'\\''</span> +\n                <span class=\"hljs-string\">\", image='\"</span> + image + <span class=\"hljs-string\">'\\''</span> +\n                <span class=\"hljs-string\">\", last_ip='\"</span> + last_ip + <span class=\"hljs-string\">'\\''</span> +\n                <span class=\"hljs-string\">\", last_time='\"</span> + last_time + <span class=\"hljs-string\">'\\''</span> +\n                <span class=\"hljs-string\">'&#125;'</span>;\n    &#125;\n&#125;</code></pre>\n<p>4 . application.yml配置一些基本属性</p>\n<pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">spring:</span>\n  <span class=\"hljs-attr\">resources:</span>\n    <span class=\"hljs-attr\">static-locations:</span> <span class=\"hljs-string\">classpath:/</span>\n  <span class=\"hljs-attr\">freemarker:</span>\n    <span class=\"hljs-attr\">template-loader-path:</span> <span class=\"hljs-string\">classpath:/templates/</span>\n    <span class=\"hljs-attr\">suffix:</span> <span class=\"hljs-string\">.html</span>\n    <span class=\"hljs-attr\">content-type:</span> <span class=\"hljs-string\">text/html</span>\n    <span class=\"hljs-attr\">charset:</span> <span class=\"hljs-string\">UTF-8</span>\n  <span class=\"hljs-attr\">datasource:</span>\n      <span class=\"hljs-attr\">url:</span> <span class=\"hljs-string\">jdbc:mysql://localhost:3306/yourdatabase</span>\n      <span class=\"hljs-attr\">username:</span> <span class=\"hljs-string\">yourname</span>\n      <span class=\"hljs-attr\">password:</span> <span class=\"hljs-string\">yourpass</span>\n      <span class=\"hljs-attr\">driver-class-name:</span> <span class=\"hljs-string\">com.mysql.jdbc.Driver</span>\n      <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">com.alibaba.druid.pool.DruidDataSource</span>\n<span class=\"hljs-attr\">server:</span>\n  <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">8083</span>\n  <span class=\"hljs-attr\">error:</span>\n    <span class=\"hljs-attr\">whitelabel:</span>\n      <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">true</span></code></pre>\n<p>5 . 考虑我们应用的效率 , 可以配置数据源和线程池 :</p>\n<pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.wuxicloud.config;\n\n<span class=\"hljs-keyword\">import</span> com.alibaba.druid.pool.DruidDataSource;\n<span class=\"hljs-keyword\">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;\n<span class=\"hljs-keyword\">import</span> com.alibaba.druid.support.http.StatViewServlet;\n<span class=\"hljs-keyword\">import</span> com.alibaba.druid.support.http.WebStatFilter;\n<span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;\n<span class=\"hljs-keyword\">import</span> org.springframework.boot.context.properties.ConfigurationProperties;\n<span class=\"hljs-keyword\">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;\n<span class=\"hljs-keyword\">import</span> org.springframework.boot.web.servlet.ServletRegistrationBean;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Bean;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Configuration;\n<span class=\"hljs-keyword\">import</span> org.springframework.core.env.*;\n\n<span class=\"hljs-keyword\">import</span> javax.sql.DataSource;\n<span class=\"hljs-keyword\">import</span> java.util.HashMap;\n<span class=\"hljs-keyword\">import</span> java.util.Map;\n<span class=\"hljs-keyword\">import</span> java.util.Properties;\n\n<span class=\"hljs-meta\">@Configuration</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DruidConfig</span> </span>&#123;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> String DB_PREFIX = <span class=\"hljs-string\">\"spring.datasource.\"</span>;\n\n    <span class=\"hljs-meta\">@Autowired</span>\n    <span class=\"hljs-keyword\">private</span> Environment environment;\n\n    <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-meta\">@ConfigurationProperties</span>(prefix = DB_PREFIX)\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> DataSource <span class=\"hljs-title\">druidDataSource</span><span class=\"hljs-params\">()</span> </span>&#123;\n        Properties dbProperties = <span class=\"hljs-keyword\">new</span> Properties();\n        Map&lt;String, Object&gt; map = <span class=\"hljs-keyword\">new</span> HashMap&lt;&gt;();\n        <span class=\"hljs-keyword\">for</span> (PropertySource&lt;?&gt; propertySource : ((AbstractEnvironment) environment).getPropertySources()) &#123;\n            getPropertiesFromSource(propertySource, map);\n        &#125;\n        dbProperties.putAll(map);\n        DruidDataSource dds;\n        <span class=\"hljs-keyword\">try</span> &#123;\n            dds = (DruidDataSource) DruidDataSourceFactory.createDataSource(dbProperties);\n            dds.init();\n        &#125; <span class=\"hljs-keyword\">catch</span> (Exception e) &#123;\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> RuntimeException(<span class=\"hljs-string\">\"load datasource error, dbProperties is :\"</span> + dbProperties, e);\n        &#125;\n        <span class=\"hljs-keyword\">return</span> dds;\n    &#125;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">getPropertiesFromSource</span><span class=\"hljs-params\">(PropertySource&lt;?&gt; propertySource, Map&lt;String, Object&gt; map)</span> </span>&#123;\n        <span class=\"hljs-keyword\">if</span> (propertySource <span class=\"hljs-keyword\">instanceof</span> MapPropertySource) &#123;\n            <span class=\"hljs-keyword\">for</span> (String key : ((MapPropertySource) propertySource).getPropertyNames()) &#123;\n                <span class=\"hljs-keyword\">if</span> (key.startsWith(DB_PREFIX))\n                    map.put(key.replaceFirst(DB_PREFIX, <span class=\"hljs-string\">\"\"</span>), propertySource.getProperty(key));\n                <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (key.startsWith(DB_PREFIX))\n                    map.put(key.replaceFirst(DB_PREFIX, <span class=\"hljs-string\">\"\"</span>), propertySource.getProperty(key));\n            &#125;\n        &#125;\n\n        <span class=\"hljs-keyword\">if</span> (propertySource <span class=\"hljs-keyword\">instanceof</span> CompositePropertySource) &#123;\n            <span class=\"hljs-keyword\">for</span> (PropertySource&lt;?&gt; s : ((CompositePropertySource) propertySource).getPropertySources()) &#123;\n                getPropertiesFromSource(s, map);\n            &#125;\n        &#125;\n    &#125;\n\n    <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> ServletRegistrationBean <span class=\"hljs-title\">druidServlet</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> ServletRegistrationBean(<span class=\"hljs-keyword\">new</span> StatViewServlet(), <span class=\"hljs-string\">\"/druid/*\"</span>);\n    &#125;\n\n    <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> FilterRegistrationBean <span class=\"hljs-title\">filterRegistrationBean</span><span class=\"hljs-params\">()</span> </span>&#123;\n        FilterRegistrationBean filterRegistrationBean = <span class=\"hljs-keyword\">new</span> FilterRegistrationBean();\n        filterRegistrationBean.setFilter(<span class=\"hljs-keyword\">new</span> WebStatFilter());\n        filterRegistrationBean.addUrlPatterns(<span class=\"hljs-string\">\"/*\"</span>);\n        filterRegistrationBean.addInitParameter(<span class=\"hljs-string\">\"exclusions\"</span>, <span class=\"hljs-string\">\"*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*\"</span>);\n        <span class=\"hljs-keyword\">return</span> filterRegistrationBean;\n    &#125;\n&#125;</code></pre>\n<p>配置线程池 :</p>\n<pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.wuxicloud.config;\n\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Bean;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Configuration;\n<span class=\"hljs-keyword\">import</span> org.springframework.scheduling.annotation.EnableAsync;\n<span class=\"hljs-keyword\">import</span> org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;\n\n<span class=\"hljs-keyword\">import</span> java.util.concurrent.Executor;\n<span class=\"hljs-keyword\">import</span> java.util.concurrent.ThreadPoolExecutor;\n\n<span class=\"hljs-meta\">@Configuration</span>\n<span class=\"hljs-meta\">@EnableAsync</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ThreadPoolConfig</span> </span>&#123;\n    <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Executor <span class=\"hljs-title\">getExecutor</span><span class=\"hljs-params\">()</span> </span>&#123;\n        ThreadPoolTaskExecutor executor = <span class=\"hljs-keyword\">new</span> ThreadPoolTaskExecutor();\n        executor.setCorePoolSize(<span class=\"hljs-number\">5</span>);<span class=\"hljs-comment\">//线程池维护线程的最少数量</span>\n        executor.setMaxPoolSize(<span class=\"hljs-number\">30</span>);<span class=\"hljs-comment\">//线程池维护线程的最大数量</span>\n        executor.setQueueCapacity(<span class=\"hljs-number\">8</span>); <span class=\"hljs-comment\">//缓存队列</span>\n        executor.setRejectedExecutionHandler(<span class=\"hljs-keyword\">new</span> ThreadPoolExecutor.CallerRunsPolicy()); <span class=\"hljs-comment\">//对拒绝task的处理策略</span>\n        executor.setKeepAliveSeconds(<span class=\"hljs-number\">60</span>);<span class=\"hljs-comment\">//允许的空闲时间</span>\n        executor.initialize();\n        <span class=\"hljs-keyword\">return</span> executor;\n    &#125;\n&#125;</code></pre>\n<p>6.用户需要根据用户名进行登录，访问数据库 :</p>\n<pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> com.wuxicloud.model.User;\n<span class=\"hljs-keyword\">import</span> org.springframework.data.jpa.repository.JpaRepository;\n\n<span class=\"hljs-comment\">/**\n * Created by EalenXie on 2018/7/11 14:23\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">UserRepository</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">JpaRepository</span>&lt;<span class=\"hljs-title\">User</span>, <span class=\"hljs-title\">Integer</span>&gt; </span>&#123;\n\n    <span class=\"hljs-function\">User <span class=\"hljs-title\">findByUsername</span><span class=\"hljs-params\">(String username)</span></span>;\n\n&#125;</code></pre>\n<p>7.构建真正用于SpringSecurity登录的安全用户(UserDetails)，我这里使用新建了一个POJO来实现 :</p>\n<pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.wuxicloud.security;\n\n<span class=\"hljs-keyword\">import</span> com.wuxicloud.model.User;\n<span class=\"hljs-keyword\">import</span> org.springframework.security.core.GrantedAuthority;\n<span class=\"hljs-keyword\">import</span> org.springframework.security.core.authority.SimpleGrantedAuthority;\n<span class=\"hljs-keyword\">import</span> org.springframework.security.core.userdetails.UserDetails;\n\n<span class=\"hljs-keyword\">import</span> java.util.ArrayList;\n<span class=\"hljs-keyword\">import</span> java.util.Collection;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SecurityUser</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">User</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">UserDetails</span> </span>&#123;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">long</span> serialVersionUID = <span class=\"hljs-number\">1L</span>;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">SecurityUser</span><span class=\"hljs-params\">(User user)</span> </span>&#123;\n        <span class=\"hljs-keyword\">if</span> (user != <span class=\"hljs-keyword\">null</span>) &#123;\n            <span class=\"hljs-keyword\">this</span>.setUser_uuid(user.getUser_uuid());\n            <span class=\"hljs-keyword\">this</span>.setUsername(user.getUsername());\n            <span class=\"hljs-keyword\">this</span>.setPassword(user.getPassword());\n            <span class=\"hljs-keyword\">this</span>.setEmail(user.getEmail());\n            <span class=\"hljs-keyword\">this</span>.setTelephone(user.getTelephone());\n            <span class=\"hljs-keyword\">this</span>.setRole(user.getRole());\n            <span class=\"hljs-keyword\">this</span>.setImage(user.getImage());\n            <span class=\"hljs-keyword\">this</span>.setLast_ip(user.getLast_ip());\n            <span class=\"hljs-keyword\">this</span>.setLast_time(user.getLast_time());\n        &#125;\n    &#125;\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> Collection&lt;? extends GrantedAuthority&gt; getAuthorities() &#123;\n        Collection&lt;GrantedAuthority&gt; authorities = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();\n        String username = <span class=\"hljs-keyword\">this</span>.getUsername();\n        <span class=\"hljs-keyword\">if</span> (username != <span class=\"hljs-keyword\">null</span>) &#123;\n            SimpleGrantedAuthority authority = <span class=\"hljs-keyword\">new</span> SimpleGrantedAuthority(username);\n            authorities.add(authority);\n        &#125;\n        <span class=\"hljs-keyword\">return</span> authorities;\n    &#125;\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">isAccountNonExpired</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">true</span>;\n    &#125;\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">isAccountNonLocked</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">true</span>;\n    &#125;\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">isCredentialsNonExpired</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">true</span>;\n    &#125;\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">isEnabled</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">true</span>;\n    &#125;\n&#125;</code></pre>\n<p>8 . 核心配置，配置SpringSecurity访问策略，包括登录处理，登出处理，资源访问，密码基本加密。</p>\n<pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.wuxicloud.config;\n\n<span class=\"hljs-keyword\">import</span> com.wuxicloud.dao.UserRepository;\n<span class=\"hljs-keyword\">import</span> com.wuxicloud.model.User;\n<span class=\"hljs-keyword\">import</span> com.wuxicloud.security.SecurityUser;\n<span class=\"hljs-keyword\">import</span> org.slf4j.Logger;\n<span class=\"hljs-keyword\">import</span> org.slf4j.LoggerFactory;\n<span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Bean;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Configuration;\n<span class=\"hljs-keyword\">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\n<span class=\"hljs-keyword\">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;\n<span class=\"hljs-keyword\">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n<span class=\"hljs-keyword\">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n<span class=\"hljs-keyword\">import</span> org.springframework.security.core.Authentication;\n<span class=\"hljs-keyword\">import</span> org.springframework.security.core.userdetails.UserDetails;\n<span class=\"hljs-keyword\">import</span> org.springframework.security.core.userdetails.UserDetailsService;\n<span class=\"hljs-keyword\">import</span> org.springframework.security.core.userdetails.UsernameNotFoundException;\n<span class=\"hljs-keyword\">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\n<span class=\"hljs-keyword\">import</span> org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler;\n<span class=\"hljs-keyword\">import</span> org.springframework.security.web.authentication.logout.LogoutSuccessHandler;\n\n<span class=\"hljs-keyword\">import</span> javax.servlet.ServletException;\n<span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpServletRequest;\n<span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpServletResponse;\n<span class=\"hljs-keyword\">import</span> java.io.IOException;\n\n<span class=\"hljs-comment\">/**\n * Created by EalenXie on 2018/1/11.\n */</span>\n<span class=\"hljs-meta\">@Configuration</span>\n<span class=\"hljs-meta\">@EnableWebSecurity</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">WebSecurityConfig</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">WebSecurityConfigurerAdapter</span> </span>&#123;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> Logger logger = LoggerFactory.getLogger(WebSecurityConfig<span class=\"hljs-class\">.<span class=\"hljs-keyword\">class</span>)</span>;\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">configure</span><span class=\"hljs-params\">(HttpSecurity http)</span> <span class=\"hljs-keyword\">throws</span> Exception </span>&#123; <span class=\"hljs-comment\">//配置策略</span>\n        http.csrf().disable();\n        http.authorizeRequests().\n                antMatchers(<span class=\"hljs-string\">\"/static/**\"</span>).permitAll().anyRequest().authenticated().\n                and().formLogin().loginPage(<span class=\"hljs-string\">\"/login\"</span>).permitAll().successHandler(loginSuccessHandler()).\n                and().logout().permitAll().invalidateHttpSession(<span class=\"hljs-keyword\">true</span>).\n                deleteCookies(<span class=\"hljs-string\">\"JSESSIONID\"</span>).logoutSuccessHandler(logoutSuccessHandler()).\n                and().sessionManagement().maximumSessions(<span class=\"hljs-number\">10</span>).expiredUrl(<span class=\"hljs-string\">\"/login\"</span>);\n    &#125;\n\n    <span class=\"hljs-meta\">@Autowired</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">configureGlobal</span><span class=\"hljs-params\">(AuthenticationManagerBuilder auth)</span> <span class=\"hljs-keyword\">throws</span> Exception </span>&#123;\n        auth.userDetailsService(userDetailsService()).passwordEncoder(passwordEncoder());\n        auth.eraseCredentials(<span class=\"hljs-keyword\">false</span>);\n    &#125;\n\n    <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> BCryptPasswordEncoder <span class=\"hljs-title\">passwordEncoder</span><span class=\"hljs-params\">()</span> </span>&#123; <span class=\"hljs-comment\">//密码加密</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> BCryptPasswordEncoder(<span class=\"hljs-number\">4</span>);\n    &#125;\n\n    <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> LogoutSuccessHandler <span class=\"hljs-title\">logoutSuccessHandler</span><span class=\"hljs-params\">()</span> </span>&#123; <span class=\"hljs-comment\">//登出处理</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> LogoutSuccessHandler() &#123;\n            <span class=\"hljs-meta\">@Override</span>\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">onLogoutSuccess</span><span class=\"hljs-params\">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Authentication authentication)</span> <span class=\"hljs-keyword\">throws</span> IOException, ServletException </span>&#123;\n                <span class=\"hljs-keyword\">try</span> &#123;\n                    SecurityUser user = (SecurityUser) authentication.getPrincipal();\n                    logger.info(<span class=\"hljs-string\">\"USER : \"</span> + user.getUsername() + <span class=\"hljs-string\">\" LOGOUT SUCCESS !  \"</span>);\n                &#125; <span class=\"hljs-keyword\">catch</span> (Exception e) &#123;\n                    logger.info(<span class=\"hljs-string\">\"LOGOUT EXCEPTION , e : \"</span> + e.getMessage());\n                &#125;\n                httpServletResponse.sendRedirect(<span class=\"hljs-string\">\"/login\"</span>);\n            &#125;\n        &#125;;\n    &#125;\n\n    <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> SavedRequestAwareAuthenticationSuccessHandler <span class=\"hljs-title\">loginSuccessHandler</span><span class=\"hljs-params\">()</span> </span>&#123; <span class=\"hljs-comment\">//登入处理</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> SavedRequestAwareAuthenticationSuccessHandler() &#123;\n            <span class=\"hljs-meta\">@Override</span>\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">onAuthenticationSuccess</span><span class=\"hljs-params\">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> <span class=\"hljs-keyword\">throws</span> IOException, ServletException </span>&#123;\n                User userDetails = (User) authentication.getPrincipal();\n                logger.info(<span class=\"hljs-string\">\"USER : \"</span> + userDetails.getUsername() + <span class=\"hljs-string\">\" LOGIN SUCCESS !  \"</span>);\n                <span class=\"hljs-keyword\">super</span>.onAuthenticationSuccess(request, response, authentication);\n            &#125;\n        &#125;;\n    &#125;\n    <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> UserDetailsService <span class=\"hljs-title\">userDetailsService</span><span class=\"hljs-params\">()</span> </span>&#123;    <span class=\"hljs-comment\">//用户登录实现</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> UserDetailsService() &#123;\n            <span class=\"hljs-meta\">@Autowired</span>\n            <span class=\"hljs-keyword\">private</span> UserRepository userRepository;\n\n            <span class=\"hljs-meta\">@Override</span>\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> UserDetails <span class=\"hljs-title\">loadUserByUsername</span><span class=\"hljs-params\">(String s)</span> <span class=\"hljs-keyword\">throws</span> UsernameNotFoundException </span>&#123;\n                User user = userRepository.findByUsername(s);\n                <span class=\"hljs-keyword\">if</span> (user == <span class=\"hljs-keyword\">null</span>) <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> UsernameNotFoundException(<span class=\"hljs-string\">\"Username \"</span> + s + <span class=\"hljs-string\">\" not found\"</span>);\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> SecurityUser(user);\n            &#125;\n        &#125;;\n    &#125;\n&#125;</code></pre>\n<p>9.至此，已经基本将配置搭建好了，从上面核心可以看出，配置的登录页的url 为/login，可以创建基本的Controller来验证登录了。</p>\n<pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.wuxicloud.web;\n\n<span class=\"hljs-keyword\">import</span> com.wuxicloud.model.User;\n<span class=\"hljs-keyword\">import</span> org.springframework.security.core.Authentication;\n<span class=\"hljs-keyword\">import</span> org.springframework.security.core.context.SecurityContext;\n<span class=\"hljs-keyword\">import</span> org.springframework.security.core.context.SecurityContextHolder;\n<span class=\"hljs-keyword\">import</span> org.springframework.security.core.userdetails.UserDetails;\n<span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Controller;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.RequestMethod;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.context.request.RequestContextHolder;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.context.request.ServletRequestAttributes;\n\n<span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpServletRequest;\n\n<span class=\"hljs-comment\">/**\n * Created by EalenXie on 2018/1/11.\n */</span>\n<span class=\"hljs-meta\">@Controller</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LoginController</span> </span>&#123;\n\n    <span class=\"hljs-meta\">@RequestMapping</span>(value = <span class=\"hljs-string\">\"/login\"</span>, method = RequestMethod.GET)\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">login</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"login\"</span>;\n    &#125;\n\n    <span class=\"hljs-meta\">@RequestMapping</span>(<span class=\"hljs-string\">\"/\"</span>)\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">root</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"index\"</span>;\n    &#125;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> User <span class=\"hljs-title\">getUser</span><span class=\"hljs-params\">()</span> </span>&#123; <span class=\"hljs-comment\">//为了session从获取用户信息,可以配置如下</span>\n        User user = <span class=\"hljs-keyword\">new</span> User();\n        SecurityContext ctx = SecurityContextHolder.getContext();\n        Authentication auth = ctx.getAuthentication();\n        <span class=\"hljs-keyword\">if</span> (auth.getPrincipal() <span class=\"hljs-keyword\">instanceof</span> UserDetails) user = (User) auth.getPrincipal();\n        <span class=\"hljs-keyword\">return</span> user;\n    &#125;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> HttpServletRequest <span class=\"hljs-title\">getRequest</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-keyword\">return</span> ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();\n    &#125;\n&#125;</code></pre>\n<p>11 . SpringBoot基本的启动类 Application.class</p>\n<pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.wuxicloud;\n\n<span class=\"hljs-keyword\">import</span> org.springframework.boot.SpringApplication;\n<span class=\"hljs-keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;\n\n<span class=\"hljs-comment\">/**\n * Created by EalenXie on 2018/7/11 15:01\n */</span>\n<span class=\"hljs-meta\">@SpringBootApplication</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Application</span> </span>&#123;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;\n        SpringApplication.run(Application<span class=\"hljs-class\">.<span class=\"hljs-keyword\">class</span>, <span class=\"hljs-title\">args</span>)</span>;\n    &#125;\n&#125;</code></pre>\n<p>11.根据Freemark和Controller里面可看出配置的视图为 /templates/index.html和/templates/index.login。所以创建基本的登录页面和登录成功页面。</p>\n<p>login.html</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>用户登录<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">\"/login\"</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">\"post\"</span>&gt;</span>\n    用户名 : <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"username\"</span>/&gt;</span>\n    密码 : <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"password\"</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"password\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"submit\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"登录\"</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span></code></pre>\n<p>注意 : 这里方法必须是POST，因为GET在controller被重写了，用户名的name属性必须是username，密码的name属性必须是password</p>\n<p>index.html</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>首页<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">#assign</span>  <span class=\"hljs-attr\">user</span>=<span class=\"hljs-string\">Session.SPRING_SECURITY_CONTEXT.authentication.principal/</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n欢迎你,$&#123;user.username&#125;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"/logout\"</span>&gt;</span>注销<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span></code></pre>\n<p>注意 : 为了从session中获取到登录的用户信息，根据配置SpringSecurity的用户信息会放在Session.SPRING_SECURITY_CONTEXT.authentication.principal里面，根据FreeMarker模板引擎的特点，可以通过这种方式进行获取 : &lt;#assign user=Session.SPRING_SECURITY_CONTEXT.authentication.principal/&gt;</p>\n<p>12 . 为了方便测试，我们在数据库中插入一条记录，注意，从WebSecurity.java配置可以知道密码会被加密，所以我们插入的用户密码应该是被加密的。</p>\n<p>这里假如我们使用的密码为admin，则加密过后的字符串是 $2a$04$1OiUa3yEchBXQBJI8JaMyuKZNlwzWvfeQjKAHnwAEQwnacjt6ukqu</p>\n<p>　测试类如下 :</p>\n<pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.wuxicloud.security;\n\n<span class=\"hljs-keyword\">import</span> org.junit.Test;\n<span class=\"hljs-keyword\">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\n\n<span class=\"hljs-comment\">/**\n * Created by EalenXie on 2018/7/11 15:13\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TestEncoder</span> </span>&#123;\n\n    <span class=\"hljs-meta\">@Test</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">encoder</span><span class=\"hljs-params\">()</span> </span>&#123;\n        String password = <span class=\"hljs-string\">\"admin\"</span>;\n        BCryptPasswordEncoder encoder = <span class=\"hljs-keyword\">new</span> BCryptPasswordEncoder(<span class=\"hljs-number\">4</span>);\n        String enPassword = encoder.encode(password);\n        System.out.println(enPassword);\n    &#125;\n&#125;</code></pre>\n<p>测试登录，从上面的加密的密码我们插入一条数据到数据库中。</p>\n<pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> <span class=\"hljs-string\">`USER`</span> <span class=\"hljs-keyword\">VALUES</span> (<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">'d242ae49-4734-411e-8c8d-d2b09e87c3c8'</span>, <span class=\"hljs-string\">'EalenXie'</span>, <span class=\"hljs-string\">'$2a$04$petEXpgcLKfdLN4TYFxK0u8ryAzmZDHLASWLX/XXm8hgQar1C892W'</span>, <span class=\"hljs-string\">'SSSSS'</span>, <span class=\"hljs-string\">'ssssssssss'</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">'g'</span>, <span class=\"hljs-string\">'0:0:0:0:0:0:0:1'</span>, <span class=\"hljs-string\">'2018-07-11 11:26:27'</span>);</code></pre>\n<p>13 . 启动项目进行测试 ，访问 localhost:8083</p>\n<p><img src=\"https://images2018.cnblogs.com/blog/994599/201807/994599-20180711154124007-1732228495.png\" srcset=\"/img/loading.gif\" alt=\"img\"></p>\n<p>点击登录，登录失败会留在当前页面重新登录，成功则进入index.html</p>\n<p>登录如果成功，可以看到后台打印登录成功的日志 :</p>\n<p><img src=\"https://images2018.cnblogs.com/blog/994599/201807/994599-20180711154258208-1381186085.png\" srcset=\"/img/loading.gif\" alt=\"img\"></p>\n<p>页面进入index.html :</p>\n<p><img src=\"https://images2018.cnblogs.com/blog/994599/201807/994599-20180711154337891-1871092340.png\" srcset=\"/img/loading.gif\" alt=\"img\"></p>\n<p>点击注销 ，则回重新跳转到login.html，后台也会打印登出成功的日志 :</p>\n<p><img src=\"https://images2018.cnblogs.com/blog/994599/201807/994599-20180711154539312-15547252.png\" srcset=\"/img/loading.gif\" alt=\"img\"></p>\n<blockquote>\n<p>技术栈 : SpringBoot + SpringSecurity + jpa + freemark ，完整项目地址 : <a href=\"https://github.com/EalenXie/spring-security-login\" target=\"_blank\" rel=\"noopener\">https://github.com/EalenXie/spring-security-login</a></p>\n</blockquote>\n"},{"title":"Mysql建表语句中显示双引号","date":"2018-11-20T12:24:30.000Z","_content":"\n在工作中使用Mysql数据库，发现建表后的ddl显示表名、字段都是双引号。这样的ddl在线上工单系统无法通过，需要将双引号转成反引号(`)才行。\n\n\n通过执行命令`show VARIABLES like '%sql%'`发现，`sql_mode`的值是`ANSI_QUOTES`。\n\n查看my.cnf配置文件，发现有如下配置:\n\n```\n# 对本地的mysql客户端的配置\n[client]\n#default-character-set = utf8\n# 对其他远程连接的mysql客户端的配置\n[mysql]\ndefault-character-set = utf8\n# 本地mysql服务的配置\n\n[mysqld]\ndatadir=/var/lib/mysql\nsocket=/var/lib/mysql/mysql.sock\nuser=mysql\n# Disabling symbolic-links is recommended to prevent assorted security risks\nsymbolic-links=0\ncharacter-set-server = utf8\nsql_mode='ANSI_QUOTES'\ndefault-storage-engine=INNODB\n\nserver-id=1\nlog-bin=mysql-bin\nbinlog_format=MIXED\nexpire_logs_days=30\n\n[mysqld_safe]\nlog-error=/var/log/mysqld.log\n\n```\n\n将mysqld下的sql_mode配置去掉，重启服务即可。\n","source":"_posts/0009-msyql-use-double-quotes.md","raw":"---\ntitle: Mysql建表语句中显示双引号\ndate: 2018-11-20 20:24:30\ntags:\n    - MySQL\ncategories:\n    - 工具\n---\n\n在工作中使用Mysql数据库，发现建表后的ddl显示表名、字段都是双引号。这样的ddl在线上工单系统无法通过，需要将双引号转成反引号(`)才行。\n\n\n通过执行命令`show VARIABLES like '%sql%'`发现，`sql_mode`的值是`ANSI_QUOTES`。\n\n查看my.cnf配置文件，发现有如下配置:\n\n```\n# 对本地的mysql客户端的配置\n[client]\n#default-character-set = utf8\n# 对其他远程连接的mysql客户端的配置\n[mysql]\ndefault-character-set = utf8\n# 本地mysql服务的配置\n\n[mysqld]\ndatadir=/var/lib/mysql\nsocket=/var/lib/mysql/mysql.sock\nuser=mysql\n# Disabling symbolic-links is recommended to prevent assorted security risks\nsymbolic-links=0\ncharacter-set-server = utf8\nsql_mode='ANSI_QUOTES'\ndefault-storage-engine=INNODB\n\nserver-id=1\nlog-bin=mysql-bin\nbinlog_format=MIXED\nexpire_logs_days=30\n\n[mysqld_safe]\nlog-error=/var/log/mysqld.log\n\n```\n\n将mysqld下的sql_mode配置去掉，重启服务即可。\n","slug":"0009-msyql-use-double-quotes","published":1,"updated":"2020-07-17T02:32:01.151Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcpntufv000y04oiuubm3ila","content":"<p>在工作中使用Mysql数据库，发现建表后的ddl显示表名、字段都是双引号。这样的ddl在线上工单系统无法通过，需要将双引号转成反引号(`)才行。</p>\n<p>通过执行命令<code>show VARIABLES like &#39;%sql%&#39;</code>发现，<code>sql_mode</code>的值是<code>ANSI_QUOTES</code>。</p>\n<p>查看my.cnf配置文件，发现有如下配置:</p>\n<pre><code class=\"hljs undefined\"><span class=\"hljs-comment\"># 对本地的mysql客户端的配置</span>\n<span class=\"hljs-section\">[client]</span>\n<span class=\"hljs-comment\">#default-character-set = utf8</span>\n<span class=\"hljs-comment\"># 对其他远程连接的mysql客户端的配置</span>\n<span class=\"hljs-section\">[mysql]</span>\n<span class=\"hljs-attr\">default-character-set</span> = utf8\n<span class=\"hljs-comment\"># 本地mysql服务的配置</span>\n\n<span class=\"hljs-section\">[mysqld]</span>\n<span class=\"hljs-attr\">datadir</span>=/var/lib/mysql\n<span class=\"hljs-attr\">socket</span>=/var/lib/mysql/mysql.sock\n<span class=\"hljs-attr\">user</span>=mysql\n<span class=\"hljs-comment\"># Disabling symbolic-links is recommended to prevent assorted security risks</span>\n<span class=\"hljs-attr\">symbolic-links</span>=<span class=\"hljs-number\">0</span>\n<span class=\"hljs-attr\">character-set-server</span> = utf8\n<span class=\"hljs-attr\">sql_mode</span>=<span class=\"hljs-string\">'ANSI_QUOTES'</span>\n<span class=\"hljs-attr\">default-storage-engine</span>=INNODB\n\n<span class=\"hljs-attr\">server-id</span>=<span class=\"hljs-number\">1</span>\n<span class=\"hljs-attr\">log-bin</span>=mysql-bin\n<span class=\"hljs-attr\">binlog_format</span>=MIXED\n<span class=\"hljs-attr\">expire_logs_days</span>=<span class=\"hljs-number\">30</span>\n\n<span class=\"hljs-section\">[mysqld_safe]</span>\n<span class=\"hljs-attr\">log-error</span>=/var/log/mysqld.log</code></pre>\n<p>将mysqld下的sql_mode配置去掉，重启服务即可。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在工作中使用Mysql数据库，发现建表后的ddl显示表名、字段都是双引号。这样的ddl在线上工单系统无法通过，需要将双引号转成反引号(`)才行。</p>\n<p>通过执行命令<code>show VARIABLES like &#39;%sql%&#39;</code>发现，<code>sql_mode</code>的值是<code>ANSI_QUOTES</code>。</p>\n<p>查看my.cnf配置文件，发现有如下配置:</p>\n<pre><code class=\"hljs undefined\"><span class=\"hljs-comment\"># 对本地的mysql客户端的配置</span>\n<span class=\"hljs-section\">[client]</span>\n<span class=\"hljs-comment\">#default-character-set = utf8</span>\n<span class=\"hljs-comment\"># 对其他远程连接的mysql客户端的配置</span>\n<span class=\"hljs-section\">[mysql]</span>\n<span class=\"hljs-attr\">default-character-set</span> = utf8\n<span class=\"hljs-comment\"># 本地mysql服务的配置</span>\n\n<span class=\"hljs-section\">[mysqld]</span>\n<span class=\"hljs-attr\">datadir</span>=/var/lib/mysql\n<span class=\"hljs-attr\">socket</span>=/var/lib/mysql/mysql.sock\n<span class=\"hljs-attr\">user</span>=mysql\n<span class=\"hljs-comment\"># Disabling symbolic-links is recommended to prevent assorted security risks</span>\n<span class=\"hljs-attr\">symbolic-links</span>=<span class=\"hljs-number\">0</span>\n<span class=\"hljs-attr\">character-set-server</span> = utf8\n<span class=\"hljs-attr\">sql_mode</span>=<span class=\"hljs-string\">'ANSI_QUOTES'</span>\n<span class=\"hljs-attr\">default-storage-engine</span>=INNODB\n\n<span class=\"hljs-attr\">server-id</span>=<span class=\"hljs-number\">1</span>\n<span class=\"hljs-attr\">log-bin</span>=mysql-bin\n<span class=\"hljs-attr\">binlog_format</span>=MIXED\n<span class=\"hljs-attr\">expire_logs_days</span>=<span class=\"hljs-number\">30</span>\n\n<span class=\"hljs-section\">[mysqld_safe]</span>\n<span class=\"hljs-attr\">log-error</span>=/var/log/mysqld.log</code></pre>\n<p>将mysqld下的sql_mode配置去掉，重启服务即可。</p>\n"},{"title":"nginx功能解密","date":"2018-11-20T04:24:30.000Z","_content":"\n> 本文旨在用最通俗的语言讲述最枯燥的基本知识\n\nNginx作为一个高性能的web服务器，想必大家垂涎已久，蠢蠢欲动，想学习一番了吧，语法不多说，网上一大堆。下面博主就nginx\n的非常常用的几个功能做一些讲述和分析，学会了这几个功能，平常的开发和部署就不是什么问题了。因此希望大家看完之后，能自己装个nginx来学习配置测试，这样才能真正的掌握它。\n\n> 文章提纲：\n>\n> 1. 正向代理\n> 2. 反向代理\n> 3. 透明代理\n> 4. 负载均衡\n> 5. 静态服务器\n> 6. Nginx的安装\n\n------\n\n### 1. 正向代理\n\n> 正向代理：内网服务器主动去请求外网的服务的一种行为\n\n光看概念，可能有读者还是搞不明白：什么叫做“正向”，什么叫做“代理”，我们分别来理解一下这两个名词。\n\n> 正向：相同的或一致的方向\n> 代理：自己做不了的事情或者自己不打算做的事情，委托或依靠别人来完成。\n\n借助解释，回归到nginx的概念，正向代理其实就是说客户端无法主动或者不打算完成主动去向某服务器发起请求，而是委托了nginx代理服务器去向服务器发起请求，并且获得处理结果，返回给客户端。\n从下图可以看出：**客户端向目标服务器发起的请求，是由代理服务器代替它向目标主机发起，得到结果之后，通过代理服务器返回给客户端。**\n\n![img](https://www.itcodemonkey.com/data/upload/portal/20181114/1542195547528384.jpg)\n\n\n\n举个栗子：广大社会主义接班人都知道，为了保护祖国的花朵不受外界的乌烟瘴气熏陶，国家对网络做了一些“优化”，正常情况下是不能外网的，但作为程序员的我们如果没有谷歌等搜索引擎的帮助，再销魂的代码也会因此失色，因此，网络上也曾出现过一些fan qiang技术和软件供有需要的人使用，如某VPN等，其实VPN的原理大体上也类似于一个正向代理，也就是需要访问外网的电脑，发起一个访问外网的请求，通过本机上的VPN去寻找一个可以访问国外网站的代理服务器，代理服务器向外国网站发起请求，然后把结果返回给本机。\n\n> 正向代理的配置:\n\n```\nserver {\n    #指定DNS服务器IP地址  \n    resolver 114.114.114.114;   \n    #指定代理端口    \n    listen 8080;  \n    location / {\n        #设定代理服务器的协议和地址（固定不变）    \n        proxy_pass http://$http_host$request_uri;\n    }  \n}\n```\n\n这样就可以做到内网中端口为8080的服务器主动请求到1.2.13.4的主机上，如在Linux下可以：\n\n```\n1curl --proxy proxy_server:8080 http://www.taobao.com/\n```\n\n正向代理的关键配置：\n\n> 1. resolver：DNS服务器IP地址\n> 2. listen：主动发起请求的内网服务器端口\n> 3. proxy_pass：代理服务器的协议和地址\n\n### 2. 反向代理\n\n> 反向代理：reverse proxy，是指用代理服务器来接受客户端发来的请求，然后将请求转发给内网中的上游服务器，上游服务器处理完之后，把结果通过nginx返回给客户端。\n\n上面讲述了正向代理的原理，相信对于反向代理，就很好理解了吧。\n反向代理是对于来自外界的请求，先通过nginx统一接受，然后按需转发给内网中的服务器，并且把处理请求返回给外界客户端，此时代理服务器对外表现的就是一个web服务器，客户端根本不知道“上游服务器”的存在。\n\n\n\n![img](https://www.itcodemonkey.com/data/upload/portal/20181114/1542195548421886.jpg)\n\n\n\n举个栗子：一个服务器的80端口只有一个，而服务器中可能有多个项目，如果A项目是端口是8081，B项目是8082，C项目是8083，假设指向该服务器的域名为www.xxx.com，此时访问B项目是www.xxx.com:8082，以此类推其它项目的URL也是要加上一个端口号，这样就很不美观了，这时我们把80端口给nginx服务器，给每个项目分配一个独立的子域名，如A项目是a.xxx.com，并且在nginx中设置每个项目的转发配置，然后对所有项目的访问都由nginx服务器接受，然后根据配置转发给不同的服务器处理。具体流程如下图所示：\n\n\n\n![img](https://www.itcodemonkey.com/data/upload/portal/20181114/1542195548507062.jpg)\n\n\n\n\n\n> 反向代理配置:\n\n```\nserver {\n    #监听端口\n    listen 80;\n    #服务器名称，也就是客户端访问的域名地址\n    server_name  a.xxx.com;\n    #nginx日志输出文件\n    access_log  logs/nginx.access.log  main;\n    #nginx错误日志输出文件\n    error_log  logs/nginx.error.log;\n    root   html;\n    index  index.html index.htm index.php;\n    location / {\n        #被代理服务器的地址\n        proxy_pass  http://localhost:8081;\n        #对发送给客户端的URL进行修改的操作\n        proxy_redirect     off;\n        proxy_set_header   Host             $host;\n        proxy_set_header   X-Real-IP        $remote_addr;\n        proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;\n        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;\n        proxy_max_temp_file_size 0;\n   }\n}\n```\n\n这样就可以通过a.xxx.com来访问a项目对应的网站了，而不需要带上难看的端口号。\n反向代理的配置关键点是：\n\n> 1. server_name：代表客户端向服务器发起请求时输入的域名\n> 2. proxy_pass：代表源服务器的访问地址，也就是真正处理请求的服务器（localhost+端口号）。\n\n### 3. 透明代理\n\n> 透明代理：也叫做简单代理，意思客户端向服务端发起请求时，请求会先到达透明代理服务器，代理服务器再把请求转交给真实的源服务器处理，也就是是客户端根本不知道有代理服务器的存在。\n\n举个栗子：它的用法有点类似于拦截器，如某些制度严格的公司里的办公电脑，无论我们用电脑做了什么事情，安全部门都能拦截我们对外发送的任何东西，这是因为电脑在对外发送时，实际上先经过网络上的一个透明的服务器，经过它的处理之后，才接着往外网走，而我们在网上冲浪时，根本没有感知到有拦截器拦截我们的数据和信息。\n\n![img](https://www.itcodemonkey.com/data/upload/portal/20181114/1542195548380599.jpg)\n\n\n\n有人说透明代理和反向代理有点像，都是由代理服务器先接受请求，再转发到源服务器。其实本质上是有区别的，透明代理是客户端感知不到代理服务器的存在，而反向代理是客户端感知只有一个代理服务器的存在，因此他们一个是隐藏了自己，一个是隐藏了源服务器。事实上，透明代理和正向代理才是相像的，都是由客户端主动发起请求，代理服务器处理；他们差异点在于：正向代理是代理服务器代替客户端请求，而透明代理是客户端在发起请求时，会先经过透明代理服务器，再达到服务端，在这过程中，客户端是感知不到这个代理服务器的。\n\n### 4. 负载均衡\n\n负载均衡：将服务器接收到的请求按照规则分发的过程，称为负载均衡。负载均衡是反向代理的一种体现。\n\n可能绝大部分人接触到的web项目，刚开始时都是一台服务器就搞定了，但当网站访问量越来越大时，单台服务器就扛不住了，这时候需要增加服务器做成集群来分担流量压力，而在架设这些服务器时，nginx就充当了接受流量和分流的作用了，当请求到nginx服务器时，nginx就可以根据设置好的负载信息，把请求分配到不同的服务器，服务器处理完毕后，nginx获取处理结果返回给客户端，这样，用nginx的反向代理，即可实现了负载均衡。\n\n\n\n![img](https://www.itcodemonkey.com/data/upload/portal/20181114/1542195549241458.jpg)\n\nnginx实现负载均衡有几种模式：\n\n> 1. 轮询：每个请求按时间顺序逐一分配到不同的后端服务器，也是nginx的默认模式。轮询模式的配置很简单，只需要把服务器列表加入到upstream模块中即可。\n\n下面的配置是指：**负载中有三台服务器，当请求到达时，nginx按照时间顺序把请求分配给三台服务器处理。**\n\n```\nupstream serverList {\n    server 1.2.3.4;\n    server 1.2.3.5;\n    server 1.2.3.6;\n}\n```\n\n> 1. ip_hash：每个请求按访问IP的hash结果分配，同一个IP客户端固定访问一个后端服务器。可以保证来自同一ip的请求被打到固定的机器上，可以解决session问题。\n\n下面的配置是指：**负载中有三台服务器，当请求到达时，nginx优先按照ip_hash的结果进行分配，也就是同一个IP的请求固定在某一台服务器上，其它则按时间顺序把请求分配给三台服务器处理。**\n\n```\nupstream serverList {\n    ip_hash\n    server 1.2.3.4;\n    server 1.2.3.5;\n    server 1.2.3.6;\n}\n```\n\n> 1. url_hash：按访问url的hash结果来分配请求，相同的url固定转发到同一个后端服务器处理。\n\n```\nupstream serverList {\n    server 1.2.3.4;\n    server 1.2.3.5;\n    server 1.2.3.6;\n    hash $request_uri;\n    hash_method crc32;\n}\n```\n\n> 1. fair：按后端服务器的响应时间来分配请求，响应时间短的优先分配。\n\n```\nupstream serverList {\n    server 1.2.3.4;\n    server 1.2.3.5;\n    server 1.2.3.6;\n    fair;\n}\n```\n\n而在每一种模式中，每一台服务器后面的可以携带的参数有：\n\n> 1. down: 当前服务器暂不参与负载\n> 2. weight: 权重，值越大，服务器的负载量越大。\n> 3. max_fails：允许请求失败的次数，默认为1。\n> 4. fail_timeout:max_fails次失败后暂停的时间。\n> 5. backup：备份机， 只有其它所有的非backup机器down或者忙时才会请求backup机器。\n\n如下面的配置是指：**负载中有三台服务器，当请求到达时，nginx按时间顺序和权重把请求分配给三台服务器处理，例如有100个请求，有30%是服务器4处理，有50%的请求是服务器5处理，有20%的请求是服务器6处理。**\n\n```\nupstream serverList {\n    server 1.2.3.4 weight=30;\n    server 1.2.3.5 weight=50;\n    server 1.2.3.6 weight=20;\n}\n```\n\n如下面的配置是指：**负载中有三台服务器，服务器4的失败超时时间为60s，服务器5暂不参与负载，服务器6只用作备份机。**\n\n```\nupstream serverList {\n    server 1.2.3.4 fail_timeout=60s;\n    server 1.2.3.5 down;\n    server 1.2.3.6 backup;\n}\n```\n\n> 下面是一个配置负载均衡的示例（只写了关键配置）：\n> 其中：\n>\n> 1. upstream：是负载的配置模块，serverList是名称，随便起\n> 2. server_name：是客户端请求的域名地址\n> 3. proxy_pass：是指向负载的列表的模块，如serverList\n\n```\nupstream serverList {\n    server 1.2.3.4 weight=30;\n    server 1.2.3.5 down;\n    server 1.2.3.6 backup;\n}   \n\nserver {\n    listen 80;\n    server_name  www.xxx.com;\n    root   html;\n    index  index.html index.htm index.php;\n    location / {\n        proxy_pass  http://serverList;\n        proxy_redirect     off;\n        proxy_set_header   Host             $host;\n   }\n}\n```\n\n### 5. 静态服务器\n\n现在很多项目流行前后分离，也就是前端服务器和后端服务器分离，分别部署，这样的方式能让前后端人员能各司其职，不需要互相依赖，而前后分离中，前端项目的运行是不需要用Tomcat、Apache等服务器环境的，因此可以直接用nginx来作为静态服务器。\n\n> 静态服务器的配置如下,其中关键配置为：\n>\n> 1. root：直接静态项目的绝对路径的根目录。\n> 2. server_name : 静态网站访问的域名地址。\n\n```\nserver {\n        listen       80;                                                         \n        server_name  www.xxx.com;                                               \n        client_max_body_size 1024M;\n        location / {\n               root   /var/www/xxx_static;\n               index  index.html;\n           }\n    }\n```\n\n### 6. nginx的安装\n\n学了这么多nginx的配置用法之后，我们需要对每一个知识点做一下测试，才能印象深刻，在此之前，我们需要知道nginx是怎么安装，下面以Linux环境为例，简述yum方式安装nginx的步骤：\n\n1. 安装依赖：\n\n```\n//一键安装上面四个依赖\nyum -y install gcc zlib zlib-devel pcre-devel openssl openssl-devel\n```\n\n1. 安装nginx：\n\n```\nyum install nginx\n```\n\n1. 检查是否安装成功：\n\n```\nnginx -v\n```\n\n1. 启动/挺尸nginx：\n\n```\n/etc/init.d/nginx start\n/etc/init.d/nginx stop\n```\n\n1. 编辑配置文件：\n\n```\n/etc/nginx/nginx.conf\n```\n\n这些步骤都完成之后，我们就可以进入nginx的配置文件nginx.conf对上面的各个知识点，进行配置和测试了。\n\n\n> 来自：[编程无界](https://mp.weixin.qq.com/s/DDbLVj0jxpfOmJDZxt9SYg)（微信号：qianshic），作者：假不理\n","source":"_posts/0008-nginx-all.md","raw":"---\ntitle: nginx功能解密\ndate: 2018-11-20 12:24:30\ntags:\n    - Nginx\ncategories:\n    - 工具\n---\n\n> 本文旨在用最通俗的语言讲述最枯燥的基本知识\n\nNginx作为一个高性能的web服务器，想必大家垂涎已久，蠢蠢欲动，想学习一番了吧，语法不多说，网上一大堆。下面博主就nginx\n的非常常用的几个功能做一些讲述和分析，学会了这几个功能，平常的开发和部署就不是什么问题了。因此希望大家看完之后，能自己装个nginx来学习配置测试，这样才能真正的掌握它。\n\n> 文章提纲：\n>\n> 1. 正向代理\n> 2. 反向代理\n> 3. 透明代理\n> 4. 负载均衡\n> 5. 静态服务器\n> 6. Nginx的安装\n\n------\n\n### 1. 正向代理\n\n> 正向代理：内网服务器主动去请求外网的服务的一种行为\n\n光看概念，可能有读者还是搞不明白：什么叫做“正向”，什么叫做“代理”，我们分别来理解一下这两个名词。\n\n> 正向：相同的或一致的方向\n> 代理：自己做不了的事情或者自己不打算做的事情，委托或依靠别人来完成。\n\n借助解释，回归到nginx的概念，正向代理其实就是说客户端无法主动或者不打算完成主动去向某服务器发起请求，而是委托了nginx代理服务器去向服务器发起请求，并且获得处理结果，返回给客户端。\n从下图可以看出：**客户端向目标服务器发起的请求，是由代理服务器代替它向目标主机发起，得到结果之后，通过代理服务器返回给客户端。**\n\n![img](https://www.itcodemonkey.com/data/upload/portal/20181114/1542195547528384.jpg)\n\n\n\n举个栗子：广大社会主义接班人都知道，为了保护祖国的花朵不受外界的乌烟瘴气熏陶，国家对网络做了一些“优化”，正常情况下是不能外网的，但作为程序员的我们如果没有谷歌等搜索引擎的帮助，再销魂的代码也会因此失色，因此，网络上也曾出现过一些fan qiang技术和软件供有需要的人使用，如某VPN等，其实VPN的原理大体上也类似于一个正向代理，也就是需要访问外网的电脑，发起一个访问外网的请求，通过本机上的VPN去寻找一个可以访问国外网站的代理服务器，代理服务器向外国网站发起请求，然后把结果返回给本机。\n\n> 正向代理的配置:\n\n```\nserver {\n    #指定DNS服务器IP地址  \n    resolver 114.114.114.114;   \n    #指定代理端口    \n    listen 8080;  \n    location / {\n        #设定代理服务器的协议和地址（固定不变）    \n        proxy_pass http://$http_host$request_uri;\n    }  \n}\n```\n\n这样就可以做到内网中端口为8080的服务器主动请求到1.2.13.4的主机上，如在Linux下可以：\n\n```\n1curl --proxy proxy_server:8080 http://www.taobao.com/\n```\n\n正向代理的关键配置：\n\n> 1. resolver：DNS服务器IP地址\n> 2. listen：主动发起请求的内网服务器端口\n> 3. proxy_pass：代理服务器的协议和地址\n\n### 2. 反向代理\n\n> 反向代理：reverse proxy，是指用代理服务器来接受客户端发来的请求，然后将请求转发给内网中的上游服务器，上游服务器处理完之后，把结果通过nginx返回给客户端。\n\n上面讲述了正向代理的原理，相信对于反向代理，就很好理解了吧。\n反向代理是对于来自外界的请求，先通过nginx统一接受，然后按需转发给内网中的服务器，并且把处理请求返回给外界客户端，此时代理服务器对外表现的就是一个web服务器，客户端根本不知道“上游服务器”的存在。\n\n\n\n![img](https://www.itcodemonkey.com/data/upload/portal/20181114/1542195548421886.jpg)\n\n\n\n举个栗子：一个服务器的80端口只有一个，而服务器中可能有多个项目，如果A项目是端口是8081，B项目是8082，C项目是8083，假设指向该服务器的域名为www.xxx.com，此时访问B项目是www.xxx.com:8082，以此类推其它项目的URL也是要加上一个端口号，这样就很不美观了，这时我们把80端口给nginx服务器，给每个项目分配一个独立的子域名，如A项目是a.xxx.com，并且在nginx中设置每个项目的转发配置，然后对所有项目的访问都由nginx服务器接受，然后根据配置转发给不同的服务器处理。具体流程如下图所示：\n\n\n\n![img](https://www.itcodemonkey.com/data/upload/portal/20181114/1542195548507062.jpg)\n\n\n\n\n\n> 反向代理配置:\n\n```\nserver {\n    #监听端口\n    listen 80;\n    #服务器名称，也就是客户端访问的域名地址\n    server_name  a.xxx.com;\n    #nginx日志输出文件\n    access_log  logs/nginx.access.log  main;\n    #nginx错误日志输出文件\n    error_log  logs/nginx.error.log;\n    root   html;\n    index  index.html index.htm index.php;\n    location / {\n        #被代理服务器的地址\n        proxy_pass  http://localhost:8081;\n        #对发送给客户端的URL进行修改的操作\n        proxy_redirect     off;\n        proxy_set_header   Host             $host;\n        proxy_set_header   X-Real-IP        $remote_addr;\n        proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;\n        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;\n        proxy_max_temp_file_size 0;\n   }\n}\n```\n\n这样就可以通过a.xxx.com来访问a项目对应的网站了，而不需要带上难看的端口号。\n反向代理的配置关键点是：\n\n> 1. server_name：代表客户端向服务器发起请求时输入的域名\n> 2. proxy_pass：代表源服务器的访问地址，也就是真正处理请求的服务器（localhost+端口号）。\n\n### 3. 透明代理\n\n> 透明代理：也叫做简单代理，意思客户端向服务端发起请求时，请求会先到达透明代理服务器，代理服务器再把请求转交给真实的源服务器处理，也就是是客户端根本不知道有代理服务器的存在。\n\n举个栗子：它的用法有点类似于拦截器，如某些制度严格的公司里的办公电脑，无论我们用电脑做了什么事情，安全部门都能拦截我们对外发送的任何东西，这是因为电脑在对外发送时，实际上先经过网络上的一个透明的服务器，经过它的处理之后，才接着往外网走，而我们在网上冲浪时，根本没有感知到有拦截器拦截我们的数据和信息。\n\n![img](https://www.itcodemonkey.com/data/upload/portal/20181114/1542195548380599.jpg)\n\n\n\n有人说透明代理和反向代理有点像，都是由代理服务器先接受请求，再转发到源服务器。其实本质上是有区别的，透明代理是客户端感知不到代理服务器的存在，而反向代理是客户端感知只有一个代理服务器的存在，因此他们一个是隐藏了自己，一个是隐藏了源服务器。事实上，透明代理和正向代理才是相像的，都是由客户端主动发起请求，代理服务器处理；他们差异点在于：正向代理是代理服务器代替客户端请求，而透明代理是客户端在发起请求时，会先经过透明代理服务器，再达到服务端，在这过程中，客户端是感知不到这个代理服务器的。\n\n### 4. 负载均衡\n\n负载均衡：将服务器接收到的请求按照规则分发的过程，称为负载均衡。负载均衡是反向代理的一种体现。\n\n可能绝大部分人接触到的web项目，刚开始时都是一台服务器就搞定了，但当网站访问量越来越大时，单台服务器就扛不住了，这时候需要增加服务器做成集群来分担流量压力，而在架设这些服务器时，nginx就充当了接受流量和分流的作用了，当请求到nginx服务器时，nginx就可以根据设置好的负载信息，把请求分配到不同的服务器，服务器处理完毕后，nginx获取处理结果返回给客户端，这样，用nginx的反向代理，即可实现了负载均衡。\n\n\n\n![img](https://www.itcodemonkey.com/data/upload/portal/20181114/1542195549241458.jpg)\n\nnginx实现负载均衡有几种模式：\n\n> 1. 轮询：每个请求按时间顺序逐一分配到不同的后端服务器，也是nginx的默认模式。轮询模式的配置很简单，只需要把服务器列表加入到upstream模块中即可。\n\n下面的配置是指：**负载中有三台服务器，当请求到达时，nginx按照时间顺序把请求分配给三台服务器处理。**\n\n```\nupstream serverList {\n    server 1.2.3.4;\n    server 1.2.3.5;\n    server 1.2.3.6;\n}\n```\n\n> 1. ip_hash：每个请求按访问IP的hash结果分配，同一个IP客户端固定访问一个后端服务器。可以保证来自同一ip的请求被打到固定的机器上，可以解决session问题。\n\n下面的配置是指：**负载中有三台服务器，当请求到达时，nginx优先按照ip_hash的结果进行分配，也就是同一个IP的请求固定在某一台服务器上，其它则按时间顺序把请求分配给三台服务器处理。**\n\n```\nupstream serverList {\n    ip_hash\n    server 1.2.3.4;\n    server 1.2.3.5;\n    server 1.2.3.6;\n}\n```\n\n> 1. url_hash：按访问url的hash结果来分配请求，相同的url固定转发到同一个后端服务器处理。\n\n```\nupstream serverList {\n    server 1.2.3.4;\n    server 1.2.3.5;\n    server 1.2.3.6;\n    hash $request_uri;\n    hash_method crc32;\n}\n```\n\n> 1. fair：按后端服务器的响应时间来分配请求，响应时间短的优先分配。\n\n```\nupstream serverList {\n    server 1.2.3.4;\n    server 1.2.3.5;\n    server 1.2.3.6;\n    fair;\n}\n```\n\n而在每一种模式中，每一台服务器后面的可以携带的参数有：\n\n> 1. down: 当前服务器暂不参与负载\n> 2. weight: 权重，值越大，服务器的负载量越大。\n> 3. max_fails：允许请求失败的次数，默认为1。\n> 4. fail_timeout:max_fails次失败后暂停的时间。\n> 5. backup：备份机， 只有其它所有的非backup机器down或者忙时才会请求backup机器。\n\n如下面的配置是指：**负载中有三台服务器，当请求到达时，nginx按时间顺序和权重把请求分配给三台服务器处理，例如有100个请求，有30%是服务器4处理，有50%的请求是服务器5处理，有20%的请求是服务器6处理。**\n\n```\nupstream serverList {\n    server 1.2.3.4 weight=30;\n    server 1.2.3.5 weight=50;\n    server 1.2.3.6 weight=20;\n}\n```\n\n如下面的配置是指：**负载中有三台服务器，服务器4的失败超时时间为60s，服务器5暂不参与负载，服务器6只用作备份机。**\n\n```\nupstream serverList {\n    server 1.2.3.4 fail_timeout=60s;\n    server 1.2.3.5 down;\n    server 1.2.3.6 backup;\n}\n```\n\n> 下面是一个配置负载均衡的示例（只写了关键配置）：\n> 其中：\n>\n> 1. upstream：是负载的配置模块，serverList是名称，随便起\n> 2. server_name：是客户端请求的域名地址\n> 3. proxy_pass：是指向负载的列表的模块，如serverList\n\n```\nupstream serverList {\n    server 1.2.3.4 weight=30;\n    server 1.2.3.5 down;\n    server 1.2.3.6 backup;\n}   \n\nserver {\n    listen 80;\n    server_name  www.xxx.com;\n    root   html;\n    index  index.html index.htm index.php;\n    location / {\n        proxy_pass  http://serverList;\n        proxy_redirect     off;\n        proxy_set_header   Host             $host;\n   }\n}\n```\n\n### 5. 静态服务器\n\n现在很多项目流行前后分离，也就是前端服务器和后端服务器分离，分别部署，这样的方式能让前后端人员能各司其职，不需要互相依赖，而前后分离中，前端项目的运行是不需要用Tomcat、Apache等服务器环境的，因此可以直接用nginx来作为静态服务器。\n\n> 静态服务器的配置如下,其中关键配置为：\n>\n> 1. root：直接静态项目的绝对路径的根目录。\n> 2. server_name : 静态网站访问的域名地址。\n\n```\nserver {\n        listen       80;                                                         \n        server_name  www.xxx.com;                                               \n        client_max_body_size 1024M;\n        location / {\n               root   /var/www/xxx_static;\n               index  index.html;\n           }\n    }\n```\n\n### 6. nginx的安装\n\n学了这么多nginx的配置用法之后，我们需要对每一个知识点做一下测试，才能印象深刻，在此之前，我们需要知道nginx是怎么安装，下面以Linux环境为例，简述yum方式安装nginx的步骤：\n\n1. 安装依赖：\n\n```\n//一键安装上面四个依赖\nyum -y install gcc zlib zlib-devel pcre-devel openssl openssl-devel\n```\n\n1. 安装nginx：\n\n```\nyum install nginx\n```\n\n1. 检查是否安装成功：\n\n```\nnginx -v\n```\n\n1. 启动/挺尸nginx：\n\n```\n/etc/init.d/nginx start\n/etc/init.d/nginx stop\n```\n\n1. 编辑配置文件：\n\n```\n/etc/nginx/nginx.conf\n```\n\n这些步骤都完成之后，我们就可以进入nginx的配置文件nginx.conf对上面的各个知识点，进行配置和测试了。\n\n\n> 来自：[编程无界](https://mp.weixin.qq.com/s/DDbLVj0jxpfOmJDZxt9SYg)（微信号：qianshic），作者：假不理\n","slug":"0008-nginx-all","published":1,"updated":"2020-07-17T02:32:01.149Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcpntufw001104oi7foqodqp","content":"<blockquote>\n<p>本文旨在用最通俗的语言讲述最枯燥的基本知识</p>\n</blockquote>\n<p>Nginx作为一个高性能的web服务器，想必大家垂涎已久，蠢蠢欲动，想学习一番了吧，语法不多说，网上一大堆。下面博主就nginx<br>的非常常用的几个功能做一些讲述和分析，学会了这几个功能，平常的开发和部署就不是什么问题了。因此希望大家看完之后，能自己装个nginx来学习配置测试，这样才能真正的掌握它。</p>\n<blockquote>\n<p>文章提纲：</p>\n<ol>\n<li>正向代理</li>\n<li>反向代理</li>\n<li>透明代理</li>\n<li>负载均衡</li>\n<li>静态服务器</li>\n<li>Nginx的安装</li>\n</ol>\n</blockquote>\n<hr>\n<h3 id=\"1-正向代理\"><a href=\"#1-正向代理\" class=\"headerlink\" title=\"1. 正向代理\"></a>1. 正向代理</h3><blockquote>\n<p>正向代理：内网服务器主动去请求外网的服务的一种行为</p>\n</blockquote>\n<p>光看概念，可能有读者还是搞不明白：什么叫做“正向”，什么叫做“代理”，我们分别来理解一下这两个名词。</p>\n<blockquote>\n<p>正向：相同的或一致的方向<br>代理：自己做不了的事情或者自己不打算做的事情，委托或依靠别人来完成。</p>\n</blockquote>\n<p>借助解释，回归到nginx的概念，正向代理其实就是说客户端无法主动或者不打算完成主动去向某服务器发起请求，而是委托了nginx代理服务器去向服务器发起请求，并且获得处理结果，返回给客户端。<br>从下图可以看出：<strong>客户端向目标服务器发起的请求，是由代理服务器代替它向目标主机发起，得到结果之后，通过代理服务器返回给客户端。</strong></p>\n<p><img src=\"https://www.itcodemonkey.com/data/upload/portal/20181114/1542195547528384.jpg\" srcset=\"/img/loading.gif\" alt=\"img\"></p>\n<p>举个栗子：广大社会主义接班人都知道，为了保护祖国的花朵不受外界的乌烟瘴气熏陶，国家对网络做了一些“优化”，正常情况下是不能外网的，但作为程序员的我们如果没有谷歌等搜索引擎的帮助，再销魂的代码也会因此失色，因此，网络上也曾出现过一些fan qiang技术和软件供有需要的人使用，如某VPN等，其实VPN的原理大体上也类似于一个正向代理，也就是需要访问外网的电脑，发起一个访问外网的请求，通过本机上的VPN去寻找一个可以访问国外网站的代理服务器，代理服务器向外国网站发起请求，然后把结果返回给本机。</p>\n<blockquote>\n<p>正向代理的配置:</p>\n</blockquote>\n<pre><code class=\"hljs undefined\"><span class=\"hljs-section\">server</span> &#123;\n    <span class=\"hljs-comment\">#指定DNS服务器IP地址  </span>\n    <span class=\"hljs-attribute\">resolver</span> <span class=\"hljs-number\">114.114.114.114</span>;   \n    <span class=\"hljs-comment\">#指定代理端口    </span>\n    <span class=\"hljs-attribute\">listen</span> <span class=\"hljs-number\">8080</span>;  \n    <span class=\"hljs-attribute\">location</span> / &#123;\n        <span class=\"hljs-comment\">#设定代理服务器的协议和地址（固定不变）    </span>\n        <span class=\"hljs-attribute\">proxy_pass</span> http://<span class=\"hljs-variable\">$http_host</span><span class=\"hljs-variable\">$request_uri</span>;\n    &#125;  \n&#125;</code></pre>\n<p>这样就可以做到内网中端口为8080的服务器主动请求到1.2.13.4的主机上，如在Linux下可以：</p>\n<pre><code class=\"hljs undefined\"><span class=\"hljs-number\">1</span>curl --proxy <span class=\"hljs-string\">proxy_server:</span><span class=\"hljs-number\">8080</span> <span class=\"hljs-string\">http:</span><span class=\"hljs-comment\">//www.taobao.com/</span></code></pre>\n<p>正向代理的关键配置：</p>\n<blockquote>\n<ol>\n<li>resolver：DNS服务器IP地址</li>\n<li>listen：主动发起请求的内网服务器端口</li>\n<li>proxy_pass：代理服务器的协议和地址</li>\n</ol>\n</blockquote>\n<h3 id=\"2-反向代理\"><a href=\"#2-反向代理\" class=\"headerlink\" title=\"2. 反向代理\"></a>2. 反向代理</h3><blockquote>\n<p>反向代理：reverse proxy，是指用代理服务器来接受客户端发来的请求，然后将请求转发给内网中的上游服务器，上游服务器处理完之后，把结果通过nginx返回给客户端。</p>\n</blockquote>\n<p>上面讲述了正向代理的原理，相信对于反向代理，就很好理解了吧。<br>反向代理是对于来自外界的请求，先通过nginx统一接受，然后按需转发给内网中的服务器，并且把处理请求返回给外界客户端，此时代理服务器对外表现的就是一个web服务器，客户端根本不知道“上游服务器”的存在。</p>\n<p><img src=\"https://www.itcodemonkey.com/data/upload/portal/20181114/1542195548421886.jpg\" srcset=\"/img/loading.gif\" alt=\"img\"></p>\n<p>举个栗子：一个服务器的80端口只有一个，而服务器中可能有多个项目，如果A项目是端口是8081，B项目是8082，C项目是8083，假设指向该服务器的域名为<a href=\"http://www.xxx.com，此时访问B项目是www.xxx.com:8082，以此类推其它项目的URL也是要加上一个端口号，这样就很不美观了，这时我们把80端口给nginx服务器，给每个项目分配一个独立的子域名，如A项目是a.xxx.com，并且在nginx中设置每个项目的转发配置，然后对所有项目的访问都由nginx服务器接受，然后根据配置转发给不同的服务器处理。具体流程如下图所示：\" target=\"_blank\" rel=\"noopener\">www.xxx.com，此时访问B项目是www.xxx.com:8082，以此类推其它项目的URL也是要加上一个端口号，这样就很不美观了，这时我们把80端口给nginx服务器，给每个项目分配一个独立的子域名，如A项目是a.xxx.com，并且在nginx中设置每个项目的转发配置，然后对所有项目的访问都由nginx服务器接受，然后根据配置转发给不同的服务器处理。具体流程如下图所示：</a></p>\n<p><img src=\"https://www.itcodemonkey.com/data/upload/portal/20181114/1542195548507062.jpg\" srcset=\"/img/loading.gif\" alt=\"img\"></p>\n<blockquote>\n<p>反向代理配置:</p>\n</blockquote>\n<pre><code class=\"hljs undefined\"><span class=\"hljs-section\">server</span> &#123;\n    <span class=\"hljs-comment\">#监听端口</span>\n    <span class=\"hljs-attribute\">listen</span> <span class=\"hljs-number\">80</span>;\n    <span class=\"hljs-comment\">#服务器名称，也就是客户端访问的域名地址</span>\n    <span class=\"hljs-attribute\">server_name</span>  a.xxx.com;\n    <span class=\"hljs-comment\">#nginx日志输出文件</span>\n    <span class=\"hljs-attribute\">access_log</span>  logs/nginx.access.log  main;\n    <span class=\"hljs-comment\">#nginx错误日志输出文件</span>\n    <span class=\"hljs-attribute\">error_log</span>  logs/nginx.<span class=\"hljs-literal\">error</span>.log;\n    <span class=\"hljs-attribute\">root</span>   html;\n    <span class=\"hljs-attribute\">index</span>  index.html index.htm index.php;\n    <span class=\"hljs-attribute\">location</span> / &#123;\n        <span class=\"hljs-comment\">#被代理服务器的地址</span>\n        <span class=\"hljs-attribute\">proxy_pass</span>  http://localhost:8081;\n        <span class=\"hljs-comment\">#对发送给客户端的URL进行修改的操作</span>\n        <span class=\"hljs-attribute\">proxy_redirect</span>     <span class=\"hljs-literal\">off</span>;\n        <span class=\"hljs-attribute\">proxy_set_header</span>   Host             <span class=\"hljs-variable\">$host</span>;\n        <span class=\"hljs-attribute\">proxy_set_header</span>   X-Real-IP        <span class=\"hljs-variable\">$remote_addr</span>;\n        <span class=\"hljs-attribute\">proxy_set_header</span>   X-Forwarded-For  <span class=\"hljs-variable\">$proxy_add_x_forwarded_for</span>;\n        <span class=\"hljs-attribute\">proxy_next_upstream</span> <span class=\"hljs-literal\">error</span> timeout invalid_header http_500 http_502 http_503 http_504;\n        <span class=\"hljs-attribute\">proxy_max_temp_file_size</span> <span class=\"hljs-number\">0</span>;\n   &#125;\n&#125;</code></pre>\n<p>这样就可以通过a.xxx.com来访问a项目对应的网站了，而不需要带上难看的端口号。<br>反向代理的配置关键点是：</p>\n<blockquote>\n<ol>\n<li>server_name：代表客户端向服务器发起请求时输入的域名</li>\n<li>proxy_pass：代表源服务器的访问地址，也就是真正处理请求的服务器（localhost+端口号）。</li>\n</ol>\n</blockquote>\n<h3 id=\"3-透明代理\"><a href=\"#3-透明代理\" class=\"headerlink\" title=\"3. 透明代理\"></a>3. 透明代理</h3><blockquote>\n<p>透明代理：也叫做简单代理，意思客户端向服务端发起请求时，请求会先到达透明代理服务器，代理服务器再把请求转交给真实的源服务器处理，也就是是客户端根本不知道有代理服务器的存在。</p>\n</blockquote>\n<p>举个栗子：它的用法有点类似于拦截器，如某些制度严格的公司里的办公电脑，无论我们用电脑做了什么事情，安全部门都能拦截我们对外发送的任何东西，这是因为电脑在对外发送时，实际上先经过网络上的一个透明的服务器，经过它的处理之后，才接着往外网走，而我们在网上冲浪时，根本没有感知到有拦截器拦截我们的数据和信息。</p>\n<p><img src=\"https://www.itcodemonkey.com/data/upload/portal/20181114/1542195548380599.jpg\" srcset=\"/img/loading.gif\" alt=\"img\"></p>\n<p>有人说透明代理和反向代理有点像，都是由代理服务器先接受请求，再转发到源服务器。其实本质上是有区别的，透明代理是客户端感知不到代理服务器的存在，而反向代理是客户端感知只有一个代理服务器的存在，因此他们一个是隐藏了自己，一个是隐藏了源服务器。事实上，透明代理和正向代理才是相像的，都是由客户端主动发起请求，代理服务器处理；他们差异点在于：正向代理是代理服务器代替客户端请求，而透明代理是客户端在发起请求时，会先经过透明代理服务器，再达到服务端，在这过程中，客户端是感知不到这个代理服务器的。</p>\n<h3 id=\"4-负载均衡\"><a href=\"#4-负载均衡\" class=\"headerlink\" title=\"4. 负载均衡\"></a>4. 负载均衡</h3><p>负载均衡：将服务器接收到的请求按照规则分发的过程，称为负载均衡。负载均衡是反向代理的一种体现。</p>\n<p>可能绝大部分人接触到的web项目，刚开始时都是一台服务器就搞定了，但当网站访问量越来越大时，单台服务器就扛不住了，这时候需要增加服务器做成集群来分担流量压力，而在架设这些服务器时，nginx就充当了接受流量和分流的作用了，当请求到nginx服务器时，nginx就可以根据设置好的负载信息，把请求分配到不同的服务器，服务器处理完毕后，nginx获取处理结果返回给客户端，这样，用nginx的反向代理，即可实现了负载均衡。</p>\n<p><img src=\"https://www.itcodemonkey.com/data/upload/portal/20181114/1542195549241458.jpg\" srcset=\"/img/loading.gif\" alt=\"img\"></p>\n<p>nginx实现负载均衡有几种模式：</p>\n<blockquote>\n<ol>\n<li>轮询：每个请求按时间顺序逐一分配到不同的后端服务器，也是nginx的默认模式。轮询模式的配置很简单，只需要把服务器列表加入到upstream模块中即可。</li>\n</ol>\n</blockquote>\n<p>下面的配置是指：<strong>负载中有三台服务器，当请求到达时，nginx按照时间顺序把请求分配给三台服务器处理。</strong></p>\n<pre><code class=\"hljs undefined\">upstream serverList &#123;\n   <span class=\"hljs-built_in\"> server </span>1.2.3.4;\n   <span class=\"hljs-built_in\"> server </span>1.2.3.5;\n   <span class=\"hljs-built_in\"> server </span>1.2.3.6;\n&#125;</code></pre>\n<blockquote>\n<ol>\n<li>ip_hash：每个请求按访问IP的hash结果分配，同一个IP客户端固定访问一个后端服务器。可以保证来自同一ip的请求被打到固定的机器上，可以解决session问题。</li>\n</ol>\n</blockquote>\n<p>下面的配置是指：<strong>负载中有三台服务器，当请求到达时，nginx优先按照ip_hash的结果进行分配，也就是同一个IP的请求固定在某一台服务器上，其它则按时间顺序把请求分配给三台服务器处理。</strong></p>\n<pre><code class=\"hljs undefined\">upstream serverList &#123;\n    ip_hash\n   <span class=\"hljs-built_in\"> server </span>1.2.3.4;\n   <span class=\"hljs-built_in\"> server </span>1.2.3.5;\n   <span class=\"hljs-built_in\"> server </span>1.2.3.6;\n&#125;</code></pre>\n<blockquote>\n<ol>\n<li>url_hash：按访问url的hash结果来分配请求，相同的url固定转发到同一个后端服务器处理。</li>\n</ol>\n</blockquote>\n<pre><code class=\"hljs undefined\">upstream serverList &#123;\n   <span class=\"hljs-built_in\"> server </span>1.2.3.4;\n   <span class=\"hljs-built_in\"> server </span>1.2.3.5;\n   <span class=\"hljs-built_in\"> server </span>1.2.3.6;\n    hash <span class=\"hljs-variable\">$request_uri</span>;\n    hash_method crc32;\n&#125;</code></pre>\n<blockquote>\n<ol>\n<li>fair：按后端服务器的响应时间来分配请求，响应时间短的优先分配。</li>\n</ol>\n</blockquote>\n<pre><code class=\"hljs undefined\">upstream serverList &#123;\n   <span class=\"hljs-built_in\"> server </span>1.2.3.4;\n   <span class=\"hljs-built_in\"> server </span>1.2.3.5;\n   <span class=\"hljs-built_in\"> server </span>1.2.3.6;\n    fair;\n&#125;</code></pre>\n<p>而在每一种模式中，每一台服务器后面的可以携带的参数有：</p>\n<blockquote>\n<ol>\n<li>down: 当前服务器暂不参与负载</li>\n<li>weight: 权重，值越大，服务器的负载量越大。</li>\n<li>max_fails：允许请求失败的次数，默认为1。</li>\n<li>fail_timeout:max_fails次失败后暂停的时间。</li>\n<li>backup：备份机， 只有其它所有的非backup机器down或者忙时才会请求backup机器。</li>\n</ol>\n</blockquote>\n<p>如下面的配置是指：<strong>负载中有三台服务器，当请求到达时，nginx按时间顺序和权重把请求分配给三台服务器处理，例如有100个请求，有30%是服务器4处理，有50%的请求是服务器5处理，有20%的请求是服务器6处理。</strong></p>\n<pre><code class=\"hljs undefined\">upstream serverList &#123;\n   <span class=\"hljs-built_in\"> server </span>1.2.3.4 <span class=\"hljs-attribute\">weight</span>=30;\n   <span class=\"hljs-built_in\"> server </span>1.2.3.5 <span class=\"hljs-attribute\">weight</span>=50;\n   <span class=\"hljs-built_in\"> server </span>1.2.3.6 <span class=\"hljs-attribute\">weight</span>=20;\n&#125;</code></pre>\n<p>如下面的配置是指：<strong>负载中有三台服务器，服务器4的失败超时时间为60s，服务器5暂不参与负载，服务器6只用作备份机。</strong></p>\n<pre><code class=\"hljs undefined\">upstream serverList &#123;\n   <span class=\"hljs-built_in\"> server </span>1.2.3.4 <span class=\"hljs-attribute\">fail_timeout</span>=60s;\n   <span class=\"hljs-built_in\"> server </span>1.2.3.5 down;\n   <span class=\"hljs-built_in\"> server </span>1.2.3.6 backup;\n&#125;</code></pre>\n<blockquote>\n<p>下面是一个配置负载均衡的示例（只写了关键配置）：<br>其中：</p>\n<ol>\n<li>upstream：是负载的配置模块，serverList是名称，随便起</li>\n<li>server_name：是客户端请求的域名地址</li>\n<li>proxy_pass：是指向负载的列表的模块，如serverList</li>\n</ol>\n</blockquote>\n<pre><code class=\"hljs undefined\"><span class=\"hljs-attribute\">upstream</span> serverList &#123;\n    <span class=\"hljs-attribute\">server</span> <span class=\"hljs-number\">1.2.3.4</span> weight=<span class=\"hljs-number\">30</span>;\n    <span class=\"hljs-attribute\">server</span> <span class=\"hljs-number\">1.2.3.5</span> down;\n    <span class=\"hljs-attribute\">server</span> <span class=\"hljs-number\">1.2.3.6</span> backup;\n&#125;   \n\n<span class=\"hljs-section\">server</span> &#123;\n    <span class=\"hljs-attribute\">listen</span> <span class=\"hljs-number\">80</span>;\n    <span class=\"hljs-attribute\">server_name</span>  www.xxx.com;\n    <span class=\"hljs-attribute\">root</span>   html;\n    <span class=\"hljs-attribute\">index</span>  index.html index.htm index.php;\n    <span class=\"hljs-attribute\">location</span> / &#123;\n        <span class=\"hljs-attribute\">proxy_pass</span>  http://serverList;\n        <span class=\"hljs-attribute\">proxy_redirect</span>     <span class=\"hljs-literal\">off</span>;\n        <span class=\"hljs-attribute\">proxy_set_header</span>   Host             <span class=\"hljs-variable\">$host</span>;\n   &#125;\n&#125;</code></pre>\n<h3 id=\"5-静态服务器\"><a href=\"#5-静态服务器\" class=\"headerlink\" title=\"5. 静态服务器\"></a>5. 静态服务器</h3><p>现在很多项目流行前后分离，也就是前端服务器和后端服务器分离，分别部署，这样的方式能让前后端人员能各司其职，不需要互相依赖，而前后分离中，前端项目的运行是不需要用Tomcat、Apache等服务器环境的，因此可以直接用nginx来作为静态服务器。</p>\n<blockquote>\n<p>静态服务器的配置如下,其中关键配置为：</p>\n<ol>\n<li>root：直接静态项目的绝对路径的根目录。</li>\n<li>server_name : 静态网站访问的域名地址。</li>\n</ol>\n</blockquote>\n<pre><code class=\"hljs undefined\"><span class=\"hljs-section\">server</span> &#123;\n        <span class=\"hljs-attribute\">listen</span>       <span class=\"hljs-number\">80</span>;                                                         \n        <span class=\"hljs-attribute\">server_name</span>  www.xxx.com;                                               \n        <span class=\"hljs-attribute\">client_max_body_size</span> <span class=\"hljs-number\">1024M</span>;\n        <span class=\"hljs-attribute\">location</span> / &#123;\n               <span class=\"hljs-attribute\">root</span>   /var/www/xxx_static;\n               <span class=\"hljs-attribute\">index</span>  index.html;\n           &#125;\n    &#125;</code></pre>\n<h3 id=\"6-nginx的安装\"><a href=\"#6-nginx的安装\" class=\"headerlink\" title=\"6. nginx的安装\"></a>6. nginx的安装</h3><p>学了这么多nginx的配置用法之后，我们需要对每一个知识点做一下测试，才能印象深刻，在此之前，我们需要知道nginx是怎么安装，下面以Linux环境为例，简述yum方式安装nginx的步骤：</p>\n<ol>\n<li>安装依赖：</li>\n</ol>\n<pre><code class=\"hljs undefined\">//一键安装上面四个依赖\nyum -y install gcc <span class=\"hljs-literal\">zlib</span> <span class=\"hljs-literal\">zlib</span>-devel pcre-devel openssl openssl-devel</code></pre>\n<ol>\n<li>安装nginx：</li>\n</ol>\n<pre><code class=\"hljs undefined\">yum <span class=\"hljs-keyword\">install</span> nginx</code></pre>\n<ol>\n<li>检查是否安装成功：</li>\n</ol>\n<pre><code class=\"hljs undefined\"><span class=\"hljs-attribute\">nginx -v</span></code></pre>\n<ol>\n<li>启动/挺尸nginx：</li>\n</ol>\n<pre><code class=\"hljs undefined\">/etc/init.d/nginx <span class=\"hljs-literal\">start</span>\n/etc/init.d/nginx <span class=\"hljs-literal\">stop</span></code></pre>\n<ol>\n<li>编辑配置文件：</li>\n</ol>\n<pre><code class=\"hljs undefined\"><span class=\"hljs-regexp\">/etc/</span>nginx<span class=\"hljs-regexp\">/nginx.conf</span></code></pre>\n<p>这些步骤都完成之后，我们就可以进入nginx的配置文件nginx.conf对上面的各个知识点，进行配置和测试了。</p>\n<blockquote>\n<p>来自：<a href=\"https://mp.weixin.qq.com/s/DDbLVj0jxpfOmJDZxt9SYg\" target=\"_blank\" rel=\"noopener\">编程无界</a>（微信号：qianshic），作者：假不理</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>本文旨在用最通俗的语言讲述最枯燥的基本知识</p>\n</blockquote>\n<p>Nginx作为一个高性能的web服务器，想必大家垂涎已久，蠢蠢欲动，想学习一番了吧，语法不多说，网上一大堆。下面博主就nginx<br>的非常常用的几个功能做一些讲述和分析，学会了这几个功能，平常的开发和部署就不是什么问题了。因此希望大家看完之后，能自己装个nginx来学习配置测试，这样才能真正的掌握它。</p>\n<blockquote>\n<p>文章提纲：</p>\n<ol>\n<li>正向代理</li>\n<li>反向代理</li>\n<li>透明代理</li>\n<li>负载均衡</li>\n<li>静态服务器</li>\n<li>Nginx的安装</li>\n</ol>\n</blockquote>\n<hr>\n<h3 id=\"1-正向代理\"><a href=\"#1-正向代理\" class=\"headerlink\" title=\"1. 正向代理\"></a>1. 正向代理</h3><blockquote>\n<p>正向代理：内网服务器主动去请求外网的服务的一种行为</p>\n</blockquote>\n<p>光看概念，可能有读者还是搞不明白：什么叫做“正向”，什么叫做“代理”，我们分别来理解一下这两个名词。</p>\n<blockquote>\n<p>正向：相同的或一致的方向<br>代理：自己做不了的事情或者自己不打算做的事情，委托或依靠别人来完成。</p>\n</blockquote>\n<p>借助解释，回归到nginx的概念，正向代理其实就是说客户端无法主动或者不打算完成主动去向某服务器发起请求，而是委托了nginx代理服务器去向服务器发起请求，并且获得处理结果，返回给客户端。<br>从下图可以看出：<strong>客户端向目标服务器发起的请求，是由代理服务器代替它向目标主机发起，得到结果之后，通过代理服务器返回给客户端。</strong></p>\n<p><img src=\"https://www.itcodemonkey.com/data/upload/portal/20181114/1542195547528384.jpg\" srcset=\"/img/loading.gif\" alt=\"img\"></p>\n<p>举个栗子：广大社会主义接班人都知道，为了保护祖国的花朵不受外界的乌烟瘴气熏陶，国家对网络做了一些“优化”，正常情况下是不能外网的，但作为程序员的我们如果没有谷歌等搜索引擎的帮助，再销魂的代码也会因此失色，因此，网络上也曾出现过一些fan qiang技术和软件供有需要的人使用，如某VPN等，其实VPN的原理大体上也类似于一个正向代理，也就是需要访问外网的电脑，发起一个访问外网的请求，通过本机上的VPN去寻找一个可以访问国外网站的代理服务器，代理服务器向外国网站发起请求，然后把结果返回给本机。</p>\n<blockquote>\n<p>正向代理的配置:</p>\n</blockquote>\n<pre><code class=\"hljs undefined\"><span class=\"hljs-section\">server</span> &#123;\n    <span class=\"hljs-comment\">#指定DNS服务器IP地址  </span>\n    <span class=\"hljs-attribute\">resolver</span> <span class=\"hljs-number\">114.114.114.114</span>;   \n    <span class=\"hljs-comment\">#指定代理端口    </span>\n    <span class=\"hljs-attribute\">listen</span> <span class=\"hljs-number\">8080</span>;  \n    <span class=\"hljs-attribute\">location</span> / &#123;\n        <span class=\"hljs-comment\">#设定代理服务器的协议和地址（固定不变）    </span>\n        <span class=\"hljs-attribute\">proxy_pass</span> http://<span class=\"hljs-variable\">$http_host</span><span class=\"hljs-variable\">$request_uri</span>;\n    &#125;  \n&#125;</code></pre>\n<p>这样就可以做到内网中端口为8080的服务器主动请求到1.2.13.4的主机上，如在Linux下可以：</p>\n<pre><code class=\"hljs undefined\"><span class=\"hljs-number\">1</span>curl --proxy <span class=\"hljs-string\">proxy_server:</span><span class=\"hljs-number\">8080</span> <span class=\"hljs-string\">http:</span><span class=\"hljs-comment\">//www.taobao.com/</span></code></pre>\n<p>正向代理的关键配置：</p>\n<blockquote>\n<ol>\n<li>resolver：DNS服务器IP地址</li>\n<li>listen：主动发起请求的内网服务器端口</li>\n<li>proxy_pass：代理服务器的协议和地址</li>\n</ol>\n</blockquote>\n<h3 id=\"2-反向代理\"><a href=\"#2-反向代理\" class=\"headerlink\" title=\"2. 反向代理\"></a>2. 反向代理</h3><blockquote>\n<p>反向代理：reverse proxy，是指用代理服务器来接受客户端发来的请求，然后将请求转发给内网中的上游服务器，上游服务器处理完之后，把结果通过nginx返回给客户端。</p>\n</blockquote>\n<p>上面讲述了正向代理的原理，相信对于反向代理，就很好理解了吧。<br>反向代理是对于来自外界的请求，先通过nginx统一接受，然后按需转发给内网中的服务器，并且把处理请求返回给外界客户端，此时代理服务器对外表现的就是一个web服务器，客户端根本不知道“上游服务器”的存在。</p>\n<p><img src=\"https://www.itcodemonkey.com/data/upload/portal/20181114/1542195548421886.jpg\" srcset=\"/img/loading.gif\" alt=\"img\"></p>\n<p>举个栗子：一个服务器的80端口只有一个，而服务器中可能有多个项目，如果A项目是端口是8081，B项目是8082，C项目是8083，假设指向该服务器的域名为<a href=\"http://www.xxx.com，此时访问B项目是www.xxx.com:8082，以此类推其它项目的URL也是要加上一个端口号，这样就很不美观了，这时我们把80端口给nginx服务器，给每个项目分配一个独立的子域名，如A项目是a.xxx.com，并且在nginx中设置每个项目的转发配置，然后对所有项目的访问都由nginx服务器接受，然后根据配置转发给不同的服务器处理。具体流程如下图所示：\" target=\"_blank\" rel=\"noopener\">www.xxx.com，此时访问B项目是www.xxx.com:8082，以此类推其它项目的URL也是要加上一个端口号，这样就很不美观了，这时我们把80端口给nginx服务器，给每个项目分配一个独立的子域名，如A项目是a.xxx.com，并且在nginx中设置每个项目的转发配置，然后对所有项目的访问都由nginx服务器接受，然后根据配置转发给不同的服务器处理。具体流程如下图所示：</a></p>\n<p><img src=\"https://www.itcodemonkey.com/data/upload/portal/20181114/1542195548507062.jpg\" srcset=\"/img/loading.gif\" alt=\"img\"></p>\n<blockquote>\n<p>反向代理配置:</p>\n</blockquote>\n<pre><code class=\"hljs undefined\"><span class=\"hljs-section\">server</span> &#123;\n    <span class=\"hljs-comment\">#监听端口</span>\n    <span class=\"hljs-attribute\">listen</span> <span class=\"hljs-number\">80</span>;\n    <span class=\"hljs-comment\">#服务器名称，也就是客户端访问的域名地址</span>\n    <span class=\"hljs-attribute\">server_name</span>  a.xxx.com;\n    <span class=\"hljs-comment\">#nginx日志输出文件</span>\n    <span class=\"hljs-attribute\">access_log</span>  logs/nginx.access.log  main;\n    <span class=\"hljs-comment\">#nginx错误日志输出文件</span>\n    <span class=\"hljs-attribute\">error_log</span>  logs/nginx.<span class=\"hljs-literal\">error</span>.log;\n    <span class=\"hljs-attribute\">root</span>   html;\n    <span class=\"hljs-attribute\">index</span>  index.html index.htm index.php;\n    <span class=\"hljs-attribute\">location</span> / &#123;\n        <span class=\"hljs-comment\">#被代理服务器的地址</span>\n        <span class=\"hljs-attribute\">proxy_pass</span>  http://localhost:8081;\n        <span class=\"hljs-comment\">#对发送给客户端的URL进行修改的操作</span>\n        <span class=\"hljs-attribute\">proxy_redirect</span>     <span class=\"hljs-literal\">off</span>;\n        <span class=\"hljs-attribute\">proxy_set_header</span>   Host             <span class=\"hljs-variable\">$host</span>;\n        <span class=\"hljs-attribute\">proxy_set_header</span>   X-Real-IP        <span class=\"hljs-variable\">$remote_addr</span>;\n        <span class=\"hljs-attribute\">proxy_set_header</span>   X-Forwarded-For  <span class=\"hljs-variable\">$proxy_add_x_forwarded_for</span>;\n        <span class=\"hljs-attribute\">proxy_next_upstream</span> <span class=\"hljs-literal\">error</span> timeout invalid_header http_500 http_502 http_503 http_504;\n        <span class=\"hljs-attribute\">proxy_max_temp_file_size</span> <span class=\"hljs-number\">0</span>;\n   &#125;\n&#125;</code></pre>\n<p>这样就可以通过a.xxx.com来访问a项目对应的网站了，而不需要带上难看的端口号。<br>反向代理的配置关键点是：</p>\n<blockquote>\n<ol>\n<li>server_name：代表客户端向服务器发起请求时输入的域名</li>\n<li>proxy_pass：代表源服务器的访问地址，也就是真正处理请求的服务器（localhost+端口号）。</li>\n</ol>\n</blockquote>\n<h3 id=\"3-透明代理\"><a href=\"#3-透明代理\" class=\"headerlink\" title=\"3. 透明代理\"></a>3. 透明代理</h3><blockquote>\n<p>透明代理：也叫做简单代理，意思客户端向服务端发起请求时，请求会先到达透明代理服务器，代理服务器再把请求转交给真实的源服务器处理，也就是是客户端根本不知道有代理服务器的存在。</p>\n</blockquote>\n<p>举个栗子：它的用法有点类似于拦截器，如某些制度严格的公司里的办公电脑，无论我们用电脑做了什么事情，安全部门都能拦截我们对外发送的任何东西，这是因为电脑在对外发送时，实际上先经过网络上的一个透明的服务器，经过它的处理之后，才接着往外网走，而我们在网上冲浪时，根本没有感知到有拦截器拦截我们的数据和信息。</p>\n<p><img src=\"https://www.itcodemonkey.com/data/upload/portal/20181114/1542195548380599.jpg\" srcset=\"/img/loading.gif\" alt=\"img\"></p>\n<p>有人说透明代理和反向代理有点像，都是由代理服务器先接受请求，再转发到源服务器。其实本质上是有区别的，透明代理是客户端感知不到代理服务器的存在，而反向代理是客户端感知只有一个代理服务器的存在，因此他们一个是隐藏了自己，一个是隐藏了源服务器。事实上，透明代理和正向代理才是相像的，都是由客户端主动发起请求，代理服务器处理；他们差异点在于：正向代理是代理服务器代替客户端请求，而透明代理是客户端在发起请求时，会先经过透明代理服务器，再达到服务端，在这过程中，客户端是感知不到这个代理服务器的。</p>\n<h3 id=\"4-负载均衡\"><a href=\"#4-负载均衡\" class=\"headerlink\" title=\"4. 负载均衡\"></a>4. 负载均衡</h3><p>负载均衡：将服务器接收到的请求按照规则分发的过程，称为负载均衡。负载均衡是反向代理的一种体现。</p>\n<p>可能绝大部分人接触到的web项目，刚开始时都是一台服务器就搞定了，但当网站访问量越来越大时，单台服务器就扛不住了，这时候需要增加服务器做成集群来分担流量压力，而在架设这些服务器时，nginx就充当了接受流量和分流的作用了，当请求到nginx服务器时，nginx就可以根据设置好的负载信息，把请求分配到不同的服务器，服务器处理完毕后，nginx获取处理结果返回给客户端，这样，用nginx的反向代理，即可实现了负载均衡。</p>\n<p><img src=\"https://www.itcodemonkey.com/data/upload/portal/20181114/1542195549241458.jpg\" srcset=\"/img/loading.gif\" alt=\"img\"></p>\n<p>nginx实现负载均衡有几种模式：</p>\n<blockquote>\n<ol>\n<li>轮询：每个请求按时间顺序逐一分配到不同的后端服务器，也是nginx的默认模式。轮询模式的配置很简单，只需要把服务器列表加入到upstream模块中即可。</li>\n</ol>\n</blockquote>\n<p>下面的配置是指：<strong>负载中有三台服务器，当请求到达时，nginx按照时间顺序把请求分配给三台服务器处理。</strong></p>\n<pre><code class=\"hljs undefined\">upstream serverList &#123;\n   <span class=\"hljs-built_in\"> server </span>1.2.3.4;\n   <span class=\"hljs-built_in\"> server </span>1.2.3.5;\n   <span class=\"hljs-built_in\"> server </span>1.2.3.6;\n&#125;</code></pre>\n<blockquote>\n<ol>\n<li>ip_hash：每个请求按访问IP的hash结果分配，同一个IP客户端固定访问一个后端服务器。可以保证来自同一ip的请求被打到固定的机器上，可以解决session问题。</li>\n</ol>\n</blockquote>\n<p>下面的配置是指：<strong>负载中有三台服务器，当请求到达时，nginx优先按照ip_hash的结果进行分配，也就是同一个IP的请求固定在某一台服务器上，其它则按时间顺序把请求分配给三台服务器处理。</strong></p>\n<pre><code class=\"hljs undefined\">upstream serverList &#123;\n    ip_hash\n   <span class=\"hljs-built_in\"> server </span>1.2.3.4;\n   <span class=\"hljs-built_in\"> server </span>1.2.3.5;\n   <span class=\"hljs-built_in\"> server </span>1.2.3.6;\n&#125;</code></pre>\n<blockquote>\n<ol>\n<li>url_hash：按访问url的hash结果来分配请求，相同的url固定转发到同一个后端服务器处理。</li>\n</ol>\n</blockquote>\n<pre><code class=\"hljs undefined\">upstream serverList &#123;\n   <span class=\"hljs-built_in\"> server </span>1.2.3.4;\n   <span class=\"hljs-built_in\"> server </span>1.2.3.5;\n   <span class=\"hljs-built_in\"> server </span>1.2.3.6;\n    hash <span class=\"hljs-variable\">$request_uri</span>;\n    hash_method crc32;\n&#125;</code></pre>\n<blockquote>\n<ol>\n<li>fair：按后端服务器的响应时间来分配请求，响应时间短的优先分配。</li>\n</ol>\n</blockquote>\n<pre><code class=\"hljs undefined\">upstream serverList &#123;\n   <span class=\"hljs-built_in\"> server </span>1.2.3.4;\n   <span class=\"hljs-built_in\"> server </span>1.2.3.5;\n   <span class=\"hljs-built_in\"> server </span>1.2.3.6;\n    fair;\n&#125;</code></pre>\n<p>而在每一种模式中，每一台服务器后面的可以携带的参数有：</p>\n<blockquote>\n<ol>\n<li>down: 当前服务器暂不参与负载</li>\n<li>weight: 权重，值越大，服务器的负载量越大。</li>\n<li>max_fails：允许请求失败的次数，默认为1。</li>\n<li>fail_timeout:max_fails次失败后暂停的时间。</li>\n<li>backup：备份机， 只有其它所有的非backup机器down或者忙时才会请求backup机器。</li>\n</ol>\n</blockquote>\n<p>如下面的配置是指：<strong>负载中有三台服务器，当请求到达时，nginx按时间顺序和权重把请求分配给三台服务器处理，例如有100个请求，有30%是服务器4处理，有50%的请求是服务器5处理，有20%的请求是服务器6处理。</strong></p>\n<pre><code class=\"hljs undefined\">upstream serverList &#123;\n   <span class=\"hljs-built_in\"> server </span>1.2.3.4 <span class=\"hljs-attribute\">weight</span>=30;\n   <span class=\"hljs-built_in\"> server </span>1.2.3.5 <span class=\"hljs-attribute\">weight</span>=50;\n   <span class=\"hljs-built_in\"> server </span>1.2.3.6 <span class=\"hljs-attribute\">weight</span>=20;\n&#125;</code></pre>\n<p>如下面的配置是指：<strong>负载中有三台服务器，服务器4的失败超时时间为60s，服务器5暂不参与负载，服务器6只用作备份机。</strong></p>\n<pre><code class=\"hljs undefined\">upstream serverList &#123;\n   <span class=\"hljs-built_in\"> server </span>1.2.3.4 <span class=\"hljs-attribute\">fail_timeout</span>=60s;\n   <span class=\"hljs-built_in\"> server </span>1.2.3.5 down;\n   <span class=\"hljs-built_in\"> server </span>1.2.3.6 backup;\n&#125;</code></pre>\n<blockquote>\n<p>下面是一个配置负载均衡的示例（只写了关键配置）：<br>其中：</p>\n<ol>\n<li>upstream：是负载的配置模块，serverList是名称，随便起</li>\n<li>server_name：是客户端请求的域名地址</li>\n<li>proxy_pass：是指向负载的列表的模块，如serverList</li>\n</ol>\n</blockquote>\n<pre><code class=\"hljs undefined\"><span class=\"hljs-attribute\">upstream</span> serverList &#123;\n    <span class=\"hljs-attribute\">server</span> <span class=\"hljs-number\">1.2.3.4</span> weight=<span class=\"hljs-number\">30</span>;\n    <span class=\"hljs-attribute\">server</span> <span class=\"hljs-number\">1.2.3.5</span> down;\n    <span class=\"hljs-attribute\">server</span> <span class=\"hljs-number\">1.2.3.6</span> backup;\n&#125;   \n\n<span class=\"hljs-section\">server</span> &#123;\n    <span class=\"hljs-attribute\">listen</span> <span class=\"hljs-number\">80</span>;\n    <span class=\"hljs-attribute\">server_name</span>  www.xxx.com;\n    <span class=\"hljs-attribute\">root</span>   html;\n    <span class=\"hljs-attribute\">index</span>  index.html index.htm index.php;\n    <span class=\"hljs-attribute\">location</span> / &#123;\n        <span class=\"hljs-attribute\">proxy_pass</span>  http://serverList;\n        <span class=\"hljs-attribute\">proxy_redirect</span>     <span class=\"hljs-literal\">off</span>;\n        <span class=\"hljs-attribute\">proxy_set_header</span>   Host             <span class=\"hljs-variable\">$host</span>;\n   &#125;\n&#125;</code></pre>\n<h3 id=\"5-静态服务器\"><a href=\"#5-静态服务器\" class=\"headerlink\" title=\"5. 静态服务器\"></a>5. 静态服务器</h3><p>现在很多项目流行前后分离，也就是前端服务器和后端服务器分离，分别部署，这样的方式能让前后端人员能各司其职，不需要互相依赖，而前后分离中，前端项目的运行是不需要用Tomcat、Apache等服务器环境的，因此可以直接用nginx来作为静态服务器。</p>\n<blockquote>\n<p>静态服务器的配置如下,其中关键配置为：</p>\n<ol>\n<li>root：直接静态项目的绝对路径的根目录。</li>\n<li>server_name : 静态网站访问的域名地址。</li>\n</ol>\n</blockquote>\n<pre><code class=\"hljs undefined\"><span class=\"hljs-section\">server</span> &#123;\n        <span class=\"hljs-attribute\">listen</span>       <span class=\"hljs-number\">80</span>;                                                         \n        <span class=\"hljs-attribute\">server_name</span>  www.xxx.com;                                               \n        <span class=\"hljs-attribute\">client_max_body_size</span> <span class=\"hljs-number\">1024M</span>;\n        <span class=\"hljs-attribute\">location</span> / &#123;\n               <span class=\"hljs-attribute\">root</span>   /var/www/xxx_static;\n               <span class=\"hljs-attribute\">index</span>  index.html;\n           &#125;\n    &#125;</code></pre>\n<h3 id=\"6-nginx的安装\"><a href=\"#6-nginx的安装\" class=\"headerlink\" title=\"6. nginx的安装\"></a>6. nginx的安装</h3><p>学了这么多nginx的配置用法之后，我们需要对每一个知识点做一下测试，才能印象深刻，在此之前，我们需要知道nginx是怎么安装，下面以Linux环境为例，简述yum方式安装nginx的步骤：</p>\n<ol>\n<li>安装依赖：</li>\n</ol>\n<pre><code class=\"hljs undefined\">//一键安装上面四个依赖\nyum -y install gcc <span class=\"hljs-literal\">zlib</span> <span class=\"hljs-literal\">zlib</span>-devel pcre-devel openssl openssl-devel</code></pre>\n<ol>\n<li>安装nginx：</li>\n</ol>\n<pre><code class=\"hljs undefined\">yum <span class=\"hljs-keyword\">install</span> nginx</code></pre>\n<ol>\n<li>检查是否安装成功：</li>\n</ol>\n<pre><code class=\"hljs undefined\"><span class=\"hljs-attribute\">nginx -v</span></code></pre>\n<ol>\n<li>启动/挺尸nginx：</li>\n</ol>\n<pre><code class=\"hljs undefined\">/etc/init.d/nginx <span class=\"hljs-literal\">start</span>\n/etc/init.d/nginx <span class=\"hljs-literal\">stop</span></code></pre>\n<ol>\n<li>编辑配置文件：</li>\n</ol>\n<pre><code class=\"hljs undefined\"><span class=\"hljs-regexp\">/etc/</span>nginx<span class=\"hljs-regexp\">/nginx.conf</span></code></pre>\n<p>这些步骤都完成之后，我们就可以进入nginx的配置文件nginx.conf对上面的各个知识点，进行配置和测试了。</p>\n<blockquote>\n<p>来自：<a href=\"https://mp.weixin.qq.com/s/DDbLVj0jxpfOmJDZxt9SYg\" target=\"_blank\" rel=\"noopener\">编程无界</a>（微信号：qianshic），作者：假不理</p>\n</blockquote>\n"},{"title":"Spring Cloud Zuul集成静态资源","date":"2018-11-23T06:24:30.000Z","_content":"\n项目中需要将前端的静态资源打包集成到zuul中，直接将静态资源放到zuul项目的/src/main/resources/static下，通过浏览器访问，发现无法访问。原因是zuul对所有的请求都进行了路由转发。\n\n一开始的配置如下：\n\n```\nzuul:\n    servlet-path: /\n    sensitive-headers:\n```\n\n在这种配置下，zuul对于后台其他restful服务进行的自动转发：\n\n如eureka中注册了a服务，当访问`/a/service`时，zuul自动将该请求转发到a服务上。\n\n通过修改配置，实现了静态资源的集成，配置如下：\n\n```\nzuul:\n# servlet-path: /\n    sensitive-headers:\n    ignored-services: '*'\n    routes:\n        a: /a/**\n        b: /b/**\n```\n\n禁用zuul的自动路由配置，通过指定路由，去掉`serlvet-path`\n\n实现集成静态资源。\n","source":"_posts/0010-spring-cloud-zuul-integrate-static-resource.md","raw":"---\ntitle: Spring Cloud Zuul集成静态资源\ndate: 2018-11-23 14:24:30\ntags:\n    - Zuul\n    - Spring Cloud\ncategories:\n    - 后端\n---\n\n项目中需要将前端的静态资源打包集成到zuul中，直接将静态资源放到zuul项目的/src/main/resources/static下，通过浏览器访问，发现无法访问。原因是zuul对所有的请求都进行了路由转发。\n\n一开始的配置如下：\n\n```\nzuul:\n    servlet-path: /\n    sensitive-headers:\n```\n\n在这种配置下，zuul对于后台其他restful服务进行的自动转发：\n\n如eureka中注册了a服务，当访问`/a/service`时，zuul自动将该请求转发到a服务上。\n\n通过修改配置，实现了静态资源的集成，配置如下：\n\n```\nzuul:\n# servlet-path: /\n    sensitive-headers:\n    ignored-services: '*'\n    routes:\n        a: /a/**\n        b: /b/**\n```\n\n禁用zuul的自动路由配置，通过指定路由，去掉`serlvet-path`\n\n实现集成静态资源。\n","slug":"0010-spring-cloud-zuul-integrate-static-resource","published":1,"updated":"2020-07-17T02:32:01.152Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcpntufy001304oia0744tzv","content":"<p>项目中需要将前端的静态资源打包集成到zuul中，直接将静态资源放到zuul项目的/src/main/resources/static下，通过浏览器访问，发现无法访问。原因是zuul对所有的请求都进行了路由转发。</p>\n<p>一开始的配置如下：</p>\n<pre><code class=\"hljs undefined\"><span class=\"hljs-string\">zuul:</span>\n    servlet-<span class=\"hljs-string\">path:</span> /\n    sensitive-<span class=\"hljs-string\">headers:</span></code></pre>\n<p>在这种配置下，zuul对于后台其他restful服务进行的自动转发：</p>\n<p>如eureka中注册了a服务，当访问<code>/a/service</code>时，zuul自动将该请求转发到a服务上。</p>\n<p>通过修改配置，实现了静态资源的集成，配置如下：</p>\n<pre><code class=\"hljs undefined\"><span class=\"hljs-symbol\">zuul:</span>\n<span class=\"hljs-meta\"># servlet-path: /</span>\n    sensitive-headers:\n    ignored-services: <span class=\"hljs-string\">'*'</span>\n<span class=\"hljs-symbol\">    routes:</span>\n<span class=\"hljs-symbol\">        a:</span> <span class=\"hljs-meta-keyword\">/a/</span>**\n<span class=\"hljs-symbol\">        b:</span> <span class=\"hljs-meta-keyword\">/b/</span>**</code></pre>\n<p>禁用zuul的自动路由配置，通过指定路由，去掉<code>serlvet-path</code></p>\n<p>实现集成静态资源。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>项目中需要将前端的静态资源打包集成到zuul中，直接将静态资源放到zuul项目的/src/main/resources/static下，通过浏览器访问，发现无法访问。原因是zuul对所有的请求都进行了路由转发。</p>\n<p>一开始的配置如下：</p>\n<pre><code class=\"hljs undefined\"><span class=\"hljs-string\">zuul:</span>\n    servlet-<span class=\"hljs-string\">path:</span> /\n    sensitive-<span class=\"hljs-string\">headers:</span></code></pre>\n<p>在这种配置下，zuul对于后台其他restful服务进行的自动转发：</p>\n<p>如eureka中注册了a服务，当访问<code>/a/service</code>时，zuul自动将该请求转发到a服务上。</p>\n<p>通过修改配置，实现了静态资源的集成，配置如下：</p>\n<pre><code class=\"hljs undefined\"><span class=\"hljs-symbol\">zuul:</span>\n<span class=\"hljs-meta\"># servlet-path: /</span>\n    sensitive-headers:\n    ignored-services: <span class=\"hljs-string\">'*'</span>\n<span class=\"hljs-symbol\">    routes:</span>\n<span class=\"hljs-symbol\">        a:</span> <span class=\"hljs-meta-keyword\">/a/</span>**\n<span class=\"hljs-symbol\">        b:</span> <span class=\"hljs-meta-keyword\">/b/</span>**</code></pre>\n<p>禁用zuul的自动路由配置，通过指定路由，去掉<code>serlvet-path</code></p>\n<p>实现集成静态资源。</p>\n"},{"title":"Angular的@Output与@Input浅析","date":"2018-12-04T01:44:01.000Z","_content":"\n# @Output与@Input理解\nOutput和Input是两个装饰器，是Angular2专门用来实现跨组件通讯，双向绑定等操作所用的。\n\n## @Input\n\nComponent本身是一种支持 nest 的结构，Child和Parent之间，如果Parent需要把数据传输给child并在child自己的页面中显示，则需要在Child的对应 directive 标示为 input。\n\n例如：\n```\n@Input() name: string;\n```\n\n我们通过一个例子来分析下`@Input`的流程。\n\n![](https://ws1.sinaimg.cn/large/806e3151ly1fxtu0ia0t7j216m0pgjwe.jpg)\n\n流程：\n1. child_component.ts内有students，并且是被@Input标记的，那么这个属性就作为输入属性\n2. 在parent_component.html内直接使用了students，那是因为在parent.module.ts内将child组件import进来了\n3. [students]这种形式叫属性绑定，绑定的值为school.schoolStudents属性\n4. Angular会把schoolStudents的值赋值给students，然后影响到子组件的显示\n\n所以我们可以总结，child_component中有数据要显示，但是这个数据的来源是通过parent_component.html中通过属性绑定的形式作为child组件的输入，要想child组件内的students属性能够成功赋值，那么必须使用@Input。\n\n`@Input`还可以使用typescript的get set存取器的方式来设置属性\n```\nprivate _name: string;\n\n@Input get name() {return this._name;}\nset(name:string) {this._name = name;}\n```\n\n## @Output\nOutput的数据流方向与input是相反的，所以那就是child控制parent的数据显示，input是parent控制child的数据显示。\n\n**注意**\nAngular 2中，@Output的实现必须使用EventEmitter来实现。 \n并且当你使用了tslint之后，变量不能加on，但是可以通过加入这样一段注释\n\n```\n// tslint:disable-next-line:no-output-on-prefix\n@Output() onRemoveElement = new EventEmitter<Element>();\n```\n\n形如：\n```\n// 要将EventEmitter先import进来。\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n...\n@Output() mySignal = new EventEmitter<boolean>();\n```\n\nEventEmitter();中间的boolean参数是你需要传递数据的类型，当然可以是基本类型，也可以是自定义类型。\n\n我们还是老样子，通过一个例子来分析一下吧。 \n\n![](https://ws1.sinaimg.cn/large/806e3151ly1fxtu7s2pydj218a0ueq92.jpg)\n\n我们通过这张图可以看到，整个事件的流程，那我们来分析一下：\n\nchild组件内有一个Output customClick的事件，事件的数据类型是number\nchild组件内有一个onClicked方法，这个是应用在html中button控件的click事件中，通过(click)=”onClicked()”进行方法绑定\nparent组件内有一个public的属性showMsg,Angular的ts类默认不写关键字就是public。\n\nparent组件内有一个onCustomClicked方法，这个也是要用在html中的，是和child组件内的output标记的customClick事件进行绑定的\n步骤为child的html的button按钮被点击->onClicked方法被调用->emit(99)触发customClick->Angular通过Output数据流识别出发生变化并通知parent的html中(customClick)->onCustomClicked(event)被调用，event)被调用，event为数据99->改变了showMsg属性值->影响到了parent的html中的显示由1变为99。\n\n**小知识：**\n\n其实双向绑定就是这么实现的，只是将input和output一起使用即可达到目的。\n","source":"_posts/0013-angular-output-input-analysis.md","raw":"---\ntitle: Angular的@Output与@Input浅析\ndate: 2018-12-04 09:44:01\ntags:\n    - Angular\ncategories:\n    - 前端\n---\n\n# @Output与@Input理解\nOutput和Input是两个装饰器，是Angular2专门用来实现跨组件通讯，双向绑定等操作所用的。\n\n## @Input\n\nComponent本身是一种支持 nest 的结构，Child和Parent之间，如果Parent需要把数据传输给child并在child自己的页面中显示，则需要在Child的对应 directive 标示为 input。\n\n例如：\n```\n@Input() name: string;\n```\n\n我们通过一个例子来分析下`@Input`的流程。\n\n![](https://ws1.sinaimg.cn/large/806e3151ly1fxtu0ia0t7j216m0pgjwe.jpg)\n\n流程：\n1. child_component.ts内有students，并且是被@Input标记的，那么这个属性就作为输入属性\n2. 在parent_component.html内直接使用了students，那是因为在parent.module.ts内将child组件import进来了\n3. [students]这种形式叫属性绑定，绑定的值为school.schoolStudents属性\n4. Angular会把schoolStudents的值赋值给students，然后影响到子组件的显示\n\n所以我们可以总结，child_component中有数据要显示，但是这个数据的来源是通过parent_component.html中通过属性绑定的形式作为child组件的输入，要想child组件内的students属性能够成功赋值，那么必须使用@Input。\n\n`@Input`还可以使用typescript的get set存取器的方式来设置属性\n```\nprivate _name: string;\n\n@Input get name() {return this._name;}\nset(name:string) {this._name = name;}\n```\n\n## @Output\nOutput的数据流方向与input是相反的，所以那就是child控制parent的数据显示，input是parent控制child的数据显示。\n\n**注意**\nAngular 2中，@Output的实现必须使用EventEmitter来实现。 \n并且当你使用了tslint之后，变量不能加on，但是可以通过加入这样一段注释\n\n```\n// tslint:disable-next-line:no-output-on-prefix\n@Output() onRemoveElement = new EventEmitter<Element>();\n```\n\n形如：\n```\n// 要将EventEmitter先import进来。\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n...\n@Output() mySignal = new EventEmitter<boolean>();\n```\n\nEventEmitter();中间的boolean参数是你需要传递数据的类型，当然可以是基本类型，也可以是自定义类型。\n\n我们还是老样子，通过一个例子来分析一下吧。 \n\n![](https://ws1.sinaimg.cn/large/806e3151ly1fxtu7s2pydj218a0ueq92.jpg)\n\n我们通过这张图可以看到，整个事件的流程，那我们来分析一下：\n\nchild组件内有一个Output customClick的事件，事件的数据类型是number\nchild组件内有一个onClicked方法，这个是应用在html中button控件的click事件中，通过(click)=”onClicked()”进行方法绑定\nparent组件内有一个public的属性showMsg,Angular的ts类默认不写关键字就是public。\n\nparent组件内有一个onCustomClicked方法，这个也是要用在html中的，是和child组件内的output标记的customClick事件进行绑定的\n步骤为child的html的button按钮被点击->onClicked方法被调用->emit(99)触发customClick->Angular通过Output数据流识别出发生变化并通知parent的html中(customClick)->onCustomClicked(event)被调用，event)被调用，event为数据99->改变了showMsg属性值->影响到了parent的html中的显示由1变为99。\n\n**小知识：**\n\n其实双向绑定就是这么实现的，只是将input和output一起使用即可达到目的。\n","slug":"0013-angular-output-input-analysis","published":1,"updated":"2020-07-17T02:32:01.157Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcpntug0001704oi4mjg41xb","content":"<h1 id=\"Output与-Input理解\"><a href=\"#Output与-Input理解\" class=\"headerlink\" title=\"@Output与@Input理解\"></a>@Output与@Input理解</h1><p>Output和Input是两个装饰器，是Angular2专门用来实现跨组件通讯，双向绑定等操作所用的。</p>\n<h2 id=\"Input\"><a href=\"#Input\" class=\"headerlink\" title=\"@Input\"></a>@Input</h2><p>Component本身是一种支持 nest 的结构，Child和Parent之间，如果Parent需要把数据传输给child并在child自己的页面中显示，则需要在Child的对应 directive 标示为 input。</p>\n<p>例如：<br><pre><code class=\"hljs undefined\"><span class=\"hljs-keyword\">@Input</span>() <span class=\"hljs-attribute\">name:</span> string;</code></pre></p>\n<p>我们通过一个例子来分析下<code>@Input</code>的流程。</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/806e3151ly1fxtu0ia0t7j216m0pgjwe.jpg\" srcset=\"/img/loading.gif\" alt></p>\n<p>流程：</p>\n<ol>\n<li>child_component.ts内有students，并且是被@Input标记的，那么这个属性就作为输入属性</li>\n<li>在parent_component.html内直接使用了students，那是因为在parent.module.ts内将child组件import进来了</li>\n<li>[students]这种形式叫属性绑定，绑定的值为school.schoolStudents属性</li>\n<li>Angular会把schoolStudents的值赋值给students，然后影响到子组件的显示</li>\n</ol>\n<p>所以我们可以总结，child_component中有数据要显示，但是这个数据的来源是通过parent_component.html中通过属性绑定的形式作为child组件的输入，要想child组件内的students属性能够成功赋值，那么必须使用@Input。</p>\n<p><code>@Input</code>还可以使用typescript的get set存取器的方式来设置属性<br><pre><code class=\"hljs undefined\"><span class=\"hljs-keyword\">private</span> _name: string;\n\n<span class=\"hljs-meta\">@Input</span> <span class=\"hljs-keyword\">get</span> name() &#123;<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>._name;&#125;\n<span class=\"hljs-keyword\">set</span>(name:string) &#123;<span class=\"hljs-keyword\">this</span>._name = name;&#125;</code></pre></p>\n<h2 id=\"Output\"><a href=\"#Output\" class=\"headerlink\" title=\"@Output\"></a>@Output</h2><p>Output的数据流方向与input是相反的，所以那就是child控制parent的数据显示，input是parent控制child的数据显示。</p>\n<p><strong>注意</strong><br>Angular 2中，@Output的实现必须使用EventEmitter来实现。<br>并且当你使用了tslint之后，变量不能加on，但是可以通过加入这样一段注释</p>\n<pre><code class=\"hljs undefined\"><span class=\"hljs-regexp\">//</span> tslint:disable-next-line:<span class=\"hljs-literal\">no</span>-output-<span class=\"hljs-literal\">on</span>-prefix\n@Output() onRemoveElement = <span class=\"hljs-keyword\">new</span> EventEmitter&lt;Element&gt;();</code></pre>\n<p>形如：<br><pre><code class=\"hljs undefined\"><span class=\"hljs-comment\">// 要将EventEmitter先import进来。</span>\n<span class=\"hljs-keyword\">import</span> &#123; Component, Input, Output, EventEmitter &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n...\n<span class=\"hljs-meta\">@Output</span>() mySignal = <span class=\"hljs-keyword\">new</span> EventEmitter&lt;<span class=\"hljs-built_in\">boolean</span>&gt;();</code></pre></p>\n<p>EventEmitter();中间的boolean参数是你需要传递数据的类型，当然可以是基本类型，也可以是自定义类型。</p>\n<p>我们还是老样子，通过一个例子来分析一下吧。 </p>\n<p><img src=\"https://ws1.sinaimg.cn/large/806e3151ly1fxtu7s2pydj218a0ueq92.jpg\" srcset=\"/img/loading.gif\" alt></p>\n<p>我们通过这张图可以看到，整个事件的流程，那我们来分析一下：</p>\n<p>child组件内有一个Output customClick的事件，事件的数据类型是number<br>child组件内有一个onClicked方法，这个是应用在html中button控件的click事件中，通过(click)=”onClicked()”进行方法绑定<br>parent组件内有一个public的属性showMsg,Angular的ts类默认不写关键字就是public。</p>\n<p>parent组件内有一个onCustomClicked方法，这个也是要用在html中的，是和child组件内的output标记的customClick事件进行绑定的<br>步骤为child的html的button按钮被点击-&gt;onClicked方法被调用-&gt;emit(99)触发customClick-&gt;Angular通过Output数据流识别出发生变化并通知parent的html中(customClick)-&gt;onCustomClicked(event)被调用，event)被调用，event为数据99-&gt;改变了showMsg属性值-&gt;影响到了parent的html中的显示由1变为99。</p>\n<p><strong>小知识：</strong></p>\n<p>其实双向绑定就是这么实现的，只是将input和output一起使用即可达到目的。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Output与-Input理解\"><a href=\"#Output与-Input理解\" class=\"headerlink\" title=\"@Output与@Input理解\"></a>@Output与@Input理解</h1><p>Output和Input是两个装饰器，是Angular2专门用来实现跨组件通讯，双向绑定等操作所用的。</p>\n<h2 id=\"Input\"><a href=\"#Input\" class=\"headerlink\" title=\"@Input\"></a>@Input</h2><p>Component本身是一种支持 nest 的结构，Child和Parent之间，如果Parent需要把数据传输给child并在child自己的页面中显示，则需要在Child的对应 directive 标示为 input。</p>\n<p>例如：<br><pre><code class=\"hljs undefined\"><span class=\"hljs-keyword\">@Input</span>() <span class=\"hljs-attribute\">name:</span> string;</code></pre></p>\n<p>我们通过一个例子来分析下<code>@Input</code>的流程。</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/806e3151ly1fxtu0ia0t7j216m0pgjwe.jpg\" srcset=\"/img/loading.gif\" alt></p>\n<p>流程：</p>\n<ol>\n<li>child_component.ts内有students，并且是被@Input标记的，那么这个属性就作为输入属性</li>\n<li>在parent_component.html内直接使用了students，那是因为在parent.module.ts内将child组件import进来了</li>\n<li>[students]这种形式叫属性绑定，绑定的值为school.schoolStudents属性</li>\n<li>Angular会把schoolStudents的值赋值给students，然后影响到子组件的显示</li>\n</ol>\n<p>所以我们可以总结，child_component中有数据要显示，但是这个数据的来源是通过parent_component.html中通过属性绑定的形式作为child组件的输入，要想child组件内的students属性能够成功赋值，那么必须使用@Input。</p>\n<p><code>@Input</code>还可以使用typescript的get set存取器的方式来设置属性<br><pre><code class=\"hljs undefined\"><span class=\"hljs-keyword\">private</span> _name: string;\n\n<span class=\"hljs-meta\">@Input</span> <span class=\"hljs-keyword\">get</span> name() &#123;<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>._name;&#125;\n<span class=\"hljs-keyword\">set</span>(name:string) &#123;<span class=\"hljs-keyword\">this</span>._name = name;&#125;</code></pre></p>\n<h2 id=\"Output\"><a href=\"#Output\" class=\"headerlink\" title=\"@Output\"></a>@Output</h2><p>Output的数据流方向与input是相反的，所以那就是child控制parent的数据显示，input是parent控制child的数据显示。</p>\n<p><strong>注意</strong><br>Angular 2中，@Output的实现必须使用EventEmitter来实现。<br>并且当你使用了tslint之后，变量不能加on，但是可以通过加入这样一段注释</p>\n<pre><code class=\"hljs undefined\"><span class=\"hljs-regexp\">//</span> tslint:disable-next-line:<span class=\"hljs-literal\">no</span>-output-<span class=\"hljs-literal\">on</span>-prefix\n@Output() onRemoveElement = <span class=\"hljs-keyword\">new</span> EventEmitter&lt;Element&gt;();</code></pre>\n<p>形如：<br><pre><code class=\"hljs undefined\"><span class=\"hljs-comment\">// 要将EventEmitter先import进来。</span>\n<span class=\"hljs-keyword\">import</span> &#123; Component, Input, Output, EventEmitter &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n...\n<span class=\"hljs-meta\">@Output</span>() mySignal = <span class=\"hljs-keyword\">new</span> EventEmitter&lt;<span class=\"hljs-built_in\">boolean</span>&gt;();</code></pre></p>\n<p>EventEmitter();中间的boolean参数是你需要传递数据的类型，当然可以是基本类型，也可以是自定义类型。</p>\n<p>我们还是老样子，通过一个例子来分析一下吧。 </p>\n<p><img src=\"https://ws1.sinaimg.cn/large/806e3151ly1fxtu7s2pydj218a0ueq92.jpg\" srcset=\"/img/loading.gif\" alt></p>\n<p>我们通过这张图可以看到，整个事件的流程，那我们来分析一下：</p>\n<p>child组件内有一个Output customClick的事件，事件的数据类型是number<br>child组件内有一个onClicked方法，这个是应用在html中button控件的click事件中，通过(click)=”onClicked()”进行方法绑定<br>parent组件内有一个public的属性showMsg,Angular的ts类默认不写关键字就是public。</p>\n<p>parent组件内有一个onCustomClicked方法，这个也是要用在html中的，是和child组件内的output标记的customClick事件进行绑定的<br>步骤为child的html的button按钮被点击-&gt;onClicked方法被调用-&gt;emit(99)触发customClick-&gt;Angular通过Output数据流识别出发生变化并通知parent的html中(customClick)-&gt;onCustomClicked(event)被调用，event)被调用，event为数据99-&gt;改变了showMsg属性值-&gt;影响到了parent的html中的显示由1变为99。</p>\n<p><strong>小知识：</strong></p>\n<p>其实双向绑定就是这么实现的，只是将input和output一起使用即可达到目的。</p>\n"},{"title":"动态代理：JDK动态代理和CGLIB代理的区别","date":"2018-11-26T10:24:30.000Z","_content":"\n\n代理模式：代理类和被代理类实现共同的接口（或继承），代理类中存有被代理类的索引，实际执行时通过调用代理类的方法，实际执行的是被代理类的方法。\n\n![](http://img.hb.aicdn.com/29f71c9def992be7b94c3566c6a7fd03bdcb93df32f3-49dKXs_fw658)\n\n而AOP，是通过动态代理实现的。\n\n一、简单来说：\n\n　　JDK动态代理只能对实现了接口的类生成代理，而不能针对类\n\n　　CGLIB是针对类实现代理，主要是对指定的类生成一个子类，覆盖其中的方法（继承）\n\n二、Spring在选择用JDK还是CGLiB的依据：\n\n   (1)当Bean实现接口时，Spring就会用JDK的动态代理\n\n   (2)当Bean没有实现接口时，Spring使用CGlib是实现\n\n　  (3)可以强制使用CGlib（在spring配置中加入<aop:aspectj-autoproxy proxy-target-class=\"true\"/>）\n\n三、CGlib比JDK快？\n\n　 (1)使用CGLib实现动态代理，CGLib底层采用ASM字节码生成框架，使用字节码技术生成代理类，比使用Java反射效率要高。唯一需要注意的是，CGLib不能对声明为final的方法进行代理，因为CGLib原理是动态生成被代理类的子类。\n\n　 (2)在对JDK动态代理与CGlib动态代理的代码实验中看，1W次执行下，JDK7及8的动态代理性能比CGlib要好20%左右。\n\n> 作者：Big_Monkey\n> 原文地址: [动态代理：JDK动态代理和CGLIB代理的区别](https://www.cnblogs.com/bigmonkeys/p/7823268.html)\n","source":"_posts/0011-jdk-and-cglib-proxy.md","raw":"---\ntitle: 动态代理：JDK动态代理和CGLIB代理的区别\ndate: 2018-11-26 18:24:30\ntags:\n    - Java\ncategories:\n    - 后端\n---\n\n\n代理模式：代理类和被代理类实现共同的接口（或继承），代理类中存有被代理类的索引，实际执行时通过调用代理类的方法，实际执行的是被代理类的方法。\n\n![](http://img.hb.aicdn.com/29f71c9def992be7b94c3566c6a7fd03bdcb93df32f3-49dKXs_fw658)\n\n而AOP，是通过动态代理实现的。\n\n一、简单来说：\n\n　　JDK动态代理只能对实现了接口的类生成代理，而不能针对类\n\n　　CGLIB是针对类实现代理，主要是对指定的类生成一个子类，覆盖其中的方法（继承）\n\n二、Spring在选择用JDK还是CGLiB的依据：\n\n   (1)当Bean实现接口时，Spring就会用JDK的动态代理\n\n   (2)当Bean没有实现接口时，Spring使用CGlib是实现\n\n　  (3)可以强制使用CGlib（在spring配置中加入<aop:aspectj-autoproxy proxy-target-class=\"true\"/>）\n\n三、CGlib比JDK快？\n\n　 (1)使用CGLib实现动态代理，CGLib底层采用ASM字节码生成框架，使用字节码技术生成代理类，比使用Java反射效率要高。唯一需要注意的是，CGLib不能对声明为final的方法进行代理，因为CGLib原理是动态生成被代理类的子类。\n\n　 (2)在对JDK动态代理与CGlib动态代理的代码实验中看，1W次执行下，JDK7及8的动态代理性能比CGlib要好20%左右。\n\n> 作者：Big_Monkey\n> 原文地址: [动态代理：JDK动态代理和CGLIB代理的区别](https://www.cnblogs.com/bigmonkeys/p/7823268.html)\n","slug":"0011-jdk-and-cglib-proxy","published":1,"updated":"2020-07-17T02:32:01.154Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcpntug3001b04oiio9uezkt","content":"<p>代理模式：代理类和被代理类实现共同的接口（或继承），代理类中存有被代理类的索引，实际执行时通过调用代理类的方法，实际执行的是被代理类的方法。</p>\n<p><img src=\"http://img.hb.aicdn.com/29f71c9def992be7b94c3566c6a7fd03bdcb93df32f3-49dKXs_fw658\" srcset=\"/img/loading.gif\" alt></p>\n<p>而AOP，是通过动态代理实现的。</p>\n<p>一、简单来说：</p>\n<p>　　JDK动态代理只能对实现了接口的类生成代理，而不能针对类</p>\n<p>　　CGLIB是针对类实现代理，主要是对指定的类生成一个子类，覆盖其中的方法（继承）</p>\n<p>二、Spring在选择用JDK还是CGLiB的依据：</p>\n<p>   (1)当Bean实现接口时，Spring就会用JDK的动态代理</p>\n<p>   (2)当Bean没有实现接口时，Spring使用CGlib是实现</p>\n<p>　  (3)可以强制使用CGlib（在spring配置中加入&lt;aop:aspectj-autoproxy proxy-target-class=”true”/&gt;）</p>\n<p>三、CGlib比JDK快？</p>\n<p>　 (1)使用CGLib实现动态代理，CGLib底层采用ASM字节码生成框架，使用字节码技术生成代理类，比使用Java反射效率要高。唯一需要注意的是，CGLib不能对声明为final的方法进行代理，因为CGLib原理是动态生成被代理类的子类。</p>\n<p>　 (2)在对JDK动态代理与CGlib动态代理的代码实验中看，1W次执行下，JDK7及8的动态代理性能比CGlib要好20%左右。</p>\n<blockquote>\n<p>作者：Big_Monkey<br>原文地址: <a href=\"https://www.cnblogs.com/bigmonkeys/p/7823268.html\" target=\"_blank\" rel=\"noopener\">动态代理：JDK动态代理和CGLIB代理的区别</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>代理模式：代理类和被代理类实现共同的接口（或继承），代理类中存有被代理类的索引，实际执行时通过调用代理类的方法，实际执行的是被代理类的方法。</p>\n<p><img src=\"http://img.hb.aicdn.com/29f71c9def992be7b94c3566c6a7fd03bdcb93df32f3-49dKXs_fw658\" srcset=\"/img/loading.gif\" alt></p>\n<p>而AOP，是通过动态代理实现的。</p>\n<p>一、简单来说：</p>\n<p>　　JDK动态代理只能对实现了接口的类生成代理，而不能针对类</p>\n<p>　　CGLIB是针对类实现代理，主要是对指定的类生成一个子类，覆盖其中的方法（继承）</p>\n<p>二、Spring在选择用JDK还是CGLiB的依据：</p>\n<p>   (1)当Bean实现接口时，Spring就会用JDK的动态代理</p>\n<p>   (2)当Bean没有实现接口时，Spring使用CGlib是实现</p>\n<p>　  (3)可以强制使用CGlib（在spring配置中加入&lt;aop:aspectj-autoproxy proxy-target-class=”true”/&gt;）</p>\n<p>三、CGlib比JDK快？</p>\n<p>　 (1)使用CGLib实现动态代理，CGLib底层采用ASM字节码生成框架，使用字节码技术生成代理类，比使用Java反射效率要高。唯一需要注意的是，CGLib不能对声明为final的方法进行代理，因为CGLib原理是动态生成被代理类的子类。</p>\n<p>　 (2)在对JDK动态代理与CGlib动态代理的代码实验中看，1W次执行下，JDK7及8的动态代理性能比CGlib要好20%左右。</p>\n<blockquote>\n<p>作者：Big_Monkey<br>原文地址: <a href=\"https://www.cnblogs.com/bigmonkeys/p/7823268.html\" target=\"_blank\" rel=\"noopener\">动态代理：JDK动态代理和CGLIB代理的区别</a></p>\n</blockquote>\n"},{"title":"Angular material中自定义分页信息","date":"2018-12-03T06:44:01.000Z","_content":"\n在项目开发中，用到了Material的分页组件，需要对该组件进行汉化。\n\n![](https://ws1.sinaimg.cn/large/806e3151ly1fxtkeefsycj20gt065jrd.jpg)\n\n首先创建自定义汉化类：\n\n```typescript\nimport {MatPaginatorIntl} from '@angular/material';\n\nexport class MatPaginatorIntlCro extends MatPaginatorIntl  {\n  /** A label for the page size selector. */\n  itemsPerPageLabel = '每页条数: ';\n  /** A label for the button that increments the current page. */\n  nextPageLabel = '下一页';\n  /** A label for the button that decrements the current page. */\n  previousPageLabel = '上一页';\n  /** A label for the button that moves to the first page. */\n  firstPageLabel = '首页';\n  /** A label for the button that moves to the last page. */\n  lastPageLabel = '尾页';\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel =  (page: number, pageSize: number, length: number) => {\n    if (length === 0 || pageSize === 0) {\n      return '0 od' + length;\n    }\n\n    length = Math.max(length, 0);\n    const startIndex = page * pageSize;\n    const endIndex = startIndex < length\n                      ? Math.min(startIndex + pageSize, length)\n                      : startIndex + pageSize;\n    return `第${startIndex + 1}-${endIndex}条, 总共${length}条`;\n  }\n}\n```\n\n在`app.module.ts`中声明该Provider：\n```typescript\n providers: [\n    {provide: MatPaginatorIntl, useClass: MatPaginatorIntlCro }\n    ]\n```\n这样在再使用分页组件时，相关信息将显示中文。\n","source":"_posts/0012-custom-material-paginator-label.md","raw":"---\ntitle: Angular material中自定义分页信息\ndate: 2018-12-03 14:44:01\ntags:\n    - Angular\ncategories:\n    - 前端\n---\n\n在项目开发中，用到了Material的分页组件，需要对该组件进行汉化。\n\n![](https://ws1.sinaimg.cn/large/806e3151ly1fxtkeefsycj20gt065jrd.jpg)\n\n首先创建自定义汉化类：\n\n```typescript\nimport {MatPaginatorIntl} from '@angular/material';\n\nexport class MatPaginatorIntlCro extends MatPaginatorIntl  {\n  /** A label for the page size selector. */\n  itemsPerPageLabel = '每页条数: ';\n  /** A label for the button that increments the current page. */\n  nextPageLabel = '下一页';\n  /** A label for the button that decrements the current page. */\n  previousPageLabel = '上一页';\n  /** A label for the button that moves to the first page. */\n  firstPageLabel = '首页';\n  /** A label for the button that moves to the last page. */\n  lastPageLabel = '尾页';\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel =  (page: number, pageSize: number, length: number) => {\n    if (length === 0 || pageSize === 0) {\n      return '0 od' + length;\n    }\n\n    length = Math.max(length, 0);\n    const startIndex = page * pageSize;\n    const endIndex = startIndex < length\n                      ? Math.min(startIndex + pageSize, length)\n                      : startIndex + pageSize;\n    return `第${startIndex + 1}-${endIndex}条, 总共${length}条`;\n  }\n}\n```\n\n在`app.module.ts`中声明该Provider：\n```typescript\n providers: [\n    {provide: MatPaginatorIntl, useClass: MatPaginatorIntlCro }\n    ]\n```\n这样在再使用分页组件时，相关信息将显示中文。\n","slug":"0012-custom-material-paginator-label","published":1,"updated":"2020-07-17T02:32:01.155Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcpntug5001f04oi7dixnhc4","content":"<p>在项目开发中，用到了Material的分页组件，需要对该组件进行汉化。</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/806e3151ly1fxtkeefsycj20gt065jrd.jpg\" srcset=\"/img/loading.gif\" alt></p>\n<p>首先创建自定义汉化类：</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">import</span> &#123;MatPaginatorIntl&#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/material'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> MatPaginatorIntlCro <span class=\"hljs-keyword\">extends</span> MatPaginatorIntl  &#123;\n  <span class=\"hljs-comment\">/** A label for the page size selector. */</span>\n  itemsPerPageLabel = <span class=\"hljs-string\">'每页条数: '</span>;\n  <span class=\"hljs-comment\">/** A label for the button that increments the current page. */</span>\n  nextPageLabel = <span class=\"hljs-string\">'下一页'</span>;\n  <span class=\"hljs-comment\">/** A label for the button that decrements the current page. */</span>\n  previousPageLabel = <span class=\"hljs-string\">'上一页'</span>;\n  <span class=\"hljs-comment\">/** A label for the button that moves to the first page. */</span>\n  firstPageLabel = <span class=\"hljs-string\">'首页'</span>;\n  <span class=\"hljs-comment\">/** A label for the button that moves to the last page. */</span>\n  lastPageLabel = <span class=\"hljs-string\">'尾页'</span>;\n  <span class=\"hljs-comment\">/** A label for the range of items within the current page and the length of the whole list. */</span>\n  getRangeLabel =  <span class=\"hljs-function\">(<span class=\"hljs-params\">page: <span class=\"hljs-built_in\">number</span>, pageSize: <span class=\"hljs-built_in\">number</span>, length: <span class=\"hljs-built_in\">number</span></span>) =&gt;</span> &#123;\n    <span class=\"hljs-keyword\">if</span> (length === <span class=\"hljs-number\">0</span> || pageSize === <span class=\"hljs-number\">0</span>) &#123;\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'0 od'</span> + length;\n    &#125;\n\n    length = <span class=\"hljs-built_in\">Math</span>.max(length, <span class=\"hljs-number\">0</span>);\n    <span class=\"hljs-keyword\">const</span> startIndex = page * pageSize;\n    <span class=\"hljs-keyword\">const</span> endIndex = startIndex &lt; length\n                      ? <span class=\"hljs-built_in\">Math</span>.min(startIndex + pageSize, length)\n                      : startIndex + pageSize;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`第<span class=\"hljs-subst\">$&#123;startIndex + <span class=\"hljs-number\">1</span>&#125;</span>-<span class=\"hljs-subst\">$&#123;endIndex&#125;</span>条, 总共<span class=\"hljs-subst\">$&#123;length&#125;</span>条`</span>;\n  &#125;\n&#125;</code></pre>\n<p>在<code>app.module.ts</code>中声明该Provider：<br><pre><code class=\"hljs typescript\">providers: [\n   &#123;provide: MatPaginatorIntl, useClass: MatPaginatorIntlCro &#125;\n   ]</code></pre></p>\n<p>这样在再使用分页组件时，相关信息将显示中文。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在项目开发中，用到了Material的分页组件，需要对该组件进行汉化。</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/806e3151ly1fxtkeefsycj20gt065jrd.jpg\" srcset=\"/img/loading.gif\" alt></p>\n<p>首先创建自定义汉化类：</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">import</span> &#123;MatPaginatorIntl&#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/material'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> MatPaginatorIntlCro <span class=\"hljs-keyword\">extends</span> MatPaginatorIntl  &#123;\n  <span class=\"hljs-comment\">/** A label for the page size selector. */</span>\n  itemsPerPageLabel = <span class=\"hljs-string\">'每页条数: '</span>;\n  <span class=\"hljs-comment\">/** A label for the button that increments the current page. */</span>\n  nextPageLabel = <span class=\"hljs-string\">'下一页'</span>;\n  <span class=\"hljs-comment\">/** A label for the button that decrements the current page. */</span>\n  previousPageLabel = <span class=\"hljs-string\">'上一页'</span>;\n  <span class=\"hljs-comment\">/** A label for the button that moves to the first page. */</span>\n  firstPageLabel = <span class=\"hljs-string\">'首页'</span>;\n  <span class=\"hljs-comment\">/** A label for the button that moves to the last page. */</span>\n  lastPageLabel = <span class=\"hljs-string\">'尾页'</span>;\n  <span class=\"hljs-comment\">/** A label for the range of items within the current page and the length of the whole list. */</span>\n  getRangeLabel =  <span class=\"hljs-function\">(<span class=\"hljs-params\">page: <span class=\"hljs-built_in\">number</span>, pageSize: <span class=\"hljs-built_in\">number</span>, length: <span class=\"hljs-built_in\">number</span></span>) =&gt;</span> &#123;\n    <span class=\"hljs-keyword\">if</span> (length === <span class=\"hljs-number\">0</span> || pageSize === <span class=\"hljs-number\">0</span>) &#123;\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'0 od'</span> + length;\n    &#125;\n\n    length = <span class=\"hljs-built_in\">Math</span>.max(length, <span class=\"hljs-number\">0</span>);\n    <span class=\"hljs-keyword\">const</span> startIndex = page * pageSize;\n    <span class=\"hljs-keyword\">const</span> endIndex = startIndex &lt; length\n                      ? <span class=\"hljs-built_in\">Math</span>.min(startIndex + pageSize, length)\n                      : startIndex + pageSize;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`第<span class=\"hljs-subst\">$&#123;startIndex + <span class=\"hljs-number\">1</span>&#125;</span>-<span class=\"hljs-subst\">$&#123;endIndex&#125;</span>条, 总共<span class=\"hljs-subst\">$&#123;length&#125;</span>条`</span>;\n  &#125;\n&#125;</code></pre>\n<p>在<code>app.module.ts</code>中声明该Provider：<br><pre><code class=\"hljs typescript\">providers: [\n   &#123;provide: MatPaginatorIntl, useClass: MatPaginatorIntlCro &#125;\n   ]</code></pre></p>\n<p>这样在再使用分页组件时，相关信息将显示中文。</p>\n"},{"title":"【Nexus系列】之npm私服库配置","date":"2018-12-21T07:44:01.000Z","_content":"\n\n\n![](https://ws1.sinaimg.cn/large/806e3151ly1fyd08s62ypj20xc0dwwmr.jpg)\n\n# 创建Repository\nNexus Repository Manager 3 可以用于多种类型的包管理。 因工作需要，需要配置基于Nexus 3的npm包管理。\n\n\n> Nexus默认账号: admin/admin123\n\n![](https://ws1.sinaimg.cn/large/806e3151ly1fycz6n4q9cj20xr0hrac9.jpg)\n\n1. 选择配置页面\n2. 选择左侧的Repositories\n3. 点击Create repository功能\n\n![](https://ws1.sinaimg.cn/large/806e3151ly1fycz8kaf4jj20gk0o7ta9.jpg)\n\n这样就会看到Nexus 3支持的repository类型。对于Java开发者maven2的应该就很熟悉了。\n\n仔细观察会发现，每一种repository都包含三种类型可以创建, group, hosted,proxy。下面分别对每种做说明：\n\n- proxy\n\n根据proxy名字，就可以想象的出这种类型的repository是用来坐代理的。比如我们在建Maven私服，需要和中央库连通，此时就需要用proxy来创建repository。见Nexus模式的maven-central库。\n\n- hosted\n\n这种repository可以简单的理解为用于私有的，内部的repository。我们工作中开发的一些工具，组件库等不方便放到中央库，但是却又需要在公司内部共享，就需要创建hosted类型的repository，用于发布公司内部的组件。见maven-releases, maven-snapshots。\n\n- group\n\n最后来说说group类型。其实这种类型是一种虚拟的repository，用于将proxy和hosted类型的repository组合成一个，方便使用者使用。如maven-public, 在里面既包含了maven-central，同时也包含了maven-releases, maven-snapshots,这样，不管是网上中央库的jar包，还是我们自己发布的jar都可以通过maven-public来获取到。\n\n结合maven repository配置的经验，对于npm repository也采用同样的套路配置。\n\n1. 配置proxy库\n\n![](https://ws1.sinaimg.cn/large/806e3151ly1fyczoph1jbj20kj0dbdgk.jpg)\n在proxy类型的配置界面，发现里面的Name、Remote storage是必填的。Name可以随便填。Remote storage需要填类似maven中央库的地址，这里npm的选择淘宝的私服地址`https://registry.npm.taobao.org`\n\n2. 配置hosted库\n![](https://ws1.sinaimg.cn/large/806e3151ly1fyczsmhcnbj20is0i6wf5.jpg)\n\nhosted库配置比较简单，只需要填写name就可以了。\n\n3. 配置Group库\n\n![](https://ws1.sinaimg.cn/large/806e3151ly1fycztxee51j20l50l1mxw.jpg)\n\n在group配置中，name同样是必须的。此外还多了一个members的配置，将左侧的npm-hosted,npm-proxy添加到右侧的members中，这样就可以通过group同时访问npm-hosted,npm-proxy中的资源了。\n\n\n\n# 发布到npm私服\n\n![](https://ws1.sinaimg.cn/large/806e3151ly1fyczztbu5ij20k009jgp4.jpg)\n\n首先，需要配置权限，将npm Bearer Token Realm启用。\n\n配置本机的npm登陆\n```\nnpm login --registry=http://localhost:8888/repository/npm-hosted/\n```\n然后输入用户名密码，邮箱，成功后会在`.npmrc`文件中生成一条记录\n\n```\n//localhost:8888/repository/npm-hosted/:_authToken=NpmToken.16b06a38-cae5-32ca-8a5f-2310ef16e156\n```\n在确保项目有 package.json 前提下，执行：\n\n```\nnpm publish  --registry=http://localhost:8888/repository/npm-hosted/\n\n```\n即可在私服中查询到已发的npm组件\n![](https://ws1.sinaimg.cn/large/806e3151ly1fyd02la9jnj21h60ez3zv.jpg)\n\n\n---\n\n> Author ：笑笑粑粑  \n> 曾用网名：TinyKing  \n> 微信公众号：Java码农  \n> 知乎专栏： [爱笑笑爱分享](https://zhuanlan.zhihu.com/tinyking)  \n> 个人博客： [爱笑笑，爱生活](https://www.wangjianchao.cn/)  \n> 自我评价： 一个爱好广泛的CRUD程序猿 \\^_^   \n","source":"_posts/0014-create-npm-repository-with-nexus.md","raw":"---\ntitle: 【Nexus系列】之npm私服库配置\ndate: 2018-12-21 15:44:01\ntags:\n    - Npm\n    - Nexus\ncategories:\n    - 工具\n---\n\n\n\n![](https://ws1.sinaimg.cn/large/806e3151ly1fyd08s62ypj20xc0dwwmr.jpg)\n\n# 创建Repository\nNexus Repository Manager 3 可以用于多种类型的包管理。 因工作需要，需要配置基于Nexus 3的npm包管理。\n\n\n> Nexus默认账号: admin/admin123\n\n![](https://ws1.sinaimg.cn/large/806e3151ly1fycz6n4q9cj20xr0hrac9.jpg)\n\n1. 选择配置页面\n2. 选择左侧的Repositories\n3. 点击Create repository功能\n\n![](https://ws1.sinaimg.cn/large/806e3151ly1fycz8kaf4jj20gk0o7ta9.jpg)\n\n这样就会看到Nexus 3支持的repository类型。对于Java开发者maven2的应该就很熟悉了。\n\n仔细观察会发现，每一种repository都包含三种类型可以创建, group, hosted,proxy。下面分别对每种做说明：\n\n- proxy\n\n根据proxy名字，就可以想象的出这种类型的repository是用来坐代理的。比如我们在建Maven私服，需要和中央库连通，此时就需要用proxy来创建repository。见Nexus模式的maven-central库。\n\n- hosted\n\n这种repository可以简单的理解为用于私有的，内部的repository。我们工作中开发的一些工具，组件库等不方便放到中央库，但是却又需要在公司内部共享，就需要创建hosted类型的repository，用于发布公司内部的组件。见maven-releases, maven-snapshots。\n\n- group\n\n最后来说说group类型。其实这种类型是一种虚拟的repository，用于将proxy和hosted类型的repository组合成一个，方便使用者使用。如maven-public, 在里面既包含了maven-central，同时也包含了maven-releases, maven-snapshots,这样，不管是网上中央库的jar包，还是我们自己发布的jar都可以通过maven-public来获取到。\n\n结合maven repository配置的经验，对于npm repository也采用同样的套路配置。\n\n1. 配置proxy库\n\n![](https://ws1.sinaimg.cn/large/806e3151ly1fyczoph1jbj20kj0dbdgk.jpg)\n在proxy类型的配置界面，发现里面的Name、Remote storage是必填的。Name可以随便填。Remote storage需要填类似maven中央库的地址，这里npm的选择淘宝的私服地址`https://registry.npm.taobao.org`\n\n2. 配置hosted库\n![](https://ws1.sinaimg.cn/large/806e3151ly1fyczsmhcnbj20is0i6wf5.jpg)\n\nhosted库配置比较简单，只需要填写name就可以了。\n\n3. 配置Group库\n\n![](https://ws1.sinaimg.cn/large/806e3151ly1fycztxee51j20l50l1mxw.jpg)\n\n在group配置中，name同样是必须的。此外还多了一个members的配置，将左侧的npm-hosted,npm-proxy添加到右侧的members中，这样就可以通过group同时访问npm-hosted,npm-proxy中的资源了。\n\n\n\n# 发布到npm私服\n\n![](https://ws1.sinaimg.cn/large/806e3151ly1fyczztbu5ij20k009jgp4.jpg)\n\n首先，需要配置权限，将npm Bearer Token Realm启用。\n\n配置本机的npm登陆\n```\nnpm login --registry=http://localhost:8888/repository/npm-hosted/\n```\n然后输入用户名密码，邮箱，成功后会在`.npmrc`文件中生成一条记录\n\n```\n//localhost:8888/repository/npm-hosted/:_authToken=NpmToken.16b06a38-cae5-32ca-8a5f-2310ef16e156\n```\n在确保项目有 package.json 前提下，执行：\n\n```\nnpm publish  --registry=http://localhost:8888/repository/npm-hosted/\n\n```\n即可在私服中查询到已发的npm组件\n![](https://ws1.sinaimg.cn/large/806e3151ly1fyd02la9jnj21h60ez3zv.jpg)\n\n\n---\n\n> Author ：笑笑粑粑  \n> 曾用网名：TinyKing  \n> 微信公众号：Java码农  \n> 知乎专栏： [爱笑笑爱分享](https://zhuanlan.zhihu.com/tinyking)  \n> 个人博客： [爱笑笑，爱生活](https://www.wangjianchao.cn/)  \n> 自我评价： 一个爱好广泛的CRUD程序猿 \\^_^   \n","slug":"0014-create-npm-repository-with-nexus","published":1,"updated":"2020-07-17T02:32:01.158Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcpntug7001j04oi95e3jl2y","content":"<p><img src=\"https://ws1.sinaimg.cn/large/806e3151ly1fyd08s62ypj20xc0dwwmr.jpg\" srcset=\"/img/loading.gif\" alt></p>\n<h1 id=\"创建Repository\"><a href=\"#创建Repository\" class=\"headerlink\" title=\"创建Repository\"></a>创建Repository</h1><p>Nexus Repository Manager 3 可以用于多种类型的包管理。 因工作需要，需要配置基于Nexus 3的npm包管理。</p>\n<blockquote>\n<p>Nexus默认账号: admin/admin123</p>\n</blockquote>\n<p><img src=\"https://ws1.sinaimg.cn/large/806e3151ly1fycz6n4q9cj20xr0hrac9.jpg\" srcset=\"/img/loading.gif\" alt></p>\n<ol>\n<li>选择配置页面</li>\n<li>选择左侧的Repositories</li>\n<li>点击Create repository功能</li>\n</ol>\n<p><img src=\"https://ws1.sinaimg.cn/large/806e3151ly1fycz8kaf4jj20gk0o7ta9.jpg\" srcset=\"/img/loading.gif\" alt></p>\n<p>这样就会看到Nexus 3支持的repository类型。对于Java开发者maven2的应该就很熟悉了。</p>\n<p>仔细观察会发现，每一种repository都包含三种类型可以创建, group, hosted,proxy。下面分别对每种做说明：</p>\n<ul>\n<li>proxy</li>\n</ul>\n<p>根据proxy名字，就可以想象的出这种类型的repository是用来坐代理的。比如我们在建Maven私服，需要和中央库连通，此时就需要用proxy来创建repository。见Nexus模式的maven-central库。</p>\n<ul>\n<li>hosted</li>\n</ul>\n<p>这种repository可以简单的理解为用于私有的，内部的repository。我们工作中开发的一些工具，组件库等不方便放到中央库，但是却又需要在公司内部共享，就需要创建hosted类型的repository，用于发布公司内部的组件。见maven-releases, maven-snapshots。</p>\n<ul>\n<li>group</li>\n</ul>\n<p>最后来说说group类型。其实这种类型是一种虚拟的repository，用于将proxy和hosted类型的repository组合成一个，方便使用者使用。如maven-public, 在里面既包含了maven-central，同时也包含了maven-releases, maven-snapshots,这样，不管是网上中央库的jar包，还是我们自己发布的jar都可以通过maven-public来获取到。</p>\n<p>结合maven repository配置的经验，对于npm repository也采用同样的套路配置。</p>\n<ol>\n<li>配置proxy库</li>\n</ol>\n<p><img src=\"https://ws1.sinaimg.cn/large/806e3151ly1fyczoph1jbj20kj0dbdgk.jpg\" srcset=\"/img/loading.gif\" alt><br>在proxy类型的配置界面，发现里面的Name、Remote storage是必填的。Name可以随便填。Remote storage需要填类似maven中央库的地址，这里npm的选择淘宝的私服地址<code>https://registry.npm.taobao.org</code></p>\n<ol start=\"2\">\n<li>配置hosted库<br><img src=\"https://ws1.sinaimg.cn/large/806e3151ly1fyczsmhcnbj20is0i6wf5.jpg\" srcset=\"/img/loading.gif\" alt></li>\n</ol>\n<p>hosted库配置比较简单，只需要填写name就可以了。</p>\n<ol start=\"3\">\n<li>配置Group库</li>\n</ol>\n<p><img src=\"https://ws1.sinaimg.cn/large/806e3151ly1fycztxee51j20l50l1mxw.jpg\" srcset=\"/img/loading.gif\" alt></p>\n<p>在group配置中，name同样是必须的。此外还多了一个members的配置，将左侧的npm-hosted,npm-proxy添加到右侧的members中，这样就可以通过group同时访问npm-hosted,npm-proxy中的资源了。</p>\n<h1 id=\"发布到npm私服\"><a href=\"#发布到npm私服\" class=\"headerlink\" title=\"发布到npm私服\"></a>发布到npm私服</h1><p><img src=\"https://ws1.sinaimg.cn/large/806e3151ly1fyczztbu5ij20k009jgp4.jpg\" srcset=\"/img/loading.gif\" alt></p>\n<p>首先，需要配置权限，将npm Bearer Token Realm启用。</p>\n<p>配置本机的npm登陆<br><pre><code class=\"hljs undefined\">npm login --registry=http:<span class=\"hljs-regexp\">//</span>localhost:<span class=\"hljs-number\">8888</span><span class=\"hljs-regexp\">/repository/</span>npm-hosted<span class=\"hljs-regexp\">/</span></code></pre></p>\n<p>然后输入用户名密码，邮箱，成功后会在<code>.npmrc</code>文件中生成一条记录</p>\n<pre><code class=\"hljs undefined\">/<span class=\"hljs-regexp\">/localhost:8888/repository</span><span class=\"hljs-regexp\">/npm-hosted/</span><span class=\"hljs-symbol\">:_authToken=NpmToken</span>.<span class=\"hljs-number\">16b06</span>a38-cae5<span class=\"hljs-number\">-32</span>ca<span class=\"hljs-number\">-8a5</span>f<span class=\"hljs-number\">-2310</span>ef16e156</code></pre>\n<p>在确保项目有 package.json 前提下，执行：</p>\n<pre><code class=\"hljs undefined\">npm publish  --registry=http:<span class=\"hljs-regexp\">//</span>localhost:<span class=\"hljs-number\">8888</span><span class=\"hljs-regexp\">/repository/</span>npm-hosted<span class=\"hljs-regexp\">/</span></code></pre>\n<p>即可在私服中查询到已发的npm组件<br><img src=\"https://ws1.sinaimg.cn/large/806e3151ly1fyd02la9jnj21h60ez3zv.jpg\" srcset=\"/img/loading.gif\" alt></p>\n<hr>\n<blockquote>\n<p>Author ：笑笑粑粑<br>曾用网名：TinyKing<br>微信公众号：Java码农<br>知乎专栏： <a href=\"https://zhuanlan.zhihu.com/tinyking\" target=\"_blank\" rel=\"noopener\">爱笑笑爱分享</a><br>个人博客： <a href=\"https://www.wangjianchao.cn/\" target=\"_blank\" rel=\"noopener\">爱笑笑，爱生活</a><br>自我评价： 一个爱好广泛的CRUD程序猿 \\^_^   </p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://ws1.sinaimg.cn/large/806e3151ly1fyd08s62ypj20xc0dwwmr.jpg\" srcset=\"/img/loading.gif\" alt></p>\n<h1 id=\"创建Repository\"><a href=\"#创建Repository\" class=\"headerlink\" title=\"创建Repository\"></a>创建Repository</h1><p>Nexus Repository Manager 3 可以用于多种类型的包管理。 因工作需要，需要配置基于Nexus 3的npm包管理。</p>\n<blockquote>\n<p>Nexus默认账号: admin/admin123</p>\n</blockquote>\n<p><img src=\"https://ws1.sinaimg.cn/large/806e3151ly1fycz6n4q9cj20xr0hrac9.jpg\" srcset=\"/img/loading.gif\" alt></p>\n<ol>\n<li>选择配置页面</li>\n<li>选择左侧的Repositories</li>\n<li>点击Create repository功能</li>\n</ol>\n<p><img src=\"https://ws1.sinaimg.cn/large/806e3151ly1fycz8kaf4jj20gk0o7ta9.jpg\" srcset=\"/img/loading.gif\" alt></p>\n<p>这样就会看到Nexus 3支持的repository类型。对于Java开发者maven2的应该就很熟悉了。</p>\n<p>仔细观察会发现，每一种repository都包含三种类型可以创建, group, hosted,proxy。下面分别对每种做说明：</p>\n<ul>\n<li>proxy</li>\n</ul>\n<p>根据proxy名字，就可以想象的出这种类型的repository是用来坐代理的。比如我们在建Maven私服，需要和中央库连通，此时就需要用proxy来创建repository。见Nexus模式的maven-central库。</p>\n<ul>\n<li>hosted</li>\n</ul>\n<p>这种repository可以简单的理解为用于私有的，内部的repository。我们工作中开发的一些工具，组件库等不方便放到中央库，但是却又需要在公司内部共享，就需要创建hosted类型的repository，用于发布公司内部的组件。见maven-releases, maven-snapshots。</p>\n<ul>\n<li>group</li>\n</ul>\n<p>最后来说说group类型。其实这种类型是一种虚拟的repository，用于将proxy和hosted类型的repository组合成一个，方便使用者使用。如maven-public, 在里面既包含了maven-central，同时也包含了maven-releases, maven-snapshots,这样，不管是网上中央库的jar包，还是我们自己发布的jar都可以通过maven-public来获取到。</p>\n<p>结合maven repository配置的经验，对于npm repository也采用同样的套路配置。</p>\n<ol>\n<li>配置proxy库</li>\n</ol>\n<p><img src=\"https://ws1.sinaimg.cn/large/806e3151ly1fyczoph1jbj20kj0dbdgk.jpg\" srcset=\"/img/loading.gif\" alt><br>在proxy类型的配置界面，发现里面的Name、Remote storage是必填的。Name可以随便填。Remote storage需要填类似maven中央库的地址，这里npm的选择淘宝的私服地址<code>https://registry.npm.taobao.org</code></p>\n<ol start=\"2\">\n<li>配置hosted库<br><img src=\"https://ws1.sinaimg.cn/large/806e3151ly1fyczsmhcnbj20is0i6wf5.jpg\" srcset=\"/img/loading.gif\" alt></li>\n</ol>\n<p>hosted库配置比较简单，只需要填写name就可以了。</p>\n<ol start=\"3\">\n<li>配置Group库</li>\n</ol>\n<p><img src=\"https://ws1.sinaimg.cn/large/806e3151ly1fycztxee51j20l50l1mxw.jpg\" srcset=\"/img/loading.gif\" alt></p>\n<p>在group配置中，name同样是必须的。此外还多了一个members的配置，将左侧的npm-hosted,npm-proxy添加到右侧的members中，这样就可以通过group同时访问npm-hosted,npm-proxy中的资源了。</p>\n<h1 id=\"发布到npm私服\"><a href=\"#发布到npm私服\" class=\"headerlink\" title=\"发布到npm私服\"></a>发布到npm私服</h1><p><img src=\"https://ws1.sinaimg.cn/large/806e3151ly1fyczztbu5ij20k009jgp4.jpg\" srcset=\"/img/loading.gif\" alt></p>\n<p>首先，需要配置权限，将npm Bearer Token Realm启用。</p>\n<p>配置本机的npm登陆<br><pre><code class=\"hljs undefined\">npm login --registry=http:<span class=\"hljs-regexp\">//</span>localhost:<span class=\"hljs-number\">8888</span><span class=\"hljs-regexp\">/repository/</span>npm-hosted<span class=\"hljs-regexp\">/</span></code></pre></p>\n<p>然后输入用户名密码，邮箱，成功后会在<code>.npmrc</code>文件中生成一条记录</p>\n<pre><code class=\"hljs undefined\">/<span class=\"hljs-regexp\">/localhost:8888/repository</span><span class=\"hljs-regexp\">/npm-hosted/</span><span class=\"hljs-symbol\">:_authToken=NpmToken</span>.<span class=\"hljs-number\">16b06</span>a38-cae5<span class=\"hljs-number\">-32</span>ca<span class=\"hljs-number\">-8a5</span>f<span class=\"hljs-number\">-2310</span>ef16e156</code></pre>\n<p>在确保项目有 package.json 前提下，执行：</p>\n<pre><code class=\"hljs undefined\">npm publish  --registry=http:<span class=\"hljs-regexp\">//</span>localhost:<span class=\"hljs-number\">8888</span><span class=\"hljs-regexp\">/repository/</span>npm-hosted<span class=\"hljs-regexp\">/</span></code></pre>\n<p>即可在私服中查询到已发的npm组件<br><img src=\"https://ws1.sinaimg.cn/large/806e3151ly1fyd02la9jnj21h60ez3zv.jpg\" srcset=\"/img/loading.gif\" alt></p>\n<hr>\n<blockquote>\n<p>Author ：笑笑粑粑<br>曾用网名：TinyKing<br>微信公众号：Java码农<br>知乎专栏： <a href=\"https://zhuanlan.zhihu.com/tinyking\" target=\"_blank\" rel=\"noopener\">爱笑笑爱分享</a><br>个人博客： <a href=\"https://www.wangjianchao.cn/\" target=\"_blank\" rel=\"noopener\">爱笑笑，爱生活</a><br>自我评价： 一个爱好广泛的CRUD程序猿 \\^_^   </p>\n</blockquote>\n"},{"title":"Angular项目中集成Font Awesome图标","date":"2019-04-15T09:48:00.000Z","_content":"\n\n![素材制作.png](https://cdn.nlark.com/yuque/0/2019/png/269363/1555038251526-53b022c7-d2ea-4e41-adcd-dd4a4454c98b.png#align=left&display=inline&height=420&name=%E7%B4%A0%E6%9D%90%E5%88%B6%E4%BD%9C.png&originHeight=720&originWidth=1280&size=588090&status=done&width=746)<br /><br />通过三部操作就可以在Angular项目中使用Font Awesome图标：\n1. 安装\n1. 样式配置\n1. 使用\n\n<a name=\"e655a410\"></a>\n# 安装\n通过 `NPM` 安装，并保存到 `package.json` \n\n```\nnpm install --save font-awesome\n```\n\n<a name=\"9ae6f0a6\"></a>\n# 配置样式 css\n在 `style.css` \n\n```css\n@import '~font-awesome/css/font-awesome.css';\n```\n\n<a name=\"ca2b37d4\"></a>\n# 配置样式 scss\n在 `style.scss` \n\n```css\n$fa-font-path: \"../node_modules/font-awesome/fonts\";\n@import '~font-awesome/scss/font-awesome.scss';\n```\n\n<a name=\"1e1072c7\"></a>\n# 在Angular使用\n\n```html\n<i class=\"fa fa-area-chart\"></i>\n```\n\n<a name=\"c7feb89a\"></a>\n# 配合Angular Material \n\n```typescript\nexport class AppModule {\n  constructor(matIconRegistry: MatIconRegistry) {\n    matIconRegistry.registerFontClassAlias('fontawesome', 'fa');\n  }\n}\n```\n\n```html\n<mat-icon fontSet=\"fontawesome\" fontIcon=\"fa-area-chart\"></mat-icon>\n```\n","source":"_posts/0015-angular-font-awesome.md","raw":"---\ntitle: Angular项目中集成Font Awesome图标\ndate: 2019-04-15 17:48\ntags:\n    - Angular\ncategories:\n    - 前端\n---\n\n\n![素材制作.png](https://cdn.nlark.com/yuque/0/2019/png/269363/1555038251526-53b022c7-d2ea-4e41-adcd-dd4a4454c98b.png#align=left&display=inline&height=420&name=%E7%B4%A0%E6%9D%90%E5%88%B6%E4%BD%9C.png&originHeight=720&originWidth=1280&size=588090&status=done&width=746)<br /><br />通过三部操作就可以在Angular项目中使用Font Awesome图标：\n1. 安装\n1. 样式配置\n1. 使用\n\n<a name=\"e655a410\"></a>\n# 安装\n通过 `NPM` 安装，并保存到 `package.json` \n\n```\nnpm install --save font-awesome\n```\n\n<a name=\"9ae6f0a6\"></a>\n# 配置样式 css\n在 `style.css` \n\n```css\n@import '~font-awesome/css/font-awesome.css';\n```\n\n<a name=\"ca2b37d4\"></a>\n# 配置样式 scss\n在 `style.scss` \n\n```css\n$fa-font-path: \"../node_modules/font-awesome/fonts\";\n@import '~font-awesome/scss/font-awesome.scss';\n```\n\n<a name=\"1e1072c7\"></a>\n# 在Angular使用\n\n```html\n<i class=\"fa fa-area-chart\"></i>\n```\n\n<a name=\"c7feb89a\"></a>\n# 配合Angular Material \n\n```typescript\nexport class AppModule {\n  constructor(matIconRegistry: MatIconRegistry) {\n    matIconRegistry.registerFontClassAlias('fontawesome', 'fa');\n  }\n}\n```\n\n```html\n<mat-icon fontSet=\"fontawesome\" fontIcon=\"fa-area-chart\"></mat-icon>\n```\n","slug":"0015-angular-font-awesome","published":1,"updated":"2020-07-17T02:32:01.160Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcpntugb001n04oi4onmrltl","content":"<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/269363/1555038251526-53b022c7-d2ea-4e41-adcd-dd4a4454c98b.png#align=left&amp;display=inline&amp;height=420&amp;name=%E7%B4%A0%E6%9D%90%E5%88%B6%E4%BD%9C.png&amp;originHeight=720&amp;originWidth=1280&amp;size=588090&amp;status=done&amp;width=746\" srcset=\"/img/loading.gif\" alt=\"素材制作.png\"><br><br>通过三部操作就可以在Angular项目中使用Font Awesome图标：</p>\n<ol>\n<li>安装</li>\n<li>样式配置</li>\n<li>使用</li>\n</ol>\n<p><a name=\"e655a410\"></a></p>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p>通过 <code>NPM</code> 安装，并保存到 <code>package.json</code> </p>\n<pre><code class=\"hljs undefined\">npm install --<span class=\"hljs-built_in\">save</span> <span class=\"hljs-built_in\">font</span>-awesome</code></pre>\n<p><a name=\"9ae6f0a6\"></a></p>\n<h1 id=\"配置样式-css\"><a href=\"#配置样式-css\" class=\"headerlink\" title=\"配置样式 css\"></a>配置样式 css</h1><p>在 <code>style.css</code> </p>\n<pre><code class=\"hljs css\"><span class=\"hljs-keyword\">@import</span> <span class=\"hljs-string\">'~font-awesome/css/font-awesome.css'</span>;</code></pre>\n<p><a name=\"ca2b37d4\"></a></p>\n<h1 id=\"配置样式-scss\"><a href=\"#配置样式-scss\" class=\"headerlink\" title=\"配置样式 scss\"></a>配置样式 scss</h1><p>在 <code>style.scss</code> </p>\n<pre><code class=\"hljs css\">$fa-font-path: \"../node_modules/font-awesome/fonts\";\n@import '~font-awesome/scss/font-awesome.scss';</code></pre>\n<p><a name=\"1e1072c7\"></a></p>\n<h1 id=\"在Angular使用\"><a href=\"#在Angular使用\" class=\"headerlink\" title=\"在Angular使用\"></a>在Angular使用</h1><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">i</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"fa fa-area-chart\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">i</span>&gt;</span></code></pre>\n<p><a name=\"c7feb89a\"></a></p>\n<h1 id=\"配合Angular-Material\"><a href=\"#配合Angular-Material\" class=\"headerlink\" title=\"配合Angular Material\"></a>配合Angular Material</h1><pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> AppModule &#123;\n  <span class=\"hljs-keyword\">constructor</span>(<span class=\"hljs-params\">matIconRegistry: MatIconRegistry</span>) &#123;\n    matIconRegistry.registerFontClassAlias(<span class=\"hljs-string\">'fontawesome'</span>, <span class=\"hljs-string\">'fa'</span>);\n  &#125;\n&#125;</code></pre>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mat-icon</span> <span class=\"hljs-attr\">fontSet</span>=<span class=\"hljs-string\">\"fontawesome\"</span> <span class=\"hljs-attr\">fontIcon</span>=<span class=\"hljs-string\">\"fa-area-chart\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">mat-icon</span>&gt;</span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/269363/1555038251526-53b022c7-d2ea-4e41-adcd-dd4a4454c98b.png#align=left&amp;display=inline&amp;height=420&amp;name=%E7%B4%A0%E6%9D%90%E5%88%B6%E4%BD%9C.png&amp;originHeight=720&amp;originWidth=1280&amp;size=588090&amp;status=done&amp;width=746\" srcset=\"/img/loading.gif\" alt=\"素材制作.png\"><br><br>通过三部操作就可以在Angular项目中使用Font Awesome图标：</p>\n<ol>\n<li>安装</li>\n<li>样式配置</li>\n<li>使用</li>\n</ol>\n<p><a name=\"e655a410\"></a></p>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p>通过 <code>NPM</code> 安装，并保存到 <code>package.json</code> </p>\n<pre><code class=\"hljs undefined\">npm install --<span class=\"hljs-built_in\">save</span> <span class=\"hljs-built_in\">font</span>-awesome</code></pre>\n<p><a name=\"9ae6f0a6\"></a></p>\n<h1 id=\"配置样式-css\"><a href=\"#配置样式-css\" class=\"headerlink\" title=\"配置样式 css\"></a>配置样式 css</h1><p>在 <code>style.css</code> </p>\n<pre><code class=\"hljs css\"><span class=\"hljs-keyword\">@import</span> <span class=\"hljs-string\">'~font-awesome/css/font-awesome.css'</span>;</code></pre>\n<p><a name=\"ca2b37d4\"></a></p>\n<h1 id=\"配置样式-scss\"><a href=\"#配置样式-scss\" class=\"headerlink\" title=\"配置样式 scss\"></a>配置样式 scss</h1><p>在 <code>style.scss</code> </p>\n<pre><code class=\"hljs css\">$fa-font-path: \"../node_modules/font-awesome/fonts\";\n@import '~font-awesome/scss/font-awesome.scss';</code></pre>\n<p><a name=\"1e1072c7\"></a></p>\n<h1 id=\"在Angular使用\"><a href=\"#在Angular使用\" class=\"headerlink\" title=\"在Angular使用\"></a>在Angular使用</h1><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">i</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"fa fa-area-chart\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">i</span>&gt;</span></code></pre>\n<p><a name=\"c7feb89a\"></a></p>\n<h1 id=\"配合Angular-Material\"><a href=\"#配合Angular-Material\" class=\"headerlink\" title=\"配合Angular Material\"></a>配合Angular Material</h1><pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> AppModule &#123;\n  <span class=\"hljs-keyword\">constructor</span>(<span class=\"hljs-params\">matIconRegistry: MatIconRegistry</span>) &#123;\n    matIconRegistry.registerFontClassAlias(<span class=\"hljs-string\">'fontawesome'</span>, <span class=\"hljs-string\">'fa'</span>);\n  &#125;\n&#125;</code></pre>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mat-icon</span> <span class=\"hljs-attr\">fontSet</span>=<span class=\"hljs-string\">\"fontawesome\"</span> <span class=\"hljs-attr\">fontIcon</span>=<span class=\"hljs-string\">\"fa-area-chart\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">mat-icon</span>&gt;</span></code></pre>\n"},{"title":"如何用Angular6创建各种动画效果","date":"2019-02-15T01:44:01.000Z","_content":"\n\n# 如何用Angular 6创建各种动画效果\n\n## 介绍\n\n就技术角度而言，动画可以被定义为从初始状态到最终状态的转换过程。如今它已是各种Web应用不可或缺的组成部分。通过动画，我们不仅能创建出各种酷炫的UI，同时它们也能增加应用程序的趣味性。因此，设计精美的动画在吸引用户眼球的同时，也增强了他们的浏览体验。\n\nAngular能够让我们创建出具有原生表现效果的动画。我们将通过本文学习到如何使用Angular 6来创建各种动画效果。\n\n## 准备工作\n\n安装vs code和 Angular cli。\n\n## 源代码\n\n[https://stackblitz.com/edit/tk-angular-animations-01](https://stackblitz.com/edit/tk-angular-animations-01)\n\n## 理解Angular动画的不同状态\n\n动画是某个元素从一种状态向另一种状态的转变，Angular为单个元素定义出了三种不同的状态。\n\n1. void状态：void状态表示某个元素处于不是DOM一部分的状态。当一个元素被创建且尚未放到DOM中、或者该元素从DOM中移除时，就处于该状态。此状态特别实用，特别是当我们想通过添加或删除DOM中的元素，来创建动画的时候，我们在代码中使用关键字void来定义这种状态。\n2. wildcard状态：又称元素的默认状态。不管当前的动画状态如何，各种样式都用这种状态来定义元素。我们在代码中用符号*来定义这种状态。\n3. Custom状态：元素的这种状态需要在代码中被明确定义。我们在代码中可以使用任何自定义的名称来表示这种状态。\n\n## 动画转换定时\n\n我们在自己的应用中，通过定义动画转换的定时，来显示从一个状态过度到另一个状态。Angular为我们提供了如下三种与时间相关的属性：\n\n1. 持续时间(Duration)\n\n此属性表示我们的动画从开始(初始状态)到完成(最终状态)所需的时间。我们可以用以下三种方式来定义动画的持续时间：\n\n- 使用一个整数值，来表示以毫秒为单位的时间，例如：500\n- 使用一个字符串值，来表示以毫秒为单位的时间，例如：’500ms’\n- 使用一个字符串值，来表示以秒为单位的时间。例如：’0.5’\n  \n2. 延迟(Delay)\n\n此属性代表动画从触发到和实际转换开始之间的时间间隔。该属性遵循与上述持续时间相同的语法规则。要定义延迟，我们需要在持续时间值的后面，以字符串的形式添加延迟的数值，即：'Duration Delay'。例如' 0.3s 500ms’，表示转换将等待500毫秒，然后运行0.3秒。\n\n3. 滑动(Easing)\n\n此属性表示动画在其执行过程中是如何被加速或减速的。我们可以在持续时间和延迟的字符串后面，添加第三个变量。当然，如果延迟数值不存在的话，那么Easing将成为第二个数值。这同样也是一个可选属性。例如：\n\n- '0.3s 500ms ease-in'。这意味着转换将等待500毫秒，然后运行0.3秒(300毫秒)，实现滑入的效果。\n- '300ms ease-out'。这意味着转换将运行300毫秒(0.3秒)，实现滑出的效果。\n\n## 创建Angular 6应用\n\n请在您的计算机上打开命令提示行，并执行以下命令集：\n\n- mkdir ngAnimationDemo\n- cd ngAnimationDemo\n- ng new ngAnimation\n\n这些命令将创建一个名为ngAnimationDemo的目录，然后在该目录内创建一个名为ngAnimation的Angular应用。\n\n请使用Visual Studio Code打开ngAnimation应用。接着我们将创建自己的组件。\n\n请依次进入View >> Integrated Terminal，这将打开Visual Studio Code的终端窗口。\n\n请执行以下命令，以创建相应的组件：\n\n```\nng g c animationdemo \n```\n\n它将在/src/app文件夹内创建我们的组件--animationdemo。\n\n为了用到Angular动画，我们需要在应用中导入特定的动画模块--BrowserAnimationsModule。请打开app.module.ts文件，并添加如下的导入定义：\n\n```ts\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';  \n// other import definitions  \n@NgModule({ imports: [BrowserAnimationsModule // other imports]})  \n```\n## 理解Angular动画的语法\n\n下面，我们在组件的元数据中编写动画代码。其语法如下：\n\n```ts\n@Component({ \n// other component properties. \n  animations: [ \n    trigger('triggerName'), [ \n      state('stateName', style()) \n      transition('stateChangeExpression', [Animation Steps]) \n    ] \n  ] \n}) \n```\n\n此处，我们用到了名为animations的属性。该属性的输入是一个阵列，此阵列包含一个或多个“触发器”。同时，每个触发器都带有唯一的名称、和用来定义动画的状态和各种转换的具体实现。\n\n另外，每一个状态函数都会通过“stateName”来唯一地识别其状态、并用样式函数来显示在该状态下的元素样式。\n\n当然，每个转换函数也都通过stateChangeExpression，来定义元素状态转换、并定义动画的不同步骤所对应的阵列，从而能够显示出转换是如何发生的。在此，我们就可以用逗号分隔的数值，来将多个触发器函数包括到动画的属性之中。\n\n由于这些功能(触发、状态、和转换)都被定义在@angular/animations模块之中，因此，我们需要在自己的组件导入该模块。\n\n为了将动画应用到某个元素之上，我们需要在元素的定义中包含触发器的名称，即：在元素的标签里使用@后面加触发器名称的格式。对应的代码示例如下：\n\n```html\n<div @changeSize></div>  \n```\n\n这是将触发器changeSize应用到元素的上。\n\n下面，让我们创建更多的动画，以更好地理解Angular的动画概念吧。\n\n更改大小的动画\n\n我们将创建一个动画，来实现一键改变的大小。\n\n请打开animationdemo.component.ts文件，将如下代码添加到导入定义之中。\n\n```ts\nimport { trigger, state, style, animate, transition } from '@angular/animations'; \n```\n\n在组件的元数据中添加如下的动画属性定义。\n\n```ts\nanimations: [ \n  trigger('changeDivSize', [ \n    state('initial', style({ \n      backgroundColor: 'green', \n      width: '100px', \n      height: '100px' \n    })), \n    state('final', style({ \n      backgroundColor: 'red', \n      width: '200px', \n      height: '200px' \n    })), \n    transition('initial=>final', animate('1500ms')), \n    transition('final=>initial', animate('1000ms')) \n  ]), \n]  \n\n```\n\n在此，我们定义了一个触发器—changeDivSize，而且该触发器里的两个功能函数。该元素在“初始”状态时呈现绿色，并随着宽度和高度的增加，在“最终”状态时呈现为红色。\n\n同时，我们定义了状态的转换规则：从“初始”态到“最终”态将持续1500毫秒，而从“最终”态返回“初始”态则为1000毫秒。\n\n为了改变元素的状态，我们在组件的类定义中定义了一个功能函数。我们将如下代码包含在AnimationdemoComponent类中：\n\n```ts\ncurrentState = 'initial'; \nchangeState() { \n  this.currentState = this.currentState === 'initial' ? 'final' : 'initial'; \n}  \n```\n\n此处，我们定义了一个changeState方法，来切换元素的状态。\n\n请打开animationdemo.component.html文件，并添加以下代码：\n\n```html\n<h3>Change the div size</h3> \n<button (click)=\"changeState()\">Change Size</button> \n<br /> \n<div [@changeDivSize]=currentState></div> \n<br /> \n```\n\n我们定义了一个按钮，来调用点击时的changeState函数。由于我们前面已经定义了元素，并对它应用了changeDivSize动画触发器，因此当按钮被点击时，它会更新元素的状态，其大小则会伴随着转换效果而发生变化。\n\n在执行该应用之前，我们也需要将引用包含在app.component.html文件内的Animationdemo组件中。\n\n打开app.component.html文件，您会发现该文件中已包含了一些默认的HTML代码。请删除所有的代码，并按照下图所示放置组件的选择器：\n\n```html\n<app-animationdemo></app-animationdemo> \n```\n\n请在Visual Studio Code的终端窗口里运行ng serve命令，以执行该代码。运行完毕后，它会提示您在浏览器中打开http://localhost:4200。随后，您就会在浏览器中看到如下点击按钮的动画效果。\n\n\n\n## 气球动画效果\n\n在前面的动画示例中，转化仅发生在两个方向。而在本节中，我们将学习如何改变所有方向上的尺寸。这与气球的充、放气比较类似，故称为气球动画效果。\n\n请在动画属性中添加如下的触发器定义。\n\n```ts\ntrigger('balloonEffect', [ \n   state('initial', style({ \n     backgroundColor: 'green', \n     transform: 'scale(1)' \n   })), \n   state('final', style({ \n     backgroundColor: 'red', \n     transform: 'scale(1.5)' \n   })), \n   transition('final=>initial', animate('1000ms')), \n   transition('initial=>final', animate('1500ms')) \n ]), \n ```\n\n在此，我们使用转换属性来更改所有方向的尺寸大小。当该元素的状态发生变化时转换随即发生。\n\n请在app.component.html文件中添加如下HTML代码。\n\n```html\n<h3>Balloon Effect</h3> \n<div (click)=\"changeState()\"  \n  style=\"width:100px;height:100px; border-radius: 100%; margin: 3rem; background-color: green\" \n  [@balloonEffect]=currentState> \n</div> \n```\n\n在此，我们定义了一个div，并通过CSS样式来定义成一个圆圈。我们将通过点击div去调用changeState，从而实现元素状态的切换。\n\n下图便是该动画在浏览器中的运行效果：\n\n\n\n淡入和淡出动画\n\n有时候，我们需要在显示动画的同时，对DOM添加或移除元素。下面，我们来看看如何通过对一个列表添加或删除条目，以实现淡入和淡出的动画效果。\n\n请将如下代码插入AnimationdemoComponent类的定义之中。\n\n```ts\nlistItem = []; \nlist_order: number = 1; \naddItem() { \n  var listitem = \"ListItem \" + this.list_order; \n  this.list_order++; \n  this.listItem.push(listitem); \n} \nremoveItem() { \n  this.listItem.length -= 1; \n} \n```\n\n请在该动画的属性中添加如下的触发器定义。\n\n```ts\ntrigger('fadeInOut', [ \n  state('void', style({ \n    opacity: 0 \n  })), \n  transition('void <=> *', animate(1000)), \n]),  \n```\n\n在此，我们定义了触发器fadeInOut。当该元素被添加到DOM时，它的状态就从void转换为wildcard，我们表示为void => *。而当该元素从DOM删除时，它的状态就从wildcard转换为void，我们表示为* => void。\n\n我们给动画的不同方向使用相同的动画定时，其语法为<=>。正如该触发器所定义的，动画从void => * 和 * => void，都需要1000毫秒才能完成。\n\n请在app.component.html文件中添加如下HTML代码。\n\n```html\n<h3>Fade-In and Fade-Out animation</h3> \n<button (click)=\"addItem()\">Add List</button> \n<button (click)=\"removeItem()\">Remove List</button> \n<div style=\"width:200px; margin-left: 20px\"> \n  <ul> \n    <li *ngFor=\"let list of listItem\" [@fadeInOut]> \n      {{list}} \n    </li> \n  </ul> \n</div> \n``` \n\n在此，我们定义了两个按钮来添加和删除条目。我们将fadeInOut触发器与元素绑定，以实现在对DOM进行添加、删除时，能够出现淡入和淡出的效果。\n\n下图便是该动画在浏览器中的运行效果：\n\n\n\n进入和离开动画\n\n此外，我们还能够通过对DOM的添加，实现某个元素从左边进入屏幕;而在删除时，能让该元素从右边离开屏幕。\n\n由于从void => * 和 * => void 的转换十分常见。因此，Angular为这些动画提供了别名机制：\n\n- 对于 void => * ，我们可以用':enter'\n- 对于 * => void ，我们可以用':leave'\n\n这两个别名使得此类转换更具可读性，也更容易被理解。\n\n请在动画的属性中添加如下触发器的定义。\n\n```ts\ntrigger('EnterLeave', [ \n  state('flyIn', style({ transform: 'translateX(0)' })), \n  transition(':enter', [ \n    style({ transform: 'translateX(-100%)' }), \n    animate('0.5s 300ms ease-in') \n  ]), \n  transition(':leave', [ \n    animate('0.3s ease-out', style({ transform: 'translateX(100%)' })) \n  ]) \n])  \n```\n\n在此，我们定义了触发器EnterLeave。那么':enter'的转换需要等待300毫秒，然后运行0.5秒，并实现滑入的效果;而':leave'的转换只运行0.3秒，实现滑出的效果。\n\n请在app.component.html文件中添加如下HTML代码。\n\n```html\n<h3>Enter and Leave animation</h3> \n<button (click)=\"addItem()\">Add List</button> \n<button (click)=\"removeItem()\">Remove List</button> \n<div style=\"width:200px; margin-left: 20px\"> \n  <ul> \n    <li *ngFor=\"let list of listItem\" [@EnterLeave]=\"'flyIn'\"> \n      {{list}} \n    </li> \n  </ul> \n</div> \n```\n\n在此，我们定义了两个按钮来对列表添加和删除条目。我们将EnterLeave触发器与元素绑定，以实现在对DOM进行添加、删除时，出现滑入和滑出的效果。\n\n下图便是该动画在浏览器中的运行效果：\n\n\n\n## 结论\n\n综上所述，我们针对Angular 6的动画效果，探讨了动画状态和转换的概念，也通过一个应用示例展示了实际的动画代码与效果。","source":"_posts/0015-如何用Angular6创建各种动画效果.md","raw":"---\ntitle: 如何用Angular6创建各种动画效果\ndate: 2019-02-15 09:44:01\ntags:\n    - Angular\ncategories:\n    - 前端\n---\n\n\n# 如何用Angular 6创建各种动画效果\n\n## 介绍\n\n就技术角度而言，动画可以被定义为从初始状态到最终状态的转换过程。如今它已是各种Web应用不可或缺的组成部分。通过动画，我们不仅能创建出各种酷炫的UI，同时它们也能增加应用程序的趣味性。因此，设计精美的动画在吸引用户眼球的同时，也增强了他们的浏览体验。\n\nAngular能够让我们创建出具有原生表现效果的动画。我们将通过本文学习到如何使用Angular 6来创建各种动画效果。\n\n## 准备工作\n\n安装vs code和 Angular cli。\n\n## 源代码\n\n[https://stackblitz.com/edit/tk-angular-animations-01](https://stackblitz.com/edit/tk-angular-animations-01)\n\n## 理解Angular动画的不同状态\n\n动画是某个元素从一种状态向另一种状态的转变，Angular为单个元素定义出了三种不同的状态。\n\n1. void状态：void状态表示某个元素处于不是DOM一部分的状态。当一个元素被创建且尚未放到DOM中、或者该元素从DOM中移除时，就处于该状态。此状态特别实用，特别是当我们想通过添加或删除DOM中的元素，来创建动画的时候，我们在代码中使用关键字void来定义这种状态。\n2. wildcard状态：又称元素的默认状态。不管当前的动画状态如何，各种样式都用这种状态来定义元素。我们在代码中用符号*来定义这种状态。\n3. Custom状态：元素的这种状态需要在代码中被明确定义。我们在代码中可以使用任何自定义的名称来表示这种状态。\n\n## 动画转换定时\n\n我们在自己的应用中，通过定义动画转换的定时，来显示从一个状态过度到另一个状态。Angular为我们提供了如下三种与时间相关的属性：\n\n1. 持续时间(Duration)\n\n此属性表示我们的动画从开始(初始状态)到完成(最终状态)所需的时间。我们可以用以下三种方式来定义动画的持续时间：\n\n- 使用一个整数值，来表示以毫秒为单位的时间，例如：500\n- 使用一个字符串值，来表示以毫秒为单位的时间，例如：’500ms’\n- 使用一个字符串值，来表示以秒为单位的时间。例如：’0.5’\n  \n2. 延迟(Delay)\n\n此属性代表动画从触发到和实际转换开始之间的时间间隔。该属性遵循与上述持续时间相同的语法规则。要定义延迟，我们需要在持续时间值的后面，以字符串的形式添加延迟的数值，即：'Duration Delay'。例如' 0.3s 500ms’，表示转换将等待500毫秒，然后运行0.3秒。\n\n3. 滑动(Easing)\n\n此属性表示动画在其执行过程中是如何被加速或减速的。我们可以在持续时间和延迟的字符串后面，添加第三个变量。当然，如果延迟数值不存在的话，那么Easing将成为第二个数值。这同样也是一个可选属性。例如：\n\n- '0.3s 500ms ease-in'。这意味着转换将等待500毫秒，然后运行0.3秒(300毫秒)，实现滑入的效果。\n- '300ms ease-out'。这意味着转换将运行300毫秒(0.3秒)，实现滑出的效果。\n\n## 创建Angular 6应用\n\n请在您的计算机上打开命令提示行，并执行以下命令集：\n\n- mkdir ngAnimationDemo\n- cd ngAnimationDemo\n- ng new ngAnimation\n\n这些命令将创建一个名为ngAnimationDemo的目录，然后在该目录内创建一个名为ngAnimation的Angular应用。\n\n请使用Visual Studio Code打开ngAnimation应用。接着我们将创建自己的组件。\n\n请依次进入View >> Integrated Terminal，这将打开Visual Studio Code的终端窗口。\n\n请执行以下命令，以创建相应的组件：\n\n```\nng g c animationdemo \n```\n\n它将在/src/app文件夹内创建我们的组件--animationdemo。\n\n为了用到Angular动画，我们需要在应用中导入特定的动画模块--BrowserAnimationsModule。请打开app.module.ts文件，并添加如下的导入定义：\n\n```ts\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';  \n// other import definitions  \n@NgModule({ imports: [BrowserAnimationsModule // other imports]})  \n```\n## 理解Angular动画的语法\n\n下面，我们在组件的元数据中编写动画代码。其语法如下：\n\n```ts\n@Component({ \n// other component properties. \n  animations: [ \n    trigger('triggerName'), [ \n      state('stateName', style()) \n      transition('stateChangeExpression', [Animation Steps]) \n    ] \n  ] \n}) \n```\n\n此处，我们用到了名为animations的属性。该属性的输入是一个阵列，此阵列包含一个或多个“触发器”。同时，每个触发器都带有唯一的名称、和用来定义动画的状态和各种转换的具体实现。\n\n另外，每一个状态函数都会通过“stateName”来唯一地识别其状态、并用样式函数来显示在该状态下的元素样式。\n\n当然，每个转换函数也都通过stateChangeExpression，来定义元素状态转换、并定义动画的不同步骤所对应的阵列，从而能够显示出转换是如何发生的。在此，我们就可以用逗号分隔的数值，来将多个触发器函数包括到动画的属性之中。\n\n由于这些功能(触发、状态、和转换)都被定义在@angular/animations模块之中，因此，我们需要在自己的组件导入该模块。\n\n为了将动画应用到某个元素之上，我们需要在元素的定义中包含触发器的名称，即：在元素的标签里使用@后面加触发器名称的格式。对应的代码示例如下：\n\n```html\n<div @changeSize></div>  \n```\n\n这是将触发器changeSize应用到元素的上。\n\n下面，让我们创建更多的动画，以更好地理解Angular的动画概念吧。\n\n更改大小的动画\n\n我们将创建一个动画，来实现一键改变的大小。\n\n请打开animationdemo.component.ts文件，将如下代码添加到导入定义之中。\n\n```ts\nimport { trigger, state, style, animate, transition } from '@angular/animations'; \n```\n\n在组件的元数据中添加如下的动画属性定义。\n\n```ts\nanimations: [ \n  trigger('changeDivSize', [ \n    state('initial', style({ \n      backgroundColor: 'green', \n      width: '100px', \n      height: '100px' \n    })), \n    state('final', style({ \n      backgroundColor: 'red', \n      width: '200px', \n      height: '200px' \n    })), \n    transition('initial=>final', animate('1500ms')), \n    transition('final=>initial', animate('1000ms')) \n  ]), \n]  \n\n```\n\n在此，我们定义了一个触发器—changeDivSize，而且该触发器里的两个功能函数。该元素在“初始”状态时呈现绿色，并随着宽度和高度的增加，在“最终”状态时呈现为红色。\n\n同时，我们定义了状态的转换规则：从“初始”态到“最终”态将持续1500毫秒，而从“最终”态返回“初始”态则为1000毫秒。\n\n为了改变元素的状态，我们在组件的类定义中定义了一个功能函数。我们将如下代码包含在AnimationdemoComponent类中：\n\n```ts\ncurrentState = 'initial'; \nchangeState() { \n  this.currentState = this.currentState === 'initial' ? 'final' : 'initial'; \n}  \n```\n\n此处，我们定义了一个changeState方法，来切换元素的状态。\n\n请打开animationdemo.component.html文件，并添加以下代码：\n\n```html\n<h3>Change the div size</h3> \n<button (click)=\"changeState()\">Change Size</button> \n<br /> \n<div [@changeDivSize]=currentState></div> \n<br /> \n```\n\n我们定义了一个按钮，来调用点击时的changeState函数。由于我们前面已经定义了元素，并对它应用了changeDivSize动画触发器，因此当按钮被点击时，它会更新元素的状态，其大小则会伴随着转换效果而发生变化。\n\n在执行该应用之前，我们也需要将引用包含在app.component.html文件内的Animationdemo组件中。\n\n打开app.component.html文件，您会发现该文件中已包含了一些默认的HTML代码。请删除所有的代码，并按照下图所示放置组件的选择器：\n\n```html\n<app-animationdemo></app-animationdemo> \n```\n\n请在Visual Studio Code的终端窗口里运行ng serve命令，以执行该代码。运行完毕后，它会提示您在浏览器中打开http://localhost:4200。随后，您就会在浏览器中看到如下点击按钮的动画效果。\n\n\n\n## 气球动画效果\n\n在前面的动画示例中，转化仅发生在两个方向。而在本节中，我们将学习如何改变所有方向上的尺寸。这与气球的充、放气比较类似，故称为气球动画效果。\n\n请在动画属性中添加如下的触发器定义。\n\n```ts\ntrigger('balloonEffect', [ \n   state('initial', style({ \n     backgroundColor: 'green', \n     transform: 'scale(1)' \n   })), \n   state('final', style({ \n     backgroundColor: 'red', \n     transform: 'scale(1.5)' \n   })), \n   transition('final=>initial', animate('1000ms')), \n   transition('initial=>final', animate('1500ms')) \n ]), \n ```\n\n在此，我们使用转换属性来更改所有方向的尺寸大小。当该元素的状态发生变化时转换随即发生。\n\n请在app.component.html文件中添加如下HTML代码。\n\n```html\n<h3>Balloon Effect</h3> \n<div (click)=\"changeState()\"  \n  style=\"width:100px;height:100px; border-radius: 100%; margin: 3rem; background-color: green\" \n  [@balloonEffect]=currentState> \n</div> \n```\n\n在此，我们定义了一个div，并通过CSS样式来定义成一个圆圈。我们将通过点击div去调用changeState，从而实现元素状态的切换。\n\n下图便是该动画在浏览器中的运行效果：\n\n\n\n淡入和淡出动画\n\n有时候，我们需要在显示动画的同时，对DOM添加或移除元素。下面，我们来看看如何通过对一个列表添加或删除条目，以实现淡入和淡出的动画效果。\n\n请将如下代码插入AnimationdemoComponent类的定义之中。\n\n```ts\nlistItem = []; \nlist_order: number = 1; \naddItem() { \n  var listitem = \"ListItem \" + this.list_order; \n  this.list_order++; \n  this.listItem.push(listitem); \n} \nremoveItem() { \n  this.listItem.length -= 1; \n} \n```\n\n请在该动画的属性中添加如下的触发器定义。\n\n```ts\ntrigger('fadeInOut', [ \n  state('void', style({ \n    opacity: 0 \n  })), \n  transition('void <=> *', animate(1000)), \n]),  \n```\n\n在此，我们定义了触发器fadeInOut。当该元素被添加到DOM时，它的状态就从void转换为wildcard，我们表示为void => *。而当该元素从DOM删除时，它的状态就从wildcard转换为void，我们表示为* => void。\n\n我们给动画的不同方向使用相同的动画定时，其语法为<=>。正如该触发器所定义的，动画从void => * 和 * => void，都需要1000毫秒才能完成。\n\n请在app.component.html文件中添加如下HTML代码。\n\n```html\n<h3>Fade-In and Fade-Out animation</h3> \n<button (click)=\"addItem()\">Add List</button> \n<button (click)=\"removeItem()\">Remove List</button> \n<div style=\"width:200px; margin-left: 20px\"> \n  <ul> \n    <li *ngFor=\"let list of listItem\" [@fadeInOut]> \n      {{list}} \n    </li> \n  </ul> \n</div> \n``` \n\n在此，我们定义了两个按钮来添加和删除条目。我们将fadeInOut触发器与元素绑定，以实现在对DOM进行添加、删除时，能够出现淡入和淡出的效果。\n\n下图便是该动画在浏览器中的运行效果：\n\n\n\n进入和离开动画\n\n此外，我们还能够通过对DOM的添加，实现某个元素从左边进入屏幕;而在删除时，能让该元素从右边离开屏幕。\n\n由于从void => * 和 * => void 的转换十分常见。因此，Angular为这些动画提供了别名机制：\n\n- 对于 void => * ，我们可以用':enter'\n- 对于 * => void ，我们可以用':leave'\n\n这两个别名使得此类转换更具可读性，也更容易被理解。\n\n请在动画的属性中添加如下触发器的定义。\n\n```ts\ntrigger('EnterLeave', [ \n  state('flyIn', style({ transform: 'translateX(0)' })), \n  transition(':enter', [ \n    style({ transform: 'translateX(-100%)' }), \n    animate('0.5s 300ms ease-in') \n  ]), \n  transition(':leave', [ \n    animate('0.3s ease-out', style({ transform: 'translateX(100%)' })) \n  ]) \n])  \n```\n\n在此，我们定义了触发器EnterLeave。那么':enter'的转换需要等待300毫秒，然后运行0.5秒，并实现滑入的效果;而':leave'的转换只运行0.3秒，实现滑出的效果。\n\n请在app.component.html文件中添加如下HTML代码。\n\n```html\n<h3>Enter and Leave animation</h3> \n<button (click)=\"addItem()\">Add List</button> \n<button (click)=\"removeItem()\">Remove List</button> \n<div style=\"width:200px; margin-left: 20px\"> \n  <ul> \n    <li *ngFor=\"let list of listItem\" [@EnterLeave]=\"'flyIn'\"> \n      {{list}} \n    </li> \n  </ul> \n</div> \n```\n\n在此，我们定义了两个按钮来对列表添加和删除条目。我们将EnterLeave触发器与元素绑定，以实现在对DOM进行添加、删除时，出现滑入和滑出的效果。\n\n下图便是该动画在浏览器中的运行效果：\n\n\n\n## 结论\n\n综上所述，我们针对Angular 6的动画效果，探讨了动画状态和转换的概念，也通过一个应用示例展示了实际的动画代码与效果。","slug":"0015-如何用Angular6创建各种动画效果","published":1,"updated":"2020-07-17T02:32:01.161Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcpntugd001r04oijcwo1euh","content":"<h1 id=\"如何用Angular-6创建各种动画效果\"><a href=\"#如何用Angular-6创建各种动画效果\" class=\"headerlink\" title=\"如何用Angular 6创建各种动画效果\"></a>如何用Angular 6创建各种动画效果</h1><h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>就技术角度而言，动画可以被定义为从初始状态到最终状态的转换过程。如今它已是各种Web应用不可或缺的组成部分。通过动画，我们不仅能创建出各种酷炫的UI，同时它们也能增加应用程序的趣味性。因此，设计精美的动画在吸引用户眼球的同时，也增强了他们的浏览体验。</p>\n<p>Angular能够让我们创建出具有原生表现效果的动画。我们将通过本文学习到如何使用Angular 6来创建各种动画效果。</p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p>安装vs code和 Angular cli。</p>\n<h2 id=\"源代码\"><a href=\"#源代码\" class=\"headerlink\" title=\"源代码\"></a>源代码</h2><p><a href=\"https://stackblitz.com/edit/tk-angular-animations-01\" target=\"_blank\" rel=\"noopener\">https://stackblitz.com/edit/tk-angular-animations-01</a></p>\n<h2 id=\"理解Angular动画的不同状态\"><a href=\"#理解Angular动画的不同状态\" class=\"headerlink\" title=\"理解Angular动画的不同状态\"></a>理解Angular动画的不同状态</h2><p>动画是某个元素从一种状态向另一种状态的转变，Angular为单个元素定义出了三种不同的状态。</p>\n<ol>\n<li>void状态：void状态表示某个元素处于不是DOM一部分的状态。当一个元素被创建且尚未放到DOM中、或者该元素从DOM中移除时，就处于该状态。此状态特别实用，特别是当我们想通过添加或删除DOM中的元素，来创建动画的时候，我们在代码中使用关键字void来定义这种状态。</li>\n<li>wildcard状态：又称元素的默认状态。不管当前的动画状态如何，各种样式都用这种状态来定义元素。我们在代码中用符号*来定义这种状态。</li>\n<li>Custom状态：元素的这种状态需要在代码中被明确定义。我们在代码中可以使用任何自定义的名称来表示这种状态。</li>\n</ol>\n<h2 id=\"动画转换定时\"><a href=\"#动画转换定时\" class=\"headerlink\" title=\"动画转换定时\"></a>动画转换定时</h2><p>我们在自己的应用中，通过定义动画转换的定时，来显示从一个状态过度到另一个状态。Angular为我们提供了如下三种与时间相关的属性：</p>\n<ol>\n<li>持续时间(Duration)</li>\n</ol>\n<p>此属性表示我们的动画从开始(初始状态)到完成(最终状态)所需的时间。我们可以用以下三种方式来定义动画的持续时间：</p>\n<ul>\n<li>使用一个整数值，来表示以毫秒为单位的时间，例如：500</li>\n<li>使用一个字符串值，来表示以毫秒为单位的时间，例如：’500ms’</li>\n<li>使用一个字符串值，来表示以秒为单位的时间。例如：’0.5’</li>\n</ul>\n<ol start=\"2\">\n<li>延迟(Delay)</li>\n</ol>\n<p>此属性代表动画从触发到和实际转换开始之间的时间间隔。该属性遵循与上述持续时间相同的语法规则。要定义延迟，我们需要在持续时间值的后面，以字符串的形式添加延迟的数值，即：’Duration Delay’。例如’ 0.3s 500ms’，表示转换将等待500毫秒，然后运行0.3秒。</p>\n<ol start=\"3\">\n<li>滑动(Easing)</li>\n</ol>\n<p>此属性表示动画在其执行过程中是如何被加速或减速的。我们可以在持续时间和延迟的字符串后面，添加第三个变量。当然，如果延迟数值不存在的话，那么Easing将成为第二个数值。这同样也是一个可选属性。例如：</p>\n<ul>\n<li>‘0.3s 500ms ease-in’。这意味着转换将等待500毫秒，然后运行0.3秒(300毫秒)，实现滑入的效果。</li>\n<li>‘300ms ease-out’。这意味着转换将运行300毫秒(0.3秒)，实现滑出的效果。</li>\n</ul>\n<h2 id=\"创建Angular-6应用\"><a href=\"#创建Angular-6应用\" class=\"headerlink\" title=\"创建Angular 6应用\"></a>创建Angular 6应用</h2><p>请在您的计算机上打开命令提示行，并执行以下命令集：</p>\n<ul>\n<li>mkdir ngAnimationDemo</li>\n<li>cd ngAnimationDemo</li>\n<li>ng new ngAnimation</li>\n</ul>\n<p>这些命令将创建一个名为ngAnimationDemo的目录，然后在该目录内创建一个名为ngAnimation的Angular应用。</p>\n<p>请使用Visual Studio Code打开ngAnimation应用。接着我们将创建自己的组件。</p>\n<p>请依次进入View &gt;&gt; Integrated Terminal，这将打开Visual Studio Code的终端窗口。</p>\n<p>请执行以下命令，以创建相应的组件：</p>\n<pre><code class=\"hljs undefined\"><span class=\"hljs-attribute\">ng g c animationdemo</span></code></pre>\n<p>它将在/src/app文件夹内创建我们的组件–animationdemo。</p>\n<p>为了用到Angular动画，我们需要在应用中导入特定的动画模块–BrowserAnimationsModule。请打开app.module.ts文件，并添加如下的导入定义：</p>\n<pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">import</span> &#123; BrowserAnimationsModule &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/platform-browser/animations'</span>;  \n<span class=\"hljs-comment\">// other import definitions  </span>\n<span class=\"hljs-meta\">@NgModule</span>(&#123; imports: [BrowserAnimationsModule <span class=\"hljs-comment\">// other imports]&#125;)</span></code></pre>\n<h2 id=\"理解Angular动画的语法\"><a href=\"#理解Angular动画的语法\" class=\"headerlink\" title=\"理解Angular动画的语法\"></a>理解Angular动画的语法</h2><p>下面，我们在组件的元数据中编写动画代码。其语法如下：</p>\n<pre><code class=\"hljs ts\"><span class=\"hljs-meta\">@Component</span>(&#123; \n<span class=\"hljs-comment\">// other component properties. </span>\n  animations: [ \n    trigger(<span class=\"hljs-string\">'triggerName'</span>), [ \n      state(<span class=\"hljs-string\">'stateName'</span>, style()) \n      transition(<span class=\"hljs-string\">'stateChangeExpression'</span>, [Animation Steps]) \n    ] \n  ] \n&#125;)</code></pre>\n<p>此处，我们用到了名为animations的属性。该属性的输入是一个阵列，此阵列包含一个或多个“触发器”。同时，每个触发器都带有唯一的名称、和用来定义动画的状态和各种转换的具体实现。</p>\n<p>另外，每一个状态函数都会通过“stateName”来唯一地识别其状态、并用样式函数来显示在该状态下的元素样式。</p>\n<p>当然，每个转换函数也都通过stateChangeExpression，来定义元素状态转换、并定义动画的不同步骤所对应的阵列，从而能够显示出转换是如何发生的。在此，我们就可以用逗号分隔的数值，来将多个触发器函数包括到动画的属性之中。</p>\n<p>由于这些功能(触发、状态、和转换)都被定义在@angular/animations模块之中，因此，我们需要在自己的组件导入该模块。</p>\n<p>为了将动画应用到某个元素之上，我们需要在元素的定义中包含触发器的名称，即：在元素的标签里使用@后面加触发器名称的格式。对应的代码示例如下：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> @<span class=\"hljs-attr\">changeSize</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></code></pre>\n<p>这是将触发器changeSize应用到元素的上。</p>\n<p>下面，让我们创建更多的动画，以更好地理解Angular的动画概念吧。</p>\n<p>更改大小的动画</p>\n<p>我们将创建一个动画，来实现一键改变的大小。</p>\n<p>请打开animationdemo.component.ts文件，将如下代码添加到导入定义之中。</p>\n<pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">import</span> &#123; trigger, state, style, animate, transition &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/animations'</span>;</code></pre>\n<p>在组件的元数据中添加如下的动画属性定义。</p>\n<pre><code class=\"hljs ts\">animations: [ \n  trigger(<span class=\"hljs-string\">'changeDivSize'</span>, [ \n    state(<span class=\"hljs-string\">'initial'</span>, style(&#123; \n      backgroundColor: <span class=\"hljs-string\">'green'</span>, \n      width: <span class=\"hljs-string\">'100px'</span>, \n      height: <span class=\"hljs-string\">'100px'</span> \n    &#125;)), \n    state(<span class=\"hljs-string\">'final'</span>, style(&#123; \n      backgroundColor: <span class=\"hljs-string\">'red'</span>, \n      width: <span class=\"hljs-string\">'200px'</span>, \n      height: <span class=\"hljs-string\">'200px'</span> \n    &#125;)), \n    transition(<span class=\"hljs-string\">'initial=&gt;final'</span>, animate(<span class=\"hljs-string\">'1500ms'</span>)), \n    transition(<span class=\"hljs-string\">'final=&gt;initial'</span>, animate(<span class=\"hljs-string\">'1000ms'</span>)) \n  ]), \n]</code></pre>\n<p>在此，我们定义了一个触发器—changeDivSize，而且该触发器里的两个功能函数。该元素在“初始”状态时呈现绿色，并随着宽度和高度的增加，在“最终”状态时呈现为红色。</p>\n<p>同时，我们定义了状态的转换规则：从“初始”态到“最终”态将持续1500毫秒，而从“最终”态返回“初始”态则为1000毫秒。</p>\n<p>为了改变元素的状态，我们在组件的类定义中定义了一个功能函数。我们将如下代码包含在AnimationdemoComponent类中：</p>\n<pre><code class=\"hljs ts\">currentState = <span class=\"hljs-string\">'initial'</span>; \nchangeState() &#123; \n  <span class=\"hljs-keyword\">this</span>.currentState = <span class=\"hljs-keyword\">this</span>.currentState === <span class=\"hljs-string\">'initial'</span> ? <span class=\"hljs-string\">'final'</span> : <span class=\"hljs-string\">'initial'</span>; \n&#125;</code></pre>\n<p>此处，我们定义了一个changeState方法，来切换元素的状态。</p>\n<p>请打开animationdemo.component.html文件，并添加以下代码：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span>&gt;</span>Change the div size<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span> \n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> (<span class=\"hljs-attr\">click</span>)=<span class=\"hljs-string\">\"changeState()\"</span>&gt;</span>Change Size<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span> \n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span> /&gt;</span> \n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> [@<span class=\"hljs-attr\">changeDivSize</span>]=<span class=\"hljs-string\">currentState</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span> \n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span> /&gt;</span></code></pre>\n<p>我们定义了一个按钮，来调用点击时的changeState函数。由于我们前面已经定义了元素，并对它应用了changeDivSize动画触发器，因此当按钮被点击时，它会更新元素的状态，其大小则会伴随着转换效果而发生变化。</p>\n<p>在执行该应用之前，我们也需要将引用包含在app.component.html文件内的Animationdemo组件中。</p>\n<p>打开app.component.html文件，您会发现该文件中已包含了一些默认的HTML代码。请删除所有的代码，并按照下图所示放置组件的选择器：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">app-animationdemo</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">app-animationdemo</span>&gt;</span></code></pre>\n<p>请在Visual Studio Code的终端窗口里运行ng serve命令，以执行该代码。运行完毕后，它会提示您在浏览器中打开<a href=\"http://localhost:4200。随后，您就会在浏览器中看到如下点击按钮的动画效果。\" target=\"_blank\" rel=\"noopener\">http://localhost:4200。随后，您就会在浏览器中看到如下点击按钮的动画效果。</a></p>\n<h2 id=\"气球动画效果\"><a href=\"#气球动画效果\" class=\"headerlink\" title=\"气球动画效果\"></a>气球动画效果</h2><p>在前面的动画示例中，转化仅发生在两个方向。而在本节中，我们将学习如何改变所有方向上的尺寸。这与气球的充、放气比较类似，故称为气球动画效果。</p>\n<p>请在动画属性中添加如下的触发器定义。</p>\n<pre><code class=\"hljs ts\">trigger(<span class=\"hljs-string\">'balloonEffect'</span>, [ \n   state(<span class=\"hljs-string\">'initial'</span>, style(&#123; \n     backgroundColor: <span class=\"hljs-string\">'green'</span>, \n     transform: <span class=\"hljs-string\">'scale(1)'</span> \n   &#125;)), \n   state(<span class=\"hljs-string\">'final'</span>, style(&#123; \n     backgroundColor: <span class=\"hljs-string\">'red'</span>, \n     transform: <span class=\"hljs-string\">'scale(1.5)'</span> \n   &#125;)), \n   transition(<span class=\"hljs-string\">'final=&gt;initial'</span>, animate(<span class=\"hljs-string\">'1000ms'</span>)), \n   transition(<span class=\"hljs-string\">'initial=&gt;final'</span>, animate(<span class=\"hljs-string\">'1500ms'</span>)) \n ]),</code></pre>\n<p>在此，我们使用转换属性来更改所有方向的尺寸大小。当该元素的状态发生变化时转换随即发生。</p>\n<p>请在app.component.html文件中添加如下HTML代码。</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span>&gt;</span>Balloon Effect<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span> \n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> (<span class=\"hljs-attr\">click</span>)=<span class=\"hljs-string\">\"changeState()\"</span>  \n  <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"width:100px;height:100px; border-radius: 100%; margin: 3rem; background-color: green\"</span> \n  [@<span class=\"hljs-attr\">balloonEffect</span>]=<span class=\"hljs-string\">currentState</span>&gt;</span> \n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></code></pre>\n<p>在此，我们定义了一个div，并通过CSS样式来定义成一个圆圈。我们将通过点击div去调用changeState，从而实现元素状态的切换。</p>\n<p>下图便是该动画在浏览器中的运行效果：</p>\n<p>淡入和淡出动画</p>\n<p>有时候，我们需要在显示动画的同时，对DOM添加或移除元素。下面，我们来看看如何通过对一个列表添加或删除条目，以实现淡入和淡出的动画效果。</p>\n<p>请将如下代码插入AnimationdemoComponent类的定义之中。</p>\n<pre><code class=\"hljs ts\">listItem = []; \nlist_order: <span class=\"hljs-built_in\">number</span> = <span class=\"hljs-number\">1</span>; \naddItem() &#123; \n  <span class=\"hljs-keyword\">var</span> listitem = <span class=\"hljs-string\">\"ListItem \"</span> + <span class=\"hljs-keyword\">this</span>.list_order; \n  <span class=\"hljs-keyword\">this</span>.list_order++; \n  <span class=\"hljs-keyword\">this</span>.listItem.push(listitem); \n&#125; \nremoveItem() &#123; \n  <span class=\"hljs-keyword\">this</span>.listItem.length -= <span class=\"hljs-number\">1</span>; \n&#125;</code></pre>\n<p>请在该动画的属性中添加如下的触发器定义。</p>\n<pre><code class=\"hljs ts\">trigger(<span class=\"hljs-string\">'fadeInOut'</span>, [ \n  state(<span class=\"hljs-string\">'void'</span>, style(&#123; \n    opacity: <span class=\"hljs-number\">0</span> \n  &#125;)), \n  transition(<span class=\"hljs-string\">'void &lt;=&gt; *'</span>, animate(<span class=\"hljs-number\">1000</span>)), \n]),</code></pre>\n<p>在此，我们定义了触发器fadeInOut。当该元素被添加到DOM时，它的状态就从void转换为wildcard，我们表示为void =&gt; <em>。而当该元素从DOM删除时，它的状态就从wildcard转换为void，我们表示为</em> =&gt; void。</p>\n<p>我们给动画的不同方向使用相同的动画定时，其语法为&lt;=&gt;。正如该触发器所定义的，动画从void =&gt; <em> 和 </em> =&gt; void，都需要1000毫秒才能完成。</p>\n<p>请在app.component.html文件中添加如下HTML代码。</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span>&gt;</span>Fade-In and Fade-Out animation<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span> \n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> (<span class=\"hljs-attr\">click</span>)=<span class=\"hljs-string\">\"addItem()\"</span>&gt;</span>Add List<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span> \n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> (<span class=\"hljs-attr\">click</span>)=<span class=\"hljs-string\">\"removeItem()\"</span>&gt;</span>Remove List<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span> \n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"width:200px; margin-left: 20px\"</span>&gt;</span> \n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span> \n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> *<span class=\"hljs-attr\">ngFor</span>=<span class=\"hljs-string\">\"let list of listItem\"</span> [@<span class=\"hljs-attr\">fadeInOut</span>]&gt;</span> \n      &#123;&#123;list&#125;&#125; \n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span> \n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span> \n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span> \n``` \n\n在此，我们定义了两个按钮来添加和删除条目。我们将fadeInOut触发器与元素绑定，以实现在对DOM进行添加、删除时，能够出现淡入和淡出的效果。\n\n下图便是该动画在浏览器中的运行效果：\n\n\n\n进入和离开动画\n\n此外，我们还能够通过对DOM的添加，实现某个元素从左边进入屏幕;而在删除时，能让该元素从右边离开屏幕。\n\n由于从void =&gt; * 和 * =&gt; void 的转换十分常见。因此，Angular为这些动画提供了别名机制：\n\n- 对于 void =&gt; * ，我们可以用':enter'\n- 对于 * =&gt; void ，我们可以用':leave'\n\n这两个别名使得此类转换更具可读性，也更容易被理解。\n\n请在动画的属性中添加如下触发器的定义。\n\n```ts\ntrigger('EnterLeave', [ \n  state('flyIn', style(&#123; transform: 'translateX(0)' &#125;)), \n  transition(':enter', [ \n    style(&#123; transform: 'translateX(-100%)' &#125;), \n    animate('0.5s 300ms ease-in') \n  ]), \n  transition(':leave', [ \n    animate('0.3s ease-out', style(&#123; transform: 'translateX(100%)' &#125;)) \n  ]) \n])</code></pre>\n<p>在此，我们定义了触发器EnterLeave。那么’:enter’的转换需要等待300毫秒，然后运行0.5秒，并实现滑入的效果;而’:leave’的转换只运行0.3秒，实现滑出的效果。</p>\n<p>请在app.component.html文件中添加如下HTML代码。</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span>&gt;</span>Enter and Leave animation<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span> \n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> (<span class=\"hljs-attr\">click</span>)=<span class=\"hljs-string\">\"addItem()\"</span>&gt;</span>Add List<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span> \n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> (<span class=\"hljs-attr\">click</span>)=<span class=\"hljs-string\">\"removeItem()\"</span>&gt;</span>Remove List<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span> \n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"width:200px; margin-left: 20px\"</span>&gt;</span> \n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span> \n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> *<span class=\"hljs-attr\">ngFor</span>=<span class=\"hljs-string\">\"let list of listItem\"</span> [@<span class=\"hljs-attr\">EnterLeave</span>]=<span class=\"hljs-string\">\"'flyIn'\"</span>&gt;</span> \n      &#123;&#123;list&#125;&#125; \n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span> \n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span> \n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></code></pre>\n<p>在此，我们定义了两个按钮来对列表添加和删除条目。我们将EnterLeave触发器与元素绑定，以实现在对DOM进行添加、删除时，出现滑入和滑出的效果。</p>\n<p>下图便是该动画在浏览器中的运行效果：</p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>综上所述，我们针对Angular 6的动画效果，探讨了动画状态和转换的概念，也通过一个应用示例展示了实际的动画代码与效果。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"如何用Angular-6创建各种动画效果\"><a href=\"#如何用Angular-6创建各种动画效果\" class=\"headerlink\" title=\"如何用Angular 6创建各种动画效果\"></a>如何用Angular 6创建各种动画效果</h1><h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>就技术角度而言，动画可以被定义为从初始状态到最终状态的转换过程。如今它已是各种Web应用不可或缺的组成部分。通过动画，我们不仅能创建出各种酷炫的UI，同时它们也能增加应用程序的趣味性。因此，设计精美的动画在吸引用户眼球的同时，也增强了他们的浏览体验。</p>\n<p>Angular能够让我们创建出具有原生表现效果的动画。我们将通过本文学习到如何使用Angular 6来创建各种动画效果。</p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p>安装vs code和 Angular cli。</p>\n<h2 id=\"源代码\"><a href=\"#源代码\" class=\"headerlink\" title=\"源代码\"></a>源代码</h2><p><a href=\"https://stackblitz.com/edit/tk-angular-animations-01\" target=\"_blank\" rel=\"noopener\">https://stackblitz.com/edit/tk-angular-animations-01</a></p>\n<h2 id=\"理解Angular动画的不同状态\"><a href=\"#理解Angular动画的不同状态\" class=\"headerlink\" title=\"理解Angular动画的不同状态\"></a>理解Angular动画的不同状态</h2><p>动画是某个元素从一种状态向另一种状态的转变，Angular为单个元素定义出了三种不同的状态。</p>\n<ol>\n<li>void状态：void状态表示某个元素处于不是DOM一部分的状态。当一个元素被创建且尚未放到DOM中、或者该元素从DOM中移除时，就处于该状态。此状态特别实用，特别是当我们想通过添加或删除DOM中的元素，来创建动画的时候，我们在代码中使用关键字void来定义这种状态。</li>\n<li>wildcard状态：又称元素的默认状态。不管当前的动画状态如何，各种样式都用这种状态来定义元素。我们在代码中用符号*来定义这种状态。</li>\n<li>Custom状态：元素的这种状态需要在代码中被明确定义。我们在代码中可以使用任何自定义的名称来表示这种状态。</li>\n</ol>\n<h2 id=\"动画转换定时\"><a href=\"#动画转换定时\" class=\"headerlink\" title=\"动画转换定时\"></a>动画转换定时</h2><p>我们在自己的应用中，通过定义动画转换的定时，来显示从一个状态过度到另一个状态。Angular为我们提供了如下三种与时间相关的属性：</p>\n<ol>\n<li>持续时间(Duration)</li>\n</ol>\n<p>此属性表示我们的动画从开始(初始状态)到完成(最终状态)所需的时间。我们可以用以下三种方式来定义动画的持续时间：</p>\n<ul>\n<li>使用一个整数值，来表示以毫秒为单位的时间，例如：500</li>\n<li>使用一个字符串值，来表示以毫秒为单位的时间，例如：’500ms’</li>\n<li>使用一个字符串值，来表示以秒为单位的时间。例如：’0.5’</li>\n</ul>\n<ol start=\"2\">\n<li>延迟(Delay)</li>\n</ol>\n<p>此属性代表动画从触发到和实际转换开始之间的时间间隔。该属性遵循与上述持续时间相同的语法规则。要定义延迟，我们需要在持续时间值的后面，以字符串的形式添加延迟的数值，即：’Duration Delay’。例如’ 0.3s 500ms’，表示转换将等待500毫秒，然后运行0.3秒。</p>\n<ol start=\"3\">\n<li>滑动(Easing)</li>\n</ol>\n<p>此属性表示动画在其执行过程中是如何被加速或减速的。我们可以在持续时间和延迟的字符串后面，添加第三个变量。当然，如果延迟数值不存在的话，那么Easing将成为第二个数值。这同样也是一个可选属性。例如：</p>\n<ul>\n<li>‘0.3s 500ms ease-in’。这意味着转换将等待500毫秒，然后运行0.3秒(300毫秒)，实现滑入的效果。</li>\n<li>‘300ms ease-out’。这意味着转换将运行300毫秒(0.3秒)，实现滑出的效果。</li>\n</ul>\n<h2 id=\"创建Angular-6应用\"><a href=\"#创建Angular-6应用\" class=\"headerlink\" title=\"创建Angular 6应用\"></a>创建Angular 6应用</h2><p>请在您的计算机上打开命令提示行，并执行以下命令集：</p>\n<ul>\n<li>mkdir ngAnimationDemo</li>\n<li>cd ngAnimationDemo</li>\n<li>ng new ngAnimation</li>\n</ul>\n<p>这些命令将创建一个名为ngAnimationDemo的目录，然后在该目录内创建一个名为ngAnimation的Angular应用。</p>\n<p>请使用Visual Studio Code打开ngAnimation应用。接着我们将创建自己的组件。</p>\n<p>请依次进入View &gt;&gt; Integrated Terminal，这将打开Visual Studio Code的终端窗口。</p>\n<p>请执行以下命令，以创建相应的组件：</p>\n<pre><code class=\"hljs undefined\"><span class=\"hljs-attribute\">ng g c animationdemo</span></code></pre>\n<p>它将在/src/app文件夹内创建我们的组件–animationdemo。</p>\n<p>为了用到Angular动画，我们需要在应用中导入特定的动画模块–BrowserAnimationsModule。请打开app.module.ts文件，并添加如下的导入定义：</p>\n<pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">import</span> &#123; BrowserAnimationsModule &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/platform-browser/animations'</span>;  \n<span class=\"hljs-comment\">// other import definitions  </span>\n<span class=\"hljs-meta\">@NgModule</span>(&#123; imports: [BrowserAnimationsModule <span class=\"hljs-comment\">// other imports]&#125;)</span></code></pre>\n<h2 id=\"理解Angular动画的语法\"><a href=\"#理解Angular动画的语法\" class=\"headerlink\" title=\"理解Angular动画的语法\"></a>理解Angular动画的语法</h2><p>下面，我们在组件的元数据中编写动画代码。其语法如下：</p>\n<pre><code class=\"hljs ts\"><span class=\"hljs-meta\">@Component</span>(&#123; \n<span class=\"hljs-comment\">// other component properties. </span>\n  animations: [ \n    trigger(<span class=\"hljs-string\">'triggerName'</span>), [ \n      state(<span class=\"hljs-string\">'stateName'</span>, style()) \n      transition(<span class=\"hljs-string\">'stateChangeExpression'</span>, [Animation Steps]) \n    ] \n  ] \n&#125;)</code></pre>\n<p>此处，我们用到了名为animations的属性。该属性的输入是一个阵列，此阵列包含一个或多个“触发器”。同时，每个触发器都带有唯一的名称、和用来定义动画的状态和各种转换的具体实现。</p>\n<p>另外，每一个状态函数都会通过“stateName”来唯一地识别其状态、并用样式函数来显示在该状态下的元素样式。</p>\n<p>当然，每个转换函数也都通过stateChangeExpression，来定义元素状态转换、并定义动画的不同步骤所对应的阵列，从而能够显示出转换是如何发生的。在此，我们就可以用逗号分隔的数值，来将多个触发器函数包括到动画的属性之中。</p>\n<p>由于这些功能(触发、状态、和转换)都被定义在@angular/animations模块之中，因此，我们需要在自己的组件导入该模块。</p>\n<p>为了将动画应用到某个元素之上，我们需要在元素的定义中包含触发器的名称，即：在元素的标签里使用@后面加触发器名称的格式。对应的代码示例如下：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> @<span class=\"hljs-attr\">changeSize</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></code></pre>\n<p>这是将触发器changeSize应用到元素的上。</p>\n<p>下面，让我们创建更多的动画，以更好地理解Angular的动画概念吧。</p>\n<p>更改大小的动画</p>\n<p>我们将创建一个动画，来实现一键改变的大小。</p>\n<p>请打开animationdemo.component.ts文件，将如下代码添加到导入定义之中。</p>\n<pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">import</span> &#123; trigger, state, style, animate, transition &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/animations'</span>;</code></pre>\n<p>在组件的元数据中添加如下的动画属性定义。</p>\n<pre><code class=\"hljs ts\">animations: [ \n  trigger(<span class=\"hljs-string\">'changeDivSize'</span>, [ \n    state(<span class=\"hljs-string\">'initial'</span>, style(&#123; \n      backgroundColor: <span class=\"hljs-string\">'green'</span>, \n      width: <span class=\"hljs-string\">'100px'</span>, \n      height: <span class=\"hljs-string\">'100px'</span> \n    &#125;)), \n    state(<span class=\"hljs-string\">'final'</span>, style(&#123; \n      backgroundColor: <span class=\"hljs-string\">'red'</span>, \n      width: <span class=\"hljs-string\">'200px'</span>, \n      height: <span class=\"hljs-string\">'200px'</span> \n    &#125;)), \n    transition(<span class=\"hljs-string\">'initial=&gt;final'</span>, animate(<span class=\"hljs-string\">'1500ms'</span>)), \n    transition(<span class=\"hljs-string\">'final=&gt;initial'</span>, animate(<span class=\"hljs-string\">'1000ms'</span>)) \n  ]), \n]</code></pre>\n<p>在此，我们定义了一个触发器—changeDivSize，而且该触发器里的两个功能函数。该元素在“初始”状态时呈现绿色，并随着宽度和高度的增加，在“最终”状态时呈现为红色。</p>\n<p>同时，我们定义了状态的转换规则：从“初始”态到“最终”态将持续1500毫秒，而从“最终”态返回“初始”态则为1000毫秒。</p>\n<p>为了改变元素的状态，我们在组件的类定义中定义了一个功能函数。我们将如下代码包含在AnimationdemoComponent类中：</p>\n<pre><code class=\"hljs ts\">currentState = <span class=\"hljs-string\">'initial'</span>; \nchangeState() &#123; \n  <span class=\"hljs-keyword\">this</span>.currentState = <span class=\"hljs-keyword\">this</span>.currentState === <span class=\"hljs-string\">'initial'</span> ? <span class=\"hljs-string\">'final'</span> : <span class=\"hljs-string\">'initial'</span>; \n&#125;</code></pre>\n<p>此处，我们定义了一个changeState方法，来切换元素的状态。</p>\n<p>请打开animationdemo.component.html文件，并添加以下代码：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span>&gt;</span>Change the div size<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span> \n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> (<span class=\"hljs-attr\">click</span>)=<span class=\"hljs-string\">\"changeState()\"</span>&gt;</span>Change Size<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span> \n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span> /&gt;</span> \n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> [@<span class=\"hljs-attr\">changeDivSize</span>]=<span class=\"hljs-string\">currentState</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span> \n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span> /&gt;</span></code></pre>\n<p>我们定义了一个按钮，来调用点击时的changeState函数。由于我们前面已经定义了元素，并对它应用了changeDivSize动画触发器，因此当按钮被点击时，它会更新元素的状态，其大小则会伴随着转换效果而发生变化。</p>\n<p>在执行该应用之前，我们也需要将引用包含在app.component.html文件内的Animationdemo组件中。</p>\n<p>打开app.component.html文件，您会发现该文件中已包含了一些默认的HTML代码。请删除所有的代码，并按照下图所示放置组件的选择器：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">app-animationdemo</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">app-animationdemo</span>&gt;</span></code></pre>\n<p>请在Visual Studio Code的终端窗口里运行ng serve命令，以执行该代码。运行完毕后，它会提示您在浏览器中打开<a href=\"http://localhost:4200。随后，您就会在浏览器中看到如下点击按钮的动画效果。\" target=\"_blank\" rel=\"noopener\">http://localhost:4200。随后，您就会在浏览器中看到如下点击按钮的动画效果。</a></p>\n<h2 id=\"气球动画效果\"><a href=\"#气球动画效果\" class=\"headerlink\" title=\"气球动画效果\"></a>气球动画效果</h2><p>在前面的动画示例中，转化仅发生在两个方向。而在本节中，我们将学习如何改变所有方向上的尺寸。这与气球的充、放气比较类似，故称为气球动画效果。</p>\n<p>请在动画属性中添加如下的触发器定义。</p>\n<pre><code class=\"hljs ts\">trigger(<span class=\"hljs-string\">'balloonEffect'</span>, [ \n   state(<span class=\"hljs-string\">'initial'</span>, style(&#123; \n     backgroundColor: <span class=\"hljs-string\">'green'</span>, \n     transform: <span class=\"hljs-string\">'scale(1)'</span> \n   &#125;)), \n   state(<span class=\"hljs-string\">'final'</span>, style(&#123; \n     backgroundColor: <span class=\"hljs-string\">'red'</span>, \n     transform: <span class=\"hljs-string\">'scale(1.5)'</span> \n   &#125;)), \n   transition(<span class=\"hljs-string\">'final=&gt;initial'</span>, animate(<span class=\"hljs-string\">'1000ms'</span>)), \n   transition(<span class=\"hljs-string\">'initial=&gt;final'</span>, animate(<span class=\"hljs-string\">'1500ms'</span>)) \n ]),</code></pre>\n<p>在此，我们使用转换属性来更改所有方向的尺寸大小。当该元素的状态发生变化时转换随即发生。</p>\n<p>请在app.component.html文件中添加如下HTML代码。</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span>&gt;</span>Balloon Effect<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span> \n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> (<span class=\"hljs-attr\">click</span>)=<span class=\"hljs-string\">\"changeState()\"</span>  \n  <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"width:100px;height:100px; border-radius: 100%; margin: 3rem; background-color: green\"</span> \n  [@<span class=\"hljs-attr\">balloonEffect</span>]=<span class=\"hljs-string\">currentState</span>&gt;</span> \n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></code></pre>\n<p>在此，我们定义了一个div，并通过CSS样式来定义成一个圆圈。我们将通过点击div去调用changeState，从而实现元素状态的切换。</p>\n<p>下图便是该动画在浏览器中的运行效果：</p>\n<p>淡入和淡出动画</p>\n<p>有时候，我们需要在显示动画的同时，对DOM添加或移除元素。下面，我们来看看如何通过对一个列表添加或删除条目，以实现淡入和淡出的动画效果。</p>\n<p>请将如下代码插入AnimationdemoComponent类的定义之中。</p>\n<pre><code class=\"hljs ts\">listItem = []; \nlist_order: <span class=\"hljs-built_in\">number</span> = <span class=\"hljs-number\">1</span>; \naddItem() &#123; \n  <span class=\"hljs-keyword\">var</span> listitem = <span class=\"hljs-string\">\"ListItem \"</span> + <span class=\"hljs-keyword\">this</span>.list_order; \n  <span class=\"hljs-keyword\">this</span>.list_order++; \n  <span class=\"hljs-keyword\">this</span>.listItem.push(listitem); \n&#125; \nremoveItem() &#123; \n  <span class=\"hljs-keyword\">this</span>.listItem.length -= <span class=\"hljs-number\">1</span>; \n&#125;</code></pre>\n<p>请在该动画的属性中添加如下的触发器定义。</p>\n<pre><code class=\"hljs ts\">trigger(<span class=\"hljs-string\">'fadeInOut'</span>, [ \n  state(<span class=\"hljs-string\">'void'</span>, style(&#123; \n    opacity: <span class=\"hljs-number\">0</span> \n  &#125;)), \n  transition(<span class=\"hljs-string\">'void &lt;=&gt; *'</span>, animate(<span class=\"hljs-number\">1000</span>)), \n]),</code></pre>\n<p>在此，我们定义了触发器fadeInOut。当该元素被添加到DOM时，它的状态就从void转换为wildcard，我们表示为void =&gt; <em>。而当该元素从DOM删除时，它的状态就从wildcard转换为void，我们表示为</em> =&gt; void。</p>\n<p>我们给动画的不同方向使用相同的动画定时，其语法为&lt;=&gt;。正如该触发器所定义的，动画从void =&gt; <em> 和 </em> =&gt; void，都需要1000毫秒才能完成。</p>\n<p>请在app.component.html文件中添加如下HTML代码。</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span>&gt;</span>Fade-In and Fade-Out animation<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span> \n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> (<span class=\"hljs-attr\">click</span>)=<span class=\"hljs-string\">\"addItem()\"</span>&gt;</span>Add List<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span> \n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> (<span class=\"hljs-attr\">click</span>)=<span class=\"hljs-string\">\"removeItem()\"</span>&gt;</span>Remove List<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span> \n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"width:200px; margin-left: 20px\"</span>&gt;</span> \n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span> \n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> *<span class=\"hljs-attr\">ngFor</span>=<span class=\"hljs-string\">\"let list of listItem\"</span> [@<span class=\"hljs-attr\">fadeInOut</span>]&gt;</span> \n      &#123;&#123;list&#125;&#125; \n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span> \n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span> \n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span> \n``` \n\n在此，我们定义了两个按钮来添加和删除条目。我们将fadeInOut触发器与元素绑定，以实现在对DOM进行添加、删除时，能够出现淡入和淡出的效果。\n\n下图便是该动画在浏览器中的运行效果：\n\n\n\n进入和离开动画\n\n此外，我们还能够通过对DOM的添加，实现某个元素从左边进入屏幕;而在删除时，能让该元素从右边离开屏幕。\n\n由于从void =&gt; * 和 * =&gt; void 的转换十分常见。因此，Angular为这些动画提供了别名机制：\n\n- 对于 void =&gt; * ，我们可以用':enter'\n- 对于 * =&gt; void ，我们可以用':leave'\n\n这两个别名使得此类转换更具可读性，也更容易被理解。\n\n请在动画的属性中添加如下触发器的定义。\n\n```ts\ntrigger('EnterLeave', [ \n  state('flyIn', style(&#123; transform: 'translateX(0)' &#125;)), \n  transition(':enter', [ \n    style(&#123; transform: 'translateX(-100%)' &#125;), \n    animate('0.5s 300ms ease-in') \n  ]), \n  transition(':leave', [ \n    animate('0.3s ease-out', style(&#123; transform: 'translateX(100%)' &#125;)) \n  ]) \n])</code></pre>\n<p>在此，我们定义了触发器EnterLeave。那么’:enter’的转换需要等待300毫秒，然后运行0.5秒，并实现滑入的效果;而’:leave’的转换只运行0.3秒，实现滑出的效果。</p>\n<p>请在app.component.html文件中添加如下HTML代码。</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span>&gt;</span>Enter and Leave animation<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span> \n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> (<span class=\"hljs-attr\">click</span>)=<span class=\"hljs-string\">\"addItem()\"</span>&gt;</span>Add List<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span> \n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> (<span class=\"hljs-attr\">click</span>)=<span class=\"hljs-string\">\"removeItem()\"</span>&gt;</span>Remove List<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span> \n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"width:200px; margin-left: 20px\"</span>&gt;</span> \n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span> \n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> *<span class=\"hljs-attr\">ngFor</span>=<span class=\"hljs-string\">\"let list of listItem\"</span> [@<span class=\"hljs-attr\">EnterLeave</span>]=<span class=\"hljs-string\">\"'flyIn'\"</span>&gt;</span> \n      &#123;&#123;list&#125;&#125; \n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span> \n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span> \n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></code></pre>\n<p>在此，我们定义了两个按钮来对列表添加和删除条目。我们将EnterLeave触发器与元素绑定，以实现在对DOM进行添加、删除时，出现滑入和滑出的效果。</p>\n<p>下图便是该动画在浏览器中的运行效果：</p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>综上所述，我们针对Angular 6的动画效果，探讨了动画状态和转换的概念，也通过一个应用示例展示了实际的动画代码与效果。</p>\n"},{"title":"面向对象","date":"2019-02-21T01:44:01.000Z","_content":"\n## 面向对象\n\n### 什么是面向对象\n\n面向对象(Object Oriented,OO)是软件开发方法。面向对象的概念和应用已超越了程序设计和软件开发，扩展到如数据库系统、交互式界面、应用结构、应用平台、分布式系统、网络管理结构、CAD技术、人工智能等领域。面向对象是一种对现实世界理解和抽象的方法，是计算机编程技术发展到一定阶段后的产物。\n\n\n面向过程(Procedure Oriented)是一种以过程为中心的编程思想。这些都是以什么正在发生为主要目标进行编程，不同于面向对象的是谁在受影响。与面向对象明显的不同就是封装、继承、类。\n\n\n### 面向对象的三大基本特征\n面向对象的三个基本特征是：封装、继承、多态。\n\n![](http://www.cnitblog.com/images/cnitblog_com/lily/1972/o_OOBase.gif)\n\n面向对象的三大基本特征和五大基本原则\n\n\n**封装**\n\n封装最好理解了。封装是面向对象的特征之一，是对象和类概念的主要特性。\n\n封装，也就是把客观事物封装成抽象的类，并且类可以把自己的数据和方法只让可信的类或者对象操作，对不可信的进行信息隐藏。\n\n**继承**\n\n面向对象编程(OOP)语言的一个主要功能就是“继承”。继承是指这样一种能力：它可以使用现有类的所有功能，并在无需重新编写原来的类的情况下对这些功能进行扩展。\n\n通过继承创建的新类称为**子类**或**派生类**。被继承的类称为**基类**、**父类**或**超类**。\n\n继承的过程，就是从一般到特殊的过程。\n\n要实现继承，可以通过`继承（Inheritance）`和`组合（Composition）`来实现。\n在某些 OOP 语言中，一个子类可以继承多个基类。但是一般情况下，一个子类只能有一个基类，要实现多重继承，可以通过多级继承来实现。\n \n继承概念的实现方式有三类：实现继承、接口继承和可视继承。\n- 实现继承是指使用基类的属性和方法而无需额外编码的能力；\n- 接口继承是指仅使用属性和方法的名称、但是子类必须提供实现的能力；\n- 可视继承是指子窗体（类）使用基窗体（类）的外观和实现代码的能力。\n\n在考虑使用继承时，有一点需要注意，那就是两个类之间的关系应该是**属于**关系。例如，`Employee`是一个人，`Manager`也是一个人，因此这两个类都可以继承`Person`类。但是`Leg` 类却不能继承`Person`类，因为腿并不是一个人。\n\n抽象类仅定义将由子类创建的一般属性和方法，创建抽象类时，请使用关键字 `interface` 而不是`class`。\n\nOO开发范式大致为：划分对象->抽象类->将类组织成为层次化结构(继承和合成) ->用类与实例进行设计和实现几个阶段。\n\n**多态**\n\n多态性（polymorphisn）是允许你将父对象设置成为和一个或更多的他的子对象相等的技术，赋值之后，父对象就可以根据当前赋值给它的子对象的特性以不同的方式运作。简单的说，就是一句话：允许将子类类型的指针赋值给父类类型的指针。\n\n实现多态，有二种方式: **覆盖**、**重载**。\n\n- **覆盖**，是指子类重新定义父类的虚函数的做法。\n- **重载**，是指允许存在多个同名函数，而这些函数的参数表不同（或许参数个数不同，或许参数类型不同，或许两者都不同）。\n\n其实，重载的概念并不属于“面向对象编程”，重载的实现是：编译器根据函数不同的参数表，对同名函数的名称做修饰，然后这些同名函数就成了不同的函数（至少对于编译器来说是这样的）。如，有两个同名函数：`function func(p:integer):integer;`和`function func(p:string):integer;`。那么编译器做过修饰后的函数名称可能是这样的：`int_func`、`str_func`。对于这两个函数的调用，在编译器间就已经确定了，是静态的（记住：是静态）。也就是说，它们的地址在编译期就绑定了（早绑定），因此，重载和多态无关！真正和多态相关的是“覆盖”。当子类重新定义了父类的虚函数后，父类指针根据赋给它的不同的子类指针，动态（记住：是动态！）的调用属于子类的该函数，这样的函数调用在编译期间是无法确定的（调用的子类的虚函数的地址无法给出）。因此，这样的函数地址是在运行期绑定的（晚邦定）。结论就是：重载只是一种语言特性，与多态无关，与面向对象也无关！引用一句Bruce Eckel的话：“不要犯傻，如果它不是晚邦定，它就不是多态。”\n\n那么，多态的作用是什么呢？\n\n我们知道，封装可以隐藏实现细节，使得代码模块化；继承可以扩展已存在的代码模块（类）；它们的目的都是为了——代码重用。而多态则是为了实现另一个目的——接口重用！多态的作用，就是为了类在继承和派生的时候，保证使用“家谱”中任一类的实例的某一属性时的正确调用。\n\n### 平台无关性\n\nJava是平台无关的语言是指用Java写的应用程序不用修改就可在不同的软硬件平台上运行。平台无关有两种：源代码级和目标代码级。C和C++具有一定程度的源代码级平台无关，表明用C或C++写的应用程序不用修改只需重新编译就可以在不同平台上运行。\n\nJava主要靠Java虚拟机（JVM）在目标码级实现平台无关性。JVM是一种抽象机器，它附着在具体操作系统之上，本身具有一套虚机器指令，并有自己的栈、寄存器组等。但JVM通常是在软件上而不是在硬件上实现。（目前，SUN系统公司已经设计实现了Java芯片，主要使用在网络计算机NC上。另外，Java芯片的出现也会使Java更容易嵌入到家用电器中。）JVM是Java平台无关的基础，在JVM上，有一个Java解释器用来解释Java编译器编译后的程序。Java编程人员在编写完软件后，通过Java编译器将Java源程序编译为JVM的字节代码。任何一台机器只要配备了Java解释器，就可以运行这个程序，而不管这种字节码是在何种平台上生成的（过程如图1所示）。另外，Java采用的是基于IEEE标准的数据类型。通过JVM保证数据类型的一致性，也确保了Java的平台无关性。\n\nJava的平台无关性具有深远意义。首先，它使得编程人员所梦寐以求的事情（开发一次软件在任意平台上运行）变成事实，这将大大加快和促进软件产品的开发。其次Java的平台无关性正好迎合了 \"网络计算机 \"思想。如果大量常用的应用软件（如字处理软件等）都用Java重新编写，并且放在某个Internet服务器上，那么具有NC的用户将不需要占用大量空间安装软件，他们只需要一个Java解释器，每当需要使用某种应用软件时，下载该软件的字节代码即可，运行结果也可以发回服务器。目前，已有数家公司开始使用这种新型的计算模式构筑自己的企业信息系统。\n\n#### JVM 还支持哪些语言\n\n**Kotlin**\n\n![](https://ss.csdn.net/p?http://codebay.cn/wp-content/uploads/2018/05/image.php_-1-660x344.gif)\n\n官方站点：https://kotlinlang.org/\n\n由JetBrains于2010年创建，并于2012年开源， Kotlin比Java更加简洁和安全。 您完全可以将Kotlin视为是一种“更加简单但高效的Java”。Kotlin的编译速度通常比Java代码快，而且在其创建之初，就非常明确的支持了函数式编程，这一点，Java是到Java 8才开始支持的。\n\n特别的，因为有了Google的加持，越来越多的Android开发人员，开始选择Kotlin来开发应用程序，与此同时，独立的超越JVM的行动也已经在展开，通过一项名为LLVM的项目，Kotlin正在努力实现代码编译的本地化，而不在基于JVM 。\n\n但无论如何，至少现在，它还活在JVM中。\n\n**Scala**\n\n![](https://ss.csdn.net/p?http://codebay.cn/wp-content/uploads/2018/05/image.php_-2-660x274.gif)\n\n官方站点：http://www.scala-lang.org/\n\n和Kotlin一样， Scala也是为了让Java开发人员提高工作效率而创建的。 作为一种完全的面向对象语言和一种完全的函数式编程语言，Scala巧妙的将这两种编程范式结合到了一起。\n\n特别是在函数式编程方面，Scala几乎支持函数式编程语言中所有已知的特性，比如，模式匹配（Pattern matching）、延迟初始化（Lazy initialization）、偏函数（Partial Function）、不变性（Immutability）等等等等，\n\n因此，虽然Scala的类Lisp的语法会让初学者倍感迷惑，但花时间在这上面，永远是值得的，很快，就会让你体会到那种只需要关注 What（做什么），而不用关注How（如何做）的酸爽。\n\n一个最新的关于Scala的消息是，它似乎也在和Kotlin一样，在加速准备逃离JVM的控制，这对于JVM，恐怕不是一个什么特别好的消息，虽然，其距离用于生产可能还为时尚早。\n\n\n**Clojure**\n\n![](https://ss.csdn.net/p?http://codebay.cn/wp-content/uploads/2018/05/image.php_-3.gif)\n\n官方站点：https://clojure.org/\n\nClojure是由开发人员Rich Hickey在JVM下，所创建的一种Lisp方言，借助于JVM的执行效率越来越高，Clojure也常被嵌入在Java中，用于编写其中需要高并发、高性能的部分 。\n\n\n**Groovy**\n\n![](https://ss.csdn.net/p?http://codebay.cn/wp-content/uploads/2018/05/image.php_-4-660x291.gif)\n\n官方站点：http://www.groovy-lang.org/\n\nGroovy是在Java现有基础上，吸收Python和Ruby等动态语言的特性，而创建的一种新型语言，也是Jenkins持续集成服务器，所直接支持的语言之一，并且最关键的一点，通过基于Groovy的Web开发框架Grails，可以快速的完成相关Web项目的构建 。\n\n在未来，Groovy则拟包含Java和JVM的一些更新的特性，比如如Java 8的lambda语法等。\n\n**Jython**\n\n![](https://ss.csdn.net/p?http://codebay.cn/wp-content/uploads/2018/05/image.php_-5.gif)\n\n官方站点：http://www.jython.org/\n\nJython是JVM的Python实现，与Python的2.x分支兼容，可以动态编译为Java字节码，并且可以与其他JVM语言（特别是Java）自由交互操作。\n\n **JRuby**\n\n![](https://ss.csdn.net/p?http://codebay.cn/wp-content/uploads/2018/05/image.php_-6-660x206.gif)\n\n官方站点：http://jruby.org\n\nJRuby几乎就是Jython的翻版，所不同的是，JRuby所对标的语言是Ruby，当前所支持的语法规范则和Ruby 2.3兼容。\n\n**Ceylon**\n\n![](https://ss.csdn.net/p?http://codebay.cn/wp-content/uploads/2018/05/image.php_-7.gif)\n\n官方站点：https://www.ceylon-lang.org\n\n这个以大象为Logo的语言，其创建初衷可不是像大象一样笨拙，恰恰相反，语言的创始人 Gavin King，是出于对Java所存在问题的深刻认识，如泛型等特性的复杂性、粗劣的注解语法、不完善的块结构、对 XML 的依赖性等等，才萌生了创建一种新的静态类型语言语言，即Ceylon来一劳永逸的解决这些问题的想法。\n\nCeylon保留了一些好的 Java 语言特性，改进了语言的可读性和内置的模块性，还吸收了高阶函数等函数语言特性，此外，Ceylon 还融合了 C 和 Smalltalk 的一些特性。与 Java 语言一样，这种新语言也以业务计算为重点，但是它在其他领域也很灵活、很有用。并且，通过这些年的努力，Ceylon已经跨出了其自身跨平台的第一步，其代码已经可以在JVM，Dart VM或Node.js上进行编译或运行。\n\n**Eta**\n\n![](https://ss.csdn.net/p?http://codebay.cn/wp-content/uploads/2018/05/image.php_-8.gif)\n\n官方站点：https://eta-lang.org/\n\n我们的名单中怎么能少了时下最能装酷，也是被Node.js的创建者称为觉得暂无能力驾驭的语言Haskell的JVM实现？\n\n它来了，就是Eta，它的优势，不仅仅在于它可以在JVM下执行，更在于它可以使用Haskell的软件包仓库中的软件包，最大程度的兼容了整个Haskell生态系统。\n\n**Haxe**\n\n![](https://ss.csdn.net/p?http://codebay.cn/wp-content/uploads/2018/05/image.php_-9.gif)\n\n官方站点：http://haxe.org\n\nHaxe的口号是：One Language，Everywhere！是不是有点熟悉？是的，在非常久远的过去，这其实正是Java的初心。\n\n但是，这二者又是如此的迥异。Java的策略是，我做一个平台JVM，给出一种规范，你们来生成我需要的代码；Haxe的策略则正好相反，既然芸芸众生，语言纷杂，每个人都各有偏好，那好，来吧，我可以把我的代码，生成任何一种你们想要的语言下的代码！\n\n多么疯狂的想法！就为这点疯狂，就值得我们每个开发人员去膜拜一番了，毕竟，在Haxe看来，JVM，不过是其可以编译的一个“小”对象而已。\n\n### 值传递、引用传递\n\n**值传递**：(形式参数类型是基本数据类型)：方法调用时，实际参数把它的值传递给对应的形式参数，形式参数只是用实际参数的值初始化自己的存储单元内容，是两个不同的存储单元，所以方法执行中形式参数值的改变不影响实际参数的值。\n\n**引用传递**：(形式参数类型是引用数据类型参数)：也称为传地址。方法调用时，实际参数是对象(或数组)，这时实际参数与形式参数指向同一个地址，在方法执行中，对形式参数的操作实际上就是对实际参数的操作，这个结果在方法结束后被保留了下来，所以方法执行中形式参数的改变将会影响实际参数。\n\n\n说明：\n\n（1）：“在Java里面参数传递都是按值传递”这句话的意思是：按值传递是传递的值的拷贝，按引用传递其实传递的是引用的地址值，所以统称按值传递。\n\n（2）：在Java里面只有基本类型和按照下面这种定义方式的String是按值传递，其它的都是按引用传递。就是直接使用双引号定义字符串方式：String str = “Java私塾”;\n\n\n为什么说 Java 中只有值传递: https://blog.csdn.net/bjweimengshu/article/details/79799485\n\n\n\n\n---\n\n> 附参考\n> \n> - https://www.cnblogs.com/autumn001/p/9036148.html\n> - https://blog.csdn.net/B9Q8e64lO6mm/article/details/80235376\n> \n","source":"_posts/0016-面向对象.md","raw":"---\ntitle: 面向对象\ndate: 2019-02-21 09:44:01\ntags:\n    - Java\ncategories:\n    - 后端\n---\n\n## 面向对象\n\n### 什么是面向对象\n\n面向对象(Object Oriented,OO)是软件开发方法。面向对象的概念和应用已超越了程序设计和软件开发，扩展到如数据库系统、交互式界面、应用结构、应用平台、分布式系统、网络管理结构、CAD技术、人工智能等领域。面向对象是一种对现实世界理解和抽象的方法，是计算机编程技术发展到一定阶段后的产物。\n\n\n面向过程(Procedure Oriented)是一种以过程为中心的编程思想。这些都是以什么正在发生为主要目标进行编程，不同于面向对象的是谁在受影响。与面向对象明显的不同就是封装、继承、类。\n\n\n### 面向对象的三大基本特征\n面向对象的三个基本特征是：封装、继承、多态。\n\n![](http://www.cnitblog.com/images/cnitblog_com/lily/1972/o_OOBase.gif)\n\n面向对象的三大基本特征和五大基本原则\n\n\n**封装**\n\n封装最好理解了。封装是面向对象的特征之一，是对象和类概念的主要特性。\n\n封装，也就是把客观事物封装成抽象的类，并且类可以把自己的数据和方法只让可信的类或者对象操作，对不可信的进行信息隐藏。\n\n**继承**\n\n面向对象编程(OOP)语言的一个主要功能就是“继承”。继承是指这样一种能力：它可以使用现有类的所有功能，并在无需重新编写原来的类的情况下对这些功能进行扩展。\n\n通过继承创建的新类称为**子类**或**派生类**。被继承的类称为**基类**、**父类**或**超类**。\n\n继承的过程，就是从一般到特殊的过程。\n\n要实现继承，可以通过`继承（Inheritance）`和`组合（Composition）`来实现。\n在某些 OOP 语言中，一个子类可以继承多个基类。但是一般情况下，一个子类只能有一个基类，要实现多重继承，可以通过多级继承来实现。\n \n继承概念的实现方式有三类：实现继承、接口继承和可视继承。\n- 实现继承是指使用基类的属性和方法而无需额外编码的能力；\n- 接口继承是指仅使用属性和方法的名称、但是子类必须提供实现的能力；\n- 可视继承是指子窗体（类）使用基窗体（类）的外观和实现代码的能力。\n\n在考虑使用继承时，有一点需要注意，那就是两个类之间的关系应该是**属于**关系。例如，`Employee`是一个人，`Manager`也是一个人，因此这两个类都可以继承`Person`类。但是`Leg` 类却不能继承`Person`类，因为腿并不是一个人。\n\n抽象类仅定义将由子类创建的一般属性和方法，创建抽象类时，请使用关键字 `interface` 而不是`class`。\n\nOO开发范式大致为：划分对象->抽象类->将类组织成为层次化结构(继承和合成) ->用类与实例进行设计和实现几个阶段。\n\n**多态**\n\n多态性（polymorphisn）是允许你将父对象设置成为和一个或更多的他的子对象相等的技术，赋值之后，父对象就可以根据当前赋值给它的子对象的特性以不同的方式运作。简单的说，就是一句话：允许将子类类型的指针赋值给父类类型的指针。\n\n实现多态，有二种方式: **覆盖**、**重载**。\n\n- **覆盖**，是指子类重新定义父类的虚函数的做法。\n- **重载**，是指允许存在多个同名函数，而这些函数的参数表不同（或许参数个数不同，或许参数类型不同，或许两者都不同）。\n\n其实，重载的概念并不属于“面向对象编程”，重载的实现是：编译器根据函数不同的参数表，对同名函数的名称做修饰，然后这些同名函数就成了不同的函数（至少对于编译器来说是这样的）。如，有两个同名函数：`function func(p:integer):integer;`和`function func(p:string):integer;`。那么编译器做过修饰后的函数名称可能是这样的：`int_func`、`str_func`。对于这两个函数的调用，在编译器间就已经确定了，是静态的（记住：是静态）。也就是说，它们的地址在编译期就绑定了（早绑定），因此，重载和多态无关！真正和多态相关的是“覆盖”。当子类重新定义了父类的虚函数后，父类指针根据赋给它的不同的子类指针，动态（记住：是动态！）的调用属于子类的该函数，这样的函数调用在编译期间是无法确定的（调用的子类的虚函数的地址无法给出）。因此，这样的函数地址是在运行期绑定的（晚邦定）。结论就是：重载只是一种语言特性，与多态无关，与面向对象也无关！引用一句Bruce Eckel的话：“不要犯傻，如果它不是晚邦定，它就不是多态。”\n\n那么，多态的作用是什么呢？\n\n我们知道，封装可以隐藏实现细节，使得代码模块化；继承可以扩展已存在的代码模块（类）；它们的目的都是为了——代码重用。而多态则是为了实现另一个目的——接口重用！多态的作用，就是为了类在继承和派生的时候，保证使用“家谱”中任一类的实例的某一属性时的正确调用。\n\n### 平台无关性\n\nJava是平台无关的语言是指用Java写的应用程序不用修改就可在不同的软硬件平台上运行。平台无关有两种：源代码级和目标代码级。C和C++具有一定程度的源代码级平台无关，表明用C或C++写的应用程序不用修改只需重新编译就可以在不同平台上运行。\n\nJava主要靠Java虚拟机（JVM）在目标码级实现平台无关性。JVM是一种抽象机器，它附着在具体操作系统之上，本身具有一套虚机器指令，并有自己的栈、寄存器组等。但JVM通常是在软件上而不是在硬件上实现。（目前，SUN系统公司已经设计实现了Java芯片，主要使用在网络计算机NC上。另外，Java芯片的出现也会使Java更容易嵌入到家用电器中。）JVM是Java平台无关的基础，在JVM上，有一个Java解释器用来解释Java编译器编译后的程序。Java编程人员在编写完软件后，通过Java编译器将Java源程序编译为JVM的字节代码。任何一台机器只要配备了Java解释器，就可以运行这个程序，而不管这种字节码是在何种平台上生成的（过程如图1所示）。另外，Java采用的是基于IEEE标准的数据类型。通过JVM保证数据类型的一致性，也确保了Java的平台无关性。\n\nJava的平台无关性具有深远意义。首先，它使得编程人员所梦寐以求的事情（开发一次软件在任意平台上运行）变成事实，这将大大加快和促进软件产品的开发。其次Java的平台无关性正好迎合了 \"网络计算机 \"思想。如果大量常用的应用软件（如字处理软件等）都用Java重新编写，并且放在某个Internet服务器上，那么具有NC的用户将不需要占用大量空间安装软件，他们只需要一个Java解释器，每当需要使用某种应用软件时，下载该软件的字节代码即可，运行结果也可以发回服务器。目前，已有数家公司开始使用这种新型的计算模式构筑自己的企业信息系统。\n\n#### JVM 还支持哪些语言\n\n**Kotlin**\n\n![](https://ss.csdn.net/p?http://codebay.cn/wp-content/uploads/2018/05/image.php_-1-660x344.gif)\n\n官方站点：https://kotlinlang.org/\n\n由JetBrains于2010年创建，并于2012年开源， Kotlin比Java更加简洁和安全。 您完全可以将Kotlin视为是一种“更加简单但高效的Java”。Kotlin的编译速度通常比Java代码快，而且在其创建之初，就非常明确的支持了函数式编程，这一点，Java是到Java 8才开始支持的。\n\n特别的，因为有了Google的加持，越来越多的Android开发人员，开始选择Kotlin来开发应用程序，与此同时，独立的超越JVM的行动也已经在展开，通过一项名为LLVM的项目，Kotlin正在努力实现代码编译的本地化，而不在基于JVM 。\n\n但无论如何，至少现在，它还活在JVM中。\n\n**Scala**\n\n![](https://ss.csdn.net/p?http://codebay.cn/wp-content/uploads/2018/05/image.php_-2-660x274.gif)\n\n官方站点：http://www.scala-lang.org/\n\n和Kotlin一样， Scala也是为了让Java开发人员提高工作效率而创建的。 作为一种完全的面向对象语言和一种完全的函数式编程语言，Scala巧妙的将这两种编程范式结合到了一起。\n\n特别是在函数式编程方面，Scala几乎支持函数式编程语言中所有已知的特性，比如，模式匹配（Pattern matching）、延迟初始化（Lazy initialization）、偏函数（Partial Function）、不变性（Immutability）等等等等，\n\n因此，虽然Scala的类Lisp的语法会让初学者倍感迷惑，但花时间在这上面，永远是值得的，很快，就会让你体会到那种只需要关注 What（做什么），而不用关注How（如何做）的酸爽。\n\n一个最新的关于Scala的消息是，它似乎也在和Kotlin一样，在加速准备逃离JVM的控制，这对于JVM，恐怕不是一个什么特别好的消息，虽然，其距离用于生产可能还为时尚早。\n\n\n**Clojure**\n\n![](https://ss.csdn.net/p?http://codebay.cn/wp-content/uploads/2018/05/image.php_-3.gif)\n\n官方站点：https://clojure.org/\n\nClojure是由开发人员Rich Hickey在JVM下，所创建的一种Lisp方言，借助于JVM的执行效率越来越高，Clojure也常被嵌入在Java中，用于编写其中需要高并发、高性能的部分 。\n\n\n**Groovy**\n\n![](https://ss.csdn.net/p?http://codebay.cn/wp-content/uploads/2018/05/image.php_-4-660x291.gif)\n\n官方站点：http://www.groovy-lang.org/\n\nGroovy是在Java现有基础上，吸收Python和Ruby等动态语言的特性，而创建的一种新型语言，也是Jenkins持续集成服务器，所直接支持的语言之一，并且最关键的一点，通过基于Groovy的Web开发框架Grails，可以快速的完成相关Web项目的构建 。\n\n在未来，Groovy则拟包含Java和JVM的一些更新的特性，比如如Java 8的lambda语法等。\n\n**Jython**\n\n![](https://ss.csdn.net/p?http://codebay.cn/wp-content/uploads/2018/05/image.php_-5.gif)\n\n官方站点：http://www.jython.org/\n\nJython是JVM的Python实现，与Python的2.x分支兼容，可以动态编译为Java字节码，并且可以与其他JVM语言（特别是Java）自由交互操作。\n\n **JRuby**\n\n![](https://ss.csdn.net/p?http://codebay.cn/wp-content/uploads/2018/05/image.php_-6-660x206.gif)\n\n官方站点：http://jruby.org\n\nJRuby几乎就是Jython的翻版，所不同的是，JRuby所对标的语言是Ruby，当前所支持的语法规范则和Ruby 2.3兼容。\n\n**Ceylon**\n\n![](https://ss.csdn.net/p?http://codebay.cn/wp-content/uploads/2018/05/image.php_-7.gif)\n\n官方站点：https://www.ceylon-lang.org\n\n这个以大象为Logo的语言，其创建初衷可不是像大象一样笨拙，恰恰相反，语言的创始人 Gavin King，是出于对Java所存在问题的深刻认识，如泛型等特性的复杂性、粗劣的注解语法、不完善的块结构、对 XML 的依赖性等等，才萌生了创建一种新的静态类型语言语言，即Ceylon来一劳永逸的解决这些问题的想法。\n\nCeylon保留了一些好的 Java 语言特性，改进了语言的可读性和内置的模块性，还吸收了高阶函数等函数语言特性，此外，Ceylon 还融合了 C 和 Smalltalk 的一些特性。与 Java 语言一样，这种新语言也以业务计算为重点，但是它在其他领域也很灵活、很有用。并且，通过这些年的努力，Ceylon已经跨出了其自身跨平台的第一步，其代码已经可以在JVM，Dart VM或Node.js上进行编译或运行。\n\n**Eta**\n\n![](https://ss.csdn.net/p?http://codebay.cn/wp-content/uploads/2018/05/image.php_-8.gif)\n\n官方站点：https://eta-lang.org/\n\n我们的名单中怎么能少了时下最能装酷，也是被Node.js的创建者称为觉得暂无能力驾驭的语言Haskell的JVM实现？\n\n它来了，就是Eta，它的优势，不仅仅在于它可以在JVM下执行，更在于它可以使用Haskell的软件包仓库中的软件包，最大程度的兼容了整个Haskell生态系统。\n\n**Haxe**\n\n![](https://ss.csdn.net/p?http://codebay.cn/wp-content/uploads/2018/05/image.php_-9.gif)\n\n官方站点：http://haxe.org\n\nHaxe的口号是：One Language，Everywhere！是不是有点熟悉？是的，在非常久远的过去，这其实正是Java的初心。\n\n但是，这二者又是如此的迥异。Java的策略是，我做一个平台JVM，给出一种规范，你们来生成我需要的代码；Haxe的策略则正好相反，既然芸芸众生，语言纷杂，每个人都各有偏好，那好，来吧，我可以把我的代码，生成任何一种你们想要的语言下的代码！\n\n多么疯狂的想法！就为这点疯狂，就值得我们每个开发人员去膜拜一番了，毕竟，在Haxe看来，JVM，不过是其可以编译的一个“小”对象而已。\n\n### 值传递、引用传递\n\n**值传递**：(形式参数类型是基本数据类型)：方法调用时，实际参数把它的值传递给对应的形式参数，形式参数只是用实际参数的值初始化自己的存储单元内容，是两个不同的存储单元，所以方法执行中形式参数值的改变不影响实际参数的值。\n\n**引用传递**：(形式参数类型是引用数据类型参数)：也称为传地址。方法调用时，实际参数是对象(或数组)，这时实际参数与形式参数指向同一个地址，在方法执行中，对形式参数的操作实际上就是对实际参数的操作，这个结果在方法结束后被保留了下来，所以方法执行中形式参数的改变将会影响实际参数。\n\n\n说明：\n\n（1）：“在Java里面参数传递都是按值传递”这句话的意思是：按值传递是传递的值的拷贝，按引用传递其实传递的是引用的地址值，所以统称按值传递。\n\n（2）：在Java里面只有基本类型和按照下面这种定义方式的String是按值传递，其它的都是按引用传递。就是直接使用双引号定义字符串方式：String str = “Java私塾”;\n\n\n为什么说 Java 中只有值传递: https://blog.csdn.net/bjweimengshu/article/details/79799485\n\n\n\n\n---\n\n> 附参考\n> \n> - https://www.cnblogs.com/autumn001/p/9036148.html\n> - https://blog.csdn.net/B9Q8e64lO6mm/article/details/80235376\n> \n","slug":"0016-面向对象","published":1,"updated":"2020-07-17T02:32:01.163Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcpntugf001u04oif6el9zyy","content":"<h2 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h2><h3 id=\"什么是面向对象\"><a href=\"#什么是面向对象\" class=\"headerlink\" title=\"什么是面向对象\"></a>什么是面向对象</h3><p>面向对象(Object Oriented,OO)是软件开发方法。面向对象的概念和应用已超越了程序设计和软件开发，扩展到如数据库系统、交互式界面、应用结构、应用平台、分布式系统、网络管理结构、CAD技术、人工智能等领域。面向对象是一种对现实世界理解和抽象的方法，是计算机编程技术发展到一定阶段后的产物。</p>\n<p>面向过程(Procedure Oriented)是一种以过程为中心的编程思想。这些都是以什么正在发生为主要目标进行编程，不同于面向对象的是谁在受影响。与面向对象明显的不同就是封装、继承、类。</p>\n<h3 id=\"面向对象的三大基本特征\"><a href=\"#面向对象的三大基本特征\" class=\"headerlink\" title=\"面向对象的三大基本特征\"></a>面向对象的三大基本特征</h3><p>面向对象的三个基本特征是：封装、继承、多态。</p>\n<p><img src=\"http://www.cnitblog.com/images/cnitblog_com/lily/1972/o_OOBase.gif\" srcset=\"/img/loading.gif\" alt></p>\n<p>面向对象的三大基本特征和五大基本原则</p>\n<p><strong>封装</strong></p>\n<p>封装最好理解了。封装是面向对象的特征之一，是对象和类概念的主要特性。</p>\n<p>封装，也就是把客观事物封装成抽象的类，并且类可以把自己的数据和方法只让可信的类或者对象操作，对不可信的进行信息隐藏。</p>\n<p><strong>继承</strong></p>\n<p>面向对象编程(OOP)语言的一个主要功能就是“继承”。继承是指这样一种能力：它可以使用现有类的所有功能，并在无需重新编写原来的类的情况下对这些功能进行扩展。</p>\n<p>通过继承创建的新类称为<strong>子类</strong>或<strong>派生类</strong>。被继承的类称为<strong>基类</strong>、<strong>父类</strong>或<strong>超类</strong>。</p>\n<p>继承的过程，就是从一般到特殊的过程。</p>\n<p>要实现继承，可以通过<code>继承（Inheritance）</code>和<code>组合（Composition）</code>来实现。<br>在某些 OOP 语言中，一个子类可以继承多个基类。但是一般情况下，一个子类只能有一个基类，要实现多重继承，可以通过多级继承来实现。</p>\n<p>继承概念的实现方式有三类：实现继承、接口继承和可视继承。</p>\n<ul>\n<li>实现继承是指使用基类的属性和方法而无需额外编码的能力；</li>\n<li>接口继承是指仅使用属性和方法的名称、但是子类必须提供实现的能力；</li>\n<li>可视继承是指子窗体（类）使用基窗体（类）的外观和实现代码的能力。</li>\n</ul>\n<p>在考虑使用继承时，有一点需要注意，那就是两个类之间的关系应该是<strong>属于</strong>关系。例如，<code>Employee</code>是一个人，<code>Manager</code>也是一个人，因此这两个类都可以继承<code>Person</code>类。但是<code>Leg</code> 类却不能继承<code>Person</code>类，因为腿并不是一个人。</p>\n<p>抽象类仅定义将由子类创建的一般属性和方法，创建抽象类时，请使用关键字 <code>interface</code> 而不是<code>class</code>。</p>\n<p>OO开发范式大致为：划分对象-&gt;抽象类-&gt;将类组织成为层次化结构(继承和合成) -&gt;用类与实例进行设计和实现几个阶段。</p>\n<p><strong>多态</strong></p>\n<p>多态性（polymorphisn）是允许你将父对象设置成为和一个或更多的他的子对象相等的技术，赋值之后，父对象就可以根据当前赋值给它的子对象的特性以不同的方式运作。简单的说，就是一句话：允许将子类类型的指针赋值给父类类型的指针。</p>\n<p>实现多态，有二种方式: <strong>覆盖</strong>、<strong>重载</strong>。</p>\n<ul>\n<li><strong>覆盖</strong>，是指子类重新定义父类的虚函数的做法。</li>\n<li><strong>重载</strong>，是指允许存在多个同名函数，而这些函数的参数表不同（或许参数个数不同，或许参数类型不同，或许两者都不同）。</li>\n</ul>\n<p>其实，重载的概念并不属于“面向对象编程”，重载的实现是：编译器根据函数不同的参数表，对同名函数的名称做修饰，然后这些同名函数就成了不同的函数（至少对于编译器来说是这样的）。如，有两个同名函数：<code>function func(p:integer):integer;</code>和<code>function func(p:string):integer;</code>。那么编译器做过修饰后的函数名称可能是这样的：<code>int_func</code>、<code>str_func</code>。对于这两个函数的调用，在编译器间就已经确定了，是静态的（记住：是静态）。也就是说，它们的地址在编译期就绑定了（早绑定），因此，重载和多态无关！真正和多态相关的是“覆盖”。当子类重新定义了父类的虚函数后，父类指针根据赋给它的不同的子类指针，动态（记住：是动态！）的调用属于子类的该函数，这样的函数调用在编译期间是无法确定的（调用的子类的虚函数的地址无法给出）。因此，这样的函数地址是在运行期绑定的（晚邦定）。结论就是：重载只是一种语言特性，与多态无关，与面向对象也无关！引用一句Bruce Eckel的话：“不要犯傻，如果它不是晚邦定，它就不是多态。”</p>\n<p>那么，多态的作用是什么呢？</p>\n<p>我们知道，封装可以隐藏实现细节，使得代码模块化；继承可以扩展已存在的代码模块（类）；它们的目的都是为了——代码重用。而多态则是为了实现另一个目的——接口重用！多态的作用，就是为了类在继承和派生的时候，保证使用“家谱”中任一类的实例的某一属性时的正确调用。</p>\n<h3 id=\"平台无关性\"><a href=\"#平台无关性\" class=\"headerlink\" title=\"平台无关性\"></a>平台无关性</h3><p>Java是平台无关的语言是指用Java写的应用程序不用修改就可在不同的软硬件平台上运行。平台无关有两种：源代码级和目标代码级。C和C++具有一定程度的源代码级平台无关，表明用C或C++写的应用程序不用修改只需重新编译就可以在不同平台上运行。</p>\n<p>Java主要靠Java虚拟机（JVM）在目标码级实现平台无关性。JVM是一种抽象机器，它附着在具体操作系统之上，本身具有一套虚机器指令，并有自己的栈、寄存器组等。但JVM通常是在软件上而不是在硬件上实现。（目前，SUN系统公司已经设计实现了Java芯片，主要使用在网络计算机NC上。另外，Java芯片的出现也会使Java更容易嵌入到家用电器中。）JVM是Java平台无关的基础，在JVM上，有一个Java解释器用来解释Java编译器编译后的程序。Java编程人员在编写完软件后，通过Java编译器将Java源程序编译为JVM的字节代码。任何一台机器只要配备了Java解释器，就可以运行这个程序，而不管这种字节码是在何种平台上生成的（过程如图1所示）。另外，Java采用的是基于IEEE标准的数据类型。通过JVM保证数据类型的一致性，也确保了Java的平台无关性。</p>\n<p>Java的平台无关性具有深远意义。首先，它使得编程人员所梦寐以求的事情（开发一次软件在任意平台上运行）变成事实，这将大大加快和促进软件产品的开发。其次Java的平台无关性正好迎合了 “网络计算机 “思想。如果大量常用的应用软件（如字处理软件等）都用Java重新编写，并且放在某个Internet服务器上，那么具有NC的用户将不需要占用大量空间安装软件，他们只需要一个Java解释器，每当需要使用某种应用软件时，下载该软件的字节代码即可，运行结果也可以发回服务器。目前，已有数家公司开始使用这种新型的计算模式构筑自己的企业信息系统。</p>\n<h4 id=\"JVM-还支持哪些语言\"><a href=\"#JVM-还支持哪些语言\" class=\"headerlink\" title=\"JVM 还支持哪些语言\"></a>JVM 还支持哪些语言</h4><p><strong>Kotlin</strong></p>\n<p><img src=\"https://ss.csdn.net/p?http://codebay.cn/wp-content/uploads/2018/05/image.php_-1-660x344.gif\" srcset=\"/img/loading.gif\" alt></p>\n<p>官方站点：<a href=\"https://kotlinlang.org/\" target=\"_blank\" rel=\"noopener\">https://kotlinlang.org/</a></p>\n<p>由JetBrains于2010年创建，并于2012年开源， Kotlin比Java更加简洁和安全。 您完全可以将Kotlin视为是一种“更加简单但高效的Java”。Kotlin的编译速度通常比Java代码快，而且在其创建之初，就非常明确的支持了函数式编程，这一点，Java是到Java 8才开始支持的。</p>\n<p>特别的，因为有了Google的加持，越来越多的Android开发人员，开始选择Kotlin来开发应用程序，与此同时，独立的超越JVM的行动也已经在展开，通过一项名为LLVM的项目，Kotlin正在努力实现代码编译的本地化，而不在基于JVM 。</p>\n<p>但无论如何，至少现在，它还活在JVM中。</p>\n<p><strong>Scala</strong></p>\n<p><img src=\"https://ss.csdn.net/p?http://codebay.cn/wp-content/uploads/2018/05/image.php_-2-660x274.gif\" srcset=\"/img/loading.gif\" alt></p>\n<p>官方站点：<a href=\"http://www.scala-lang.org/\" target=\"_blank\" rel=\"noopener\">http://www.scala-lang.org/</a></p>\n<p>和Kotlin一样， Scala也是为了让Java开发人员提高工作效率而创建的。 作为一种完全的面向对象语言和一种完全的函数式编程语言，Scala巧妙的将这两种编程范式结合到了一起。</p>\n<p>特别是在函数式编程方面，Scala几乎支持函数式编程语言中所有已知的特性，比如，模式匹配（Pattern matching）、延迟初始化（Lazy initialization）、偏函数（Partial Function）、不变性（Immutability）等等等等，</p>\n<p>因此，虽然Scala的类Lisp的语法会让初学者倍感迷惑，但花时间在这上面，永远是值得的，很快，就会让你体会到那种只需要关注 What（做什么），而不用关注How（如何做）的酸爽。</p>\n<p>一个最新的关于Scala的消息是，它似乎也在和Kotlin一样，在加速准备逃离JVM的控制，这对于JVM，恐怕不是一个什么特别好的消息，虽然，其距离用于生产可能还为时尚早。</p>\n<p><strong>Clojure</strong></p>\n<p><img src=\"https://ss.csdn.net/p?http://codebay.cn/wp-content/uploads/2018/05/image.php_-3.gif\" srcset=\"/img/loading.gif\" alt></p>\n<p>官方站点：<a href=\"https://clojure.org/\" target=\"_blank\" rel=\"noopener\">https://clojure.org/</a></p>\n<p>Clojure是由开发人员Rich Hickey在JVM下，所创建的一种Lisp方言，借助于JVM的执行效率越来越高，Clojure也常被嵌入在Java中，用于编写其中需要高并发、高性能的部分 。</p>\n<p><strong>Groovy</strong></p>\n<p><img src=\"https://ss.csdn.net/p?http://codebay.cn/wp-content/uploads/2018/05/image.php_-4-660x291.gif\" srcset=\"/img/loading.gif\" alt></p>\n<p>官方站点：<a href=\"http://www.groovy-lang.org/\" target=\"_blank\" rel=\"noopener\">http://www.groovy-lang.org/</a></p>\n<p>Groovy是在Java现有基础上，吸收Python和Ruby等动态语言的特性，而创建的一种新型语言，也是Jenkins持续集成服务器，所直接支持的语言之一，并且最关键的一点，通过基于Groovy的Web开发框架Grails，可以快速的完成相关Web项目的构建 。</p>\n<p>在未来，Groovy则拟包含Java和JVM的一些更新的特性，比如如Java 8的lambda语法等。</p>\n<p><strong>Jython</strong></p>\n<p><img src=\"https://ss.csdn.net/p?http://codebay.cn/wp-content/uploads/2018/05/image.php_-5.gif\" srcset=\"/img/loading.gif\" alt></p>\n<p>官方站点：<a href=\"http://www.jython.org/\" target=\"_blank\" rel=\"noopener\">http://www.jython.org/</a></p>\n<p>Jython是JVM的Python实现，与Python的2.x分支兼容，可以动态编译为Java字节码，并且可以与其他JVM语言（特别是Java）自由交互操作。</p>\n<p> <strong>JRuby</strong></p>\n<p><img src=\"https://ss.csdn.net/p?http://codebay.cn/wp-content/uploads/2018/05/image.php_-6-660x206.gif\" srcset=\"/img/loading.gif\" alt></p>\n<p>官方站点：<a href=\"http://jruby.org\" target=\"_blank\" rel=\"noopener\">http://jruby.org</a></p>\n<p>JRuby几乎就是Jython的翻版，所不同的是，JRuby所对标的语言是Ruby，当前所支持的语法规范则和Ruby 2.3兼容。</p>\n<p><strong>Ceylon</strong></p>\n<p><img src=\"https://ss.csdn.net/p?http://codebay.cn/wp-content/uploads/2018/05/image.php_-7.gif\" srcset=\"/img/loading.gif\" alt></p>\n<p>官方站点：<a href=\"https://www.ceylon-lang.org\" target=\"_blank\" rel=\"noopener\">https://www.ceylon-lang.org</a></p>\n<p>这个以大象为Logo的语言，其创建初衷可不是像大象一样笨拙，恰恰相反，语言的创始人 Gavin King，是出于对Java所存在问题的深刻认识，如泛型等特性的复杂性、粗劣的注解语法、不完善的块结构、对 XML 的依赖性等等，才萌生了创建一种新的静态类型语言语言，即Ceylon来一劳永逸的解决这些问题的想法。</p>\n<p>Ceylon保留了一些好的 Java 语言特性，改进了语言的可读性和内置的模块性，还吸收了高阶函数等函数语言特性，此外，Ceylon 还融合了 C 和 Smalltalk 的一些特性。与 Java 语言一样，这种新语言也以业务计算为重点，但是它在其他领域也很灵活、很有用。并且，通过这些年的努力，Ceylon已经跨出了其自身跨平台的第一步，其代码已经可以在JVM，Dart VM或Node.js上进行编译或运行。</p>\n<p><strong>Eta</strong></p>\n<p><img src=\"https://ss.csdn.net/p?http://codebay.cn/wp-content/uploads/2018/05/image.php_-8.gif\" srcset=\"/img/loading.gif\" alt></p>\n<p>官方站点：<a href=\"https://eta-lang.org/\" target=\"_blank\" rel=\"noopener\">https://eta-lang.org/</a></p>\n<p>我们的名单中怎么能少了时下最能装酷，也是被Node.js的创建者称为觉得暂无能力驾驭的语言Haskell的JVM实现？</p>\n<p>它来了，就是Eta，它的优势，不仅仅在于它可以在JVM下执行，更在于它可以使用Haskell的软件包仓库中的软件包，最大程度的兼容了整个Haskell生态系统。</p>\n<p><strong>Haxe</strong></p>\n<p><img src=\"https://ss.csdn.net/p?http://codebay.cn/wp-content/uploads/2018/05/image.php_-9.gif\" srcset=\"/img/loading.gif\" alt></p>\n<p>官方站点：<a href=\"http://haxe.org\" target=\"_blank\" rel=\"noopener\">http://haxe.org</a></p>\n<p>Haxe的口号是：One Language，Everywhere！是不是有点熟悉？是的，在非常久远的过去，这其实正是Java的初心。</p>\n<p>但是，这二者又是如此的迥异。Java的策略是，我做一个平台JVM，给出一种规范，你们来生成我需要的代码；Haxe的策略则正好相反，既然芸芸众生，语言纷杂，每个人都各有偏好，那好，来吧，我可以把我的代码，生成任何一种你们想要的语言下的代码！</p>\n<p>多么疯狂的想法！就为这点疯狂，就值得我们每个开发人员去膜拜一番了，毕竟，在Haxe看来，JVM，不过是其可以编译的一个“小”对象而已。</p>\n<h3 id=\"值传递、引用传递\"><a href=\"#值传递、引用传递\" class=\"headerlink\" title=\"值传递、引用传递\"></a>值传递、引用传递</h3><p><strong>值传递</strong>：(形式参数类型是基本数据类型)：方法调用时，实际参数把它的值传递给对应的形式参数，形式参数只是用实际参数的值初始化自己的存储单元内容，是两个不同的存储单元，所以方法执行中形式参数值的改变不影响实际参数的值。</p>\n<p><strong>引用传递</strong>：(形式参数类型是引用数据类型参数)：也称为传地址。方法调用时，实际参数是对象(或数组)，这时实际参数与形式参数指向同一个地址，在方法执行中，对形式参数的操作实际上就是对实际参数的操作，这个结果在方法结束后被保留了下来，所以方法执行中形式参数的改变将会影响实际参数。</p>\n<p>说明：</p>\n<p>（1）：“在Java里面参数传递都是按值传递”这句话的意思是：按值传递是传递的值的拷贝，按引用传递其实传递的是引用的地址值，所以统称按值传递。</p>\n<p>（2）：在Java里面只有基本类型和按照下面这种定义方式的String是按值传递，其它的都是按引用传递。就是直接使用双引号定义字符串方式：String str = “Java私塾”;</p>\n<p>为什么说 Java 中只有值传递: <a href=\"https://blog.csdn.net/bjweimengshu/article/details/79799485\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/bjweimengshu/article/details/79799485</a></p>\n<hr>\n<blockquote>\n<p>附参考</p>\n<ul>\n<li><a href=\"https://www.cnblogs.com/autumn001/p/9036148.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/autumn001/p/9036148.html</a></li>\n<li><a href=\"https://blog.csdn.net/B9Q8e64lO6mm/article/details/80235376\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/B9Q8e64lO6mm/article/details/80235376</a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h2><h3 id=\"什么是面向对象\"><a href=\"#什么是面向对象\" class=\"headerlink\" title=\"什么是面向对象\"></a>什么是面向对象</h3><p>面向对象(Object Oriented,OO)是软件开发方法。面向对象的概念和应用已超越了程序设计和软件开发，扩展到如数据库系统、交互式界面、应用结构、应用平台、分布式系统、网络管理结构、CAD技术、人工智能等领域。面向对象是一种对现实世界理解和抽象的方法，是计算机编程技术发展到一定阶段后的产物。</p>\n<p>面向过程(Procedure Oriented)是一种以过程为中心的编程思想。这些都是以什么正在发生为主要目标进行编程，不同于面向对象的是谁在受影响。与面向对象明显的不同就是封装、继承、类。</p>\n<h3 id=\"面向对象的三大基本特征\"><a href=\"#面向对象的三大基本特征\" class=\"headerlink\" title=\"面向对象的三大基本特征\"></a>面向对象的三大基本特征</h3><p>面向对象的三个基本特征是：封装、继承、多态。</p>\n<p><img src=\"http://www.cnitblog.com/images/cnitblog_com/lily/1972/o_OOBase.gif\" srcset=\"/img/loading.gif\" alt></p>\n<p>面向对象的三大基本特征和五大基本原则</p>\n<p><strong>封装</strong></p>\n<p>封装最好理解了。封装是面向对象的特征之一，是对象和类概念的主要特性。</p>\n<p>封装，也就是把客观事物封装成抽象的类，并且类可以把自己的数据和方法只让可信的类或者对象操作，对不可信的进行信息隐藏。</p>\n<p><strong>继承</strong></p>\n<p>面向对象编程(OOP)语言的一个主要功能就是“继承”。继承是指这样一种能力：它可以使用现有类的所有功能，并在无需重新编写原来的类的情况下对这些功能进行扩展。</p>\n<p>通过继承创建的新类称为<strong>子类</strong>或<strong>派生类</strong>。被继承的类称为<strong>基类</strong>、<strong>父类</strong>或<strong>超类</strong>。</p>\n<p>继承的过程，就是从一般到特殊的过程。</p>\n<p>要实现继承，可以通过<code>继承（Inheritance）</code>和<code>组合（Composition）</code>来实现。<br>在某些 OOP 语言中，一个子类可以继承多个基类。但是一般情况下，一个子类只能有一个基类，要实现多重继承，可以通过多级继承来实现。</p>\n<p>继承概念的实现方式有三类：实现继承、接口继承和可视继承。</p>\n<ul>\n<li>实现继承是指使用基类的属性和方法而无需额外编码的能力；</li>\n<li>接口继承是指仅使用属性和方法的名称、但是子类必须提供实现的能力；</li>\n<li>可视继承是指子窗体（类）使用基窗体（类）的外观和实现代码的能力。</li>\n</ul>\n<p>在考虑使用继承时，有一点需要注意，那就是两个类之间的关系应该是<strong>属于</strong>关系。例如，<code>Employee</code>是一个人，<code>Manager</code>也是一个人，因此这两个类都可以继承<code>Person</code>类。但是<code>Leg</code> 类却不能继承<code>Person</code>类，因为腿并不是一个人。</p>\n<p>抽象类仅定义将由子类创建的一般属性和方法，创建抽象类时，请使用关键字 <code>interface</code> 而不是<code>class</code>。</p>\n<p>OO开发范式大致为：划分对象-&gt;抽象类-&gt;将类组织成为层次化结构(继承和合成) -&gt;用类与实例进行设计和实现几个阶段。</p>\n<p><strong>多态</strong></p>\n<p>多态性（polymorphisn）是允许你将父对象设置成为和一个或更多的他的子对象相等的技术，赋值之后，父对象就可以根据当前赋值给它的子对象的特性以不同的方式运作。简单的说，就是一句话：允许将子类类型的指针赋值给父类类型的指针。</p>\n<p>实现多态，有二种方式: <strong>覆盖</strong>、<strong>重载</strong>。</p>\n<ul>\n<li><strong>覆盖</strong>，是指子类重新定义父类的虚函数的做法。</li>\n<li><strong>重载</strong>，是指允许存在多个同名函数，而这些函数的参数表不同（或许参数个数不同，或许参数类型不同，或许两者都不同）。</li>\n</ul>\n<p>其实，重载的概念并不属于“面向对象编程”，重载的实现是：编译器根据函数不同的参数表，对同名函数的名称做修饰，然后这些同名函数就成了不同的函数（至少对于编译器来说是这样的）。如，有两个同名函数：<code>function func(p:integer):integer;</code>和<code>function func(p:string):integer;</code>。那么编译器做过修饰后的函数名称可能是这样的：<code>int_func</code>、<code>str_func</code>。对于这两个函数的调用，在编译器间就已经确定了，是静态的（记住：是静态）。也就是说，它们的地址在编译期就绑定了（早绑定），因此，重载和多态无关！真正和多态相关的是“覆盖”。当子类重新定义了父类的虚函数后，父类指针根据赋给它的不同的子类指针，动态（记住：是动态！）的调用属于子类的该函数，这样的函数调用在编译期间是无法确定的（调用的子类的虚函数的地址无法给出）。因此，这样的函数地址是在运行期绑定的（晚邦定）。结论就是：重载只是一种语言特性，与多态无关，与面向对象也无关！引用一句Bruce Eckel的话：“不要犯傻，如果它不是晚邦定，它就不是多态。”</p>\n<p>那么，多态的作用是什么呢？</p>\n<p>我们知道，封装可以隐藏实现细节，使得代码模块化；继承可以扩展已存在的代码模块（类）；它们的目的都是为了——代码重用。而多态则是为了实现另一个目的——接口重用！多态的作用，就是为了类在继承和派生的时候，保证使用“家谱”中任一类的实例的某一属性时的正确调用。</p>\n<h3 id=\"平台无关性\"><a href=\"#平台无关性\" class=\"headerlink\" title=\"平台无关性\"></a>平台无关性</h3><p>Java是平台无关的语言是指用Java写的应用程序不用修改就可在不同的软硬件平台上运行。平台无关有两种：源代码级和目标代码级。C和C++具有一定程度的源代码级平台无关，表明用C或C++写的应用程序不用修改只需重新编译就可以在不同平台上运行。</p>\n<p>Java主要靠Java虚拟机（JVM）在目标码级实现平台无关性。JVM是一种抽象机器，它附着在具体操作系统之上，本身具有一套虚机器指令，并有自己的栈、寄存器组等。但JVM通常是在软件上而不是在硬件上实现。（目前，SUN系统公司已经设计实现了Java芯片，主要使用在网络计算机NC上。另外，Java芯片的出现也会使Java更容易嵌入到家用电器中。）JVM是Java平台无关的基础，在JVM上，有一个Java解释器用来解释Java编译器编译后的程序。Java编程人员在编写完软件后，通过Java编译器将Java源程序编译为JVM的字节代码。任何一台机器只要配备了Java解释器，就可以运行这个程序，而不管这种字节码是在何种平台上生成的（过程如图1所示）。另外，Java采用的是基于IEEE标准的数据类型。通过JVM保证数据类型的一致性，也确保了Java的平台无关性。</p>\n<p>Java的平台无关性具有深远意义。首先，它使得编程人员所梦寐以求的事情（开发一次软件在任意平台上运行）变成事实，这将大大加快和促进软件产品的开发。其次Java的平台无关性正好迎合了 “网络计算机 “思想。如果大量常用的应用软件（如字处理软件等）都用Java重新编写，并且放在某个Internet服务器上，那么具有NC的用户将不需要占用大量空间安装软件，他们只需要一个Java解释器，每当需要使用某种应用软件时，下载该软件的字节代码即可，运行结果也可以发回服务器。目前，已有数家公司开始使用这种新型的计算模式构筑自己的企业信息系统。</p>\n<h4 id=\"JVM-还支持哪些语言\"><a href=\"#JVM-还支持哪些语言\" class=\"headerlink\" title=\"JVM 还支持哪些语言\"></a>JVM 还支持哪些语言</h4><p><strong>Kotlin</strong></p>\n<p><img src=\"https://ss.csdn.net/p?http://codebay.cn/wp-content/uploads/2018/05/image.php_-1-660x344.gif\" srcset=\"/img/loading.gif\" alt></p>\n<p>官方站点：<a href=\"https://kotlinlang.org/\" target=\"_blank\" rel=\"noopener\">https://kotlinlang.org/</a></p>\n<p>由JetBrains于2010年创建，并于2012年开源， Kotlin比Java更加简洁和安全。 您完全可以将Kotlin视为是一种“更加简单但高效的Java”。Kotlin的编译速度通常比Java代码快，而且在其创建之初，就非常明确的支持了函数式编程，这一点，Java是到Java 8才开始支持的。</p>\n<p>特别的，因为有了Google的加持，越来越多的Android开发人员，开始选择Kotlin来开发应用程序，与此同时，独立的超越JVM的行动也已经在展开，通过一项名为LLVM的项目，Kotlin正在努力实现代码编译的本地化，而不在基于JVM 。</p>\n<p>但无论如何，至少现在，它还活在JVM中。</p>\n<p><strong>Scala</strong></p>\n<p><img src=\"https://ss.csdn.net/p?http://codebay.cn/wp-content/uploads/2018/05/image.php_-2-660x274.gif\" srcset=\"/img/loading.gif\" alt></p>\n<p>官方站点：<a href=\"http://www.scala-lang.org/\" target=\"_blank\" rel=\"noopener\">http://www.scala-lang.org/</a></p>\n<p>和Kotlin一样， Scala也是为了让Java开发人员提高工作效率而创建的。 作为一种完全的面向对象语言和一种完全的函数式编程语言，Scala巧妙的将这两种编程范式结合到了一起。</p>\n<p>特别是在函数式编程方面，Scala几乎支持函数式编程语言中所有已知的特性，比如，模式匹配（Pattern matching）、延迟初始化（Lazy initialization）、偏函数（Partial Function）、不变性（Immutability）等等等等，</p>\n<p>因此，虽然Scala的类Lisp的语法会让初学者倍感迷惑，但花时间在这上面，永远是值得的，很快，就会让你体会到那种只需要关注 What（做什么），而不用关注How（如何做）的酸爽。</p>\n<p>一个最新的关于Scala的消息是，它似乎也在和Kotlin一样，在加速准备逃离JVM的控制，这对于JVM，恐怕不是一个什么特别好的消息，虽然，其距离用于生产可能还为时尚早。</p>\n<p><strong>Clojure</strong></p>\n<p><img src=\"https://ss.csdn.net/p?http://codebay.cn/wp-content/uploads/2018/05/image.php_-3.gif\" srcset=\"/img/loading.gif\" alt></p>\n<p>官方站点：<a href=\"https://clojure.org/\" target=\"_blank\" rel=\"noopener\">https://clojure.org/</a></p>\n<p>Clojure是由开发人员Rich Hickey在JVM下，所创建的一种Lisp方言，借助于JVM的执行效率越来越高，Clojure也常被嵌入在Java中，用于编写其中需要高并发、高性能的部分 。</p>\n<p><strong>Groovy</strong></p>\n<p><img src=\"https://ss.csdn.net/p?http://codebay.cn/wp-content/uploads/2018/05/image.php_-4-660x291.gif\" srcset=\"/img/loading.gif\" alt></p>\n<p>官方站点：<a href=\"http://www.groovy-lang.org/\" target=\"_blank\" rel=\"noopener\">http://www.groovy-lang.org/</a></p>\n<p>Groovy是在Java现有基础上，吸收Python和Ruby等动态语言的特性，而创建的一种新型语言，也是Jenkins持续集成服务器，所直接支持的语言之一，并且最关键的一点，通过基于Groovy的Web开发框架Grails，可以快速的完成相关Web项目的构建 。</p>\n<p>在未来，Groovy则拟包含Java和JVM的一些更新的特性，比如如Java 8的lambda语法等。</p>\n<p><strong>Jython</strong></p>\n<p><img src=\"https://ss.csdn.net/p?http://codebay.cn/wp-content/uploads/2018/05/image.php_-5.gif\" srcset=\"/img/loading.gif\" alt></p>\n<p>官方站点：<a href=\"http://www.jython.org/\" target=\"_blank\" rel=\"noopener\">http://www.jython.org/</a></p>\n<p>Jython是JVM的Python实现，与Python的2.x分支兼容，可以动态编译为Java字节码，并且可以与其他JVM语言（特别是Java）自由交互操作。</p>\n<p> <strong>JRuby</strong></p>\n<p><img src=\"https://ss.csdn.net/p?http://codebay.cn/wp-content/uploads/2018/05/image.php_-6-660x206.gif\" srcset=\"/img/loading.gif\" alt></p>\n<p>官方站点：<a href=\"http://jruby.org\" target=\"_blank\" rel=\"noopener\">http://jruby.org</a></p>\n<p>JRuby几乎就是Jython的翻版，所不同的是，JRuby所对标的语言是Ruby，当前所支持的语法规范则和Ruby 2.3兼容。</p>\n<p><strong>Ceylon</strong></p>\n<p><img src=\"https://ss.csdn.net/p?http://codebay.cn/wp-content/uploads/2018/05/image.php_-7.gif\" srcset=\"/img/loading.gif\" alt></p>\n<p>官方站点：<a href=\"https://www.ceylon-lang.org\" target=\"_blank\" rel=\"noopener\">https://www.ceylon-lang.org</a></p>\n<p>这个以大象为Logo的语言，其创建初衷可不是像大象一样笨拙，恰恰相反，语言的创始人 Gavin King，是出于对Java所存在问题的深刻认识，如泛型等特性的复杂性、粗劣的注解语法、不完善的块结构、对 XML 的依赖性等等，才萌生了创建一种新的静态类型语言语言，即Ceylon来一劳永逸的解决这些问题的想法。</p>\n<p>Ceylon保留了一些好的 Java 语言特性，改进了语言的可读性和内置的模块性，还吸收了高阶函数等函数语言特性，此外，Ceylon 还融合了 C 和 Smalltalk 的一些特性。与 Java 语言一样，这种新语言也以业务计算为重点，但是它在其他领域也很灵活、很有用。并且，通过这些年的努力，Ceylon已经跨出了其自身跨平台的第一步，其代码已经可以在JVM，Dart VM或Node.js上进行编译或运行。</p>\n<p><strong>Eta</strong></p>\n<p><img src=\"https://ss.csdn.net/p?http://codebay.cn/wp-content/uploads/2018/05/image.php_-8.gif\" srcset=\"/img/loading.gif\" alt></p>\n<p>官方站点：<a href=\"https://eta-lang.org/\" target=\"_blank\" rel=\"noopener\">https://eta-lang.org/</a></p>\n<p>我们的名单中怎么能少了时下最能装酷，也是被Node.js的创建者称为觉得暂无能力驾驭的语言Haskell的JVM实现？</p>\n<p>它来了，就是Eta，它的优势，不仅仅在于它可以在JVM下执行，更在于它可以使用Haskell的软件包仓库中的软件包，最大程度的兼容了整个Haskell生态系统。</p>\n<p><strong>Haxe</strong></p>\n<p><img src=\"https://ss.csdn.net/p?http://codebay.cn/wp-content/uploads/2018/05/image.php_-9.gif\" srcset=\"/img/loading.gif\" alt></p>\n<p>官方站点：<a href=\"http://haxe.org\" target=\"_blank\" rel=\"noopener\">http://haxe.org</a></p>\n<p>Haxe的口号是：One Language，Everywhere！是不是有点熟悉？是的，在非常久远的过去，这其实正是Java的初心。</p>\n<p>但是，这二者又是如此的迥异。Java的策略是，我做一个平台JVM，给出一种规范，你们来生成我需要的代码；Haxe的策略则正好相反，既然芸芸众生，语言纷杂，每个人都各有偏好，那好，来吧，我可以把我的代码，生成任何一种你们想要的语言下的代码！</p>\n<p>多么疯狂的想法！就为这点疯狂，就值得我们每个开发人员去膜拜一番了，毕竟，在Haxe看来，JVM，不过是其可以编译的一个“小”对象而已。</p>\n<h3 id=\"值传递、引用传递\"><a href=\"#值传递、引用传递\" class=\"headerlink\" title=\"值传递、引用传递\"></a>值传递、引用传递</h3><p><strong>值传递</strong>：(形式参数类型是基本数据类型)：方法调用时，实际参数把它的值传递给对应的形式参数，形式参数只是用实际参数的值初始化自己的存储单元内容，是两个不同的存储单元，所以方法执行中形式参数值的改变不影响实际参数的值。</p>\n<p><strong>引用传递</strong>：(形式参数类型是引用数据类型参数)：也称为传地址。方法调用时，实际参数是对象(或数组)，这时实际参数与形式参数指向同一个地址，在方法执行中，对形式参数的操作实际上就是对实际参数的操作，这个结果在方法结束后被保留了下来，所以方法执行中形式参数的改变将会影响实际参数。</p>\n<p>说明：</p>\n<p>（1）：“在Java里面参数传递都是按值传递”这句话的意思是：按值传递是传递的值的拷贝，按引用传递其实传递的是引用的地址值，所以统称按值传递。</p>\n<p>（2）：在Java里面只有基本类型和按照下面这种定义方式的String是按值传递，其它的都是按引用传递。就是直接使用双引号定义字符串方式：String str = “Java私塾”;</p>\n<p>为什么说 Java 中只有值传递: <a href=\"https://blog.csdn.net/bjweimengshu/article/details/79799485\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/bjweimengshu/article/details/79799485</a></p>\n<hr>\n<blockquote>\n<p>附参考</p>\n<ul>\n<li><a href=\"https://www.cnblogs.com/autumn001/p/9036148.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/autumn001/p/9036148.html</a></li>\n<li><a href=\"https://blog.csdn.net/B9Q8e64lO6mm/article/details/80235376\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/B9Q8e64lO6mm/article/details/80235376</a></li>\n</ul>\n</blockquote>\n"},{"title":"程序员如何精确评估开发时间？","date":"2019-04-16T12:11:01.000Z","_content":"\n\n一个程序员能否精确评估开发时间，是一件非常重要的事情。如果你掌握了这项技能，你在别人的眼里就会是这样：\n\n- 靠谱\n- 经验十足\n- 对需求很了解\n- 延期风险小\n- 合格的软件工程师\n- 正规军，不是野路子\n\n### 评估开发时间的重要性\n\n首先，在一个项目中，所有的环节都是承上启下的，上一个环节结束的时间节点正是下一个环节开始的节点。那么在一个项目或者一次迭代正式启动前，所有的环节都应该有个时间评估。以一次APP需求迭代为例，项目计划像这样：\n\n- UI设计图 11.01 - 11.03（3工作日）\n- API接口讨论与设计 11.04（1工作日）\n- 移动端开发 11.05 - 11.15（8工作日）\n- 后端具备联调条件：11.11\n- 产品体验 11.16 - 11.17（2工作日）\n- 测试11.18 - 11.25（5工作日）\n- 发布11.26\n\n根据项目计划，各个部门自己要分配人员和时间。如果其中一个环节延期了，那么后面的各个环节都要顺延，就会造成损失。\n\n其次，对于程序员来说，一个清晰的开发计划有助于自己有条不紊地开展工作，也能避免疏漏某个功能点。评估时间的过程，也是对需求详细拆分的过程，了解要做什么，做成什么样子。在评估的过程中，根据专业知识和经验，充分预估会遇到的风险，怎样的解决方案，预留多少时间？都想好了的话，项目也就没啥风险了。\n\n然而，开发时间评估，最大的好处是程序员受益。认真地评估开发时间，会让你在开始动手写代码之前搞清楚要怎么写，每个模块的设计心理得有个谱。从宏观上拆分模块，然后详细地分解任务，具体到一个很小的功能点。这样你就能清晰地设计代码，而不是堆代码。也避免了很多时候写着写着发现不对，然后拉到重来的境地。就是要让你动手写代码之前胸有成竹！\n\n### 初学者为什么评估不准？\n\n如果你的项目经常delay，那么八成是时间评估不准。\n\n刚毕业的学生被问到什么时候可以完成的时候，脑门一拍：“三天”，实际上两个星期过去了还没完成。\n\n这里有一张表，看看你是不是这样子，对号入座：\n\n![](https://wx1.sinaimg.cn/mw690/806e3151ly1g24quvbhswj20ia0ipk5w.jpg)\n\n越是老程序员越是“胆小”，评估时间越准。\n\n### 如何精确评估开发时间\n\n最近几年，我都是以小时为单位进行时间评估的，有没有觉得有点恐怖？长期以来这样的习惯让我收获颇多。这得感谢我之前的领导，三年前强迫我们这样做，刚开始很抵触，后来才体会到其中的甜头。\n\n**1、任务拆分**\n\n拿到新需求后，对其进行充分了解，不清楚的就去问清楚，然后对其进行模块化。之后，再进行技术上的拆分。由大到小，再到细节。细到什么程度呢？细到一个按钮的实现，细到一个点击动作是要用按钮还是要用手势的定夺，最好能细到代码块的划分。\n\n这个能力是需要锻炼的，做好拆分，然后在实际开发过程中根据实际时间花销，回顾时间评估的准确性，以便让下次更准确。慢慢地，就会越来越精确，评估时间有依有据，不再是拍脑门给出的时间。下面看一个例子：\n\n![](https://wx2.sinaimg.cn/mw690/806e3151ly1g24quz2fa6j20je040gnc.jpg)\n\n**2、合理认知时间**\n\n一天工作八小时，但你不可能专注地连续八小时在编写代码。一天的工作中，有开会、讨论、阶段性休息（刷新闻、喝咖啡、发呆）的时间开销，真正有效时间其实不足六小时，杂事多的话可能是四五个小时。\n\n**3、预留buffer(缓冲区)**\n\n首先明确，预留buffer不是让你随便增加预估量，而是要明确知道buffer是给那些事情用的。要考虑到一下几点：\n\n首先是沟通时间，你开发的时候不可能是闷着头一直写代码。要和UI设计师沟通，要和产品经理沟通，有可能还需要和组内的人沟通技术上的事情，以及和别的技术小组对接的问题。\n\n等待时间。如果牵扯多部门协作，会有很多等待时间，因为你不能保证别的部门就能准确按照计划时间完成的。虽然等待过程中你可以安排其他任务，但你不能保证其他任务就能刚好填充等待时间，更何况任务切换也需要时间成本。\n\n突发状况。例如，bug修改、需求微调、对接人请假。\n\n不确定时间。和其他部门有交集的工作，最好多预留buffer。比如移动端和后台联调。后端信誓旦旦给你说11.11号可以进行联调，这次联调总共5个接口。如果你简单地认为他们给你提供的接口没问题，并且能顺利请求回来数据，预计一天联调时间足以，那你就等着delay吧。11.10号你已经准备好了所有联调准备，如果数据能正确返回，你的解析功能都是OK的，因为你之前用假数据已经处理的好好的。到了11号，你请求第一个接口就报错了，然后在即时通讯软件上问他们怎么回事，半个小时后给你回了“不好意思，地址变了，你用这个试试”。又错了……。终于回来数据了，然后发现缺少两个字段……。就这样，第一个接口调通已经快下班了。（当然很多后端技术人员也是很靠谱的，举这个例子只是为了让多考虑）\n\n以上是可能会出现的状况，实际中有可能只是出现了一部分，这要根据实际情况而定。并不是让你能多预留buffer就多留，毕竟每个项目的时间都是很紧张的。一般buffer留在15%-25%。\n\n**4、回头看**\n\n在实际开发过程中，测量实际花费时间，并与估算相比较。如果有些地方相差较大，就要看差在哪里，然后在下次预估中避免相同的差错。\n\n### 总结\n\n编程经验不等同于估算经验。一个不被包含在估算流程中的开发者将不会擅长估算。同样，如果实际的时间花费不被测量和用于与估算比较，那么将没有反馈来学习。\n\n最后，每个程序员都应该具备估算的技能。为磨练这个技能，接手每个任务时，先决定你要做什么。然后在开始之前估算任务所需时间。最后测量实际花费时间，并与估算相比较。同样比较你实际完成的与计划完成的。这样你将会既提高你对一个任务包含细节的理解，同样也提高了你的估算技能。\n\n尽管进行了精确估算，也不能保证每个项目都会100%精确。偶尔会遇到一些突发情况和没预估到的风险是不可避免的。那么面对风险，有一些原则可以帮助你：\n\n- 报风险时间置前，如果开发开始或者任何过程有可能导致项目延期或者需求无法实现的时候就报警，不要等加班能实现或者存在侥幸心理；\n- 对于不确定的需求，一定要沟通到位；\n- 涉及到交互细节，必须提前沟通好，充分明确细节；\n- 技术可行性方案提前调查清楚。\n\n\n完结~~~~~~~\n\n\n\n> 来源：Eric_LG\n>\n> blog.csdn.net/gang544043963/article/details/83934015\n","source":"_posts/0017-Accurate assessment of working hours.md","raw":"---\ntitle: 程序员如何精确评估开发时间？\ndate: 2019-04-16 20:11:01\n---\n\n\n一个程序员能否精确评估开发时间，是一件非常重要的事情。如果你掌握了这项技能，你在别人的眼里就会是这样：\n\n- 靠谱\n- 经验十足\n- 对需求很了解\n- 延期风险小\n- 合格的软件工程师\n- 正规军，不是野路子\n\n### 评估开发时间的重要性\n\n首先，在一个项目中，所有的环节都是承上启下的，上一个环节结束的时间节点正是下一个环节开始的节点。那么在一个项目或者一次迭代正式启动前，所有的环节都应该有个时间评估。以一次APP需求迭代为例，项目计划像这样：\n\n- UI设计图 11.01 - 11.03（3工作日）\n- API接口讨论与设计 11.04（1工作日）\n- 移动端开发 11.05 - 11.15（8工作日）\n- 后端具备联调条件：11.11\n- 产品体验 11.16 - 11.17（2工作日）\n- 测试11.18 - 11.25（5工作日）\n- 发布11.26\n\n根据项目计划，各个部门自己要分配人员和时间。如果其中一个环节延期了，那么后面的各个环节都要顺延，就会造成损失。\n\n其次，对于程序员来说，一个清晰的开发计划有助于自己有条不紊地开展工作，也能避免疏漏某个功能点。评估时间的过程，也是对需求详细拆分的过程，了解要做什么，做成什么样子。在评估的过程中，根据专业知识和经验，充分预估会遇到的风险，怎样的解决方案，预留多少时间？都想好了的话，项目也就没啥风险了。\n\n然而，开发时间评估，最大的好处是程序员受益。认真地评估开发时间，会让你在开始动手写代码之前搞清楚要怎么写，每个模块的设计心理得有个谱。从宏观上拆分模块，然后详细地分解任务，具体到一个很小的功能点。这样你就能清晰地设计代码，而不是堆代码。也避免了很多时候写着写着发现不对，然后拉到重来的境地。就是要让你动手写代码之前胸有成竹！\n\n### 初学者为什么评估不准？\n\n如果你的项目经常delay，那么八成是时间评估不准。\n\n刚毕业的学生被问到什么时候可以完成的时候，脑门一拍：“三天”，实际上两个星期过去了还没完成。\n\n这里有一张表，看看你是不是这样子，对号入座：\n\n![](https://wx1.sinaimg.cn/mw690/806e3151ly1g24quvbhswj20ia0ipk5w.jpg)\n\n越是老程序员越是“胆小”，评估时间越准。\n\n### 如何精确评估开发时间\n\n最近几年，我都是以小时为单位进行时间评估的，有没有觉得有点恐怖？长期以来这样的习惯让我收获颇多。这得感谢我之前的领导，三年前强迫我们这样做，刚开始很抵触，后来才体会到其中的甜头。\n\n**1、任务拆分**\n\n拿到新需求后，对其进行充分了解，不清楚的就去问清楚，然后对其进行模块化。之后，再进行技术上的拆分。由大到小，再到细节。细到什么程度呢？细到一个按钮的实现，细到一个点击动作是要用按钮还是要用手势的定夺，最好能细到代码块的划分。\n\n这个能力是需要锻炼的，做好拆分，然后在实际开发过程中根据实际时间花销，回顾时间评估的准确性，以便让下次更准确。慢慢地，就会越来越精确，评估时间有依有据，不再是拍脑门给出的时间。下面看一个例子：\n\n![](https://wx2.sinaimg.cn/mw690/806e3151ly1g24quz2fa6j20je040gnc.jpg)\n\n**2、合理认知时间**\n\n一天工作八小时，但你不可能专注地连续八小时在编写代码。一天的工作中，有开会、讨论、阶段性休息（刷新闻、喝咖啡、发呆）的时间开销，真正有效时间其实不足六小时，杂事多的话可能是四五个小时。\n\n**3、预留buffer(缓冲区)**\n\n首先明确，预留buffer不是让你随便增加预估量，而是要明确知道buffer是给那些事情用的。要考虑到一下几点：\n\n首先是沟通时间，你开发的时候不可能是闷着头一直写代码。要和UI设计师沟通，要和产品经理沟通，有可能还需要和组内的人沟通技术上的事情，以及和别的技术小组对接的问题。\n\n等待时间。如果牵扯多部门协作，会有很多等待时间，因为你不能保证别的部门就能准确按照计划时间完成的。虽然等待过程中你可以安排其他任务，但你不能保证其他任务就能刚好填充等待时间，更何况任务切换也需要时间成本。\n\n突发状况。例如，bug修改、需求微调、对接人请假。\n\n不确定时间。和其他部门有交集的工作，最好多预留buffer。比如移动端和后台联调。后端信誓旦旦给你说11.11号可以进行联调，这次联调总共5个接口。如果你简单地认为他们给你提供的接口没问题，并且能顺利请求回来数据，预计一天联调时间足以，那你就等着delay吧。11.10号你已经准备好了所有联调准备，如果数据能正确返回，你的解析功能都是OK的，因为你之前用假数据已经处理的好好的。到了11号，你请求第一个接口就报错了，然后在即时通讯软件上问他们怎么回事，半个小时后给你回了“不好意思，地址变了，你用这个试试”。又错了……。终于回来数据了，然后发现缺少两个字段……。就这样，第一个接口调通已经快下班了。（当然很多后端技术人员也是很靠谱的，举这个例子只是为了让多考虑）\n\n以上是可能会出现的状况，实际中有可能只是出现了一部分，这要根据实际情况而定。并不是让你能多预留buffer就多留，毕竟每个项目的时间都是很紧张的。一般buffer留在15%-25%。\n\n**4、回头看**\n\n在实际开发过程中，测量实际花费时间，并与估算相比较。如果有些地方相差较大，就要看差在哪里，然后在下次预估中避免相同的差错。\n\n### 总结\n\n编程经验不等同于估算经验。一个不被包含在估算流程中的开发者将不会擅长估算。同样，如果实际的时间花费不被测量和用于与估算比较，那么将没有反馈来学习。\n\n最后，每个程序员都应该具备估算的技能。为磨练这个技能，接手每个任务时，先决定你要做什么。然后在开始之前估算任务所需时间。最后测量实际花费时间，并与估算相比较。同样比较你实际完成的与计划完成的。这样你将会既提高你对一个任务包含细节的理解，同样也提高了你的估算技能。\n\n尽管进行了精确估算，也不能保证每个项目都会100%精确。偶尔会遇到一些突发情况和没预估到的风险是不可避免的。那么面对风险，有一些原则可以帮助你：\n\n- 报风险时间置前，如果开发开始或者任何过程有可能导致项目延期或者需求无法实现的时候就报警，不要等加班能实现或者存在侥幸心理；\n- 对于不确定的需求，一定要沟通到位；\n- 涉及到交互细节，必须提前沟通好，充分明确细节；\n- 技术可行性方案提前调查清楚。\n\n\n完结~~~~~~~\n\n\n\n> 来源：Eric_LG\n>\n> blog.csdn.net/gang544043963/article/details/83934015\n","slug":"0017-Accurate assessment of working hours","published":1,"updated":"2020-07-17T02:32:01.164Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcpntugh001y04oiz4oo55gc","content":"<p>一个程序员能否精确评估开发时间，是一件非常重要的事情。如果你掌握了这项技能，你在别人的眼里就会是这样：</p>\n<ul>\n<li>靠谱</li>\n<li>经验十足</li>\n<li>对需求很了解</li>\n<li>延期风险小</li>\n<li>合格的软件工程师</li>\n<li>正规军，不是野路子</li>\n</ul>\n<h3 id=\"评估开发时间的重要性\"><a href=\"#评估开发时间的重要性\" class=\"headerlink\" title=\"评估开发时间的重要性\"></a>评估开发时间的重要性</h3><p>首先，在一个项目中，所有的环节都是承上启下的，上一个环节结束的时间节点正是下一个环节开始的节点。那么在一个项目或者一次迭代正式启动前，所有的环节都应该有个时间评估。以一次APP需求迭代为例，项目计划像这样：</p>\n<ul>\n<li>UI设计图 11.01 - 11.03（3工作日）</li>\n<li>API接口讨论与设计 11.04（1工作日）</li>\n<li>移动端开发 11.05 - 11.15（8工作日）</li>\n<li>后端具备联调条件：11.11</li>\n<li>产品体验 11.16 - 11.17（2工作日）</li>\n<li>测试11.18 - 11.25（5工作日）</li>\n<li>发布11.26</li>\n</ul>\n<p>根据项目计划，各个部门自己要分配人员和时间。如果其中一个环节延期了，那么后面的各个环节都要顺延，就会造成损失。</p>\n<p>其次，对于程序员来说，一个清晰的开发计划有助于自己有条不紊地开展工作，也能避免疏漏某个功能点。评估时间的过程，也是对需求详细拆分的过程，了解要做什么，做成什么样子。在评估的过程中，根据专业知识和经验，充分预估会遇到的风险，怎样的解决方案，预留多少时间？都想好了的话，项目也就没啥风险了。</p>\n<p>然而，开发时间评估，最大的好处是程序员受益。认真地评估开发时间，会让你在开始动手写代码之前搞清楚要怎么写，每个模块的设计心理得有个谱。从宏观上拆分模块，然后详细地分解任务，具体到一个很小的功能点。这样你就能清晰地设计代码，而不是堆代码。也避免了很多时候写着写着发现不对，然后拉到重来的境地。就是要让你动手写代码之前胸有成竹！</p>\n<h3 id=\"初学者为什么评估不准？\"><a href=\"#初学者为什么评估不准？\" class=\"headerlink\" title=\"初学者为什么评估不准？\"></a>初学者为什么评估不准？</h3><p>如果你的项目经常delay，那么八成是时间评估不准。</p>\n<p>刚毕业的学生被问到什么时候可以完成的时候，脑门一拍：“三天”，实际上两个星期过去了还没完成。</p>\n<p>这里有一张表，看看你是不是这样子，对号入座：</p>\n<p><img src=\"https://wx1.sinaimg.cn/mw690/806e3151ly1g24quvbhswj20ia0ipk5w.jpg\" srcset=\"/img/loading.gif\" alt></p>\n<p>越是老程序员越是“胆小”，评估时间越准。</p>\n<h3 id=\"如何精确评估开发时间\"><a href=\"#如何精确评估开发时间\" class=\"headerlink\" title=\"如何精确评估开发时间\"></a>如何精确评估开发时间</h3><p>最近几年，我都是以小时为单位进行时间评估的，有没有觉得有点恐怖？长期以来这样的习惯让我收获颇多。这得感谢我之前的领导，三年前强迫我们这样做，刚开始很抵触，后来才体会到其中的甜头。</p>\n<p><strong>1、任务拆分</strong></p>\n<p>拿到新需求后，对其进行充分了解，不清楚的就去问清楚，然后对其进行模块化。之后，再进行技术上的拆分。由大到小，再到细节。细到什么程度呢？细到一个按钮的实现，细到一个点击动作是要用按钮还是要用手势的定夺，最好能细到代码块的划分。</p>\n<p>这个能力是需要锻炼的，做好拆分，然后在实际开发过程中根据实际时间花销，回顾时间评估的准确性，以便让下次更准确。慢慢地，就会越来越精确，评估时间有依有据，不再是拍脑门给出的时间。下面看一个例子：</p>\n<p><img src=\"https://wx2.sinaimg.cn/mw690/806e3151ly1g24quz2fa6j20je040gnc.jpg\" srcset=\"/img/loading.gif\" alt></p>\n<p><strong>2、合理认知时间</strong></p>\n<p>一天工作八小时，但你不可能专注地连续八小时在编写代码。一天的工作中，有开会、讨论、阶段性休息（刷新闻、喝咖啡、发呆）的时间开销，真正有效时间其实不足六小时，杂事多的话可能是四五个小时。</p>\n<p><strong>3、预留buffer(缓冲区)</strong></p>\n<p>首先明确，预留buffer不是让你随便增加预估量，而是要明确知道buffer是给那些事情用的。要考虑到一下几点：</p>\n<p>首先是沟通时间，你开发的时候不可能是闷着头一直写代码。要和UI设计师沟通，要和产品经理沟通，有可能还需要和组内的人沟通技术上的事情，以及和别的技术小组对接的问题。</p>\n<p>等待时间。如果牵扯多部门协作，会有很多等待时间，因为你不能保证别的部门就能准确按照计划时间完成的。虽然等待过程中你可以安排其他任务，但你不能保证其他任务就能刚好填充等待时间，更何况任务切换也需要时间成本。</p>\n<p>突发状况。例如，bug修改、需求微调、对接人请假。</p>\n<p>不确定时间。和其他部门有交集的工作，最好多预留buffer。比如移动端和后台联调。后端信誓旦旦给你说11.11号可以进行联调，这次联调总共5个接口。如果你简单地认为他们给你提供的接口没问题，并且能顺利请求回来数据，预计一天联调时间足以，那你就等着delay吧。11.10号你已经准备好了所有联调准备，如果数据能正确返回，你的解析功能都是OK的，因为你之前用假数据已经处理的好好的。到了11号，你请求第一个接口就报错了，然后在即时通讯软件上问他们怎么回事，半个小时后给你回了“不好意思，地址变了，你用这个试试”。又错了……。终于回来数据了，然后发现缺少两个字段……。就这样，第一个接口调通已经快下班了。（当然很多后端技术人员也是很靠谱的，举这个例子只是为了让多考虑）</p>\n<p>以上是可能会出现的状况，实际中有可能只是出现了一部分，这要根据实际情况而定。并不是让你能多预留buffer就多留，毕竟每个项目的时间都是很紧张的。一般buffer留在15%-25%。</p>\n<p><strong>4、回头看</strong></p>\n<p>在实际开发过程中，测量实际花费时间，并与估算相比较。如果有些地方相差较大，就要看差在哪里，然后在下次预估中避免相同的差错。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>编程经验不等同于估算经验。一个不被包含在估算流程中的开发者将不会擅长估算。同样，如果实际的时间花费不被测量和用于与估算比较，那么将没有反馈来学习。</p>\n<p>最后，每个程序员都应该具备估算的技能。为磨练这个技能，接手每个任务时，先决定你要做什么。然后在开始之前估算任务所需时间。最后测量实际花费时间，并与估算相比较。同样比较你实际完成的与计划完成的。这样你将会既提高你对一个任务包含细节的理解，同样也提高了你的估算技能。</p>\n<p>尽管进行了精确估算，也不能保证每个项目都会100%精确。偶尔会遇到一些突发情况和没预估到的风险是不可避免的。那么面对风险，有一些原则可以帮助你：</p>\n<ul>\n<li>报风险时间置前，如果开发开始或者任何过程有可能导致项目延期或者需求无法实现的时候就报警，不要等加班能实现或者存在侥幸心理；</li>\n<li>对于不确定的需求，一定要沟通到位；</li>\n<li>涉及到交互细节，必须提前沟通好，充分明确细节；</li>\n<li>技术可行性方案提前调查清楚。</li>\n</ul>\n<p>完结<del>~</del>~~</p>\n<blockquote>\n<p>来源：Eric_LG</p>\n<p>blog.csdn.net/gang544043963/article/details/83934015</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>一个程序员能否精确评估开发时间，是一件非常重要的事情。如果你掌握了这项技能，你在别人的眼里就会是这样：</p>\n<ul>\n<li>靠谱</li>\n<li>经验十足</li>\n<li>对需求很了解</li>\n<li>延期风险小</li>\n<li>合格的软件工程师</li>\n<li>正规军，不是野路子</li>\n</ul>\n<h3 id=\"评估开发时间的重要性\"><a href=\"#评估开发时间的重要性\" class=\"headerlink\" title=\"评估开发时间的重要性\"></a>评估开发时间的重要性</h3><p>首先，在一个项目中，所有的环节都是承上启下的，上一个环节结束的时间节点正是下一个环节开始的节点。那么在一个项目或者一次迭代正式启动前，所有的环节都应该有个时间评估。以一次APP需求迭代为例，项目计划像这样：</p>\n<ul>\n<li>UI设计图 11.01 - 11.03（3工作日）</li>\n<li>API接口讨论与设计 11.04（1工作日）</li>\n<li>移动端开发 11.05 - 11.15（8工作日）</li>\n<li>后端具备联调条件：11.11</li>\n<li>产品体验 11.16 - 11.17（2工作日）</li>\n<li>测试11.18 - 11.25（5工作日）</li>\n<li>发布11.26</li>\n</ul>\n<p>根据项目计划，各个部门自己要分配人员和时间。如果其中一个环节延期了，那么后面的各个环节都要顺延，就会造成损失。</p>\n<p>其次，对于程序员来说，一个清晰的开发计划有助于自己有条不紊地开展工作，也能避免疏漏某个功能点。评估时间的过程，也是对需求详细拆分的过程，了解要做什么，做成什么样子。在评估的过程中，根据专业知识和经验，充分预估会遇到的风险，怎样的解决方案，预留多少时间？都想好了的话，项目也就没啥风险了。</p>\n<p>然而，开发时间评估，最大的好处是程序员受益。认真地评估开发时间，会让你在开始动手写代码之前搞清楚要怎么写，每个模块的设计心理得有个谱。从宏观上拆分模块，然后详细地分解任务，具体到一个很小的功能点。这样你就能清晰地设计代码，而不是堆代码。也避免了很多时候写着写着发现不对，然后拉到重来的境地。就是要让你动手写代码之前胸有成竹！</p>\n<h3 id=\"初学者为什么评估不准？\"><a href=\"#初学者为什么评估不准？\" class=\"headerlink\" title=\"初学者为什么评估不准？\"></a>初学者为什么评估不准？</h3><p>如果你的项目经常delay，那么八成是时间评估不准。</p>\n<p>刚毕业的学生被问到什么时候可以完成的时候，脑门一拍：“三天”，实际上两个星期过去了还没完成。</p>\n<p>这里有一张表，看看你是不是这样子，对号入座：</p>\n<p><img src=\"https://wx1.sinaimg.cn/mw690/806e3151ly1g24quvbhswj20ia0ipk5w.jpg\" srcset=\"/img/loading.gif\" alt></p>\n<p>越是老程序员越是“胆小”，评估时间越准。</p>\n<h3 id=\"如何精确评估开发时间\"><a href=\"#如何精确评估开发时间\" class=\"headerlink\" title=\"如何精确评估开发时间\"></a>如何精确评估开发时间</h3><p>最近几年，我都是以小时为单位进行时间评估的，有没有觉得有点恐怖？长期以来这样的习惯让我收获颇多。这得感谢我之前的领导，三年前强迫我们这样做，刚开始很抵触，后来才体会到其中的甜头。</p>\n<p><strong>1、任务拆分</strong></p>\n<p>拿到新需求后，对其进行充分了解，不清楚的就去问清楚，然后对其进行模块化。之后，再进行技术上的拆分。由大到小，再到细节。细到什么程度呢？细到一个按钮的实现，细到一个点击动作是要用按钮还是要用手势的定夺，最好能细到代码块的划分。</p>\n<p>这个能力是需要锻炼的，做好拆分，然后在实际开发过程中根据实际时间花销，回顾时间评估的准确性，以便让下次更准确。慢慢地，就会越来越精确，评估时间有依有据，不再是拍脑门给出的时间。下面看一个例子：</p>\n<p><img src=\"https://wx2.sinaimg.cn/mw690/806e3151ly1g24quz2fa6j20je040gnc.jpg\" srcset=\"/img/loading.gif\" alt></p>\n<p><strong>2、合理认知时间</strong></p>\n<p>一天工作八小时，但你不可能专注地连续八小时在编写代码。一天的工作中，有开会、讨论、阶段性休息（刷新闻、喝咖啡、发呆）的时间开销，真正有效时间其实不足六小时，杂事多的话可能是四五个小时。</p>\n<p><strong>3、预留buffer(缓冲区)</strong></p>\n<p>首先明确，预留buffer不是让你随便增加预估量，而是要明确知道buffer是给那些事情用的。要考虑到一下几点：</p>\n<p>首先是沟通时间，你开发的时候不可能是闷着头一直写代码。要和UI设计师沟通，要和产品经理沟通，有可能还需要和组内的人沟通技术上的事情，以及和别的技术小组对接的问题。</p>\n<p>等待时间。如果牵扯多部门协作，会有很多等待时间，因为你不能保证别的部门就能准确按照计划时间完成的。虽然等待过程中你可以安排其他任务，但你不能保证其他任务就能刚好填充等待时间，更何况任务切换也需要时间成本。</p>\n<p>突发状况。例如，bug修改、需求微调、对接人请假。</p>\n<p>不确定时间。和其他部门有交集的工作，最好多预留buffer。比如移动端和后台联调。后端信誓旦旦给你说11.11号可以进行联调，这次联调总共5个接口。如果你简单地认为他们给你提供的接口没问题，并且能顺利请求回来数据，预计一天联调时间足以，那你就等着delay吧。11.10号你已经准备好了所有联调准备，如果数据能正确返回，你的解析功能都是OK的，因为你之前用假数据已经处理的好好的。到了11号，你请求第一个接口就报错了，然后在即时通讯软件上问他们怎么回事，半个小时后给你回了“不好意思，地址变了，你用这个试试”。又错了……。终于回来数据了，然后发现缺少两个字段……。就这样，第一个接口调通已经快下班了。（当然很多后端技术人员也是很靠谱的，举这个例子只是为了让多考虑）</p>\n<p>以上是可能会出现的状况，实际中有可能只是出现了一部分，这要根据实际情况而定。并不是让你能多预留buffer就多留，毕竟每个项目的时间都是很紧张的。一般buffer留在15%-25%。</p>\n<p><strong>4、回头看</strong></p>\n<p>在实际开发过程中，测量实际花费时间，并与估算相比较。如果有些地方相差较大，就要看差在哪里，然后在下次预估中避免相同的差错。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>编程经验不等同于估算经验。一个不被包含在估算流程中的开发者将不会擅长估算。同样，如果实际的时间花费不被测量和用于与估算比较，那么将没有反馈来学习。</p>\n<p>最后，每个程序员都应该具备估算的技能。为磨练这个技能，接手每个任务时，先决定你要做什么。然后在开始之前估算任务所需时间。最后测量实际花费时间，并与估算相比较。同样比较你实际完成的与计划完成的。这样你将会既提高你对一个任务包含细节的理解，同样也提高了你的估算技能。</p>\n<p>尽管进行了精确估算，也不能保证每个项目都会100%精确。偶尔会遇到一些突发情况和没预估到的风险是不可避免的。那么面对风险，有一些原则可以帮助你：</p>\n<ul>\n<li>报风险时间置前，如果开发开始或者任何过程有可能导致项目延期或者需求无法实现的时候就报警，不要等加班能实现或者存在侥幸心理；</li>\n<li>对于不确定的需求，一定要沟通到位；</li>\n<li>涉及到交互细节，必须提前沟通好，充分明确细节；</li>\n<li>技术可行性方案提前调查清楚。</li>\n</ul>\n<p>完结<del>~</del>~~</p>\n<blockquote>\n<p>来源：Eric_LG</p>\n<p>blog.csdn.net/gang544043963/article/details/83934015</p>\n</blockquote>\n"},{"title":"使用 Docker 部署 Spring Boot","date":"2019-04-17T08:11:01.000Z","photos":["https://cdn.pixabay.com/photo/2019/05/02/18/47/park-4174278_960_720.jpg"],"_content":"\n\nDocker 技术发展为微服务落地提供了更加便利的环境，使用 Docker 部署 Spring Boot 其实非常简单，这篇文章我们就来简单学习下。\n\n首先构建一个简单的 Spring Boot 项目，然后给项目添加 Docker 支持，最后对项目进行部署。\n\n## 一个简单 Spring Boot 项目\n\n在 `pom.xml` 中 ，使用 Spring Boot 2.0 相关依赖\n\n```xml\n<parent>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-parent</artifactId>\n    <version>2.0.0.RELEASE</version>\n</parent>\n```\n\n添加 web 和测试依赖\n\n```xml\n<dependencies>\n     <dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-test</artifactId>\n        <scope>test</scope>\n    </dependency>\n</dependencies>\n```\n\n创建一个 DockerController，在其中有一个`index()`方法，访问时返回：`Hello Docker!`\n\n```\n@RestController\npublic class DockerController {\n\n    @RequestMapping(\"/\")\n    public String index() {\n        return \"Hello Docker!\";\n    }\n}\n```\n\n启动类\n\n```\n@SpringBootApplication\npublic class DockerApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(DockerApplication.class, args);\n    }\n}\n```\n\n添加完毕后启动项目，启动成功后浏览器放问：`http://localhost:8080/`，页面返回：`Hello Docker!`，说明 Spring Boot 项目配置正常。\n\n## Spring Boot 项目添加 Docker 支持\n\n在 `pom.xml-properties`中添加 Docker 镜像名称\n\n```\n<properties>\n    <docker.image.prefix>springboot</docker.image.prefix>\n</properties>\n```\n\nplugins 中添加 Docker 构建插件：\n\n```\n<build>\n    <plugins>\n        <plugin>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-maven-plugin</artifactId>\n        </plugin>\n        <!-- Docker maven plugin -->\n        <plugin>\n            <groupId>com.spotify</groupId>\n            <artifactId>docker-maven-plugin</artifactId>\n            <version>1.0.0</version>\n            <configuration>\n                <imageName>${docker.image.prefix}/${project.artifactId}</imageName>\n                <dockerDirectory>src/main/docker</dockerDirectory>\n                <resources>\n                    <resource>\n                        <targetPath>/</targetPath>\n                        <directory>${project.build.directory}</directory>\n                        <include>${project.build.finalName}.jar</include>\n                    </resource>\n                </resources>\n            </configuration>\n        </plugin>\n        <!-- Docker maven plugin -->\n    </plugins>\n</build>\n```\n\n在目录`src/main/docker`下创建 Dockerfile 文件，Dockerfile 文件用来说明如何来构建镜像。\n\n```\nFROM openjdk:8-jdk-alpine\nVOLUME /tmp\nADD spring-boot-docker-1.0.jar app.jar\nENTRYPOINT [\"java\",\"-Djava.security.egd=file:/dev/./urandom\",\"-jar\",\"/app.jar\"]\n```\n\n这个 Dockerfile 文件很简单，构建 Jdk 基础环境，添加 Spring Boot Jar 到镜像中，简单解释一下:\n\n*   FROM ，表示使用 Jdk8 环境 为基础镜像，如果镜像不是本地的会从 DockerHub 进行下载\n*   VOLUME ，VOLUME 指向了一个`/tmp`的目录，由于 Spring Boot 使用内置的 Tomcat 容器，Tomcat 默认使用`/tmp`作为工作目录。这个命令的效果是：在宿主机的`/var/lib/docker`目录下创建一个临时文件并把它链接到容器中的`/tmp`目录\n*   ADD ，拷贝文件并且重命名\n*   ENTRYPOINT ，为了缩短 Tomcat 的启动时间，添加`java.security.egd`的系统属性指向`/dev/urandom`作为 ENTRYPOINT\n\n> 这样 Spring Boot 项目添加 Docker 依赖就完成了。\n\n## 构建打包环境\n\n我们需要有一个 Docker 环境来打包 Spring Boot 项目，在 Windows 搭建 Docker 环境很麻烦，因此我这里以 Centos 7 为例。\n\n### 安装 Docker 环境\n\n安装\n\n```\nyum install docker\n```\n\n安装完成后，使用下面的命令来启动 docker 服务，并将其设置为开机启动：\n\n```\nervice docker start\nchkconfig docker on\n\n#LCTT 译注：此处采用了旧式的 sysv 语法，如采用CentOS 7中支持的新式 systemd 语法，如下：\nsystemctl  start docker.service\nsystemctl  enable docker.service\n```\n\n使用 Docker 中国加速器\n\n```\nvi  /etc/docker/daemon.json\n\n#添加后：\n{\n    \"registry-mirrors\": [\"https://registry.docker-cn.com\"],\n    \"live-restore\": true\n}\n```\n\n重新启动 docker\n\n```\nsystemctl restart docker\n```\n\n输入`docker version` 返回版本信息则安装正常。\n\n### 安装 JDK\n\n```\nyum -y install java-1.8.0-openjdk*\n```\n\n配置环境变量\n打开 `vim /etc/profile`\n添加一下内容\n\n```\nexport JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.161-0.b14.el7_4.x86_64 \nexport PATH=$PATH:$JAVA_HOME/bin \n```\n\n修改完成之后，使其生效\n\n```\nsource /etc/profile\n```\n\n输入`java -version` 返回版本信息则安装正常。\n\n### 安装 MAVEN\n\n下载：`http://mirrors.shu.edu.cn/apache/maven/maven-3/3.5.2/binaries/apache-maven-3.5.2-bin.tar.gz`\n\n```\n## 解压\ntar vxf apache-maven-3.5.2-bin.tar.gz\n## 移动\nmv apache-maven-3.5.2 /usr/local/maven3\n```\n\n修改环境变量， 在`/etc/profile`中添加以下几行\n\n```\nMAVEN_HOME=/usr/local/maven3\nexport MAVEN_HOME\nexport PATH=${PATH}:${MAVEN_HOME}/bin\n```\n\n记得执行`source /etc/profile`使环境变量生效。\n\n输入`mvn -version` 返回版本信息则安装正常。\n\n> 这样整个构建环境就配置完成了。\n\n## 使用 Docker 部署 Spring Boot 项目\n\n将项目 `spring-boot-docker` 拷贝服务器中，进入项目路径下进行打包测试。\n\n```\n#打包\nmvn package\n#启动\njava -jar target/spring-boot-docker-1.0.jar\n```\n\n看到 Spring Boot 的启动日志后表明环境配置没有问题，接下来我们使用 DockerFile 构建镜像。\n\n```\nmvn package docker:build\n```\n\n第一次构建可能有点慢，当看到以下内容的时候表明构建成功：\n\n```\n...\nStep 1 : FROM openjdk:8-jdk-alpine\n ---> 224765a6bdbe\nStep 2 : VOLUME /tmp\n ---> Using cache\n ---> b4e86cc8654e\nStep 3 : ADD spring-boot-docker-1.0.jar app.jar\n ---> a20fe75963ab\nRemoving intermediate container 593ee5e1ea51\nStep 4 : ENTRYPOINT java -Djava.security.egd=file:/dev/./urandom -jar /app.jar\n ---> Running in 85d558a10cd4\n ---> 7102f08b5e95\nRemoving intermediate container 85d558a10cd4\nSuccessfully built 7102f08b5e95\n[INFO] Built springboot/spring-boot-docker\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 54.346 s\n[INFO] Finished at: 2018-03-13T16:20:15+08:00\n[INFO] Final Memory: 42M/182M\n[INFO] ------------------------------------------------------------------------\n```\n\n使用`docker images`命令查看构建好的镜像：\n\n```\ndocker images\nREPOSITORY                      TAG                 IMAGE ID            CREATED             SIZE\nspringboot/spring-boot-docker   latest              99ce9468da74        6 seconds ago       117.5 MB\n```\n\n`springboot/spring-boot-docker` 就是我们构建好的镜像，下一步就是运行该镜像\n\n```\ndocker run -p 8080:8080 -t springboot/spring-boot-docker\n```\n\n启动完成之后我们使用`docker ps`查看正在运行的镜像：\n\n```\ndocker ps\nCONTAINER ID        IMAGE                           COMMAND                  CREATED             STATUS              PORTS                    NAMES\n049570da86a9        springboot/spring-boot-docker   \"java -Djava.security\"   30 seconds ago      Up 27 seconds       0.0.0.0:8080->8080/tcp   determined_mahavira\n```\n\n可以看到我们构建的容器正在在运行，访问浏览器：`http://192.168.0.x:8080/`, 返回\n\n```\nHello Docker!\n```\n\n说明使用 Docker 部署 Spring Boot 项目成功！\n\n**[示例代码 - github](https://github.com/ityouknow/spring-boot-examples)**\n\n**[示例代码 - 码云](https://gitee.com/ityouknow/spring-boot-examples)**\n\n## 参考\n\n[Spring Boot with Docker](https://spring.io/guides/gs/spring-boot-docker/)\n[Docker：Spring Boot 应用发布到 Docker](https://lw900925.github.io/docker/docker-springboot.html)\n\n\n> 本文由 [简悦 SimpRead](http://ksria.com/simpread/) 转码\n>\n> 原文地址 https://www.cnblogs.com/ityouknow/p/8599093.html\n","source":"_posts/0018-使用 Docker 部署 Spring Boot.md","raw":"---\ntitle: 使用 Docker 部署 Spring Boot\ndate: 2019-04-17 16:11:01\ntags:\n    - Docker\n    - Spring Boot\nphotos:\n    - https://cdn.pixabay.com/photo/2019/05/02/18/47/park-4174278_960_720.jpg\ncategories:\n    - 后端\n---\n\n\nDocker 技术发展为微服务落地提供了更加便利的环境，使用 Docker 部署 Spring Boot 其实非常简单，这篇文章我们就来简单学习下。\n\n首先构建一个简单的 Spring Boot 项目，然后给项目添加 Docker 支持，最后对项目进行部署。\n\n## 一个简单 Spring Boot 项目\n\n在 `pom.xml` 中 ，使用 Spring Boot 2.0 相关依赖\n\n```xml\n<parent>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-parent</artifactId>\n    <version>2.0.0.RELEASE</version>\n</parent>\n```\n\n添加 web 和测试依赖\n\n```xml\n<dependencies>\n     <dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-test</artifactId>\n        <scope>test</scope>\n    </dependency>\n</dependencies>\n```\n\n创建一个 DockerController，在其中有一个`index()`方法，访问时返回：`Hello Docker!`\n\n```\n@RestController\npublic class DockerController {\n\n    @RequestMapping(\"/\")\n    public String index() {\n        return \"Hello Docker!\";\n    }\n}\n```\n\n启动类\n\n```\n@SpringBootApplication\npublic class DockerApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(DockerApplication.class, args);\n    }\n}\n```\n\n添加完毕后启动项目，启动成功后浏览器放问：`http://localhost:8080/`，页面返回：`Hello Docker!`，说明 Spring Boot 项目配置正常。\n\n## Spring Boot 项目添加 Docker 支持\n\n在 `pom.xml-properties`中添加 Docker 镜像名称\n\n```\n<properties>\n    <docker.image.prefix>springboot</docker.image.prefix>\n</properties>\n```\n\nplugins 中添加 Docker 构建插件：\n\n```\n<build>\n    <plugins>\n        <plugin>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-maven-plugin</artifactId>\n        </plugin>\n        <!-- Docker maven plugin -->\n        <plugin>\n            <groupId>com.spotify</groupId>\n            <artifactId>docker-maven-plugin</artifactId>\n            <version>1.0.0</version>\n            <configuration>\n                <imageName>${docker.image.prefix}/${project.artifactId}</imageName>\n                <dockerDirectory>src/main/docker</dockerDirectory>\n                <resources>\n                    <resource>\n                        <targetPath>/</targetPath>\n                        <directory>${project.build.directory}</directory>\n                        <include>${project.build.finalName}.jar</include>\n                    </resource>\n                </resources>\n            </configuration>\n        </plugin>\n        <!-- Docker maven plugin -->\n    </plugins>\n</build>\n```\n\n在目录`src/main/docker`下创建 Dockerfile 文件，Dockerfile 文件用来说明如何来构建镜像。\n\n```\nFROM openjdk:8-jdk-alpine\nVOLUME /tmp\nADD spring-boot-docker-1.0.jar app.jar\nENTRYPOINT [\"java\",\"-Djava.security.egd=file:/dev/./urandom\",\"-jar\",\"/app.jar\"]\n```\n\n这个 Dockerfile 文件很简单，构建 Jdk 基础环境，添加 Spring Boot Jar 到镜像中，简单解释一下:\n\n*   FROM ，表示使用 Jdk8 环境 为基础镜像，如果镜像不是本地的会从 DockerHub 进行下载\n*   VOLUME ，VOLUME 指向了一个`/tmp`的目录，由于 Spring Boot 使用内置的 Tomcat 容器，Tomcat 默认使用`/tmp`作为工作目录。这个命令的效果是：在宿主机的`/var/lib/docker`目录下创建一个临时文件并把它链接到容器中的`/tmp`目录\n*   ADD ，拷贝文件并且重命名\n*   ENTRYPOINT ，为了缩短 Tomcat 的启动时间，添加`java.security.egd`的系统属性指向`/dev/urandom`作为 ENTRYPOINT\n\n> 这样 Spring Boot 项目添加 Docker 依赖就完成了。\n\n## 构建打包环境\n\n我们需要有一个 Docker 环境来打包 Spring Boot 项目，在 Windows 搭建 Docker 环境很麻烦，因此我这里以 Centos 7 为例。\n\n### 安装 Docker 环境\n\n安装\n\n```\nyum install docker\n```\n\n安装完成后，使用下面的命令来启动 docker 服务，并将其设置为开机启动：\n\n```\nervice docker start\nchkconfig docker on\n\n#LCTT 译注：此处采用了旧式的 sysv 语法，如采用CentOS 7中支持的新式 systemd 语法，如下：\nsystemctl  start docker.service\nsystemctl  enable docker.service\n```\n\n使用 Docker 中国加速器\n\n```\nvi  /etc/docker/daemon.json\n\n#添加后：\n{\n    \"registry-mirrors\": [\"https://registry.docker-cn.com\"],\n    \"live-restore\": true\n}\n```\n\n重新启动 docker\n\n```\nsystemctl restart docker\n```\n\n输入`docker version` 返回版本信息则安装正常。\n\n### 安装 JDK\n\n```\nyum -y install java-1.8.0-openjdk*\n```\n\n配置环境变量\n打开 `vim /etc/profile`\n添加一下内容\n\n```\nexport JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.161-0.b14.el7_4.x86_64 \nexport PATH=$PATH:$JAVA_HOME/bin \n```\n\n修改完成之后，使其生效\n\n```\nsource /etc/profile\n```\n\n输入`java -version` 返回版本信息则安装正常。\n\n### 安装 MAVEN\n\n下载：`http://mirrors.shu.edu.cn/apache/maven/maven-3/3.5.2/binaries/apache-maven-3.5.2-bin.tar.gz`\n\n```\n## 解压\ntar vxf apache-maven-3.5.2-bin.tar.gz\n## 移动\nmv apache-maven-3.5.2 /usr/local/maven3\n```\n\n修改环境变量， 在`/etc/profile`中添加以下几行\n\n```\nMAVEN_HOME=/usr/local/maven3\nexport MAVEN_HOME\nexport PATH=${PATH}:${MAVEN_HOME}/bin\n```\n\n记得执行`source /etc/profile`使环境变量生效。\n\n输入`mvn -version` 返回版本信息则安装正常。\n\n> 这样整个构建环境就配置完成了。\n\n## 使用 Docker 部署 Spring Boot 项目\n\n将项目 `spring-boot-docker` 拷贝服务器中，进入项目路径下进行打包测试。\n\n```\n#打包\nmvn package\n#启动\njava -jar target/spring-boot-docker-1.0.jar\n```\n\n看到 Spring Boot 的启动日志后表明环境配置没有问题，接下来我们使用 DockerFile 构建镜像。\n\n```\nmvn package docker:build\n```\n\n第一次构建可能有点慢，当看到以下内容的时候表明构建成功：\n\n```\n...\nStep 1 : FROM openjdk:8-jdk-alpine\n ---> 224765a6bdbe\nStep 2 : VOLUME /tmp\n ---> Using cache\n ---> b4e86cc8654e\nStep 3 : ADD spring-boot-docker-1.0.jar app.jar\n ---> a20fe75963ab\nRemoving intermediate container 593ee5e1ea51\nStep 4 : ENTRYPOINT java -Djava.security.egd=file:/dev/./urandom -jar /app.jar\n ---> Running in 85d558a10cd4\n ---> 7102f08b5e95\nRemoving intermediate container 85d558a10cd4\nSuccessfully built 7102f08b5e95\n[INFO] Built springboot/spring-boot-docker\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 54.346 s\n[INFO] Finished at: 2018-03-13T16:20:15+08:00\n[INFO] Final Memory: 42M/182M\n[INFO] ------------------------------------------------------------------------\n```\n\n使用`docker images`命令查看构建好的镜像：\n\n```\ndocker images\nREPOSITORY                      TAG                 IMAGE ID            CREATED             SIZE\nspringboot/spring-boot-docker   latest              99ce9468da74        6 seconds ago       117.5 MB\n```\n\n`springboot/spring-boot-docker` 就是我们构建好的镜像，下一步就是运行该镜像\n\n```\ndocker run -p 8080:8080 -t springboot/spring-boot-docker\n```\n\n启动完成之后我们使用`docker ps`查看正在运行的镜像：\n\n```\ndocker ps\nCONTAINER ID        IMAGE                           COMMAND                  CREATED             STATUS              PORTS                    NAMES\n049570da86a9        springboot/spring-boot-docker   \"java -Djava.security\"   30 seconds ago      Up 27 seconds       0.0.0.0:8080->8080/tcp   determined_mahavira\n```\n\n可以看到我们构建的容器正在在运行，访问浏览器：`http://192.168.0.x:8080/`, 返回\n\n```\nHello Docker!\n```\n\n说明使用 Docker 部署 Spring Boot 项目成功！\n\n**[示例代码 - github](https://github.com/ityouknow/spring-boot-examples)**\n\n**[示例代码 - 码云](https://gitee.com/ityouknow/spring-boot-examples)**\n\n## 参考\n\n[Spring Boot with Docker](https://spring.io/guides/gs/spring-boot-docker/)\n[Docker：Spring Boot 应用发布到 Docker](https://lw900925.github.io/docker/docker-springboot.html)\n\n\n> 本文由 [简悦 SimpRead](http://ksria.com/simpread/) 转码\n>\n> 原文地址 https://www.cnblogs.com/ityouknow/p/8599093.html\n","slug":"0018-使用 Docker 部署 Spring Boot","published":1,"updated":"2020-07-17T02:32:01.165Z","comments":1,"layout":"post","link":"","_id":"ckcpntugj002104oith53ez8z","content":"<p>Docker 技术发展为微服务落地提供了更加便利的环境，使用 Docker 部署 Spring Boot 其实非常简单，这篇文章我们就来简单学习下。</p>\n<p>首先构建一个简单的 Spring Boot 项目，然后给项目添加 Docker 支持，最后对项目进行部署。</p>\n<h2 id=\"一个简单-Spring-Boot-项目\"><a href=\"#一个简单-Spring-Boot-项目\" class=\"headerlink\" title=\"一个简单 Spring Boot 项目\"></a>一个简单 Spring Boot 项目</h2><p>在 <code>pom.xml</code> 中 ，使用 Spring Boot 2.0 相关依赖</p>\n<pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">parent</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.0.0.RELEASE<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">parent</span>&gt;</span></code></pre>\n<p>添加 web 和测试依赖</p>\n<pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependencies</span>&gt;</span>\n     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scope</span>&gt;</span>test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scope</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependencies</span>&gt;</span></code></pre>\n<p>创建一个 DockerController，在其中有一个<code>index()</code>方法，访问时返回：<code>Hello Docker!</code></p>\n<pre><code class=\"hljs undefined\"><span class=\"hljs-meta\">@RestController</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DockerController</span> </span>&#123;\n\n    <span class=\"hljs-meta\">@RequestMapping(<span class=\"hljs-meta-string\">\"/\"</span>)</span>\n    <span class=\"hljs-keyword\">public</span> String index() &#123;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"Hello Docker!\"</span>;\n    &#125;\n&#125;</code></pre>\n<p>启动类</p>\n<pre><code class=\"hljs undefined\"><span class=\"hljs-meta\">@SpringBootApplication</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DockerApplication</span> </span>&#123;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;\n        SpringApplication.run(DockerApplication<span class=\"hljs-class\">.<span class=\"hljs-keyword\">class</span>, <span class=\"hljs-title\">args</span>)</span>;\n    &#125;\n&#125;</code></pre>\n<p>添加完毕后启动项目，启动成功后浏览器放问：<code>http://localhost:8080/</code>，页面返回：<code>Hello Docker!</code>，说明 Spring Boot 项目配置正常。</p>\n<h2 id=\"Spring-Boot-项目添加-Docker-支持\"><a href=\"#Spring-Boot-项目添加-Docker-支持\" class=\"headerlink\" title=\"Spring Boot 项目添加 Docker 支持\"></a>Spring Boot 项目添加 Docker 支持</h2><p>在 <code>pom.xml-properties</code>中添加 Docker 镜像名称</p>\n<pre><code class=\"hljs undefined\">&lt;<span class=\"hljs-built_in\">properties</span>&gt;\n    &lt;docker.<span class=\"hljs-built_in\">image</span>.<span class=\"hljs-built_in\">prefix</span>&gt;springboot&lt;/docker.<span class=\"hljs-built_in\">image</span>.<span class=\"hljs-built_in\">prefix</span>&gt;\n&lt;/<span class=\"hljs-built_in\">properties</span>&gt;</code></pre>\n<p>plugins 中添加 Docker 构建插件：</p>\n<pre><code class=\"hljs undefined\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">build</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugins</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span>\n        <span class=\"hljs-comment\">&lt;!-- Docker maven plugin --&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.spotify<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>docker-maven-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.0.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">configuration</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">imageName</span>&gt;</span>$</span><span class=\"hljs-template-variable\">&#123;docker.image.prefix&#125;</span><span class=\"xml\">/$</span><span class=\"hljs-template-variable\">&#123;project.artifactId&#125;</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">imageName</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dockerDirectory</span>&gt;</span>src/main/docker<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dockerDirectory</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">resources</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">resource</span>&gt;</span>\n                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">targetPath</span>&gt;</span>/<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">targetPath</span>&gt;</span>\n                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">directory</span>&gt;</span>$</span><span class=\"hljs-template-variable\">&#123;project.build.directory&#125;</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">directory</span>&gt;</span>\n                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">include</span>&gt;</span>$</span><span class=\"hljs-template-variable\">&#123;project.build.finalName&#125;</span><span class=\"xml\">.jar<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">include</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">resource</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">resources</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">configuration</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span>\n        <span class=\"hljs-comment\">&lt;!-- Docker maven plugin --&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugins</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">build</span>&gt;</span></span></code></pre>\n<p>在目录<code>src/main/docker</code>下创建 Dockerfile 文件，Dockerfile 文件用来说明如何来构建镜像。</p>\n<pre><code class=\"hljs undefined\"><span class=\"hljs-keyword\">FROM</span> openjdk:<span class=\"hljs-number\">8</span>-jdk-alpine\n<span class=\"hljs-keyword\">VOLUME</span><span class=\"bash\"> /tmp</span>\n<span class=\"hljs-keyword\">ADD</span><span class=\"bash\"> spring-boot-docker-1.0.jar app.jar</span>\n<span class=\"hljs-keyword\">ENTRYPOINT</span><span class=\"bash\"> [<span class=\"hljs-string\">\"java\"</span>,<span class=\"hljs-string\">\"-Djava.security.egd=file:/dev/./urandom\"</span>,<span class=\"hljs-string\">\"-jar\"</span>,<span class=\"hljs-string\">\"/app.jar\"</span>]</span></code></pre>\n<p>这个 Dockerfile 文件很简单，构建 Jdk 基础环境，添加 Spring Boot Jar 到镜像中，简单解释一下:</p>\n<ul>\n<li>FROM ，表示使用 Jdk8 环境 为基础镜像，如果镜像不是本地的会从 DockerHub 进行下载</li>\n<li>VOLUME ，VOLUME 指向了一个<code>/tmp</code>的目录，由于 Spring Boot 使用内置的 Tomcat 容器，Tomcat 默认使用<code>/tmp</code>作为工作目录。这个命令的效果是：在宿主机的<code>/var/lib/docker</code>目录下创建一个临时文件并把它链接到容器中的<code>/tmp</code>目录</li>\n<li>ADD ，拷贝文件并且重命名</li>\n<li>ENTRYPOINT ，为了缩短 Tomcat 的启动时间，添加<code>java.security.egd</code>的系统属性指向<code>/dev/urandom</code>作为 ENTRYPOINT</li>\n</ul>\n<blockquote>\n<p>这样 Spring Boot 项目添加 Docker 依赖就完成了。</p>\n</blockquote>\n<h2 id=\"构建打包环境\"><a href=\"#构建打包环境\" class=\"headerlink\" title=\"构建打包环境\"></a>构建打包环境</h2><p>我们需要有一个 Docker 环境来打包 Spring Boot 项目，在 Windows 搭建 Docker 环境很麻烦，因此我这里以 Centos 7 为例。</p>\n<h3 id=\"安装-Docker-环境\"><a href=\"#安装-Docker-环境\" class=\"headerlink\" title=\"安装 Docker 环境\"></a>安装 Docker 环境</h3><p>安装</p>\n<pre><code class=\"hljs undefined\">yum <span class=\"hljs-keyword\">install</span> docker</code></pre>\n<p>安装完成后，使用下面的命令来启动 docker 服务，并将其设置为开机启动：</p>\n<pre><code class=\"hljs undefined\">ervice docker <span class=\"hljs-built_in\">start</span>\nchkconfig docker <span class=\"hljs-keyword\">on</span>\n\n<span class=\"hljs-comment\">#LCTT 译注：此处采用了旧式的 sysv 语法，如采用CentOS 7中支持的新式 systemd 语法，如下：</span>\nsystemctl  <span class=\"hljs-built_in\">start</span> docker.service\nsystemctl  enable docker.service</code></pre>\n<p>使用 Docker 中国加速器</p>\n<pre><code class=\"hljs undefined\">vi  <span class=\"hljs-string\">/etc/docker/daemon.json</span>\n\n<span class=\"hljs-comment\">#添加后：</span>\n&#123;\n    <span class=\"hljs-string\">\"registry-mirrors\"</span>: [<span class=\"hljs-string\">\"https://registry.docker-cn.com\"</span>],\n    <span class=\"hljs-string\">\"live-restore\"</span>: <span class=\"hljs-literal\">true</span>\n&#125;</code></pre>\n<p>重新启动 docker</p>\n<pre><code class=\"hljs undefined\"><span class=\"hljs-attribute\">systemctl restart docker</span></code></pre>\n<p>输入<code>docker version</code> 返回版本信息则安装正常。</p>\n<h3 id=\"安装-JDK\"><a href=\"#安装-JDK\" class=\"headerlink\" title=\"安装 JDK\"></a>安装 JDK</h3><pre><code class=\"hljs undefined\"><span class=\"hljs-selector-tag\">yum</span> <span class=\"hljs-selector-tag\">-y</span> <span class=\"hljs-selector-tag\">install</span> <span class=\"hljs-selector-tag\">java-1</span><span class=\"hljs-selector-class\">.8</span><span class=\"hljs-selector-class\">.0-openjdk</span>*</code></pre>\n<p>配置环境变量<br>打开 <code>vim /etc/profile</code><br>添加一下内容</p>\n<pre><code class=\"hljs undefined\">export JAVA_HOME=/usr/lib/jvm/java-<span class=\"hljs-number\">1.8</span><span class=\"hljs-number\">.0</span>-openjdk-<span class=\"hljs-number\">1.8</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.161</span>-<span class=\"hljs-number\">0.b14</span>.el7_4.x86_64 \nexport PATH=$PATH:$JAVA_HOME/bin</code></pre>\n<p>修改完成之后，使其生效</p>\n<pre><code class=\"hljs undefined\"><span class=\"hljs-keyword\">source</span> <span class=\"hljs-regexp\">/etc/</span>profile</code></pre>\n<p>输入<code>java -version</code> 返回版本信息则安装正常。</p>\n<h3 id=\"安装-MAVEN\"><a href=\"#安装-MAVEN\" class=\"headerlink\" title=\"安装 MAVEN\"></a>安装 MAVEN</h3><p>下载：<code>http://mirrors.shu.edu.cn/apache/maven/maven-3/3.5.2/binaries/apache-maven-3.5.2-bin.tar.gz</code></p>\n<pre><code class=\"hljs undefined\">## 解压\ntar vxf apache-maven<span class=\"hljs-number\">-3.5</span><span class=\"hljs-number\">.2</span>-bin.tar.gz\n## 移动\nmv apache-maven<span class=\"hljs-number\">-3.5</span><span class=\"hljs-number\">.2</span> /usr/local/maven3</code></pre>\n<p>修改环境变量， 在<code>/etc/profile</code>中添加以下几行</p>\n<pre><code class=\"hljs undefined\"><span class=\"hljs-attribute\">MAVEN_HOME</span>=/usr/local/maven3\n<span class=\"hljs-builtin-name\">export</span> MAVEN_HOME\n<span class=\"hljs-builtin-name\">export</span> <span class=\"hljs-attribute\">PATH</span>=<span class=\"hljs-variable\">$&#123;PATH&#125;</span>:$&#123;MAVEN_HOME&#125;/bin</code></pre>\n<p>记得执行<code>source /etc/profile</code>使环境变量生效。</p>\n<p>输入<code>mvn -version</code> 返回版本信息则安装正常。</p>\n<blockquote>\n<p>这样整个构建环境就配置完成了。</p>\n</blockquote>\n<h2 id=\"使用-Docker-部署-Spring-Boot-项目\"><a href=\"#使用-Docker-部署-Spring-Boot-项目\" class=\"headerlink\" title=\"使用 Docker 部署 Spring Boot 项目\"></a>使用 Docker 部署 Spring Boot 项目</h2><p>将项目 <code>spring-boot-docker</code> 拷贝服务器中，进入项目路径下进行打包测试。</p>\n<pre><code class=\"hljs undefined\"><span class=\"hljs-meta\">#打包</span>\nmvn package\n<span class=\"hljs-meta\">#启动</span>\njava -jar target/spring-boot-docker<span class=\"hljs-number\">-1.0</span>.jar</code></pre>\n<p>看到 Spring Boot 的启动日志后表明环境配置没有问题，接下来我们使用 DockerFile 构建镜像。</p>\n<pre><code class=\"hljs undefined\">mvn <span class=\"hljs-keyword\">package</span> <span class=\"hljs-title\">docker:build</span></code></pre>\n<p>第一次构建可能有点慢，当看到以下内容的时候表明构建成功：</p>\n<pre><code class=\"hljs undefined\"><span class=\"hljs-built_in\">..</span>.\n<span class=\"hljs-keyword\">Step</span> 1 : <span class=\"hljs-keyword\">FROM</span> openjdk:8-jdk-alpine\n ---&gt; 224765a6bdbe\n<span class=\"hljs-keyword\">Step</span> 2 : VOLUME /tmp\n ---&gt; Using cache\n ---&gt; b4e86cc8654e\n<span class=\"hljs-keyword\">Step</span> 3 : <span class=\"hljs-builtin-name\">ADD</span> spring-boot-docker-1.0.jar app.jar\n ---&gt; a20fe75963ab\nRemoving intermediate container 593ee5e1ea51\n<span class=\"hljs-keyword\">Step</span> 4 : ENTRYPOINT java -Djava.security.<span class=\"hljs-attribute\">egd</span>=file:/dev/./urandom -jar /app.jar\n ---&gt; Running <span class=\"hljs-keyword\">in</span> 85d558a10cd4\n ---&gt; 7102f08b5e95\nRemoving intermediate container 85d558a10cd4\nSuccessfully built 7102f08b5e95\n[<span class=\"hljs-builtin-name\">INFO</span>] Built springboot/spring-boot-docker\n[<span class=\"hljs-builtin-name\">INFO</span>] ------------------------------------------------------------------------\n[<span class=\"hljs-builtin-name\">INFO</span>] BUILD SUCCESS\n[<span class=\"hljs-builtin-name\">INFO</span>] ------------------------------------------------------------------------\n[<span class=\"hljs-builtin-name\">INFO</span>] Total time: 54.346 s\n[<span class=\"hljs-builtin-name\">INFO</span>] Finished at: 2018-03-13T16:20:15+08:00\n[<span class=\"hljs-builtin-name\">INFO</span>] Final Memory: 42M/182M\n[<span class=\"hljs-builtin-name\">INFO</span>] ------------------------------------------------------------------------</code></pre>\n<p>使用<code>docker images</code>命令查看构建好的镜像：</p>\n<pre><code class=\"hljs undefined\">docker images\nREPOSITORY                      <span class=\"hljs-keyword\">TAG</span>                 <span class=\"hljs-title\">IMAGE</span> ID            CREATED             SIZE\nspringboot/spring-boot-docker   latest              <span class=\"hljs-number\">99</span>ce9468da74        <span class=\"hljs-number\">6</span> seconds ago       <span class=\"hljs-number\">117.5</span> MB</code></pre>\n<p><code>springboot/spring-boot-docker</code> 就是我们构建好的镜像，下一步就是运行该镜像</p>\n<pre><code class=\"hljs undefined\">docker <span class=\"hljs-keyword\">run</span><span class=\"bash\"> -p 8080:8080 -t springboot/spring-boot-docker</span></code></pre>\n<p>启动完成之后我们使用<code>docker ps</code>查看正在运行的镜像：</p>\n<pre><code class=\"hljs undefined\"><span class=\"hljs-string\">docker</span> <span class=\"hljs-string\">ps</span>\n<span class=\"hljs-string\">CONTAINER</span> <span class=\"hljs-string\">ID</span>        <span class=\"hljs-string\">IMAGE</span>                           <span class=\"hljs-string\">COMMAND</span>                  <span class=\"hljs-string\">CREATED</span>             <span class=\"hljs-string\">STATUS</span>              <span class=\"hljs-string\">PORTS</span>                    <span class=\"hljs-string\">NAMES</span>\n<span class=\"hljs-string\">049570da86a9</span>        <span class=\"hljs-string\">springboot/spring-boot-docker</span>   <span class=\"hljs-string\">\"java -Djava.security\"</span>   <span class=\"hljs-number\">30</span> <span class=\"hljs-string\">seconds</span> <span class=\"hljs-string\">ago</span>      <span class=\"hljs-string\">Up</span> <span class=\"hljs-number\">27</span> <span class=\"hljs-string\">seconds</span>       <span class=\"hljs-number\">0.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-string\">:8080-&gt;8080/tcp</span>   <span class=\"hljs-string\">determined_mahavira</span></code></pre>\n<p>可以看到我们构建的容器正在在运行，访问浏览器：<code>http://192.168.0.x:8080/</code>, 返回</p>\n<pre><code class=\"hljs undefined\">Hello Docker!</code></pre>\n<p>说明使用 Docker 部署 Spring Boot 项目成功！</p>\n<p><strong><a href=\"https://github.com/ityouknow/spring-boot-examples\" target=\"_blank\" rel=\"noopener\">示例代码 - github</a></strong></p>\n<p><strong><a href=\"https://gitee.com/ityouknow/spring-boot-examples\" target=\"_blank\" rel=\"noopener\">示例代码 - 码云</a></strong></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://spring.io/guides/gs/spring-boot-docker/\" target=\"_blank\" rel=\"noopener\">Spring Boot with Docker</a><br><a href=\"https://lw900925.github.io/docker/docker-springboot.html\" target=\"_blank\" rel=\"noopener\">Docker：Spring Boot 应用发布到 Docker</a></p>\n<blockquote>\n<p>本文由 <a href=\"http://ksria.com/simpread/\" target=\"_blank\" rel=\"noopener\">简悦 SimpRead</a> 转码</p>\n<p>原文地址 <a href=\"https://www.cnblogs.com/ityouknow/p/8599093.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/ityouknow/p/8599093.html</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>Docker 技术发展为微服务落地提供了更加便利的环境，使用 Docker 部署 Spring Boot 其实非常简单，这篇文章我们就来简单学习下。</p>\n<p>首先构建一个简单的 Spring Boot 项目，然后给项目添加 Docker 支持，最后对项目进行部署。</p>\n<h2 id=\"一个简单-Spring-Boot-项目\"><a href=\"#一个简单-Spring-Boot-项目\" class=\"headerlink\" title=\"一个简单 Spring Boot 项目\"></a>一个简单 Spring Boot 项目</h2><p>在 <code>pom.xml</code> 中 ，使用 Spring Boot 2.0 相关依赖</p>\n<pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">parent</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.0.0.RELEASE<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">parent</span>&gt;</span></code></pre>\n<p>添加 web 和测试依赖</p>\n<pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependencies</span>&gt;</span>\n     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scope</span>&gt;</span>test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scope</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependencies</span>&gt;</span></code></pre>\n<p>创建一个 DockerController，在其中有一个<code>index()</code>方法，访问时返回：<code>Hello Docker!</code></p>\n<pre><code class=\"hljs undefined\"><span class=\"hljs-meta\">@RestController</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DockerController</span> </span>&#123;\n\n    <span class=\"hljs-meta\">@RequestMapping(<span class=\"hljs-meta-string\">\"/\"</span>)</span>\n    <span class=\"hljs-keyword\">public</span> String index() &#123;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"Hello Docker!\"</span>;\n    &#125;\n&#125;</code></pre>\n<p>启动类</p>\n<pre><code class=\"hljs undefined\"><span class=\"hljs-meta\">@SpringBootApplication</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DockerApplication</span> </span>&#123;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;\n        SpringApplication.run(DockerApplication<span class=\"hljs-class\">.<span class=\"hljs-keyword\">class</span>, <span class=\"hljs-title\">args</span>)</span>;\n    &#125;\n&#125;</code></pre>\n<p>添加完毕后启动项目，启动成功后浏览器放问：<code>http://localhost:8080/</code>，页面返回：<code>Hello Docker!</code>，说明 Spring Boot 项目配置正常。</p>\n<h2 id=\"Spring-Boot-项目添加-Docker-支持\"><a href=\"#Spring-Boot-项目添加-Docker-支持\" class=\"headerlink\" title=\"Spring Boot 项目添加 Docker 支持\"></a>Spring Boot 项目添加 Docker 支持</h2><p>在 <code>pom.xml-properties</code>中添加 Docker 镜像名称</p>\n<pre><code class=\"hljs undefined\">&lt;<span class=\"hljs-built_in\">properties</span>&gt;\n    &lt;docker.<span class=\"hljs-built_in\">image</span>.<span class=\"hljs-built_in\">prefix</span>&gt;springboot&lt;/docker.<span class=\"hljs-built_in\">image</span>.<span class=\"hljs-built_in\">prefix</span>&gt;\n&lt;/<span class=\"hljs-built_in\">properties</span>&gt;</code></pre>\n<p>plugins 中添加 Docker 构建插件：</p>\n<pre><code class=\"hljs undefined\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">build</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugins</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span>\n        <span class=\"hljs-comment\">&lt;!-- Docker maven plugin --&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.spotify<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>docker-maven-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.0.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">configuration</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">imageName</span>&gt;</span>$</span><span class=\"hljs-template-variable\">&#123;docker.image.prefix&#125;</span><span class=\"xml\">/$</span><span class=\"hljs-template-variable\">&#123;project.artifactId&#125;</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">imageName</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dockerDirectory</span>&gt;</span>src/main/docker<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dockerDirectory</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">resources</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">resource</span>&gt;</span>\n                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">targetPath</span>&gt;</span>/<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">targetPath</span>&gt;</span>\n                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">directory</span>&gt;</span>$</span><span class=\"hljs-template-variable\">&#123;project.build.directory&#125;</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">directory</span>&gt;</span>\n                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">include</span>&gt;</span>$</span><span class=\"hljs-template-variable\">&#123;project.build.finalName&#125;</span><span class=\"xml\">.jar<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">include</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">resource</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">resources</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">configuration</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span>\n        <span class=\"hljs-comment\">&lt;!-- Docker maven plugin --&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugins</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">build</span>&gt;</span></span></code></pre>\n<p>在目录<code>src/main/docker</code>下创建 Dockerfile 文件，Dockerfile 文件用来说明如何来构建镜像。</p>\n<pre><code class=\"hljs undefined\"><span class=\"hljs-keyword\">FROM</span> openjdk:<span class=\"hljs-number\">8</span>-jdk-alpine\n<span class=\"hljs-keyword\">VOLUME</span><span class=\"bash\"> /tmp</span>\n<span class=\"hljs-keyword\">ADD</span><span class=\"bash\"> spring-boot-docker-1.0.jar app.jar</span>\n<span class=\"hljs-keyword\">ENTRYPOINT</span><span class=\"bash\"> [<span class=\"hljs-string\">\"java\"</span>,<span class=\"hljs-string\">\"-Djava.security.egd=file:/dev/./urandom\"</span>,<span class=\"hljs-string\">\"-jar\"</span>,<span class=\"hljs-string\">\"/app.jar\"</span>]</span></code></pre>\n<p>这个 Dockerfile 文件很简单，构建 Jdk 基础环境，添加 Spring Boot Jar 到镜像中，简单解释一下:</p>\n<ul>\n<li>FROM ，表示使用 Jdk8 环境 为基础镜像，如果镜像不是本地的会从 DockerHub 进行下载</li>\n<li>VOLUME ，VOLUME 指向了一个<code>/tmp</code>的目录，由于 Spring Boot 使用内置的 Tomcat 容器，Tomcat 默认使用<code>/tmp</code>作为工作目录。这个命令的效果是：在宿主机的<code>/var/lib/docker</code>目录下创建一个临时文件并把它链接到容器中的<code>/tmp</code>目录</li>\n<li>ADD ，拷贝文件并且重命名</li>\n<li>ENTRYPOINT ，为了缩短 Tomcat 的启动时间，添加<code>java.security.egd</code>的系统属性指向<code>/dev/urandom</code>作为 ENTRYPOINT</li>\n</ul>\n<blockquote>\n<p>这样 Spring Boot 项目添加 Docker 依赖就完成了。</p>\n</blockquote>\n<h2 id=\"构建打包环境\"><a href=\"#构建打包环境\" class=\"headerlink\" title=\"构建打包环境\"></a>构建打包环境</h2><p>我们需要有一个 Docker 环境来打包 Spring Boot 项目，在 Windows 搭建 Docker 环境很麻烦，因此我这里以 Centos 7 为例。</p>\n<h3 id=\"安装-Docker-环境\"><a href=\"#安装-Docker-环境\" class=\"headerlink\" title=\"安装 Docker 环境\"></a>安装 Docker 环境</h3><p>安装</p>\n<pre><code class=\"hljs undefined\">yum <span class=\"hljs-keyword\">install</span> docker</code></pre>\n<p>安装完成后，使用下面的命令来启动 docker 服务，并将其设置为开机启动：</p>\n<pre><code class=\"hljs undefined\">ervice docker <span class=\"hljs-built_in\">start</span>\nchkconfig docker <span class=\"hljs-keyword\">on</span>\n\n<span class=\"hljs-comment\">#LCTT 译注：此处采用了旧式的 sysv 语法，如采用CentOS 7中支持的新式 systemd 语法，如下：</span>\nsystemctl  <span class=\"hljs-built_in\">start</span> docker.service\nsystemctl  enable docker.service</code></pre>\n<p>使用 Docker 中国加速器</p>\n<pre><code class=\"hljs undefined\">vi  <span class=\"hljs-string\">/etc/docker/daemon.json</span>\n\n<span class=\"hljs-comment\">#添加后：</span>\n&#123;\n    <span class=\"hljs-string\">\"registry-mirrors\"</span>: [<span class=\"hljs-string\">\"https://registry.docker-cn.com\"</span>],\n    <span class=\"hljs-string\">\"live-restore\"</span>: <span class=\"hljs-literal\">true</span>\n&#125;</code></pre>\n<p>重新启动 docker</p>\n<pre><code class=\"hljs undefined\"><span class=\"hljs-attribute\">systemctl restart docker</span></code></pre>\n<p>输入<code>docker version</code> 返回版本信息则安装正常。</p>\n<h3 id=\"安装-JDK\"><a href=\"#安装-JDK\" class=\"headerlink\" title=\"安装 JDK\"></a>安装 JDK</h3><pre><code class=\"hljs undefined\"><span class=\"hljs-selector-tag\">yum</span> <span class=\"hljs-selector-tag\">-y</span> <span class=\"hljs-selector-tag\">install</span> <span class=\"hljs-selector-tag\">java-1</span><span class=\"hljs-selector-class\">.8</span><span class=\"hljs-selector-class\">.0-openjdk</span>*</code></pre>\n<p>配置环境变量<br>打开 <code>vim /etc/profile</code><br>添加一下内容</p>\n<pre><code class=\"hljs undefined\">export JAVA_HOME=/usr/lib/jvm/java-<span class=\"hljs-number\">1.8</span><span class=\"hljs-number\">.0</span>-openjdk-<span class=\"hljs-number\">1.8</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.161</span>-<span class=\"hljs-number\">0.b14</span>.el7_4.x86_64 \nexport PATH=$PATH:$JAVA_HOME/bin</code></pre>\n<p>修改完成之后，使其生效</p>\n<pre><code class=\"hljs undefined\"><span class=\"hljs-keyword\">source</span> <span class=\"hljs-regexp\">/etc/</span>profile</code></pre>\n<p>输入<code>java -version</code> 返回版本信息则安装正常。</p>\n<h3 id=\"安装-MAVEN\"><a href=\"#安装-MAVEN\" class=\"headerlink\" title=\"安装 MAVEN\"></a>安装 MAVEN</h3><p>下载：<code>http://mirrors.shu.edu.cn/apache/maven/maven-3/3.5.2/binaries/apache-maven-3.5.2-bin.tar.gz</code></p>\n<pre><code class=\"hljs undefined\">## 解压\ntar vxf apache-maven<span class=\"hljs-number\">-3.5</span><span class=\"hljs-number\">.2</span>-bin.tar.gz\n## 移动\nmv apache-maven<span class=\"hljs-number\">-3.5</span><span class=\"hljs-number\">.2</span> /usr/local/maven3</code></pre>\n<p>修改环境变量， 在<code>/etc/profile</code>中添加以下几行</p>\n<pre><code class=\"hljs undefined\"><span class=\"hljs-attribute\">MAVEN_HOME</span>=/usr/local/maven3\n<span class=\"hljs-builtin-name\">export</span> MAVEN_HOME\n<span class=\"hljs-builtin-name\">export</span> <span class=\"hljs-attribute\">PATH</span>=<span class=\"hljs-variable\">$&#123;PATH&#125;</span>:$&#123;MAVEN_HOME&#125;/bin</code></pre>\n<p>记得执行<code>source /etc/profile</code>使环境变量生效。</p>\n<p>输入<code>mvn -version</code> 返回版本信息则安装正常。</p>\n<blockquote>\n<p>这样整个构建环境就配置完成了。</p>\n</blockquote>\n<h2 id=\"使用-Docker-部署-Spring-Boot-项目\"><a href=\"#使用-Docker-部署-Spring-Boot-项目\" class=\"headerlink\" title=\"使用 Docker 部署 Spring Boot 项目\"></a>使用 Docker 部署 Spring Boot 项目</h2><p>将项目 <code>spring-boot-docker</code> 拷贝服务器中，进入项目路径下进行打包测试。</p>\n<pre><code class=\"hljs undefined\"><span class=\"hljs-meta\">#打包</span>\nmvn package\n<span class=\"hljs-meta\">#启动</span>\njava -jar target/spring-boot-docker<span class=\"hljs-number\">-1.0</span>.jar</code></pre>\n<p>看到 Spring Boot 的启动日志后表明环境配置没有问题，接下来我们使用 DockerFile 构建镜像。</p>\n<pre><code class=\"hljs undefined\">mvn <span class=\"hljs-keyword\">package</span> <span class=\"hljs-title\">docker:build</span></code></pre>\n<p>第一次构建可能有点慢，当看到以下内容的时候表明构建成功：</p>\n<pre><code class=\"hljs undefined\"><span class=\"hljs-built_in\">..</span>.\n<span class=\"hljs-keyword\">Step</span> 1 : <span class=\"hljs-keyword\">FROM</span> openjdk:8-jdk-alpine\n ---&gt; 224765a6bdbe\n<span class=\"hljs-keyword\">Step</span> 2 : VOLUME /tmp\n ---&gt; Using cache\n ---&gt; b4e86cc8654e\n<span class=\"hljs-keyword\">Step</span> 3 : <span class=\"hljs-builtin-name\">ADD</span> spring-boot-docker-1.0.jar app.jar\n ---&gt; a20fe75963ab\nRemoving intermediate container 593ee5e1ea51\n<span class=\"hljs-keyword\">Step</span> 4 : ENTRYPOINT java -Djava.security.<span class=\"hljs-attribute\">egd</span>=file:/dev/./urandom -jar /app.jar\n ---&gt; Running <span class=\"hljs-keyword\">in</span> 85d558a10cd4\n ---&gt; 7102f08b5e95\nRemoving intermediate container 85d558a10cd4\nSuccessfully built 7102f08b5e95\n[<span class=\"hljs-builtin-name\">INFO</span>] Built springboot/spring-boot-docker\n[<span class=\"hljs-builtin-name\">INFO</span>] ------------------------------------------------------------------------\n[<span class=\"hljs-builtin-name\">INFO</span>] BUILD SUCCESS\n[<span class=\"hljs-builtin-name\">INFO</span>] ------------------------------------------------------------------------\n[<span class=\"hljs-builtin-name\">INFO</span>] Total time: 54.346 s\n[<span class=\"hljs-builtin-name\">INFO</span>] Finished at: 2018-03-13T16:20:15+08:00\n[<span class=\"hljs-builtin-name\">INFO</span>] Final Memory: 42M/182M\n[<span class=\"hljs-builtin-name\">INFO</span>] ------------------------------------------------------------------------</code></pre>\n<p>使用<code>docker images</code>命令查看构建好的镜像：</p>\n<pre><code class=\"hljs undefined\">docker images\nREPOSITORY                      <span class=\"hljs-keyword\">TAG</span>                 <span class=\"hljs-title\">IMAGE</span> ID            CREATED             SIZE\nspringboot/spring-boot-docker   latest              <span class=\"hljs-number\">99</span>ce9468da74        <span class=\"hljs-number\">6</span> seconds ago       <span class=\"hljs-number\">117.5</span> MB</code></pre>\n<p><code>springboot/spring-boot-docker</code> 就是我们构建好的镜像，下一步就是运行该镜像</p>\n<pre><code class=\"hljs undefined\">docker <span class=\"hljs-keyword\">run</span><span class=\"bash\"> -p 8080:8080 -t springboot/spring-boot-docker</span></code></pre>\n<p>启动完成之后我们使用<code>docker ps</code>查看正在运行的镜像：</p>\n<pre><code class=\"hljs undefined\"><span class=\"hljs-string\">docker</span> <span class=\"hljs-string\">ps</span>\n<span class=\"hljs-string\">CONTAINER</span> <span class=\"hljs-string\">ID</span>        <span class=\"hljs-string\">IMAGE</span>                           <span class=\"hljs-string\">COMMAND</span>                  <span class=\"hljs-string\">CREATED</span>             <span class=\"hljs-string\">STATUS</span>              <span class=\"hljs-string\">PORTS</span>                    <span class=\"hljs-string\">NAMES</span>\n<span class=\"hljs-string\">049570da86a9</span>        <span class=\"hljs-string\">springboot/spring-boot-docker</span>   <span class=\"hljs-string\">\"java -Djava.security\"</span>   <span class=\"hljs-number\">30</span> <span class=\"hljs-string\">seconds</span> <span class=\"hljs-string\">ago</span>      <span class=\"hljs-string\">Up</span> <span class=\"hljs-number\">27</span> <span class=\"hljs-string\">seconds</span>       <span class=\"hljs-number\">0.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-string\">:8080-&gt;8080/tcp</span>   <span class=\"hljs-string\">determined_mahavira</span></code></pre>\n<p>可以看到我们构建的容器正在在运行，访问浏览器：<code>http://192.168.0.x:8080/</code>, 返回</p>\n<pre><code class=\"hljs undefined\">Hello Docker!</code></pre>\n<p>说明使用 Docker 部署 Spring Boot 项目成功！</p>\n<p><strong><a href=\"https://github.com/ityouknow/spring-boot-examples\" target=\"_blank\" rel=\"noopener\">示例代码 - github</a></strong></p>\n<p><strong><a href=\"https://gitee.com/ityouknow/spring-boot-examples\" target=\"_blank\" rel=\"noopener\">示例代码 - 码云</a></strong></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://spring.io/guides/gs/spring-boot-docker/\" target=\"_blank\" rel=\"noopener\">Spring Boot with Docker</a><br><a href=\"https://lw900925.github.io/docker/docker-springboot.html\" target=\"_blank\" rel=\"noopener\">Docker：Spring Boot 应用发布到 Docker</a></p>\n<blockquote>\n<p>本文由 <a href=\"http://ksria.com/simpread/\" target=\"_blank\" rel=\"noopener\">简悦 SimpRead</a> 转码</p>\n<p>原文地址 <a href=\"https://www.cnblogs.com/ityouknow/p/8599093.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/ityouknow/p/8599093.html</a></p>\n</blockquote>\n"},{"title":"TypeScript编码指南","date":"2019-06-05T08:17:00.000Z","_content":"\n# TypeScript编码指南\n\n![](https://cdn.pixabay.com/photo/2016/10/20/08/39/business-1754904_960_720.jpg)\n\n## 命名\n1. 使用 `PascalCase` 方式对类进行命名.\n2. 接口命名中不要使用前缀字母 `I` .\n3. 使用 `PascalCase` 方式对枚举值进行命名.\n4. 使用 `camelCase` 方式对函数进行命名.\n5. 使用 `camelCase` 方式对属性和本地变量进行命名.\n6. 私有属性命名不要使用前缀 `_` .\n7. 尽可能在命名中使用整个单词 .\n## [](https://github.com/Microsoft/TypeScript/wiki/Coding-guidelines#components)组件\n\n1. 每个逻辑组件一个文件 (例如： parser, scanner, emitter, checker).\n2. 不要添加新文件. :)\n3. 带有\".generated.*\"后缀的文件是自动生成的，不要手动去修改.\n## [](https://github.com/Microsoft/TypeScript/wiki/Coding-guidelines#types)类型\n\n1. 除非您需要跨多个组件共享，否则不要导出类型/函数.\n2. 不要向全局命名空间引入新类型/值.\n3. 共享类型应在 `types.ts` 中定义.\n4. 在文件中，应首先输入类型定义.\n## [](https://github.com/Microsoft/TypeScript/wiki/Coding-guidelines#null-and-undefined)`null` 和 `undefined`\n\n1. 使用 `undefined` , 不要使用 `null` .\n\n## 一般假设\n\n1. 将节点，符号等对象视为创建它们的组件之外的不可变对象。 不要改变它们。\n2. 创建后，默认情况下将数组视为不可变.\n\n## [](https://github.com/Microsoft/TypeScript/wiki/Coding-guidelines#classes)类\n\n1. 为保持一致性，请不要在核心编译器管道中使用类。 请改用函数闭包.\n\n## [](https://github.com/Microsoft/TypeScript/wiki/Coding-guidelines#flags)标志\n\n1. 应该将类型上超过2个相关的布尔属性转换为标志。\n\n## [](https://github.com/Microsoft/TypeScript/wiki/Coding-guidelines#comments)注释\n\n1. 对函数，接口，枚举和类使用JSDoc样式注释。\n\n## [](https://github.com/Microsoft/TypeScript/wiki/Coding-guidelines#strings)字符串\n\n1. 使用双引号.\n2. 用户可见的所有字符串都需要进行本地化（在diagnosticMessages.json中创建一个条目）。\n\n## 诊断信息\n\n1. 在句子末尾使用句号.\n2. 对不确定的实体使用不定的文章.\n3. 应该命名确定的实体（这是为变量名，类型名等等。）.\n4. 在陈述规则时，主题应该是单数的 (e.g. \"An external module cannot...\" instead of \"External modules cannot...\").\n5. 使用现在时.\n\n## 诊断消息代码\n诊断分为一般范围。 如果添加新的诊断消息，请使用大于相应范围中最后使用的数字的第一个整数。\n\n- 1000 句法消息的范围\n- 2000 用于语义消息\n- 4000 用于声明发出消息\n- 5000 用于编译器选项消息\n- 6000 用于命令行编译器消息\n- 7000 对于noImplicitAny消息\n\n## 一般构造\n出于各种原因，我们避免某些结构，并使用我们自己的一些结构。 其中：\n\n1. 不要使用 `for..in` 语句; 相反，使用 `ts.forEach` ， `ts.forEachKey` 和 `ts.forEachValue` 。 请注意它们的语义略有不同。\n2. 当它不是非常不方便时，尝试使用 `ts.forEach` ， `ts.map` 和 `ts.filter` 而不是循环。\n\n## [](https://github.com/Microsoft/TypeScript/wiki/Coding-guidelines#style)风格\n\n1. 使用箭头函数而不是匿名函数。必要时仅限制环绕箭头功能参数。例如， `（x）=> x + x` 错误，但以下是正确的:\n  1. `x => x + x`\n  2. `(x,y) => x + y`\n  3. `<T>(x: T, y: T) => x === y`\n2. 始终用花括号环绕循环和条件体。 允许在同一行上的语句省略大括号.\n3. 开放的花括号总是与任何必要条件都在同一条线上.\n4. 带括号的构造应该没有周围的空格。单个空格在这些构造中使用逗号，冒号和分号。 例如：\n  1. `for (var i = 0, n = str.length; i < 10; i++) { }`\n  2. `if (x < 10) { }`\n  3. `function f(x: number, y: string): void { }`\n5. 每个变量语句使用一个声明 <br />(i.e. 使用`var x = 1; var y = 2;` 而不是 `var x = 1, y = 2;`).\n4. `else` 与闭合的大括号分开.\n5. 每个缩进使用4个空格.\n\n> 原文地址: [https://github.com/Microsoft/TypeScript/wiki/Coding-guidelines](https://github.com/Microsoft/TypeScript/wiki/Coding-guidelines)\n\n\n## 总结\n在实际开发过程中，可能有些编码风格和文中的有不同，但只要风格统一就好。不要不同的风格混搭使用。<br />比如：\n\n1. 字符串不要一会使用单引号，一会使用双引号\n2. 缩进有的文件使用2个空格，有的文件使用4个\n","source":"_posts/0019-typescript-guidelines.md","raw":"---\ntitle: TypeScript编码指南\ndate: 2019-06-05 16:17\ntags:\n    - TypeScript\ncategories:\n    - 前端\n---\n\n# TypeScript编码指南\n\n![](https://cdn.pixabay.com/photo/2016/10/20/08/39/business-1754904_960_720.jpg)\n\n## 命名\n1. 使用 `PascalCase` 方式对类进行命名.\n2. 接口命名中不要使用前缀字母 `I` .\n3. 使用 `PascalCase` 方式对枚举值进行命名.\n4. 使用 `camelCase` 方式对函数进行命名.\n5. 使用 `camelCase` 方式对属性和本地变量进行命名.\n6. 私有属性命名不要使用前缀 `_` .\n7. 尽可能在命名中使用整个单词 .\n## [](https://github.com/Microsoft/TypeScript/wiki/Coding-guidelines#components)组件\n\n1. 每个逻辑组件一个文件 (例如： parser, scanner, emitter, checker).\n2. 不要添加新文件. :)\n3. 带有\".generated.*\"后缀的文件是自动生成的，不要手动去修改.\n## [](https://github.com/Microsoft/TypeScript/wiki/Coding-guidelines#types)类型\n\n1. 除非您需要跨多个组件共享，否则不要导出类型/函数.\n2. 不要向全局命名空间引入新类型/值.\n3. 共享类型应在 `types.ts` 中定义.\n4. 在文件中，应首先输入类型定义.\n## [](https://github.com/Microsoft/TypeScript/wiki/Coding-guidelines#null-and-undefined)`null` 和 `undefined`\n\n1. 使用 `undefined` , 不要使用 `null` .\n\n## 一般假设\n\n1. 将节点，符号等对象视为创建它们的组件之外的不可变对象。 不要改变它们。\n2. 创建后，默认情况下将数组视为不可变.\n\n## [](https://github.com/Microsoft/TypeScript/wiki/Coding-guidelines#classes)类\n\n1. 为保持一致性，请不要在核心编译器管道中使用类。 请改用函数闭包.\n\n## [](https://github.com/Microsoft/TypeScript/wiki/Coding-guidelines#flags)标志\n\n1. 应该将类型上超过2个相关的布尔属性转换为标志。\n\n## [](https://github.com/Microsoft/TypeScript/wiki/Coding-guidelines#comments)注释\n\n1. 对函数，接口，枚举和类使用JSDoc样式注释。\n\n## [](https://github.com/Microsoft/TypeScript/wiki/Coding-guidelines#strings)字符串\n\n1. 使用双引号.\n2. 用户可见的所有字符串都需要进行本地化（在diagnosticMessages.json中创建一个条目）。\n\n## 诊断信息\n\n1. 在句子末尾使用句号.\n2. 对不确定的实体使用不定的文章.\n3. 应该命名确定的实体（这是为变量名，类型名等等。）.\n4. 在陈述规则时，主题应该是单数的 (e.g. \"An external module cannot...\" instead of \"External modules cannot...\").\n5. 使用现在时.\n\n## 诊断消息代码\n诊断分为一般范围。 如果添加新的诊断消息，请使用大于相应范围中最后使用的数字的第一个整数。\n\n- 1000 句法消息的范围\n- 2000 用于语义消息\n- 4000 用于声明发出消息\n- 5000 用于编译器选项消息\n- 6000 用于命令行编译器消息\n- 7000 对于noImplicitAny消息\n\n## 一般构造\n出于各种原因，我们避免某些结构，并使用我们自己的一些结构。 其中：\n\n1. 不要使用 `for..in` 语句; 相反，使用 `ts.forEach` ， `ts.forEachKey` 和 `ts.forEachValue` 。 请注意它们的语义略有不同。\n2. 当它不是非常不方便时，尝试使用 `ts.forEach` ， `ts.map` 和 `ts.filter` 而不是循环。\n\n## [](https://github.com/Microsoft/TypeScript/wiki/Coding-guidelines#style)风格\n\n1. 使用箭头函数而不是匿名函数。必要时仅限制环绕箭头功能参数。例如， `（x）=> x + x` 错误，但以下是正确的:\n  1. `x => x + x`\n  2. `(x,y) => x + y`\n  3. `<T>(x: T, y: T) => x === y`\n2. 始终用花括号环绕循环和条件体。 允许在同一行上的语句省略大括号.\n3. 开放的花括号总是与任何必要条件都在同一条线上.\n4. 带括号的构造应该没有周围的空格。单个空格在这些构造中使用逗号，冒号和分号。 例如：\n  1. `for (var i = 0, n = str.length; i < 10; i++) { }`\n  2. `if (x < 10) { }`\n  3. `function f(x: number, y: string): void { }`\n5. 每个变量语句使用一个声明 <br />(i.e. 使用`var x = 1; var y = 2;` 而不是 `var x = 1, y = 2;`).\n4. `else` 与闭合的大括号分开.\n5. 每个缩进使用4个空格.\n\n> 原文地址: [https://github.com/Microsoft/TypeScript/wiki/Coding-guidelines](https://github.com/Microsoft/TypeScript/wiki/Coding-guidelines)\n\n\n## 总结\n在实际开发过程中，可能有些编码风格和文中的有不同，但只要风格统一就好。不要不同的风格混搭使用。<br />比如：\n\n1. 字符串不要一会使用单引号，一会使用双引号\n2. 缩进有的文件使用2个空格，有的文件使用4个\n","slug":"0019-typescript-guidelines","published":1,"updated":"2020-07-17T02:32:01.167Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcpntugk002404oi902b4akh","content":"<h1 id=\"TypeScript编码指南\"><a href=\"#TypeScript编码指南\" class=\"headerlink\" title=\"TypeScript编码指南\"></a>TypeScript编码指南</h1><p><img src=\"https://cdn.pixabay.com/photo/2016/10/20/08/39/business-1754904_960_720.jpg\" srcset=\"/img/loading.gif\" alt></p>\n<h2 id=\"命名\"><a href=\"#命名\" class=\"headerlink\" title=\"命名\"></a>命名</h2><ol>\n<li>使用 <code>PascalCase</code> 方式对类进行命名.</li>\n<li>接口命名中不要使用前缀字母 <code>I</code> .</li>\n<li>使用 <code>PascalCase</code> 方式对枚举值进行命名.</li>\n<li>使用 <code>camelCase</code> 方式对函数进行命名.</li>\n<li>使用 <code>camelCase</code> 方式对属性和本地变量进行命名.</li>\n<li>私有属性命名不要使用前缀 <code>_</code> .</li>\n<li><p>尽可能在命名中使用整个单词 .</p>\n<h2 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a><a href=\"https://github.com/Microsoft/TypeScript/wiki/Coding-guidelines#components\" target=\"_blank\" rel=\"noopener\"></a>组件</h2></li>\n<li><p>每个逻辑组件一个文件 (例如： parser, scanner, emitter, checker).</p>\n</li>\n<li>不要添加新文件. :)</li>\n<li><p>带有”.generated.*”后缀的文件是自动生成的，不要手动去修改.</p>\n<h2 id=\"类型\"><a href=\"#类型\" class=\"headerlink\" title=\"类型\"></a><a href=\"https://github.com/Microsoft/TypeScript/wiki/Coding-guidelines#types\" target=\"_blank\" rel=\"noopener\"></a>类型</h2></li>\n<li><p>除非您需要跨多个组件共享，否则不要导出类型/函数.</p>\n</li>\n<li>不要向全局命名空间引入新类型/值.</li>\n<li>共享类型应在 <code>types.ts</code> 中定义.</li>\n<li><p>在文件中，应首先输入类型定义.</p>\n<h2 id=\"null-和-undefined\"><a href=\"#null-和-undefined\" class=\"headerlink\" title=\"null 和 undefined\"></a><a href=\"https://github.com/Microsoft/TypeScript/wiki/Coding-guidelines#null-and-undefined\" target=\"_blank\" rel=\"noopener\"></a><code>null</code> 和 <code>undefined</code></h2></li>\n<li><p>使用 <code>undefined</code> , 不要使用 <code>null</code> .</p>\n</li>\n</ol>\n<h2 id=\"一般假设\"><a href=\"#一般假设\" class=\"headerlink\" title=\"一般假设\"></a>一般假设</h2><ol>\n<li>将节点，符号等对象视为创建它们的组件之外的不可变对象。 不要改变它们。</li>\n<li>创建后，默认情况下将数组视为不可变.</li>\n</ol>\n<h2 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a><a href=\"https://github.com/Microsoft/TypeScript/wiki/Coding-guidelines#classes\" target=\"_blank\" rel=\"noopener\"></a>类</h2><ol>\n<li>为保持一致性，请不要在核心编译器管道中使用类。 请改用函数闭包.</li>\n</ol>\n<h2 id=\"标志\"><a href=\"#标志\" class=\"headerlink\" title=\"标志\"></a><a href=\"https://github.com/Microsoft/TypeScript/wiki/Coding-guidelines#flags\" target=\"_blank\" rel=\"noopener\"></a>标志</h2><ol>\n<li>应该将类型上超过2个相关的布尔属性转换为标志。</li>\n</ol>\n<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a><a href=\"https://github.com/Microsoft/TypeScript/wiki/Coding-guidelines#comments\" target=\"_blank\" rel=\"noopener\"></a>注释</h2><ol>\n<li>对函数，接口，枚举和类使用JSDoc样式注释。</li>\n</ol>\n<h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a><a href=\"https://github.com/Microsoft/TypeScript/wiki/Coding-guidelines#strings\" target=\"_blank\" rel=\"noopener\"></a>字符串</h2><ol>\n<li>使用双引号.</li>\n<li>用户可见的所有字符串都需要进行本地化（在diagnosticMessages.json中创建一个条目）。</li>\n</ol>\n<h2 id=\"诊断信息\"><a href=\"#诊断信息\" class=\"headerlink\" title=\"诊断信息\"></a>诊断信息</h2><ol>\n<li>在句子末尾使用句号.</li>\n<li>对不确定的实体使用不定的文章.</li>\n<li>应该命名确定的实体（这是为变量名，类型名等等。）.</li>\n<li>在陈述规则时，主题应该是单数的 (e.g. “An external module cannot…” instead of “External modules cannot…”).</li>\n<li>使用现在时.</li>\n</ol>\n<h2 id=\"诊断消息代码\"><a href=\"#诊断消息代码\" class=\"headerlink\" title=\"诊断消息代码\"></a>诊断消息代码</h2><p>诊断分为一般范围。 如果添加新的诊断消息，请使用大于相应范围中最后使用的数字的第一个整数。</p>\n<ul>\n<li>1000 句法消息的范围</li>\n<li>2000 用于语义消息</li>\n<li>4000 用于声明发出消息</li>\n<li>5000 用于编译器选项消息</li>\n<li>6000 用于命令行编译器消息</li>\n<li>7000 对于noImplicitAny消息</li>\n</ul>\n<h2 id=\"一般构造\"><a href=\"#一般构造\" class=\"headerlink\" title=\"一般构造\"></a>一般构造</h2><p>出于各种原因，我们避免某些结构，并使用我们自己的一些结构。 其中：</p>\n<ol>\n<li>不要使用 <code>for..in</code> 语句; 相反，使用 <code>ts.forEach</code> ， <code>ts.forEachKey</code> 和 <code>ts.forEachValue</code> 。 请注意它们的语义略有不同。</li>\n<li>当它不是非常不方便时，尝试使用 <code>ts.forEach</code> ， <code>ts.map</code> 和 <code>ts.filter</code> 而不是循环。</li>\n</ol>\n<h2 id=\"风格\"><a href=\"#风格\" class=\"headerlink\" title=\"风格\"></a><a href=\"https://github.com/Microsoft/TypeScript/wiki/Coding-guidelines#style\" target=\"_blank\" rel=\"noopener\"></a>风格</h2><ol>\n<li>使用箭头函数而不是匿名函数。必要时仅限制环绕箭头功能参数。例如， <code>（x）=&gt; x + x</code> 错误，但以下是正确的:<ol>\n<li><code>x =&gt; x + x</code></li>\n<li><code>(x,y) =&gt; x + y</code></li>\n<li><code>&lt;T&gt;(x: T, y: T) =&gt; x === y</code></li>\n</ol>\n</li>\n<li>始终用花括号环绕循环和条件体。 允许在同一行上的语句省略大括号.</li>\n<li>开放的花括号总是与任何必要条件都在同一条线上.</li>\n<li>带括号的构造应该没有周围的空格。单个空格在这些构造中使用逗号，冒号和分号。 例如：<ol>\n<li><code>for (var i = 0, n = str.length; i &lt; 10; i++) { }</code></li>\n<li><code>if (x &lt; 10) { }</code></li>\n<li><code>function f(x: number, y: string): void { }</code></li>\n</ol>\n</li>\n<li>每个变量语句使用一个声明 <br>(i.e. 使用<code>var x = 1; var y = 2;</code> 而不是 <code>var x = 1, y = 2;</code>).</li>\n<li><code>else</code> 与闭合的大括号分开.</li>\n<li>每个缩进使用4个空格.</li>\n</ol>\n<blockquote>\n<p>原文地址: <a href=\"https://github.com/Microsoft/TypeScript/wiki/Coding-guidelines\" target=\"_blank\" rel=\"noopener\">https://github.com/Microsoft/TypeScript/wiki/Coding-guidelines</a></p>\n</blockquote>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>在实际开发过程中，可能有些编码风格和文中的有不同，但只要风格统一就好。不要不同的风格混搭使用。<br>比如：</p>\n<ol>\n<li>字符串不要一会使用单引号，一会使用双引号</li>\n<li>缩进有的文件使用2个空格，有的文件使用4个</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"TypeScript编码指南\"><a href=\"#TypeScript编码指南\" class=\"headerlink\" title=\"TypeScript编码指南\"></a>TypeScript编码指南</h1><p><img src=\"https://cdn.pixabay.com/photo/2016/10/20/08/39/business-1754904_960_720.jpg\" srcset=\"/img/loading.gif\" alt></p>\n<h2 id=\"命名\"><a href=\"#命名\" class=\"headerlink\" title=\"命名\"></a>命名</h2><ol>\n<li>使用 <code>PascalCase</code> 方式对类进行命名.</li>\n<li>接口命名中不要使用前缀字母 <code>I</code> .</li>\n<li>使用 <code>PascalCase</code> 方式对枚举值进行命名.</li>\n<li>使用 <code>camelCase</code> 方式对函数进行命名.</li>\n<li>使用 <code>camelCase</code> 方式对属性和本地变量进行命名.</li>\n<li>私有属性命名不要使用前缀 <code>_</code> .</li>\n<li><p>尽可能在命名中使用整个单词 .</p>\n<h2 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a><a href=\"https://github.com/Microsoft/TypeScript/wiki/Coding-guidelines#components\" target=\"_blank\" rel=\"noopener\"></a>组件</h2></li>\n<li><p>每个逻辑组件一个文件 (例如： parser, scanner, emitter, checker).</p>\n</li>\n<li>不要添加新文件. :)</li>\n<li><p>带有”.generated.*”后缀的文件是自动生成的，不要手动去修改.</p>\n<h2 id=\"类型\"><a href=\"#类型\" class=\"headerlink\" title=\"类型\"></a><a href=\"https://github.com/Microsoft/TypeScript/wiki/Coding-guidelines#types\" target=\"_blank\" rel=\"noopener\"></a>类型</h2></li>\n<li><p>除非您需要跨多个组件共享，否则不要导出类型/函数.</p>\n</li>\n<li>不要向全局命名空间引入新类型/值.</li>\n<li>共享类型应在 <code>types.ts</code> 中定义.</li>\n<li><p>在文件中，应首先输入类型定义.</p>\n<h2 id=\"null-和-undefined\"><a href=\"#null-和-undefined\" class=\"headerlink\" title=\"null 和 undefined\"></a><a href=\"https://github.com/Microsoft/TypeScript/wiki/Coding-guidelines#null-and-undefined\" target=\"_blank\" rel=\"noopener\"></a><code>null</code> 和 <code>undefined</code></h2></li>\n<li><p>使用 <code>undefined</code> , 不要使用 <code>null</code> .</p>\n</li>\n</ol>\n<h2 id=\"一般假设\"><a href=\"#一般假设\" class=\"headerlink\" title=\"一般假设\"></a>一般假设</h2><ol>\n<li>将节点，符号等对象视为创建它们的组件之外的不可变对象。 不要改变它们。</li>\n<li>创建后，默认情况下将数组视为不可变.</li>\n</ol>\n<h2 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a><a href=\"https://github.com/Microsoft/TypeScript/wiki/Coding-guidelines#classes\" target=\"_blank\" rel=\"noopener\"></a>类</h2><ol>\n<li>为保持一致性，请不要在核心编译器管道中使用类。 请改用函数闭包.</li>\n</ol>\n<h2 id=\"标志\"><a href=\"#标志\" class=\"headerlink\" title=\"标志\"></a><a href=\"https://github.com/Microsoft/TypeScript/wiki/Coding-guidelines#flags\" target=\"_blank\" rel=\"noopener\"></a>标志</h2><ol>\n<li>应该将类型上超过2个相关的布尔属性转换为标志。</li>\n</ol>\n<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a><a href=\"https://github.com/Microsoft/TypeScript/wiki/Coding-guidelines#comments\" target=\"_blank\" rel=\"noopener\"></a>注释</h2><ol>\n<li>对函数，接口，枚举和类使用JSDoc样式注释。</li>\n</ol>\n<h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a><a href=\"https://github.com/Microsoft/TypeScript/wiki/Coding-guidelines#strings\" target=\"_blank\" rel=\"noopener\"></a>字符串</h2><ol>\n<li>使用双引号.</li>\n<li>用户可见的所有字符串都需要进行本地化（在diagnosticMessages.json中创建一个条目）。</li>\n</ol>\n<h2 id=\"诊断信息\"><a href=\"#诊断信息\" class=\"headerlink\" title=\"诊断信息\"></a>诊断信息</h2><ol>\n<li>在句子末尾使用句号.</li>\n<li>对不确定的实体使用不定的文章.</li>\n<li>应该命名确定的实体（这是为变量名，类型名等等。）.</li>\n<li>在陈述规则时，主题应该是单数的 (e.g. “An external module cannot…” instead of “External modules cannot…”).</li>\n<li>使用现在时.</li>\n</ol>\n<h2 id=\"诊断消息代码\"><a href=\"#诊断消息代码\" class=\"headerlink\" title=\"诊断消息代码\"></a>诊断消息代码</h2><p>诊断分为一般范围。 如果添加新的诊断消息，请使用大于相应范围中最后使用的数字的第一个整数。</p>\n<ul>\n<li>1000 句法消息的范围</li>\n<li>2000 用于语义消息</li>\n<li>4000 用于声明发出消息</li>\n<li>5000 用于编译器选项消息</li>\n<li>6000 用于命令行编译器消息</li>\n<li>7000 对于noImplicitAny消息</li>\n</ul>\n<h2 id=\"一般构造\"><a href=\"#一般构造\" class=\"headerlink\" title=\"一般构造\"></a>一般构造</h2><p>出于各种原因，我们避免某些结构，并使用我们自己的一些结构。 其中：</p>\n<ol>\n<li>不要使用 <code>for..in</code> 语句; 相反，使用 <code>ts.forEach</code> ， <code>ts.forEachKey</code> 和 <code>ts.forEachValue</code> 。 请注意它们的语义略有不同。</li>\n<li>当它不是非常不方便时，尝试使用 <code>ts.forEach</code> ， <code>ts.map</code> 和 <code>ts.filter</code> 而不是循环。</li>\n</ol>\n<h2 id=\"风格\"><a href=\"#风格\" class=\"headerlink\" title=\"风格\"></a><a href=\"https://github.com/Microsoft/TypeScript/wiki/Coding-guidelines#style\" target=\"_blank\" rel=\"noopener\"></a>风格</h2><ol>\n<li>使用箭头函数而不是匿名函数。必要时仅限制环绕箭头功能参数。例如， <code>（x）=&gt; x + x</code> 错误，但以下是正确的:<ol>\n<li><code>x =&gt; x + x</code></li>\n<li><code>(x,y) =&gt; x + y</code></li>\n<li><code>&lt;T&gt;(x: T, y: T) =&gt; x === y</code></li>\n</ol>\n</li>\n<li>始终用花括号环绕循环和条件体。 允许在同一行上的语句省略大括号.</li>\n<li>开放的花括号总是与任何必要条件都在同一条线上.</li>\n<li>带括号的构造应该没有周围的空格。单个空格在这些构造中使用逗号，冒号和分号。 例如：<ol>\n<li><code>for (var i = 0, n = str.length; i &lt; 10; i++) { }</code></li>\n<li><code>if (x &lt; 10) { }</code></li>\n<li><code>function f(x: number, y: string): void { }</code></li>\n</ol>\n</li>\n<li>每个变量语句使用一个声明 <br>(i.e. 使用<code>var x = 1; var y = 2;</code> 而不是 <code>var x = 1, y = 2;</code>).</li>\n<li><code>else</code> 与闭合的大括号分开.</li>\n<li>每个缩进使用4个空格.</li>\n</ol>\n<blockquote>\n<p>原文地址: <a href=\"https://github.com/Microsoft/TypeScript/wiki/Coding-guidelines\" target=\"_blank\" rel=\"noopener\">https://github.com/Microsoft/TypeScript/wiki/Coding-guidelines</a></p>\n</blockquote>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>在实际开发过程中，可能有些编码风格和文中的有不同，但只要风格统一就好。不要不同的风格混搭使用。<br>比如：</p>\n<ol>\n<li>字符串不要一会使用单引号，一会使用双引号</li>\n<li>缩进有的文件使用2个空格，有的文件使用4个</li>\n</ol>\n"},{"title":"代码Review最佳实践","date":"2019-11-29T08:17:00.000Z","_content":"\n![](https://i.loli.net/2020/01/21/d4zatYNGZIxVrsS.png)\n\n在实际工作中，经常会遇到项目交接或者二次开发的情况，在这个过程中，我们经常会听到“这是什么垃圾代码啊”。有时候我们翻看自己几年前写的代码，也会忍不住鄙视自己。\n\n在软件开发过程中，代码Review是一个可以提高代码质量，统一代码规范，分享技术知识，从而形成增长团队的有效手段。\n\n在代码Review过程中，存在两个角色：\n\n- 提交者。提交者就是代码的提交人，他发起了Review事件。同样也可以称作被审查者。\n- 审查者。审查者是对代码进行Review的人。\n\n在本文中，主要涉及了以下内容：\n\n- 为什么要代码Review\n- 何时代码Review\n- 准备代码Review\n- 进行代码Review\n- 代码Review示例\n\n## 动机\n通过代码Review可以提供代码质量，并且我们还可以通过代码Review来提高自我的能力。<br />比如：\n\n- 通过代码Review，审查人员可以看到本次变更的内容：处理TODO，代码优化等。提交者的代码被认可，可以提升自我成就感。\n- 可以分享知识：\n  - 代码Review可以是提交内容更加明确，并且使团队成员更进一步了解项目，为以后的开发做知识积累\n  - 团队成员可以从提交者的代码中学习新的技术、算法等等\n  - 通过代码Review，提交者可以从审查人员的评审中获得相关的技术知识\n  - 可以增加团队交流，形成增长团队\n- 可以形成统一的代码规范，方便阅读和理解\n- 审查者因为没有完整的上下文，只看到代码片段，更容易发现问题，提高代码片段的可复用率\n- 更容易检查拼写错误\n- 可以避免常规的安全问题等\n\n## Review什么\n对于代码Review什么内容，可以有很多的方面，如：变量命名、代码结构、算法、架构、安全等等。具体内容没有一个统一的标准，但是在一个团队中，是需要形成一个统一的标准的，这样更有益于团队的可持续发展。\n\n## 什么时候Review\n代码需要在测试、CI之后，在合并上线分支之前。测试、CI等确保了逻辑是正确的。因为需要保证线上的代码是最优的，所以Review需要在合并分支之前。\n\n\n## 准备Review\n提交者需要提交一个便于Review的代码，避免浪费审查者的精力和时间：\n\n- 范围和大小。一次提交Review的代码不应过大，如果太大需要耗费一天的时间，那就说明提交Review的代码不够合理，应分解成多次Review提交。\n- 只提交已完成的，并且自检及自测过的代码。提交Review的代码，一定是已经开发完的，否则Review将没有意义。它也一定是经过自测的代码，对没有通过自测的代码进行Review，同样没有意义。\n- 重构不应该改变代码行为，同样改变代码行为的不应该包含重构内容。每次提交的变更目标应该是明确的，且是单一的，不能将重构和开发新功能合并到一起提交。\n\n## 进行Review\n代码Review一定要及时，不能因为卡在没有进行Review而影响项目进度。如果审查者时间不允许，应立即告知提交者，让他找其他人对代码进行Review。\n\n作为审查者，有责任执行编码标准并保持质量水准。 审查代码更多是一门艺术，而不是一门科学。 学习它的唯一方法就是去做。 有经验的审查者需要考虑让经验不足的审查者先Review，以此来提高他们的Review经验。<br /> <br />假设提交者遵循上面的指南（尤其是关于自我检查并确保代码可以运行的准则），审查者在代码Review过程中应注意的事项应注意一下事项：\n\n- 目标\n  - 这段代码是否达到了提交者的目的？ 每次更改都应有特定的原因（新功能，重构，错误修正等）。 提交的代码是否真的达到了这个目的？\n- 提问\n  - 函数和类应该存在是有原因的。 当原因对于审查者来说不清楚时，这可能表明该代码需要重写、添加注释等等。\n- 实现\n  - 考虑一下您将如何解决问题。 如果不同，那为什么呢？ 您的代码可以处理更多（边缘）情况吗？ 它更短、更容易、更清洁、更快、更安全，但在功能上等效吗？ 您发现当前代码未捕获的异常了吗？\n  - 您看到有用的抽象的潜力吗？ 部分重复的代码通常表示可以提取出更抽象或更通用的功能，然后在不同的上下文中重新使用。\n  - 像对手一样思考，但要对此保持友善。 尝试通过提出有问题的配置、输入数据来破坏他们的代码，从而找出程序里面的漏洞。\n  - 考虑库或现有产品代码。 当某人重新实现现有功能时，通常是因为他们不知道该功能已经存在。 有时，有意复制代码或功能，例如，以避免依赖。 在这种情况下，代码注释可以阐明意图。 现有库是否已提供引入的功能？\n  - 更改是否遵循标准模式？ 既定的代码库通常表现出围绕命名约定，程序逻辑分解，数据类型定义等的模式。通常希望根据现有模式来实现更改\n  - 更改是否添加了编译时或运行时依赖项（尤其是在子项目之间）？ 我们希望保持我们的产品松散耦合，并尽可能减少依赖。 对依赖项和构建系统的更改应进行严格审查。\n- 易读性与风格\n  - 考虑一下您的阅读经验。 您是否在合理的时间内掌握了这些概念？ 流程是否合理，变量和方法名称是否易于理解？ 您是否能够跟踪多个文件或功能？ 您是否因名称不一致而推迟？\n  - 该代码是否遵守编码准则和代码样式？ 代码在样式，API约定等方面是否与项目一致？ 如上所述，我们更喜欢使用自动化工具解决代码规范。\n  - 此代码是否有TODO？ TODO只是堆积在代码中，并且随着时间的流逝变得陈旧。 让作者在GitHub Issues或JIRA上提交记录，并将发行号附加到TODO。 建议的代码更改不应包含注释掉的代码。\n- 可维修性\n  - 阅读测试。 如果没有测试，应该进行测试，请提交者写一些测试。 真正不可测试的功能很少见，而不幸的是，未经测试的功能实现很常见。 自己检查测试：它们是否涵盖了有趣的案例？ 它们可读吗？ CR是否会降低总体测试覆盖率？ 考虑一下此代码可能如何破解。 测试的样式标准通常与核心代码不同，但仍然很重要。\n  - 此CR是否存在破坏测试代码，登台堆栈或集成测试的风险？ 这些通常不作为预提交/合并检查的一部分进行检查，但是让它们崩溃对每个人来说都是痛苦的。 要查找的特定内容是：删除测试实用程序或模式，配置更改以及工件布局/结构更改。\n  - 此更改会破坏向后兼容性吗？ 如果是这样，此时可以合并更改，还是应该将其推送到更高版本中？ 中断可能包括数据库或架构更改，公共API更改，用户工作流更改等。\n  - 此代码是否需要集成测试？ 有时，单独使用单元测试无法对代码进行充分的测试，尤其是当代码与外部系统或配置交互时。\n  - 留下有关代码级文档，注释和提交消息的反馈。 多余的注释使代码混乱，而简短的提交消息使将来的贡献者迷惑不解。 这并不总是适用，但是高质量的评论和提交消息将使他们自己付出代价。 （想想您曾经看到过出色的或真正可怕的提交信息或评论。）\n  - 外部文档是否已更新？ 如果您的项目维护自述文件，CHANGELOG或其他文档，是否已对其进行更新以反映更改？ 过时的文档可能比没有文档更令人困惑，并且将来对其进行修复要比现在进行更新要花费更多的成本。\n- 安全\n  - 验证API端点是否执行与其余代码库一致的适当授权和身份验证。 检查其他常见弱点，例如弱配置，恶意用户输入，缺少日志事件等。如有疑问，请向应用程序安全专家咨询Review。\n- 评论\n  - 简洁、友好、可操作的。不要忘了赞扬简洁、可读、高效、优雅的代码。 相反，拒绝或不批准代码Review并不粗鲁。 如果更改是多余的或无关紧要的，请拒绝并说明。 \n- 面对面Review\n  - 对于大多数代码检查而言，基于异步差异的工具（例如Reviewable，Gerrit或GitHub）都是不错的选择。 当在同一台屏幕或投影仪前亲自进行或通过VTC或屏幕共享工具远程执行时，复杂的更改或具有不同专业知识或经验的各方之间的评论可以更有效。\n  \n## 示例\n在以下示例中，建议的评论注释在代码块中由 `// R：...` 注释标识。\n\n### 命名不一致\n\n```java\nclass MyClass {\n  private int countTotalPageVisits;  //R: 变量命名不一致\n  private int uniqueUsersCount;\n}\n```\n\n### 方法签名不一致\n\n```java\ninterface MyInterface {\n  /** Returns {@link Optional#empty} if s cannot be extracted. */\n  public Optional<String> extractString(String s);  \n    \n  /** Returns null if {@code s} cannot be rewritten. */\n  //R: 应该协调返回值：在这里也使用Optional <>\n  public String rewriteString(String s);\n}\n```\n\n### 类库使用\n\n```java\n//R: 使用Guava's MapJoiner替换以下方法\nString joinAndConcatenate(Map<String, String> map, String keyValueSeparator, String keySeparator);\n```\n\n### 个人倾向\n\n```java\n//R: nit: I usually prefer numFoo over fooCount; up to you,\n//  but we should keep it consistent in this project\nint dayCount; \n```\n\n### Bugs\n\n```java\n//R: 代码处理numIterations+1的情况，如果是故意这样处理，是否考虑变更numIterations值\nfor (int i = 0; i <= numIterations; ++i) {\n  ...\n}\n```\n\n### 架构疑虑\n\n```java\n//R: I think we should avoid the dependency on OtherService. \n// Can we discuss this in person?\notherService.call(); \n```\n\n## 总结\n通过有效的代码Review，可以提高项目代码质量，使团队开发人员形成统一风格，并同步项目细节。同时还可以提高团队人员的知识，提升自我。\n\n","source":"_posts/0020-code-review-best-practice.md","raw":"---\ntitle: 代码Review最佳实践\ndate: 2019-11-29 16:17\n---\n\n![](https://i.loli.net/2020/01/21/d4zatYNGZIxVrsS.png)\n\n在实际工作中，经常会遇到项目交接或者二次开发的情况，在这个过程中，我们经常会听到“这是什么垃圾代码啊”。有时候我们翻看自己几年前写的代码，也会忍不住鄙视自己。\n\n在软件开发过程中，代码Review是一个可以提高代码质量，统一代码规范，分享技术知识，从而形成增长团队的有效手段。\n\n在代码Review过程中，存在两个角色：\n\n- 提交者。提交者就是代码的提交人，他发起了Review事件。同样也可以称作被审查者。\n- 审查者。审查者是对代码进行Review的人。\n\n在本文中，主要涉及了以下内容：\n\n- 为什么要代码Review\n- 何时代码Review\n- 准备代码Review\n- 进行代码Review\n- 代码Review示例\n\n## 动机\n通过代码Review可以提供代码质量，并且我们还可以通过代码Review来提高自我的能力。<br />比如：\n\n- 通过代码Review，审查人员可以看到本次变更的内容：处理TODO，代码优化等。提交者的代码被认可，可以提升自我成就感。\n- 可以分享知识：\n  - 代码Review可以是提交内容更加明确，并且使团队成员更进一步了解项目，为以后的开发做知识积累\n  - 团队成员可以从提交者的代码中学习新的技术、算法等等\n  - 通过代码Review，提交者可以从审查人员的评审中获得相关的技术知识\n  - 可以增加团队交流，形成增长团队\n- 可以形成统一的代码规范，方便阅读和理解\n- 审查者因为没有完整的上下文，只看到代码片段，更容易发现问题，提高代码片段的可复用率\n- 更容易检查拼写错误\n- 可以避免常规的安全问题等\n\n## Review什么\n对于代码Review什么内容，可以有很多的方面，如：变量命名、代码结构、算法、架构、安全等等。具体内容没有一个统一的标准，但是在一个团队中，是需要形成一个统一的标准的，这样更有益于团队的可持续发展。\n\n## 什么时候Review\n代码需要在测试、CI之后，在合并上线分支之前。测试、CI等确保了逻辑是正确的。因为需要保证线上的代码是最优的，所以Review需要在合并分支之前。\n\n\n## 准备Review\n提交者需要提交一个便于Review的代码，避免浪费审查者的精力和时间：\n\n- 范围和大小。一次提交Review的代码不应过大，如果太大需要耗费一天的时间，那就说明提交Review的代码不够合理，应分解成多次Review提交。\n- 只提交已完成的，并且自检及自测过的代码。提交Review的代码，一定是已经开发完的，否则Review将没有意义。它也一定是经过自测的代码，对没有通过自测的代码进行Review，同样没有意义。\n- 重构不应该改变代码行为，同样改变代码行为的不应该包含重构内容。每次提交的变更目标应该是明确的，且是单一的，不能将重构和开发新功能合并到一起提交。\n\n## 进行Review\n代码Review一定要及时，不能因为卡在没有进行Review而影响项目进度。如果审查者时间不允许，应立即告知提交者，让他找其他人对代码进行Review。\n\n作为审查者，有责任执行编码标准并保持质量水准。 审查代码更多是一门艺术，而不是一门科学。 学习它的唯一方法就是去做。 有经验的审查者需要考虑让经验不足的审查者先Review，以此来提高他们的Review经验。<br /> <br />假设提交者遵循上面的指南（尤其是关于自我检查并确保代码可以运行的准则），审查者在代码Review过程中应注意的事项应注意一下事项：\n\n- 目标\n  - 这段代码是否达到了提交者的目的？ 每次更改都应有特定的原因（新功能，重构，错误修正等）。 提交的代码是否真的达到了这个目的？\n- 提问\n  - 函数和类应该存在是有原因的。 当原因对于审查者来说不清楚时，这可能表明该代码需要重写、添加注释等等。\n- 实现\n  - 考虑一下您将如何解决问题。 如果不同，那为什么呢？ 您的代码可以处理更多（边缘）情况吗？ 它更短、更容易、更清洁、更快、更安全，但在功能上等效吗？ 您发现当前代码未捕获的异常了吗？\n  - 您看到有用的抽象的潜力吗？ 部分重复的代码通常表示可以提取出更抽象或更通用的功能，然后在不同的上下文中重新使用。\n  - 像对手一样思考，但要对此保持友善。 尝试通过提出有问题的配置、输入数据来破坏他们的代码，从而找出程序里面的漏洞。\n  - 考虑库或现有产品代码。 当某人重新实现现有功能时，通常是因为他们不知道该功能已经存在。 有时，有意复制代码或功能，例如，以避免依赖。 在这种情况下，代码注释可以阐明意图。 现有库是否已提供引入的功能？\n  - 更改是否遵循标准模式？ 既定的代码库通常表现出围绕命名约定，程序逻辑分解，数据类型定义等的模式。通常希望根据现有模式来实现更改\n  - 更改是否添加了编译时或运行时依赖项（尤其是在子项目之间）？ 我们希望保持我们的产品松散耦合，并尽可能减少依赖。 对依赖项和构建系统的更改应进行严格审查。\n- 易读性与风格\n  - 考虑一下您的阅读经验。 您是否在合理的时间内掌握了这些概念？ 流程是否合理，变量和方法名称是否易于理解？ 您是否能够跟踪多个文件或功能？ 您是否因名称不一致而推迟？\n  - 该代码是否遵守编码准则和代码样式？ 代码在样式，API约定等方面是否与项目一致？ 如上所述，我们更喜欢使用自动化工具解决代码规范。\n  - 此代码是否有TODO？ TODO只是堆积在代码中，并且随着时间的流逝变得陈旧。 让作者在GitHub Issues或JIRA上提交记录，并将发行号附加到TODO。 建议的代码更改不应包含注释掉的代码。\n- 可维修性\n  - 阅读测试。 如果没有测试，应该进行测试，请提交者写一些测试。 真正不可测试的功能很少见，而不幸的是，未经测试的功能实现很常见。 自己检查测试：它们是否涵盖了有趣的案例？ 它们可读吗？ CR是否会降低总体测试覆盖率？ 考虑一下此代码可能如何破解。 测试的样式标准通常与核心代码不同，但仍然很重要。\n  - 此CR是否存在破坏测试代码，登台堆栈或集成测试的风险？ 这些通常不作为预提交/合并检查的一部分进行检查，但是让它们崩溃对每个人来说都是痛苦的。 要查找的特定内容是：删除测试实用程序或模式，配置更改以及工件布局/结构更改。\n  - 此更改会破坏向后兼容性吗？ 如果是这样，此时可以合并更改，还是应该将其推送到更高版本中？ 中断可能包括数据库或架构更改，公共API更改，用户工作流更改等。\n  - 此代码是否需要集成测试？ 有时，单独使用单元测试无法对代码进行充分的测试，尤其是当代码与外部系统或配置交互时。\n  - 留下有关代码级文档，注释和提交消息的反馈。 多余的注释使代码混乱，而简短的提交消息使将来的贡献者迷惑不解。 这并不总是适用，但是高质量的评论和提交消息将使他们自己付出代价。 （想想您曾经看到过出色的或真正可怕的提交信息或评论。）\n  - 外部文档是否已更新？ 如果您的项目维护自述文件，CHANGELOG或其他文档，是否已对其进行更新以反映更改？ 过时的文档可能比没有文档更令人困惑，并且将来对其进行修复要比现在进行更新要花费更多的成本。\n- 安全\n  - 验证API端点是否执行与其余代码库一致的适当授权和身份验证。 检查其他常见弱点，例如弱配置，恶意用户输入，缺少日志事件等。如有疑问，请向应用程序安全专家咨询Review。\n- 评论\n  - 简洁、友好、可操作的。不要忘了赞扬简洁、可读、高效、优雅的代码。 相反，拒绝或不批准代码Review并不粗鲁。 如果更改是多余的或无关紧要的，请拒绝并说明。 \n- 面对面Review\n  - 对于大多数代码检查而言，基于异步差异的工具（例如Reviewable，Gerrit或GitHub）都是不错的选择。 当在同一台屏幕或投影仪前亲自进行或通过VTC或屏幕共享工具远程执行时，复杂的更改或具有不同专业知识或经验的各方之间的评论可以更有效。\n  \n## 示例\n在以下示例中，建议的评论注释在代码块中由 `// R：...` 注释标识。\n\n### 命名不一致\n\n```java\nclass MyClass {\n  private int countTotalPageVisits;  //R: 变量命名不一致\n  private int uniqueUsersCount;\n}\n```\n\n### 方法签名不一致\n\n```java\ninterface MyInterface {\n  /** Returns {@link Optional#empty} if s cannot be extracted. */\n  public Optional<String> extractString(String s);  \n    \n  /** Returns null if {@code s} cannot be rewritten. */\n  //R: 应该协调返回值：在这里也使用Optional <>\n  public String rewriteString(String s);\n}\n```\n\n### 类库使用\n\n```java\n//R: 使用Guava's MapJoiner替换以下方法\nString joinAndConcatenate(Map<String, String> map, String keyValueSeparator, String keySeparator);\n```\n\n### 个人倾向\n\n```java\n//R: nit: I usually prefer numFoo over fooCount; up to you,\n//  but we should keep it consistent in this project\nint dayCount; \n```\n\n### Bugs\n\n```java\n//R: 代码处理numIterations+1的情况，如果是故意这样处理，是否考虑变更numIterations值\nfor (int i = 0; i <= numIterations; ++i) {\n  ...\n}\n```\n\n### 架构疑虑\n\n```java\n//R: I think we should avoid the dependency on OtherService. \n// Can we discuss this in person?\notherService.call(); \n```\n\n## 总结\n通过有效的代码Review，可以提高项目代码质量，使团队开发人员形成统一风格，并同步项目细节。同时还可以提高团队人员的知识，提升自我。\n\n","slug":"0020-code-review-best-practice","published":1,"updated":"2020-07-17T02:32:01.169Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcpntugm002804oi040ht9yu","content":"<p><img src=\"https://i.loli.net/2020/01/21/d4zatYNGZIxVrsS.png\" srcset=\"/img/loading.gif\" alt></p>\n<p>在实际工作中，经常会遇到项目交接或者二次开发的情况，在这个过程中，我们经常会听到“这是什么垃圾代码啊”。有时候我们翻看自己几年前写的代码，也会忍不住鄙视自己。</p>\n<p>在软件开发过程中，代码Review是一个可以提高代码质量，统一代码规范，分享技术知识，从而形成增长团队的有效手段。</p>\n<p>在代码Review过程中，存在两个角色：</p>\n<ul>\n<li>提交者。提交者就是代码的提交人，他发起了Review事件。同样也可以称作被审查者。</li>\n<li>审查者。审查者是对代码进行Review的人。</li>\n</ul>\n<p>在本文中，主要涉及了以下内容：</p>\n<ul>\n<li>为什么要代码Review</li>\n<li>何时代码Review</li>\n<li>准备代码Review</li>\n<li>进行代码Review</li>\n<li>代码Review示例</li>\n</ul>\n<h2 id=\"动机\"><a href=\"#动机\" class=\"headerlink\" title=\"动机\"></a>动机</h2><p>通过代码Review可以提供代码质量，并且我们还可以通过代码Review来提高自我的能力。<br>比如：</p>\n<ul>\n<li>通过代码Review，审查人员可以看到本次变更的内容：处理TODO，代码优化等。提交者的代码被认可，可以提升自我成就感。</li>\n<li>可以分享知识：<ul>\n<li>代码Review可以是提交内容更加明确，并且使团队成员更进一步了解项目，为以后的开发做知识积累</li>\n<li>团队成员可以从提交者的代码中学习新的技术、算法等等</li>\n<li>通过代码Review，提交者可以从审查人员的评审中获得相关的技术知识</li>\n<li>可以增加团队交流，形成增长团队</li>\n</ul>\n</li>\n<li>可以形成统一的代码规范，方便阅读和理解</li>\n<li>审查者因为没有完整的上下文，只看到代码片段，更容易发现问题，提高代码片段的可复用率</li>\n<li>更容易检查拼写错误</li>\n<li>可以避免常规的安全问题等</li>\n</ul>\n<h2 id=\"Review什么\"><a href=\"#Review什么\" class=\"headerlink\" title=\"Review什么\"></a>Review什么</h2><p>对于代码Review什么内容，可以有很多的方面，如：变量命名、代码结构、算法、架构、安全等等。具体内容没有一个统一的标准，但是在一个团队中，是需要形成一个统一的标准的，这样更有益于团队的可持续发展。</p>\n<h2 id=\"什么时候Review\"><a href=\"#什么时候Review\" class=\"headerlink\" title=\"什么时候Review\"></a>什么时候Review</h2><p>代码需要在测试、CI之后，在合并上线分支之前。测试、CI等确保了逻辑是正确的。因为需要保证线上的代码是最优的，所以Review需要在合并分支之前。</p>\n<h2 id=\"准备Review\"><a href=\"#准备Review\" class=\"headerlink\" title=\"准备Review\"></a>准备Review</h2><p>提交者需要提交一个便于Review的代码，避免浪费审查者的精力和时间：</p>\n<ul>\n<li>范围和大小。一次提交Review的代码不应过大，如果太大需要耗费一天的时间，那就说明提交Review的代码不够合理，应分解成多次Review提交。</li>\n<li>只提交已完成的，并且自检及自测过的代码。提交Review的代码，一定是已经开发完的，否则Review将没有意义。它也一定是经过自测的代码，对没有通过自测的代码进行Review，同样没有意义。</li>\n<li>重构不应该改变代码行为，同样改变代码行为的不应该包含重构内容。每次提交的变更目标应该是明确的，且是单一的，不能将重构和开发新功能合并到一起提交。</li>\n</ul>\n<h2 id=\"进行Review\"><a href=\"#进行Review\" class=\"headerlink\" title=\"进行Review\"></a>进行Review</h2><p>代码Review一定要及时，不能因为卡在没有进行Review而影响项目进度。如果审查者时间不允许，应立即告知提交者，让他找其他人对代码进行Review。</p>\n<p>作为审查者，有责任执行编码标准并保持质量水准。 审查代码更多是一门艺术，而不是一门科学。 学习它的唯一方法就是去做。 有经验的审查者需要考虑让经验不足的审查者先Review，以此来提高他们的Review经验。<br> <br>假设提交者遵循上面的指南（尤其是关于自我检查并确保代码可以运行的准则），审查者在代码Review过程中应注意的事项应注意一下事项：</p>\n<ul>\n<li>目标<ul>\n<li>这段代码是否达到了提交者的目的？ 每次更改都应有特定的原因（新功能，重构，错误修正等）。 提交的代码是否真的达到了这个目的？</li>\n</ul>\n</li>\n<li>提问<ul>\n<li>函数和类应该存在是有原因的。 当原因对于审查者来说不清楚时，这可能表明该代码需要重写、添加注释等等。</li>\n</ul>\n</li>\n<li>实现<ul>\n<li>考虑一下您将如何解决问题。 如果不同，那为什么呢？ 您的代码可以处理更多（边缘）情况吗？ 它更短、更容易、更清洁、更快、更安全，但在功能上等效吗？ 您发现当前代码未捕获的异常了吗？</li>\n<li>您看到有用的抽象的潜力吗？ 部分重复的代码通常表示可以提取出更抽象或更通用的功能，然后在不同的上下文中重新使用。</li>\n<li>像对手一样思考，但要对此保持友善。 尝试通过提出有问题的配置、输入数据来破坏他们的代码，从而找出程序里面的漏洞。</li>\n<li>考虑库或现有产品代码。 当某人重新实现现有功能时，通常是因为他们不知道该功能已经存在。 有时，有意复制代码或功能，例如，以避免依赖。 在这种情况下，代码注释可以阐明意图。 现有库是否已提供引入的功能？</li>\n<li>更改是否遵循标准模式？ 既定的代码库通常表现出围绕命名约定，程序逻辑分解，数据类型定义等的模式。通常希望根据现有模式来实现更改</li>\n<li>更改是否添加了编译时或运行时依赖项（尤其是在子项目之间）？ 我们希望保持我们的产品松散耦合，并尽可能减少依赖。 对依赖项和构建系统的更改应进行严格审查。</li>\n</ul>\n</li>\n<li>易读性与风格<ul>\n<li>考虑一下您的阅读经验。 您是否在合理的时间内掌握了这些概念？ 流程是否合理，变量和方法名称是否易于理解？ 您是否能够跟踪多个文件或功能？ 您是否因名称不一致而推迟？</li>\n<li>该代码是否遵守编码准则和代码样式？ 代码在样式，API约定等方面是否与项目一致？ 如上所述，我们更喜欢使用自动化工具解决代码规范。</li>\n<li>此代码是否有TODO？ TODO只是堆积在代码中，并且随着时间的流逝变得陈旧。 让作者在GitHub Issues或JIRA上提交记录，并将发行号附加到TODO。 建议的代码更改不应包含注释掉的代码。</li>\n</ul>\n</li>\n<li>可维修性<ul>\n<li>阅读测试。 如果没有测试，应该进行测试，请提交者写一些测试。 真正不可测试的功能很少见，而不幸的是，未经测试的功能实现很常见。 自己检查测试：它们是否涵盖了有趣的案例？ 它们可读吗？ CR是否会降低总体测试覆盖率？ 考虑一下此代码可能如何破解。 测试的样式标准通常与核心代码不同，但仍然很重要。</li>\n<li>此CR是否存在破坏测试代码，登台堆栈或集成测试的风险？ 这些通常不作为预提交/合并检查的一部分进行检查，但是让它们崩溃对每个人来说都是痛苦的。 要查找的特定内容是：删除测试实用程序或模式，配置更改以及工件布局/结构更改。</li>\n<li>此更改会破坏向后兼容性吗？ 如果是这样，此时可以合并更改，还是应该将其推送到更高版本中？ 中断可能包括数据库或架构更改，公共API更改，用户工作流更改等。</li>\n<li>此代码是否需要集成测试？ 有时，单独使用单元测试无法对代码进行充分的测试，尤其是当代码与外部系统或配置交互时。</li>\n<li>留下有关代码级文档，注释和提交消息的反馈。 多余的注释使代码混乱，而简短的提交消息使将来的贡献者迷惑不解。 这并不总是适用，但是高质量的评论和提交消息将使他们自己付出代价。 （想想您曾经看到过出色的或真正可怕的提交信息或评论。）</li>\n<li>外部文档是否已更新？ 如果您的项目维护自述文件，CHANGELOG或其他文档，是否已对其进行更新以反映更改？ 过时的文档可能比没有文档更令人困惑，并且将来对其进行修复要比现在进行更新要花费更多的成本。</li>\n</ul>\n</li>\n<li>安全<ul>\n<li>验证API端点是否执行与其余代码库一致的适当授权和身份验证。 检查其他常见弱点，例如弱配置，恶意用户输入，缺少日志事件等。如有疑问，请向应用程序安全专家咨询Review。</li>\n</ul>\n</li>\n<li>评论<ul>\n<li>简洁、友好、可操作的。不要忘了赞扬简洁、可读、高效、优雅的代码。 相反，拒绝或不批准代码Review并不粗鲁。 如果更改是多余的或无关紧要的，请拒绝并说明。 </li>\n</ul>\n</li>\n<li>面对面Review<ul>\n<li>对于大多数代码检查而言，基于异步差异的工具（例如Reviewable，Gerrit或GitHub）都是不错的选择。 当在同一台屏幕或投影仪前亲自进行或通过VTC或屏幕共享工具远程执行时，复杂的更改或具有不同专业知识或经验的各方之间的评论可以更有效。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><p>在以下示例中，建议的评论注释在代码块中由 <code>// R：...</code> 注释标识。</p>\n<h3 id=\"命名不一致\"><a href=\"#命名不一致\" class=\"headerlink\" title=\"命名不一致\"></a>命名不一致</h3><pre><code class=\"hljs java\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyClass</span> </span>&#123;\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> countTotalPageVisits;  <span class=\"hljs-comment\">//R: 变量命名不一致</span>\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> uniqueUsersCount;\n&#125;</code></pre>\n<h3 id=\"方法签名不一致\"><a href=\"#方法签名不一致\" class=\"headerlink\" title=\"方法签名不一致\"></a>方法签名不一致</h3><pre><code class=\"hljs java\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">MyInterface</span> </span>&#123;\n  <span class=\"hljs-comment\">/** Returns &#123;<span class=\"hljs-doctag\">@link</span> Optional#empty&#125; if s cannot be extracted. */</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Optional&lt;String&gt; <span class=\"hljs-title\">extractString</span><span class=\"hljs-params\">(String s)</span></span>;  \n    \n  <span class=\"hljs-comment\">/** Returns null if &#123;<span class=\"hljs-doctag\">@code</span> s&#125; cannot be rewritten. */</span>\n  <span class=\"hljs-comment\">//R: 应该协调返回值：在这里也使用Optional &lt;&gt;</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">rewriteString</span><span class=\"hljs-params\">(String s)</span></span>;\n&#125;</code></pre>\n<h3 id=\"类库使用\"><a href=\"#类库使用\" class=\"headerlink\" title=\"类库使用\"></a>类库使用</h3><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//R: 使用Guava's MapJoiner替换以下方法</span>\n<span class=\"hljs-function\">String <span class=\"hljs-title\">joinAndConcatenate</span><span class=\"hljs-params\">(Map&lt;String, String&gt; map, String keyValueSeparator, String keySeparator)</span></span>;</code></pre>\n<h3 id=\"个人倾向\"><a href=\"#个人倾向\" class=\"headerlink\" title=\"个人倾向\"></a>个人倾向</h3><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//R: nit: I usually prefer numFoo over fooCount; up to you,</span>\n<span class=\"hljs-comment\">//  but we should keep it consistent in this project</span>\n<span class=\"hljs-keyword\">int</span> dayCount;</code></pre>\n<h3 id=\"Bugs\"><a href=\"#Bugs\" class=\"headerlink\" title=\"Bugs\"></a>Bugs</h3><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//R: 代码处理numIterations+1的情况，如果是故意这样处理，是否考虑变更numIterations值</span>\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt;= numIterations; ++i) &#123;\n  ...\n&#125;</code></pre>\n<h3 id=\"架构疑虑\"><a href=\"#架构疑虑\" class=\"headerlink\" title=\"架构疑虑\"></a>架构疑虑</h3><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//R: I think we should avoid the dependency on OtherService. </span>\n<span class=\"hljs-comment\">// Can we discuss this in person?</span>\notherService.call();</code></pre>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>通过有效的代码Review，可以提高项目代码质量，使团队开发人员形成统一风格，并同步项目细节。同时还可以提高团队人员的知识，提升自我。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://i.loli.net/2020/01/21/d4zatYNGZIxVrsS.png\" srcset=\"/img/loading.gif\" alt></p>\n<p>在实际工作中，经常会遇到项目交接或者二次开发的情况，在这个过程中，我们经常会听到“这是什么垃圾代码啊”。有时候我们翻看自己几年前写的代码，也会忍不住鄙视自己。</p>\n<p>在软件开发过程中，代码Review是一个可以提高代码质量，统一代码规范，分享技术知识，从而形成增长团队的有效手段。</p>\n<p>在代码Review过程中，存在两个角色：</p>\n<ul>\n<li>提交者。提交者就是代码的提交人，他发起了Review事件。同样也可以称作被审查者。</li>\n<li>审查者。审查者是对代码进行Review的人。</li>\n</ul>\n<p>在本文中，主要涉及了以下内容：</p>\n<ul>\n<li>为什么要代码Review</li>\n<li>何时代码Review</li>\n<li>准备代码Review</li>\n<li>进行代码Review</li>\n<li>代码Review示例</li>\n</ul>\n<h2 id=\"动机\"><a href=\"#动机\" class=\"headerlink\" title=\"动机\"></a>动机</h2><p>通过代码Review可以提供代码质量，并且我们还可以通过代码Review来提高自我的能力。<br>比如：</p>\n<ul>\n<li>通过代码Review，审查人员可以看到本次变更的内容：处理TODO，代码优化等。提交者的代码被认可，可以提升自我成就感。</li>\n<li>可以分享知识：<ul>\n<li>代码Review可以是提交内容更加明确，并且使团队成员更进一步了解项目，为以后的开发做知识积累</li>\n<li>团队成员可以从提交者的代码中学习新的技术、算法等等</li>\n<li>通过代码Review，提交者可以从审查人员的评审中获得相关的技术知识</li>\n<li>可以增加团队交流，形成增长团队</li>\n</ul>\n</li>\n<li>可以形成统一的代码规范，方便阅读和理解</li>\n<li>审查者因为没有完整的上下文，只看到代码片段，更容易发现问题，提高代码片段的可复用率</li>\n<li>更容易检查拼写错误</li>\n<li>可以避免常规的安全问题等</li>\n</ul>\n<h2 id=\"Review什么\"><a href=\"#Review什么\" class=\"headerlink\" title=\"Review什么\"></a>Review什么</h2><p>对于代码Review什么内容，可以有很多的方面，如：变量命名、代码结构、算法、架构、安全等等。具体内容没有一个统一的标准，但是在一个团队中，是需要形成一个统一的标准的，这样更有益于团队的可持续发展。</p>\n<h2 id=\"什么时候Review\"><a href=\"#什么时候Review\" class=\"headerlink\" title=\"什么时候Review\"></a>什么时候Review</h2><p>代码需要在测试、CI之后，在合并上线分支之前。测试、CI等确保了逻辑是正确的。因为需要保证线上的代码是最优的，所以Review需要在合并分支之前。</p>\n<h2 id=\"准备Review\"><a href=\"#准备Review\" class=\"headerlink\" title=\"准备Review\"></a>准备Review</h2><p>提交者需要提交一个便于Review的代码，避免浪费审查者的精力和时间：</p>\n<ul>\n<li>范围和大小。一次提交Review的代码不应过大，如果太大需要耗费一天的时间，那就说明提交Review的代码不够合理，应分解成多次Review提交。</li>\n<li>只提交已完成的，并且自检及自测过的代码。提交Review的代码，一定是已经开发完的，否则Review将没有意义。它也一定是经过自测的代码，对没有通过自测的代码进行Review，同样没有意义。</li>\n<li>重构不应该改变代码行为，同样改变代码行为的不应该包含重构内容。每次提交的变更目标应该是明确的，且是单一的，不能将重构和开发新功能合并到一起提交。</li>\n</ul>\n<h2 id=\"进行Review\"><a href=\"#进行Review\" class=\"headerlink\" title=\"进行Review\"></a>进行Review</h2><p>代码Review一定要及时，不能因为卡在没有进行Review而影响项目进度。如果审查者时间不允许，应立即告知提交者，让他找其他人对代码进行Review。</p>\n<p>作为审查者，有责任执行编码标准并保持质量水准。 审查代码更多是一门艺术，而不是一门科学。 学习它的唯一方法就是去做。 有经验的审查者需要考虑让经验不足的审查者先Review，以此来提高他们的Review经验。<br> <br>假设提交者遵循上面的指南（尤其是关于自我检查并确保代码可以运行的准则），审查者在代码Review过程中应注意的事项应注意一下事项：</p>\n<ul>\n<li>目标<ul>\n<li>这段代码是否达到了提交者的目的？ 每次更改都应有特定的原因（新功能，重构，错误修正等）。 提交的代码是否真的达到了这个目的？</li>\n</ul>\n</li>\n<li>提问<ul>\n<li>函数和类应该存在是有原因的。 当原因对于审查者来说不清楚时，这可能表明该代码需要重写、添加注释等等。</li>\n</ul>\n</li>\n<li>实现<ul>\n<li>考虑一下您将如何解决问题。 如果不同，那为什么呢？ 您的代码可以处理更多（边缘）情况吗？ 它更短、更容易、更清洁、更快、更安全，但在功能上等效吗？ 您发现当前代码未捕获的异常了吗？</li>\n<li>您看到有用的抽象的潜力吗？ 部分重复的代码通常表示可以提取出更抽象或更通用的功能，然后在不同的上下文中重新使用。</li>\n<li>像对手一样思考，但要对此保持友善。 尝试通过提出有问题的配置、输入数据来破坏他们的代码，从而找出程序里面的漏洞。</li>\n<li>考虑库或现有产品代码。 当某人重新实现现有功能时，通常是因为他们不知道该功能已经存在。 有时，有意复制代码或功能，例如，以避免依赖。 在这种情况下，代码注释可以阐明意图。 现有库是否已提供引入的功能？</li>\n<li>更改是否遵循标准模式？ 既定的代码库通常表现出围绕命名约定，程序逻辑分解，数据类型定义等的模式。通常希望根据现有模式来实现更改</li>\n<li>更改是否添加了编译时或运行时依赖项（尤其是在子项目之间）？ 我们希望保持我们的产品松散耦合，并尽可能减少依赖。 对依赖项和构建系统的更改应进行严格审查。</li>\n</ul>\n</li>\n<li>易读性与风格<ul>\n<li>考虑一下您的阅读经验。 您是否在合理的时间内掌握了这些概念？ 流程是否合理，变量和方法名称是否易于理解？ 您是否能够跟踪多个文件或功能？ 您是否因名称不一致而推迟？</li>\n<li>该代码是否遵守编码准则和代码样式？ 代码在样式，API约定等方面是否与项目一致？ 如上所述，我们更喜欢使用自动化工具解决代码规范。</li>\n<li>此代码是否有TODO？ TODO只是堆积在代码中，并且随着时间的流逝变得陈旧。 让作者在GitHub Issues或JIRA上提交记录，并将发行号附加到TODO。 建议的代码更改不应包含注释掉的代码。</li>\n</ul>\n</li>\n<li>可维修性<ul>\n<li>阅读测试。 如果没有测试，应该进行测试，请提交者写一些测试。 真正不可测试的功能很少见，而不幸的是，未经测试的功能实现很常见。 自己检查测试：它们是否涵盖了有趣的案例？ 它们可读吗？ CR是否会降低总体测试覆盖率？ 考虑一下此代码可能如何破解。 测试的样式标准通常与核心代码不同，但仍然很重要。</li>\n<li>此CR是否存在破坏测试代码，登台堆栈或集成测试的风险？ 这些通常不作为预提交/合并检查的一部分进行检查，但是让它们崩溃对每个人来说都是痛苦的。 要查找的特定内容是：删除测试实用程序或模式，配置更改以及工件布局/结构更改。</li>\n<li>此更改会破坏向后兼容性吗？ 如果是这样，此时可以合并更改，还是应该将其推送到更高版本中？ 中断可能包括数据库或架构更改，公共API更改，用户工作流更改等。</li>\n<li>此代码是否需要集成测试？ 有时，单独使用单元测试无法对代码进行充分的测试，尤其是当代码与外部系统或配置交互时。</li>\n<li>留下有关代码级文档，注释和提交消息的反馈。 多余的注释使代码混乱，而简短的提交消息使将来的贡献者迷惑不解。 这并不总是适用，但是高质量的评论和提交消息将使他们自己付出代价。 （想想您曾经看到过出色的或真正可怕的提交信息或评论。）</li>\n<li>外部文档是否已更新？ 如果您的项目维护自述文件，CHANGELOG或其他文档，是否已对其进行更新以反映更改？ 过时的文档可能比没有文档更令人困惑，并且将来对其进行修复要比现在进行更新要花费更多的成本。</li>\n</ul>\n</li>\n<li>安全<ul>\n<li>验证API端点是否执行与其余代码库一致的适当授权和身份验证。 检查其他常见弱点，例如弱配置，恶意用户输入，缺少日志事件等。如有疑问，请向应用程序安全专家咨询Review。</li>\n</ul>\n</li>\n<li>评论<ul>\n<li>简洁、友好、可操作的。不要忘了赞扬简洁、可读、高效、优雅的代码。 相反，拒绝或不批准代码Review并不粗鲁。 如果更改是多余的或无关紧要的，请拒绝并说明。 </li>\n</ul>\n</li>\n<li>面对面Review<ul>\n<li>对于大多数代码检查而言，基于异步差异的工具（例如Reviewable，Gerrit或GitHub）都是不错的选择。 当在同一台屏幕或投影仪前亲自进行或通过VTC或屏幕共享工具远程执行时，复杂的更改或具有不同专业知识或经验的各方之间的评论可以更有效。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><p>在以下示例中，建议的评论注释在代码块中由 <code>// R：...</code> 注释标识。</p>\n<h3 id=\"命名不一致\"><a href=\"#命名不一致\" class=\"headerlink\" title=\"命名不一致\"></a>命名不一致</h3><pre><code class=\"hljs java\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyClass</span> </span>&#123;\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> countTotalPageVisits;  <span class=\"hljs-comment\">//R: 变量命名不一致</span>\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> uniqueUsersCount;\n&#125;</code></pre>\n<h3 id=\"方法签名不一致\"><a href=\"#方法签名不一致\" class=\"headerlink\" title=\"方法签名不一致\"></a>方法签名不一致</h3><pre><code class=\"hljs java\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">MyInterface</span> </span>&#123;\n  <span class=\"hljs-comment\">/** Returns &#123;<span class=\"hljs-doctag\">@link</span> Optional#empty&#125; if s cannot be extracted. */</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Optional&lt;String&gt; <span class=\"hljs-title\">extractString</span><span class=\"hljs-params\">(String s)</span></span>;  \n    \n  <span class=\"hljs-comment\">/** Returns null if &#123;<span class=\"hljs-doctag\">@code</span> s&#125; cannot be rewritten. */</span>\n  <span class=\"hljs-comment\">//R: 应该协调返回值：在这里也使用Optional &lt;&gt;</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">rewriteString</span><span class=\"hljs-params\">(String s)</span></span>;\n&#125;</code></pre>\n<h3 id=\"类库使用\"><a href=\"#类库使用\" class=\"headerlink\" title=\"类库使用\"></a>类库使用</h3><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//R: 使用Guava's MapJoiner替换以下方法</span>\n<span class=\"hljs-function\">String <span class=\"hljs-title\">joinAndConcatenate</span><span class=\"hljs-params\">(Map&lt;String, String&gt; map, String keyValueSeparator, String keySeparator)</span></span>;</code></pre>\n<h3 id=\"个人倾向\"><a href=\"#个人倾向\" class=\"headerlink\" title=\"个人倾向\"></a>个人倾向</h3><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//R: nit: I usually prefer numFoo over fooCount; up to you,</span>\n<span class=\"hljs-comment\">//  but we should keep it consistent in this project</span>\n<span class=\"hljs-keyword\">int</span> dayCount;</code></pre>\n<h3 id=\"Bugs\"><a href=\"#Bugs\" class=\"headerlink\" title=\"Bugs\"></a>Bugs</h3><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//R: 代码处理numIterations+1的情况，如果是故意这样处理，是否考虑变更numIterations值</span>\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt;= numIterations; ++i) &#123;\n  ...\n&#125;</code></pre>\n<h3 id=\"架构疑虑\"><a href=\"#架构疑虑\" class=\"headerlink\" title=\"架构疑虑\"></a>架构疑虑</h3><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//R: I think we should avoid the dependency on OtherService. </span>\n<span class=\"hljs-comment\">// Can we discuss this in person?</span>\notherService.call();</code></pre>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>通过有效的代码Review，可以提高项目代码质量，使团队开发人员形成统一风格，并同步项目细节。同时还可以提高团队人员的知识，提升自我。</p>\n"},{"title":"Angular之自定义组件添加默认样式","photos":["https://i.loli.net/2019/06/10/5cfdf6dca539f47762.png"],"date":"2020-01-21T03:28:02.000Z","_content":"\n\nAngular的核心思想之一就是：组件化。组件化可以使我们的代码更好的复用。\n\n在使用官方提供的Angular库[Angular Material](https://material.angular.io/)时，细心的同学就会发现，Material的每一个组件都有它自己样式，如：\n\n- **按钮**：`mat-button`\n- **工具条**：`mat-toolbar`\n- **表格**：`mat-table`\n- etc.\n\n每个组件添加自己独有的样式，增加css作用域的控制，实现了样式的隔离。\n\n那么，如果给一个自定义组件添加默认样式呢？接下来我们介绍三种方法来实现我们的目标。\n\n## 方法一：host\n在组件的`@Component`装饰器中提供了`host`属性，该属性可以为我们提供很多功能的支持，其中一项就是给组件添加样式。\n\n以Material中的Table为例：\n\n```typescript\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  providers: [{provide: CdkTable, useExisting: MatTable}],\n  encapsulation: ViewEncapsulation.None,\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n}\n```\n\n在MatTable的源码中，我们可以看到为host属性设置了`'class': 'mat-table'`，在我们使用MatTable组件时，就会添加上默认的样式: `mat-table`.\n\n{% note danger %}\n**注意**\n\n虽然在Angular中提供了host属性，并且官方的Material库也是使用该属性实现了很多功能，但是，在Angular编码规范中却不推荐使用该方法。详见：[HostListener 和 HostBinding 装饰器 vs. 组件元数据 host\n](https://angular.cn/guide/styleguide#hostlistenerhostbinding-decorators-versus-host-metadata)\n{% endnote %}\n\n\n## 方法二：HostBinding\n\n如方法一中注意事项中提到的，官方不推荐使用`host`属性，推荐使用`@HostBinding`装饰器来实现`host`的关于dom属性相关的功能。\n\n还是以MatTable为例，需要做一下改造来实现相应的功能：\n\n```typescript\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n//   host: {\n//     'class': 'mat-table',\n//   },\n  providers: [{provide: CdkTable, useExisting: MatTable}],\n  encapsulation: ViewEncapsulation.None,\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n\n  // 使用HostBinding装饰器\n  @HostBinding('class.mat-table') clz = true;\n}\n```\n\n## 方法三：Renderer2\n\n`Renderer2`是Angular的渲染引擎，我们可以通过它来为自定义组件添加默认样式。\n\n还是以MatTable为例，需要做一下改造来实现相应的功能：\n\n```typescript\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n//   host: {\n//     'class': 'mat-table',\n//   },\n  providers: [{provide: CdkTable, useExisting: MatTable}],\n  encapsulation: ViewEncapsulation.None,\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n\n  constructor(render: Renderer2, eleRef: ElementRef) {\n      render.addClass(eleRef.nativeElement, 'mat-table');\n  }\n}\n```\n\n\n## 总结\n\n很多时候，实现一个功能的方法有很多，需要我们不断的去挖掘，去思考。条条大路通罗马，只要努力了总会有收获。","source":"_posts/Angular之自定义组件添加默认样式.md","raw":"---\ntitle: Angular之自定义组件添加默认样式\ntags:\n  - Angular\nphotos:\n  - 'https://i.loli.net/2019/06/10/5cfdf6dca539f47762.png'\ndate: 2020-01-21 11:28:02\n---\n\n\nAngular的核心思想之一就是：组件化。组件化可以使我们的代码更好的复用。\n\n在使用官方提供的Angular库[Angular Material](https://material.angular.io/)时，细心的同学就会发现，Material的每一个组件都有它自己样式，如：\n\n- **按钮**：`mat-button`\n- **工具条**：`mat-toolbar`\n- **表格**：`mat-table`\n- etc.\n\n每个组件添加自己独有的样式，增加css作用域的控制，实现了样式的隔离。\n\n那么，如果给一个自定义组件添加默认样式呢？接下来我们介绍三种方法来实现我们的目标。\n\n## 方法一：host\n在组件的`@Component`装饰器中提供了`host`属性，该属性可以为我们提供很多功能的支持，其中一项就是给组件添加样式。\n\n以Material中的Table为例：\n\n```typescript\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  providers: [{provide: CdkTable, useExisting: MatTable}],\n  encapsulation: ViewEncapsulation.None,\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n}\n```\n\n在MatTable的源码中，我们可以看到为host属性设置了`'class': 'mat-table'`，在我们使用MatTable组件时，就会添加上默认的样式: `mat-table`.\n\n{% note danger %}\n**注意**\n\n虽然在Angular中提供了host属性，并且官方的Material库也是使用该属性实现了很多功能，但是，在Angular编码规范中却不推荐使用该方法。详见：[HostListener 和 HostBinding 装饰器 vs. 组件元数据 host\n](https://angular.cn/guide/styleguide#hostlistenerhostbinding-decorators-versus-host-metadata)\n{% endnote %}\n\n\n## 方法二：HostBinding\n\n如方法一中注意事项中提到的，官方不推荐使用`host`属性，推荐使用`@HostBinding`装饰器来实现`host`的关于dom属性相关的功能。\n\n还是以MatTable为例，需要做一下改造来实现相应的功能：\n\n```typescript\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n//   host: {\n//     'class': 'mat-table',\n//   },\n  providers: [{provide: CdkTable, useExisting: MatTable}],\n  encapsulation: ViewEncapsulation.None,\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n\n  // 使用HostBinding装饰器\n  @HostBinding('class.mat-table') clz = true;\n}\n```\n\n## 方法三：Renderer2\n\n`Renderer2`是Angular的渲染引擎，我们可以通过它来为自定义组件添加默认样式。\n\n还是以MatTable为例，需要做一下改造来实现相应的功能：\n\n```typescript\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n//   host: {\n//     'class': 'mat-table',\n//   },\n  providers: [{provide: CdkTable, useExisting: MatTable}],\n  encapsulation: ViewEncapsulation.None,\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n\n  constructor(render: Renderer2, eleRef: ElementRef) {\n      render.addClass(eleRef.nativeElement, 'mat-table');\n  }\n}\n```\n\n\n## 总结\n\n很多时候，实现一个功能的方法有很多，需要我们不断的去挖掘，去思考。条条大路通罗马，只要努力了总会有收获。","slug":"Angular之自定义组件添加默认样式","published":1,"updated":"2020-07-17T02:32:01.170Z","comments":1,"layout":"post","link":"","_id":"ckcpntugo002b04oipqwt4vne","content":"<p>Angular的核心思想之一就是：组件化。组件化可以使我们的代码更好的复用。</p>\n<p>在使用官方提供的Angular库<a href=\"https://material.angular.io/\" target=\"_blank\" rel=\"noopener\">Angular Material</a>时，细心的同学就会发现，Material的每一个组件都有它自己样式，如：</p>\n<ul>\n<li><strong>按钮</strong>：<code>mat-button</code></li>\n<li><strong>工具条</strong>：<code>mat-toolbar</code></li>\n<li><strong>表格</strong>：<code>mat-table</code></li>\n<li>etc.</li>\n</ul>\n<p>每个组件添加自己独有的样式，增加css作用域的控制，实现了样式的隔离。</p>\n<p>那么，如果给一个自定义组件添加默认样式呢？接下来我们介绍三种方法来实现我们的目标。</p>\n<h2 id=\"方法一：host\"><a href=\"#方法一：host\" class=\"headerlink\" title=\"方法一：host\"></a>方法一：host</h2><p>在组件的<code>@Component</code>装饰器中提供了<code>host</code>属性，该属性可以为我们提供很多功能的支持，其中一项就是给组件添加样式。</p>\n<p>以Material中的Table为例：</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-meta\">@Component</span>(&#123;\n  moduleId: <span class=\"hljs-built_in\">module</span>.id,\n  selector: <span class=\"hljs-string\">'mat-table, table[mat-table]'</span>,\n  exportAs: <span class=\"hljs-string\">'matTable'</span>,\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: [<span class=\"hljs-string\">'table.css'</span>],\n  host: &#123;\n    <span class=\"hljs-string\">'class'</span>: <span class=\"hljs-string\">'mat-table'</span>,\n  &#125;,\n  providers: [&#123;provide: CdkTable, useExisting: MatTable&#125;],\n  encapsulation: ViewEncapsulation.None,\n  <span class=\"hljs-comment\">// See note on CdkTable for explanation on why this uses the default change detection strategy.</span>\n  <span class=\"hljs-comment\">// tslint:disable-next-line:validate-decorators</span>\n  changeDetection: ChangeDetectionStrategy.Default,\n&#125;)\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> MatTable&lt;T&gt; <span class=\"hljs-keyword\">extends</span> CdkTable&lt;T&gt; &#123;\n  <span class=\"hljs-comment\">/** Overrides the sticky CSS class set by the `CdkTable`. */</span>\n  <span class=\"hljs-keyword\">protected</span> stickyCssClass = <span class=\"hljs-string\">'mat-table-sticky'</span>;\n&#125;</code></pre>\n<p>在MatTable的源码中，我们可以看到为host属性设置了<code>&#39;class&#39;: &#39;mat-table&#39;</code>，在我们使用MatTable组件时，就会添加上默认的样式: <code>mat-table</code>.</p>\n<div class=\"note note-danger\">\n            <p><strong>注意</strong></p><p>虽然在Angular中提供了host属性，并且官方的Material库也是使用该属性实现了很多功能，但是，在Angular编码规范中却不推荐使用该方法。详见：<a href=\"https://angular.cn/guide/styleguide#hostlistenerhostbinding-decorators-versus-host-metadata\" target=\"_blank\" rel=\"noopener\">HostListener 和 HostBinding 装饰器 vs. 组件元数据 host</a></p>\n          </div>\n<h2 id=\"方法二：HostBinding\"><a href=\"#方法二：HostBinding\" class=\"headerlink\" title=\"方法二：HostBinding\"></a>方法二：HostBinding</h2><p>如方法一中注意事项中提到的，官方不推荐使用<code>host</code>属性，推荐使用<code>@HostBinding</code>装饰器来实现<code>host</code>的关于dom属性相关的功能。</p>\n<p>还是以MatTable为例，需要做一下改造来实现相应的功能：</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-meta\">@Component</span>(&#123;\n  moduleId: <span class=\"hljs-built_in\">module</span>.id,\n  selector: <span class=\"hljs-string\">'mat-table, table[mat-table]'</span>,\n  exportAs: <span class=\"hljs-string\">'matTable'</span>,\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: [<span class=\"hljs-string\">'table.css'</span>],\n<span class=\"hljs-comment\">//   host: &#123;</span>\n<span class=\"hljs-comment\">//     'class': 'mat-table',</span>\n<span class=\"hljs-comment\">//   &#125;,</span>\n  providers: [&#123;provide: CdkTable, useExisting: MatTable&#125;],\n  encapsulation: ViewEncapsulation.None,\n  <span class=\"hljs-comment\">// See note on CdkTable for explanation on why this uses the default change detection strategy.</span>\n  <span class=\"hljs-comment\">// tslint:disable-next-line:validate-decorators</span>\n  changeDetection: ChangeDetectionStrategy.Default,\n&#125;)\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> MatTable&lt;T&gt; <span class=\"hljs-keyword\">extends</span> CdkTable&lt;T&gt; &#123;\n  <span class=\"hljs-comment\">/** Overrides the sticky CSS class set by the `CdkTable`. */</span>\n  <span class=\"hljs-keyword\">protected</span> stickyCssClass = <span class=\"hljs-string\">'mat-table-sticky'</span>;\n\n  <span class=\"hljs-comment\">// 使用HostBinding装饰器</span>\n  <span class=\"hljs-meta\">@HostBinding</span>(<span class=\"hljs-string\">'class.mat-table'</span>) clz = <span class=\"hljs-literal\">true</span>;\n&#125;</code></pre>\n<h2 id=\"方法三：Renderer2\"><a href=\"#方法三：Renderer2\" class=\"headerlink\" title=\"方法三：Renderer2\"></a>方法三：Renderer2</h2><p><code>Renderer2</code>是Angular的渲染引擎，我们可以通过它来为自定义组件添加默认样式。</p>\n<p>还是以MatTable为例，需要做一下改造来实现相应的功能：</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-meta\">@Component</span>(&#123;\n  moduleId: <span class=\"hljs-built_in\">module</span>.id,\n  selector: <span class=\"hljs-string\">'mat-table, table[mat-table]'</span>,\n  exportAs: <span class=\"hljs-string\">'matTable'</span>,\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: [<span class=\"hljs-string\">'table.css'</span>],\n<span class=\"hljs-comment\">//   host: &#123;</span>\n<span class=\"hljs-comment\">//     'class': 'mat-table',</span>\n<span class=\"hljs-comment\">//   &#125;,</span>\n  providers: [&#123;provide: CdkTable, useExisting: MatTable&#125;],\n  encapsulation: ViewEncapsulation.None,\n  <span class=\"hljs-comment\">// See note on CdkTable for explanation on why this uses the default change detection strategy.</span>\n  <span class=\"hljs-comment\">// tslint:disable-next-line:validate-decorators</span>\n  changeDetection: ChangeDetectionStrategy.Default,\n&#125;)\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> MatTable&lt;T&gt; <span class=\"hljs-keyword\">extends</span> CdkTable&lt;T&gt; &#123;\n  <span class=\"hljs-comment\">/** Overrides the sticky CSS class set by the `CdkTable`. */</span>\n  <span class=\"hljs-keyword\">protected</span> stickyCssClass = <span class=\"hljs-string\">'mat-table-sticky'</span>;\n\n  <span class=\"hljs-keyword\">constructor</span>(<span class=\"hljs-params\">render: Renderer2, eleRef: ElementRef</span>) &#123;\n      render.addClass(eleRef.nativeElement, <span class=\"hljs-string\">'mat-table'</span>);\n  &#125;\n&#125;</code></pre>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>很多时候，实现一个功能的方法有很多，需要我们不断的去挖掘，去思考。条条大路通罗马，只要努力了总会有收获。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Angular的核心思想之一就是：组件化。组件化可以使我们的代码更好的复用。</p>\n<p>在使用官方提供的Angular库<a href=\"https://material.angular.io/\" target=\"_blank\" rel=\"noopener\">Angular Material</a>时，细心的同学就会发现，Material的每一个组件都有它自己样式，如：</p>\n<ul>\n<li><strong>按钮</strong>：<code>mat-button</code></li>\n<li><strong>工具条</strong>：<code>mat-toolbar</code></li>\n<li><strong>表格</strong>：<code>mat-table</code></li>\n<li>etc.</li>\n</ul>\n<p>每个组件添加自己独有的样式，增加css作用域的控制，实现了样式的隔离。</p>\n<p>那么，如果给一个自定义组件添加默认样式呢？接下来我们介绍三种方法来实现我们的目标。</p>\n<h2 id=\"方法一：host\"><a href=\"#方法一：host\" class=\"headerlink\" title=\"方法一：host\"></a>方法一：host</h2><p>在组件的<code>@Component</code>装饰器中提供了<code>host</code>属性，该属性可以为我们提供很多功能的支持，其中一项就是给组件添加样式。</p>\n<p>以Material中的Table为例：</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-meta\">@Component</span>(&#123;\n  moduleId: <span class=\"hljs-built_in\">module</span>.id,\n  selector: <span class=\"hljs-string\">'mat-table, table[mat-table]'</span>,\n  exportAs: <span class=\"hljs-string\">'matTable'</span>,\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: [<span class=\"hljs-string\">'table.css'</span>],\n  host: &#123;\n    <span class=\"hljs-string\">'class'</span>: <span class=\"hljs-string\">'mat-table'</span>,\n  &#125;,\n  providers: [&#123;provide: CdkTable, useExisting: MatTable&#125;],\n  encapsulation: ViewEncapsulation.None,\n  <span class=\"hljs-comment\">// See note on CdkTable for explanation on why this uses the default change detection strategy.</span>\n  <span class=\"hljs-comment\">// tslint:disable-next-line:validate-decorators</span>\n  changeDetection: ChangeDetectionStrategy.Default,\n&#125;)\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> MatTable&lt;T&gt; <span class=\"hljs-keyword\">extends</span> CdkTable&lt;T&gt; &#123;\n  <span class=\"hljs-comment\">/** Overrides the sticky CSS class set by the `CdkTable`. */</span>\n  <span class=\"hljs-keyword\">protected</span> stickyCssClass = <span class=\"hljs-string\">'mat-table-sticky'</span>;\n&#125;</code></pre>\n<p>在MatTable的源码中，我们可以看到为host属性设置了<code>&#39;class&#39;: &#39;mat-table&#39;</code>，在我们使用MatTable组件时，就会添加上默认的样式: <code>mat-table</code>.</p>\n<div class=\"note note-danger\">\n            <p><strong>注意</strong></p><p>虽然在Angular中提供了host属性，并且官方的Material库也是使用该属性实现了很多功能，但是，在Angular编码规范中却不推荐使用该方法。详见：<a href=\"https://angular.cn/guide/styleguide#hostlistenerhostbinding-decorators-versus-host-metadata\" target=\"_blank\" rel=\"noopener\">HostListener 和 HostBinding 装饰器 vs. 组件元数据 host</a></p>\n          </div>\n<h2 id=\"方法二：HostBinding\"><a href=\"#方法二：HostBinding\" class=\"headerlink\" title=\"方法二：HostBinding\"></a>方法二：HostBinding</h2><p>如方法一中注意事项中提到的，官方不推荐使用<code>host</code>属性，推荐使用<code>@HostBinding</code>装饰器来实现<code>host</code>的关于dom属性相关的功能。</p>\n<p>还是以MatTable为例，需要做一下改造来实现相应的功能：</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-meta\">@Component</span>(&#123;\n  moduleId: <span class=\"hljs-built_in\">module</span>.id,\n  selector: <span class=\"hljs-string\">'mat-table, table[mat-table]'</span>,\n  exportAs: <span class=\"hljs-string\">'matTable'</span>,\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: [<span class=\"hljs-string\">'table.css'</span>],\n<span class=\"hljs-comment\">//   host: &#123;</span>\n<span class=\"hljs-comment\">//     'class': 'mat-table',</span>\n<span class=\"hljs-comment\">//   &#125;,</span>\n  providers: [&#123;provide: CdkTable, useExisting: MatTable&#125;],\n  encapsulation: ViewEncapsulation.None,\n  <span class=\"hljs-comment\">// See note on CdkTable for explanation on why this uses the default change detection strategy.</span>\n  <span class=\"hljs-comment\">// tslint:disable-next-line:validate-decorators</span>\n  changeDetection: ChangeDetectionStrategy.Default,\n&#125;)\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> MatTable&lt;T&gt; <span class=\"hljs-keyword\">extends</span> CdkTable&lt;T&gt; &#123;\n  <span class=\"hljs-comment\">/** Overrides the sticky CSS class set by the `CdkTable`. */</span>\n  <span class=\"hljs-keyword\">protected</span> stickyCssClass = <span class=\"hljs-string\">'mat-table-sticky'</span>;\n\n  <span class=\"hljs-comment\">// 使用HostBinding装饰器</span>\n  <span class=\"hljs-meta\">@HostBinding</span>(<span class=\"hljs-string\">'class.mat-table'</span>) clz = <span class=\"hljs-literal\">true</span>;\n&#125;</code></pre>\n<h2 id=\"方法三：Renderer2\"><a href=\"#方法三：Renderer2\" class=\"headerlink\" title=\"方法三：Renderer2\"></a>方法三：Renderer2</h2><p><code>Renderer2</code>是Angular的渲染引擎，我们可以通过它来为自定义组件添加默认样式。</p>\n<p>还是以MatTable为例，需要做一下改造来实现相应的功能：</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-meta\">@Component</span>(&#123;\n  moduleId: <span class=\"hljs-built_in\">module</span>.id,\n  selector: <span class=\"hljs-string\">'mat-table, table[mat-table]'</span>,\n  exportAs: <span class=\"hljs-string\">'matTable'</span>,\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: [<span class=\"hljs-string\">'table.css'</span>],\n<span class=\"hljs-comment\">//   host: &#123;</span>\n<span class=\"hljs-comment\">//     'class': 'mat-table',</span>\n<span class=\"hljs-comment\">//   &#125;,</span>\n  providers: [&#123;provide: CdkTable, useExisting: MatTable&#125;],\n  encapsulation: ViewEncapsulation.None,\n  <span class=\"hljs-comment\">// See note on CdkTable for explanation on why this uses the default change detection strategy.</span>\n  <span class=\"hljs-comment\">// tslint:disable-next-line:validate-decorators</span>\n  changeDetection: ChangeDetectionStrategy.Default,\n&#125;)\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> MatTable&lt;T&gt; <span class=\"hljs-keyword\">extends</span> CdkTable&lt;T&gt; &#123;\n  <span class=\"hljs-comment\">/** Overrides the sticky CSS class set by the `CdkTable`. */</span>\n  <span class=\"hljs-keyword\">protected</span> stickyCssClass = <span class=\"hljs-string\">'mat-table-sticky'</span>;\n\n  <span class=\"hljs-keyword\">constructor</span>(<span class=\"hljs-params\">render: Renderer2, eleRef: ElementRef</span>) &#123;\n      render.addClass(eleRef.nativeElement, <span class=\"hljs-string\">'mat-table'</span>);\n  &#125;\n&#125;</code></pre>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>很多时候，实现一个功能的方法有很多，需要我们不断的去挖掘，去思考。条条大路通罗马，只要努力了总会有收获。</p>\n"},{"title":"Angular开发必不可少的代理配置","date":"2019-08-02T10:07:30.000Z","_content":"\n\n此处说的代理是 `ng serve` 提供的代理服务。\n\n在开发环境中，Angular应用与后端服务联调测试时，Chrome浏览器会对发请求进行跨域检测。通过代理服务，来解决开发模式下的跨域问题。\n\n接下来我们通过代理服务实现请求 `http://localhost:4200/api`  时代理到后端服务`http://localhost:8080/api` \n\n<a name=\"WehaY\"></a>\n## 基本代理\n首先我们需要在项目更目录下创建一个名为 `proxy.conf.json` 的代理配置文件，内容如下：\n\n```json\n{\n  \"/api\": {\n    \"target\": \"http://localhost:8080\",\n    \"secure\": false\n  }\n}\n```\n\n我们通过 `--proxy-config` 参数来加载代理配置文件：\n\n```bash\nng serve --proxy-config=proxy.conf.json\n```\n\n我们还可以在 `angular.json` 中通过 `proxyConfig` 属性来设置代理：\n\n```json\n\"architect\": {\n  \"serve\": {\n    \"builder\": \"@angular-devkit/build-angular:dev-server\",\n    \"options\": {\n      \"browserTarget\": \"your-application-name:build\",\n      \"proxyConfig\": \"proxy.conf.json\"\n    },\n```\n\n> `angular.json` 是Angular CLI的配置文件\n\n<a name=\"B8I6W\"></a>\n## 路径重写\n\n在基本代理中，我们配置了`http://localhost:4200/api` 代理后端服务 `http://localhost:8080/api`。而在实际开发中，我们的后端服务可能没有提供 `/api` 前缀，实际的后端服务可能是这样的：\n\n```\nhttp://localhost:8080/users\nhttp://localhost:8080/orders\n```\n\n在这种情况下，上面配置的基本代理就无法满足我们的需求了，因此后端不存在 `http://localhost:8080/api/users` 服务。幸运的是， `Angular CLI` 代理提供了路径重写功能。\n\n```json\n{\n  \"/api\": {\n    \"target\": \"http://localhost:8080\",\n    \"secure\": false,\n    \"pathRewrite\": {\n      \"^/api\": \"\"\n    }\n  }\n}\n```\n\n此时我们在浏览器访问 `http://localhost:4200/api/users` , 代理服务会给我们代理到后端服务 `http://localhost:8080/users` 上。\n\n路径重写功能可以让我们很好的区分前端路由和后端服务。可以一目了然的知道`http://localhost:4200/api/users`访问的是一个后端服务。\n\n<a name=\"5vMiu\"></a>\n## 非本地域\n随着互联技术的发展，前后端分工越来越明确。前后端的交互就是REST接口。在这样的实际环境中，我们的前端工程师的本地不会运行后端服务，而是使用后端工程师提供的服务，此时，我们的后端服务的域就不会是 `localhost` , 而可能是 `http://test.domain.com/users` 。\n\n此时我们就需要用的代理的另一个参数 `changeOrigin` 来满足我们的需求：\n\n```json\n{\n  \"/api\": {\n    \"target\": \"http://test.domain.com\",\n    \"secure\": false,\n    \"pathRewrite\": {\n      \"^/api\": \"\"\n    },\n    \"changeOrigin\": true\n  }\n}\n```\n\n这样，我们访问 `http://localhost:4200/api/users` 就会被代理到`http://test.domain.com/users` 。\n\n<a name=\"P0aeg\"></a>\n## 代理日志\n在使用前端代理的过程中，如果想要调试代理是否正常工作，还可以添加 `logLevel` 选项：\n\n```json\n{\n  \"/api\": {\n    \"target\": \"http://test.domain.com\",\n    \"secure\": false,\n    \"pathRewrite\": {\n      \"^/api\": \"\"\n    },\n    \"logLevel\": \"debug\"\n  }\n}\n```\n\n`logLevel` 支持的级别选项有 `debug` , `info` , `warn` , `silent` ，默认是 `info` 级别.\n\n<a name=\"n4saq\"></a>\n## 多代理入口\n如果前端需要配置多个入口代理到同一个后端服务，不想使用前面的路径重写方式，我们可以创建一个 `proxy.conf.js` 文件来替代我们上面的 `proxy.conf.json` ：\n\n```javascript\nconst PROXY_CONFIG = [\n    {\n        context: [\n            \"/my\",\n            \"/many\",\n            \"/endpoints\",\n            \"/i\",\n            \"/need\",\n            \"/to\",\n            \"/proxy\"\n        ],\n        target: \"http://localhost:3000\",\n        secure: false\n    }\n]\n\nmodule.exports = PROXY_CONFIG;\n```\n\n修改我们的 `angular.json` 中的 `proxyConfig` 为 `proxy.conf.js` ：\n\n```json\n\"architect\": {\n  \"serve\": {\n    \"builder\": \"@angular-devkit/build-angular:dev-server\",\n    \"options\": {\n      \"browserTarget\": \"your-application-name:build\",\n      \"proxyConfig\": \"proxy.conf.js\"\n    },\n```\n\n\n![](https://user-gold-cdn.xitu.io/2019/7/23/16c1ed307173ecee?w=900&h=450&f=png&s=153639)","source":"_posts/Angular开发必不可少的代理配置.md","raw":"---\ntitle: Angular开发必不可少的代理配置\ndate: 2019-08-02 18:07:30\ntags:\n---\n\n\n此处说的代理是 `ng serve` 提供的代理服务。\n\n在开发环境中，Angular应用与后端服务联调测试时，Chrome浏览器会对发请求进行跨域检测。通过代理服务，来解决开发模式下的跨域问题。\n\n接下来我们通过代理服务实现请求 `http://localhost:4200/api`  时代理到后端服务`http://localhost:8080/api` \n\n<a name=\"WehaY\"></a>\n## 基本代理\n首先我们需要在项目更目录下创建一个名为 `proxy.conf.json` 的代理配置文件，内容如下：\n\n```json\n{\n  \"/api\": {\n    \"target\": \"http://localhost:8080\",\n    \"secure\": false\n  }\n}\n```\n\n我们通过 `--proxy-config` 参数来加载代理配置文件：\n\n```bash\nng serve --proxy-config=proxy.conf.json\n```\n\n我们还可以在 `angular.json` 中通过 `proxyConfig` 属性来设置代理：\n\n```json\n\"architect\": {\n  \"serve\": {\n    \"builder\": \"@angular-devkit/build-angular:dev-server\",\n    \"options\": {\n      \"browserTarget\": \"your-application-name:build\",\n      \"proxyConfig\": \"proxy.conf.json\"\n    },\n```\n\n> `angular.json` 是Angular CLI的配置文件\n\n<a name=\"B8I6W\"></a>\n## 路径重写\n\n在基本代理中，我们配置了`http://localhost:4200/api` 代理后端服务 `http://localhost:8080/api`。而在实际开发中，我们的后端服务可能没有提供 `/api` 前缀，实际的后端服务可能是这样的：\n\n```\nhttp://localhost:8080/users\nhttp://localhost:8080/orders\n```\n\n在这种情况下，上面配置的基本代理就无法满足我们的需求了，因此后端不存在 `http://localhost:8080/api/users` 服务。幸运的是， `Angular CLI` 代理提供了路径重写功能。\n\n```json\n{\n  \"/api\": {\n    \"target\": \"http://localhost:8080\",\n    \"secure\": false,\n    \"pathRewrite\": {\n      \"^/api\": \"\"\n    }\n  }\n}\n```\n\n此时我们在浏览器访问 `http://localhost:4200/api/users` , 代理服务会给我们代理到后端服务 `http://localhost:8080/users` 上。\n\n路径重写功能可以让我们很好的区分前端路由和后端服务。可以一目了然的知道`http://localhost:4200/api/users`访问的是一个后端服务。\n\n<a name=\"5vMiu\"></a>\n## 非本地域\n随着互联技术的发展，前后端分工越来越明确。前后端的交互就是REST接口。在这样的实际环境中，我们的前端工程师的本地不会运行后端服务，而是使用后端工程师提供的服务，此时，我们的后端服务的域就不会是 `localhost` , 而可能是 `http://test.domain.com/users` 。\n\n此时我们就需要用的代理的另一个参数 `changeOrigin` 来满足我们的需求：\n\n```json\n{\n  \"/api\": {\n    \"target\": \"http://test.domain.com\",\n    \"secure\": false,\n    \"pathRewrite\": {\n      \"^/api\": \"\"\n    },\n    \"changeOrigin\": true\n  }\n}\n```\n\n这样，我们访问 `http://localhost:4200/api/users` 就会被代理到`http://test.domain.com/users` 。\n\n<a name=\"P0aeg\"></a>\n## 代理日志\n在使用前端代理的过程中，如果想要调试代理是否正常工作，还可以添加 `logLevel` 选项：\n\n```json\n{\n  \"/api\": {\n    \"target\": \"http://test.domain.com\",\n    \"secure\": false,\n    \"pathRewrite\": {\n      \"^/api\": \"\"\n    },\n    \"logLevel\": \"debug\"\n  }\n}\n```\n\n`logLevel` 支持的级别选项有 `debug` , `info` , `warn` , `silent` ，默认是 `info` 级别.\n\n<a name=\"n4saq\"></a>\n## 多代理入口\n如果前端需要配置多个入口代理到同一个后端服务，不想使用前面的路径重写方式，我们可以创建一个 `proxy.conf.js` 文件来替代我们上面的 `proxy.conf.json` ：\n\n```javascript\nconst PROXY_CONFIG = [\n    {\n        context: [\n            \"/my\",\n            \"/many\",\n            \"/endpoints\",\n            \"/i\",\n            \"/need\",\n            \"/to\",\n            \"/proxy\"\n        ],\n        target: \"http://localhost:3000\",\n        secure: false\n    }\n]\n\nmodule.exports = PROXY_CONFIG;\n```\n\n修改我们的 `angular.json` 中的 `proxyConfig` 为 `proxy.conf.js` ：\n\n```json\n\"architect\": {\n  \"serve\": {\n    \"builder\": \"@angular-devkit/build-angular:dev-server\",\n    \"options\": {\n      \"browserTarget\": \"your-application-name:build\",\n      \"proxyConfig\": \"proxy.conf.js\"\n    },\n```\n\n\n![](https://user-gold-cdn.xitu.io/2019/7/23/16c1ed307173ecee?w=900&h=450&f=png&s=153639)","slug":"Angular开发必不可少的代理配置","published":1,"updated":"2020-07-17T02:32:01.172Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcpntugq002f04oiu7ot9gor","content":"<p>此处说的代理是 <code>ng serve</code> 提供的代理服务。</p>\n<p>在开发环境中，Angular应用与后端服务联调测试时，Chrome浏览器会对发请求进行跨域检测。通过代理服务，来解决开发模式下的跨域问题。</p>\n<p>接下来我们通过代理服务实现请求 <code>http://localhost:4200/api</code>  时代理到后端服务<code>http://localhost:8080/api</code> </p>\n<p><a name=\"WehaY\"></a></p>\n<h2 id=\"基本代理\"><a href=\"#基本代理\" class=\"headerlink\" title=\"基本代理\"></a>基本代理</h2><p>首先我们需要在项目更目录下创建一个名为 <code>proxy.conf.json</code> 的代理配置文件，内容如下：</p>\n<pre><code class=\"hljs json\">&#123;\n  <span class=\"hljs-attr\">\"/api\"</span>: &#123;\n    <span class=\"hljs-attr\">\"target\"</span>: <span class=\"hljs-string\">\"http://localhost:8080\"</span>,\n    <span class=\"hljs-attr\">\"secure\"</span>: <span class=\"hljs-literal\">false</span>\n  &#125;\n&#125;</code></pre>\n<p>我们通过 <code>--proxy-config</code> 参数来加载代理配置文件：</p>\n<pre><code class=\"hljs bash\">ng serve --proxy-config=proxy.conf.json</code></pre>\n<p>我们还可以在 <code>angular.json</code> 中通过 <code>proxyConfig</code> 属性来设置代理：</p>\n<pre><code class=\"hljs json\">\"architect\": &#123;\n  \"serve\": &#123;\n    \"builder\": \"@angular-devkit/build-angular:dev-server\",\n    \"options\": &#123;\n      \"browserTarget\": \"your-application-name:build\",\n      \"proxyConfig\": \"proxy.conf.json\"\n    &#125;,</code></pre>\n<blockquote>\n<p><code>angular.json</code> 是Angular CLI的配置文件</p>\n</blockquote>\n<p><a name=\"B8I6W\"></a></p>\n<h2 id=\"路径重写\"><a href=\"#路径重写\" class=\"headerlink\" title=\"路径重写\"></a>路径重写</h2><p>在基本代理中，我们配置了<code>http://localhost:4200/api</code> 代理后端服务 <code>http://localhost:8080/api</code>。而在实际开发中，我们的后端服务可能没有提供 <code>/api</code> 前缀，实际的后端服务可能是这样的：</p>\n<pre><code class=\"hljs undefined\"><span class=\"hljs-symbol\">http:</span><span class=\"hljs-comment\">//localhost:8080/users</span>\n<span class=\"hljs-symbol\">http:</span><span class=\"hljs-comment\">//localhost:8080/orders</span></code></pre>\n<p>在这种情况下，上面配置的基本代理就无法满足我们的需求了，因此后端不存在 <code>http://localhost:8080/api/users</code> 服务。幸运的是， <code>Angular CLI</code> 代理提供了路径重写功能。</p>\n<pre><code class=\"hljs json\">&#123;\n  <span class=\"hljs-attr\">\"/api\"</span>: &#123;\n    <span class=\"hljs-attr\">\"target\"</span>: <span class=\"hljs-string\">\"http://localhost:8080\"</span>,\n    <span class=\"hljs-attr\">\"secure\"</span>: <span class=\"hljs-literal\">false</span>,\n    <span class=\"hljs-attr\">\"pathRewrite\"</span>: &#123;\n      <span class=\"hljs-attr\">\"^/api\"</span>: <span class=\"hljs-string\">\"\"</span>\n    &#125;\n  &#125;\n&#125;</code></pre>\n<p>此时我们在浏览器访问 <code>http://localhost:4200/api/users</code> , 代理服务会给我们代理到后端服务 <code>http://localhost:8080/users</code> 上。</p>\n<p>路径重写功能可以让我们很好的区分前端路由和后端服务。可以一目了然的知道<code>http://localhost:4200/api/users</code>访问的是一个后端服务。</p>\n<p><a name=\"5vMiu\"></a></p>\n<h2 id=\"非本地域\"><a href=\"#非本地域\" class=\"headerlink\" title=\"非本地域\"></a>非本地域</h2><p>随着互联技术的发展，前后端分工越来越明确。前后端的交互就是REST接口。在这样的实际环境中，我们的前端工程师的本地不会运行后端服务，而是使用后端工程师提供的服务，此时，我们的后端服务的域就不会是 <code>localhost</code> , 而可能是 <code>http://test.domain.com/users</code> 。</p>\n<p>此时我们就需要用的代理的另一个参数 <code>changeOrigin</code> 来满足我们的需求：</p>\n<pre><code class=\"hljs json\">&#123;\n  <span class=\"hljs-attr\">\"/api\"</span>: &#123;\n    <span class=\"hljs-attr\">\"target\"</span>: <span class=\"hljs-string\">\"http://test.domain.com\"</span>,\n    <span class=\"hljs-attr\">\"secure\"</span>: <span class=\"hljs-literal\">false</span>,\n    <span class=\"hljs-attr\">\"pathRewrite\"</span>: &#123;\n      <span class=\"hljs-attr\">\"^/api\"</span>: <span class=\"hljs-string\">\"\"</span>\n    &#125;,\n    <span class=\"hljs-attr\">\"changeOrigin\"</span>: <span class=\"hljs-literal\">true</span>\n  &#125;\n&#125;</code></pre>\n<p>这样，我们访问 <code>http://localhost:4200/api/users</code> 就会被代理到<code>http://test.domain.com/users</code> 。</p>\n<p><a name=\"P0aeg\"></a></p>\n<h2 id=\"代理日志\"><a href=\"#代理日志\" class=\"headerlink\" title=\"代理日志\"></a>代理日志</h2><p>在使用前端代理的过程中，如果想要调试代理是否正常工作，还可以添加 <code>logLevel</code> 选项：</p>\n<pre><code class=\"hljs json\">&#123;\n  <span class=\"hljs-attr\">\"/api\"</span>: &#123;\n    <span class=\"hljs-attr\">\"target\"</span>: <span class=\"hljs-string\">\"http://test.domain.com\"</span>,\n    <span class=\"hljs-attr\">\"secure\"</span>: <span class=\"hljs-literal\">false</span>,\n    <span class=\"hljs-attr\">\"pathRewrite\"</span>: &#123;\n      <span class=\"hljs-attr\">\"^/api\"</span>: <span class=\"hljs-string\">\"\"</span>\n    &#125;,\n    <span class=\"hljs-attr\">\"logLevel\"</span>: <span class=\"hljs-string\">\"debug\"</span>\n  &#125;\n&#125;</code></pre>\n<p><code>logLevel</code> 支持的级别选项有 <code>debug</code> , <code>info</code> , <code>warn</code> , <code>silent</code> ，默认是 <code>info</code> 级别.</p>\n<p><a name=\"n4saq\"></a></p>\n<h2 id=\"多代理入口\"><a href=\"#多代理入口\" class=\"headerlink\" title=\"多代理入口\"></a>多代理入口</h2><p>如果前端需要配置多个入口代理到同一个后端服务，不想使用前面的路径重写方式，我们可以创建一个 <code>proxy.conf.js</code> 文件来替代我们上面的 <code>proxy.conf.json</code> ：</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> PROXY_CONFIG = [\n    &#123;\n        <span class=\"hljs-attr\">context</span>: [\n            <span class=\"hljs-string\">\"/my\"</span>,\n            <span class=\"hljs-string\">\"/many\"</span>,\n            <span class=\"hljs-string\">\"/endpoints\"</span>,\n            <span class=\"hljs-string\">\"/i\"</span>,\n            <span class=\"hljs-string\">\"/need\"</span>,\n            <span class=\"hljs-string\">\"/to\"</span>,\n            <span class=\"hljs-string\">\"/proxy\"</span>\n        ],\n        <span class=\"hljs-attr\">target</span>: <span class=\"hljs-string\">\"http://localhost:3000\"</span>,\n        <span class=\"hljs-attr\">secure</span>: <span class=\"hljs-literal\">false</span>\n    &#125;\n]\n\n<span class=\"hljs-built_in\">module</span>.exports = PROXY_CONFIG;</code></pre>\n<p>修改我们的 <code>angular.json</code> 中的 <code>proxyConfig</code> 为 <code>proxy.conf.js</code> ：</p>\n<pre><code class=\"hljs json\">\"architect\": &#123;\n  \"serve\": &#123;\n    \"builder\": \"@angular-devkit/build-angular:dev-server\",\n    \"options\": &#123;\n      \"browserTarget\": \"your-application-name:build\",\n      \"proxyConfig\": \"proxy.conf.js\"\n    &#125;,</code></pre>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/7/23/16c1ed307173ecee?w=900&amp;h=450&amp;f=png&amp;s=153639\" srcset=\"/img/loading.gif\" alt></p>\n","site":{"data":{}},"excerpt":"","more":"<p>此处说的代理是 <code>ng serve</code> 提供的代理服务。</p>\n<p>在开发环境中，Angular应用与后端服务联调测试时，Chrome浏览器会对发请求进行跨域检测。通过代理服务，来解决开发模式下的跨域问题。</p>\n<p>接下来我们通过代理服务实现请求 <code>http://localhost:4200/api</code>  时代理到后端服务<code>http://localhost:8080/api</code> </p>\n<p><a name=\"WehaY\"></a></p>\n<h2 id=\"基本代理\"><a href=\"#基本代理\" class=\"headerlink\" title=\"基本代理\"></a>基本代理</h2><p>首先我们需要在项目更目录下创建一个名为 <code>proxy.conf.json</code> 的代理配置文件，内容如下：</p>\n<pre><code class=\"hljs json\">&#123;\n  <span class=\"hljs-attr\">\"/api\"</span>: &#123;\n    <span class=\"hljs-attr\">\"target\"</span>: <span class=\"hljs-string\">\"http://localhost:8080\"</span>,\n    <span class=\"hljs-attr\">\"secure\"</span>: <span class=\"hljs-literal\">false</span>\n  &#125;\n&#125;</code></pre>\n<p>我们通过 <code>--proxy-config</code> 参数来加载代理配置文件：</p>\n<pre><code class=\"hljs bash\">ng serve --proxy-config=proxy.conf.json</code></pre>\n<p>我们还可以在 <code>angular.json</code> 中通过 <code>proxyConfig</code> 属性来设置代理：</p>\n<pre><code class=\"hljs json\">\"architect\": &#123;\n  \"serve\": &#123;\n    \"builder\": \"@angular-devkit/build-angular:dev-server\",\n    \"options\": &#123;\n      \"browserTarget\": \"your-application-name:build\",\n      \"proxyConfig\": \"proxy.conf.json\"\n    &#125;,</code></pre>\n<blockquote>\n<p><code>angular.json</code> 是Angular CLI的配置文件</p>\n</blockquote>\n<p><a name=\"B8I6W\"></a></p>\n<h2 id=\"路径重写\"><a href=\"#路径重写\" class=\"headerlink\" title=\"路径重写\"></a>路径重写</h2><p>在基本代理中，我们配置了<code>http://localhost:4200/api</code> 代理后端服务 <code>http://localhost:8080/api</code>。而在实际开发中，我们的后端服务可能没有提供 <code>/api</code> 前缀，实际的后端服务可能是这样的：</p>\n<pre><code class=\"hljs undefined\"><span class=\"hljs-symbol\">http:</span><span class=\"hljs-comment\">//localhost:8080/users</span>\n<span class=\"hljs-symbol\">http:</span><span class=\"hljs-comment\">//localhost:8080/orders</span></code></pre>\n<p>在这种情况下，上面配置的基本代理就无法满足我们的需求了，因此后端不存在 <code>http://localhost:8080/api/users</code> 服务。幸运的是， <code>Angular CLI</code> 代理提供了路径重写功能。</p>\n<pre><code class=\"hljs json\">&#123;\n  <span class=\"hljs-attr\">\"/api\"</span>: &#123;\n    <span class=\"hljs-attr\">\"target\"</span>: <span class=\"hljs-string\">\"http://localhost:8080\"</span>,\n    <span class=\"hljs-attr\">\"secure\"</span>: <span class=\"hljs-literal\">false</span>,\n    <span class=\"hljs-attr\">\"pathRewrite\"</span>: &#123;\n      <span class=\"hljs-attr\">\"^/api\"</span>: <span class=\"hljs-string\">\"\"</span>\n    &#125;\n  &#125;\n&#125;</code></pre>\n<p>此时我们在浏览器访问 <code>http://localhost:4200/api/users</code> , 代理服务会给我们代理到后端服务 <code>http://localhost:8080/users</code> 上。</p>\n<p>路径重写功能可以让我们很好的区分前端路由和后端服务。可以一目了然的知道<code>http://localhost:4200/api/users</code>访问的是一个后端服务。</p>\n<p><a name=\"5vMiu\"></a></p>\n<h2 id=\"非本地域\"><a href=\"#非本地域\" class=\"headerlink\" title=\"非本地域\"></a>非本地域</h2><p>随着互联技术的发展，前后端分工越来越明确。前后端的交互就是REST接口。在这样的实际环境中，我们的前端工程师的本地不会运行后端服务，而是使用后端工程师提供的服务，此时，我们的后端服务的域就不会是 <code>localhost</code> , 而可能是 <code>http://test.domain.com/users</code> 。</p>\n<p>此时我们就需要用的代理的另一个参数 <code>changeOrigin</code> 来满足我们的需求：</p>\n<pre><code class=\"hljs json\">&#123;\n  <span class=\"hljs-attr\">\"/api\"</span>: &#123;\n    <span class=\"hljs-attr\">\"target\"</span>: <span class=\"hljs-string\">\"http://test.domain.com\"</span>,\n    <span class=\"hljs-attr\">\"secure\"</span>: <span class=\"hljs-literal\">false</span>,\n    <span class=\"hljs-attr\">\"pathRewrite\"</span>: &#123;\n      <span class=\"hljs-attr\">\"^/api\"</span>: <span class=\"hljs-string\">\"\"</span>\n    &#125;,\n    <span class=\"hljs-attr\">\"changeOrigin\"</span>: <span class=\"hljs-literal\">true</span>\n  &#125;\n&#125;</code></pre>\n<p>这样，我们访问 <code>http://localhost:4200/api/users</code> 就会被代理到<code>http://test.domain.com/users</code> 。</p>\n<p><a name=\"P0aeg\"></a></p>\n<h2 id=\"代理日志\"><a href=\"#代理日志\" class=\"headerlink\" title=\"代理日志\"></a>代理日志</h2><p>在使用前端代理的过程中，如果想要调试代理是否正常工作，还可以添加 <code>logLevel</code> 选项：</p>\n<pre><code class=\"hljs json\">&#123;\n  <span class=\"hljs-attr\">\"/api\"</span>: &#123;\n    <span class=\"hljs-attr\">\"target\"</span>: <span class=\"hljs-string\">\"http://test.domain.com\"</span>,\n    <span class=\"hljs-attr\">\"secure\"</span>: <span class=\"hljs-literal\">false</span>,\n    <span class=\"hljs-attr\">\"pathRewrite\"</span>: &#123;\n      <span class=\"hljs-attr\">\"^/api\"</span>: <span class=\"hljs-string\">\"\"</span>\n    &#125;,\n    <span class=\"hljs-attr\">\"logLevel\"</span>: <span class=\"hljs-string\">\"debug\"</span>\n  &#125;\n&#125;</code></pre>\n<p><code>logLevel</code> 支持的级别选项有 <code>debug</code> , <code>info</code> , <code>warn</code> , <code>silent</code> ，默认是 <code>info</code> 级别.</p>\n<p><a name=\"n4saq\"></a></p>\n<h2 id=\"多代理入口\"><a href=\"#多代理入口\" class=\"headerlink\" title=\"多代理入口\"></a>多代理入口</h2><p>如果前端需要配置多个入口代理到同一个后端服务，不想使用前面的路径重写方式，我们可以创建一个 <code>proxy.conf.js</code> 文件来替代我们上面的 <code>proxy.conf.json</code> ：</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> PROXY_CONFIG = [\n    &#123;\n        <span class=\"hljs-attr\">context</span>: [\n            <span class=\"hljs-string\">\"/my\"</span>,\n            <span class=\"hljs-string\">\"/many\"</span>,\n            <span class=\"hljs-string\">\"/endpoints\"</span>,\n            <span class=\"hljs-string\">\"/i\"</span>,\n            <span class=\"hljs-string\">\"/need\"</span>,\n            <span class=\"hljs-string\">\"/to\"</span>,\n            <span class=\"hljs-string\">\"/proxy\"</span>\n        ],\n        <span class=\"hljs-attr\">target</span>: <span class=\"hljs-string\">\"http://localhost:3000\"</span>,\n        <span class=\"hljs-attr\">secure</span>: <span class=\"hljs-literal\">false</span>\n    &#125;\n]\n\n<span class=\"hljs-built_in\">module</span>.exports = PROXY_CONFIG;</code></pre>\n<p>修改我们的 <code>angular.json</code> 中的 <code>proxyConfig</code> 为 <code>proxy.conf.js</code> ：</p>\n<pre><code class=\"hljs json\">\"architect\": &#123;\n  \"serve\": &#123;\n    \"builder\": \"@angular-devkit/build-angular:dev-server\",\n    \"options\": &#123;\n      \"browserTarget\": \"your-application-name:build\",\n      \"proxyConfig\": \"proxy.conf.js\"\n    &#125;,</code></pre>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/7/23/16c1ed307173ecee?w=900&amp;h=450&amp;f=png&amp;s=153639\" srcset=\"/img/loading.gif\" alt></p>\n"},{"title":"Angular打包优化之momentjs瘦身","date":"2019-06-26T08:18:46.000Z","photos":["https://i.loli.net/2019/06/10/5cfdf6dca539f47762.png"],"_content":"\n项目中使用到了moment.js，编译后发现moment的locale文件全部被打包到发布文件中，且moment的大部分都是locale文件，实际上我们只需要zh-cn这个语言包。\n\n使用`webpack-bundle-analyzer`分析见图:\n\n![PIC](https://cdn.nlark.com/yuque/0/2019/png/269363/1561536056876-assets/web-upload/321acf7d-a2f8-4649-ad76-dcf826773709.png)\n\nmoment.js 并不是一个现代化的模块化的库， 无法对其进行Tree Shaking优化。\n\n我们需要借助第三方的builder组件: `@angular-builders/custom-webpack`，来扩展Angular的编译过程。\n\n## 安装\n\n> npm i -D @angular-builders/custom-webpack\n\n因为是开发中需要的包，我们要把`@angular-builders/custom-webpack`添加到`devDependencies`中。\n\n## 配置\n\n修改angular.json中builder，将其替换为我们新安装的`@angular-builders/custom-webpack`:\n\n```json\n...\n\"architect\": {\n        \"build\": {\n          \"builder\": \"@angular-builders/custom-webpack:browser\",\n          \"options\": {\n            \"customWebpackConfig\": {\n              \"path\": \"./extra-webpack.config.js\",\n              \"replaceDuplicatePlugins\": true,\n              \"mergeStrategies\": {\n                \"externals\": \"prepend\"\n              }\n            },\n            ....\n          }\n        }\n}\n```\n\n在上面的配置中，我们用到自定义的`extra-webpack.config.js`，因此我们需要手动创建该文件，内容为：\n\n```javascript\n\n'use strict';\n\nconst webpack = require('webpack');\n\n// https://webpack.js.org/plugins/context-replacement-plugin/\nmodule.exports = {\n    plugins: [new webpack.ContextReplacementPlugin(/moment[/\\\\]locale$/, /zh-cn/)]\n};\n\n```\n\n至此，我们的moment.js的优化配置已完成。\n\n再次执行`webpack-bundle-analyzer`分析：\n\n![PIC](https://cdn.nlark.com/yuque/0/2019/png/269363/1561537017238-assets/web-upload/ffc4b654-ab56-4185-8b4b-df925e8052d1.png)\n\n我们会发现，新编辑的文件中locale文件只剩下了我们需要的zh-cn。\n","source":"_posts/Angular打包优化之momentjs瘦身.md","raw":"---\ntitle: Angular打包优化之momentjs瘦身\ntags:\n  - Angular\ncategories:\n  - 前端\ndate: 2019-06-26 16:18:46\nphotos:\n    - https://i.loli.net/2019/06/10/5cfdf6dca539f47762.png\n---\n\n项目中使用到了moment.js，编译后发现moment的locale文件全部被打包到发布文件中，且moment的大部分都是locale文件，实际上我们只需要zh-cn这个语言包。\n\n使用`webpack-bundle-analyzer`分析见图:\n\n![PIC](https://cdn.nlark.com/yuque/0/2019/png/269363/1561536056876-assets/web-upload/321acf7d-a2f8-4649-ad76-dcf826773709.png)\n\nmoment.js 并不是一个现代化的模块化的库， 无法对其进行Tree Shaking优化。\n\n我们需要借助第三方的builder组件: `@angular-builders/custom-webpack`，来扩展Angular的编译过程。\n\n## 安装\n\n> npm i -D @angular-builders/custom-webpack\n\n因为是开发中需要的包，我们要把`@angular-builders/custom-webpack`添加到`devDependencies`中。\n\n## 配置\n\n修改angular.json中builder，将其替换为我们新安装的`@angular-builders/custom-webpack`:\n\n```json\n...\n\"architect\": {\n        \"build\": {\n          \"builder\": \"@angular-builders/custom-webpack:browser\",\n          \"options\": {\n            \"customWebpackConfig\": {\n              \"path\": \"./extra-webpack.config.js\",\n              \"replaceDuplicatePlugins\": true,\n              \"mergeStrategies\": {\n                \"externals\": \"prepend\"\n              }\n            },\n            ....\n          }\n        }\n}\n```\n\n在上面的配置中，我们用到自定义的`extra-webpack.config.js`，因此我们需要手动创建该文件，内容为：\n\n```javascript\n\n'use strict';\n\nconst webpack = require('webpack');\n\n// https://webpack.js.org/plugins/context-replacement-plugin/\nmodule.exports = {\n    plugins: [new webpack.ContextReplacementPlugin(/moment[/\\\\]locale$/, /zh-cn/)]\n};\n\n```\n\n至此，我们的moment.js的优化配置已完成。\n\n再次执行`webpack-bundle-analyzer`分析：\n\n![PIC](https://cdn.nlark.com/yuque/0/2019/png/269363/1561537017238-assets/web-upload/ffc4b654-ab56-4185-8b4b-df925e8052d1.png)\n\n我们会发现，新编辑的文件中locale文件只剩下了我们需要的zh-cn。\n","slug":"Angular打包优化之momentjs瘦身","published":1,"updated":"2020-07-17T02:32:01.173Z","comments":1,"layout":"post","link":"","_id":"ckcpntugs002i04oib94q216n","content":"<p>项目中使用到了moment.js，编译后发现moment的locale文件全部被打包到发布文件中，且moment的大部分都是locale文件，实际上我们只需要zh-cn这个语言包。</p>\n<p>使用<code>webpack-bundle-analyzer</code>分析见图:</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/269363/1561536056876-assets/web-upload/321acf7d-a2f8-4649-ad76-dcf826773709.png\" srcset=\"/img/loading.gif\" alt=\"PIC\"></p>\n<p>moment.js 并不是一个现代化的模块化的库， 无法对其进行Tree Shaking优化。</p>\n<p>我们需要借助第三方的builder组件: <code>@angular-builders/custom-webpack</code>，来扩展Angular的编译过程。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><blockquote>\n<p>npm i -D @angular-builders/custom-webpack</p>\n</blockquote>\n<p>因为是开发中需要的包，我们要把<code>@angular-builders/custom-webpack</code>添加到<code>devDependencies</code>中。</p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>修改angular.json中builder，将其替换为我们新安装的<code>@angular-builders/custom-webpack</code>:</p>\n<pre><code class=\"hljs json\">...\n\"architect\": &#123;\n        \"build\": &#123;\n          \"builder\": \"@angular-builders/custom-webpack:browser\",\n          \"options\": &#123;\n            \"customWebpackConfig\": &#123;\n              \"path\": \"./extra-webpack.config.js\",\n              \"replaceDuplicatePlugins\": true,\n              \"mergeStrategies\": &#123;\n                \"externals\": \"prepend\"\n              &#125;\n            &#125;,\n            ....\n          &#125;\n        &#125;\n&#125;</code></pre>\n<p>在上面的配置中，我们用到自定义的<code>extra-webpack.config.js</code>，因此我们需要手动创建该文件，内容为：</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-meta\">\n'use strict'</span>;\n\n<span class=\"hljs-keyword\">const</span> webpack = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'webpack'</span>);\n\n<span class=\"hljs-comment\">// https://webpack.js.org/plugins/context-replacement-plugin/</span>\n<span class=\"hljs-built_in\">module</span>.exports = &#123;\n    <span class=\"hljs-attr\">plugins</span>: [<span class=\"hljs-keyword\">new</span> webpack.ContextReplacementPlugin(<span class=\"hljs-regexp\">/moment[/\\\\]locale$/</span>, /zh-cn/)]\n&#125;;</code></pre>\n<p>至此，我们的moment.js的优化配置已完成。</p>\n<p>再次执行<code>webpack-bundle-analyzer</code>分析：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/269363/1561537017238-assets/web-upload/ffc4b654-ab56-4185-8b4b-df925e8052d1.png\" srcset=\"/img/loading.gif\" alt=\"PIC\"></p>\n<p>我们会发现，新编辑的文件中locale文件只剩下了我们需要的zh-cn。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>项目中使用到了moment.js，编译后发现moment的locale文件全部被打包到发布文件中，且moment的大部分都是locale文件，实际上我们只需要zh-cn这个语言包。</p>\n<p>使用<code>webpack-bundle-analyzer</code>分析见图:</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/269363/1561536056876-assets/web-upload/321acf7d-a2f8-4649-ad76-dcf826773709.png\" srcset=\"/img/loading.gif\" alt=\"PIC\"></p>\n<p>moment.js 并不是一个现代化的模块化的库， 无法对其进行Tree Shaking优化。</p>\n<p>我们需要借助第三方的builder组件: <code>@angular-builders/custom-webpack</code>，来扩展Angular的编译过程。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><blockquote>\n<p>npm i -D @angular-builders/custom-webpack</p>\n</blockquote>\n<p>因为是开发中需要的包，我们要把<code>@angular-builders/custom-webpack</code>添加到<code>devDependencies</code>中。</p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>修改angular.json中builder，将其替换为我们新安装的<code>@angular-builders/custom-webpack</code>:</p>\n<pre><code class=\"hljs json\">...\n\"architect\": &#123;\n        \"build\": &#123;\n          \"builder\": \"@angular-builders/custom-webpack:browser\",\n          \"options\": &#123;\n            \"customWebpackConfig\": &#123;\n              \"path\": \"./extra-webpack.config.js\",\n              \"replaceDuplicatePlugins\": true,\n              \"mergeStrategies\": &#123;\n                \"externals\": \"prepend\"\n              &#125;\n            &#125;,\n            ....\n          &#125;\n        &#125;\n&#125;</code></pre>\n<p>在上面的配置中，我们用到自定义的<code>extra-webpack.config.js</code>，因此我们需要手动创建该文件，内容为：</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-meta\">\n'use strict'</span>;\n\n<span class=\"hljs-keyword\">const</span> webpack = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'webpack'</span>);\n\n<span class=\"hljs-comment\">// https://webpack.js.org/plugins/context-replacement-plugin/</span>\n<span class=\"hljs-built_in\">module</span>.exports = &#123;\n    <span class=\"hljs-attr\">plugins</span>: [<span class=\"hljs-keyword\">new</span> webpack.ContextReplacementPlugin(<span class=\"hljs-regexp\">/moment[/\\\\]locale$/</span>, /zh-cn/)]\n&#125;;</code></pre>\n<p>至此，我们的moment.js的优化配置已完成。</p>\n<p>再次执行<code>webpack-bundle-analyzer</code>分析：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/269363/1561537017238-assets/web-upload/ffc4b654-ab56-4185-8b4b-df925e8052d1.png\" srcset=\"/img/loading.gif\" alt=\"PIC\"></p>\n<p>我们会发现，新编辑的文件中locale文件只剩下了我们需要的zh-cn。</p>\n"},{"title":"Angular核心技术之组件","id":"angular-he-xin-ji-shu-zhi-zu-jian","date":"2019-08-02T10:09:40.000Z","_content":"\n# 组件(component)\n\nAngular 组件是一个由模板组成的元素，通过组件来渲染我们的应用。\n\n<a name=\"FEhYx\"></a>\n## 一个简单组件\nAngular提供了@Component装饰器来，我们需要使用该装饰器来定义一个组件。\n\n@Component内置了一些参数：\n\n- `providers` : 用来声明一些资源，这些资源可以在构造函数中通过DI注入。\n- `selector` :  在html中适应的查询选择器，Angular会使用定义的组件替换html中的该选择器\n- `styles` :  定义一组内联样式，数组类型\n- `styleUrls` ：一组样式文件\n- `template` ：内联模板\n- `templateUrl` ：模板文件\n\n例子：\n\n```typescript\nimport { Component } from '@angular/core';\n\n@Component({\n\tselector: 'app-required',\n  styleUrls: ['requried.component.scss'],\n  templateUrl: 'required.component.html'\n})\nexport class RequiredComponent { }\n```\n\n<a name=\"wtq6O\"></a>\n## 模板 & 样式\n模板是html文件，里面可以包含一些逻辑。\n\n我们可以通过两种方式来指定组件的模板：\n\n1. 通过文件路径来指定模板\n\n```typescript\n@Component({\n  templateUrl: 'hero.component.html'\n})\n```\n\n2. 通过使用内联方式指定模板\n\n```typescript\n@Component({\n  template: '<div>This is a template.</div>'\n})\n```\n\n组件中定义的模板可以包含样式，我们可以在@Component中定义当前模板的样式。在组件中定义的样式和应用的style.css中定义是有区别的。组件中定义的任何样式，作用域都被限制在此组件内。<br />例如，我们在组件中添加样式：\n\n```css\ndiv {background: red;}\n```\n\n组件模板内的所有的div背景都会渲染成红色，但是其他组件中的div不会受到此样式的影响。<br />编译后的代码类似如下这样：\n\n```html\n<style>div[_ngcontent-c1] {background:red;}</style>\n```\n\n我们可以通过两种方式为组件的模板定义样式：\n\n1. 通过文件的方式\n\n```typescript\n@Component({\n  styleUrls: ['hero.component.css']\n})\n```\n\n\n2. 通过内联的方式\n\n```typescript\nstyles: [`div {background: red;}`]\n```\n\n<a name=\"kG6AR\"></a>\n## 如何选择\n不论模版还是样式，组件都提供来两种方式来声明它们。理论上我们可以随心所欲，自由组合。但实际的开发过程中我们还是需要有自己的原则：根据实际内容的多少来选择声明方式，内容较多就选择文件方式，这样可以使代码结构更加清晰，整洁。\n\n<a name=\"H1L5Y\"></a>\n## 组件测试\n`hero.component.html` \n\n```html\n<form (ngSubmit)=\"submit($event)\" [formGroup]=\"form\" novalidate>\n  <input type=\"text\" formControlName=\"name\"/>\n  <button type=\"submit\"> Show hero name</button>\n</form>\n```\n\n`hero.component.ts` \n\n```typescript\nimport { FromControl, FormGroup, Validators } from '@angular/forms';\nimport { Component } from '@angular/core';\n\n@Component({\n  slector: 'app-hero',\n  templateUrl: 'hero.component.html'\n})\nexport class HeroComponent {\n  public form = new FormGroup({\n    name: new FormControl('', Validators.required)\n  });\n  \n  submit(event) {\n    console.log(event);\n    console.log(this.form.controls.name.value);\n  }\n}\n```\n\n`hero.component.spec.ts` \n\n```typescript\nimport { ComponentFixture, TestBed, async } from '@angular/core/testing';\n\nimport { HeroComponent } from 'hero.component';\nimport { ReactiveFormsModule } from '@angular/forms';\n\ndescribe('HeroComponent', () => {\n  let component: HeroComponent;\n  let fixture: ComponentFixture<HeroComponent>;\n  \n  beforeEach(async(() => {\n    TestBed.configureTestingModule({\n      declarations: [HeroComponent],\n      imports: [ReactiveFormsModule]\n    }).compileComponents();\n    \n    fixtrue = TestBed.createComponent(HeroComponent);\n    component = fixtrue.componentInstance;\n    fixture.detectChanges();\n  }));\n  \n  it('should be created', () => {\n    expect(component).toBetruthy();\n  });\n  \n  it('should log hero name in the console when user submit form', async(() => {\n    const heroName = 'Saitama';\n    const element = <HTMLFormElement>fixture.debugElement.nativeElement.querySelector('form');\n    \n    spyOn(console, 'log').and.callThrough();\n    \n    component.form.controls['name'].setValue(heroName);\n    \n    element.querySelector('button').click();\n    \n    fixture.whenStable().then(() => {\n      fixture.detectChanges();\n      expect(console.log).toHaveBeenCalledWith(heroName);\n    });\n  }));\n  \n  it('should validate name field as required', () => {\n    component.form.controls['name'].setValue('');\n    expect(component.form.invalid).toBeTruthy();\n  });\n})\n```\n\n<a name=\"RVpq8\"></a>\n## 嵌套组件\n组件是通过selector来渲染的，所以我们就可以通过嵌套的方式来使用所有的组件。\n\n```typescript\nimport { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-required',\n  template: `{{name}} is required.`\n})\nexport class RequiredComponent {\n  @Input()\n  public name: string = '';\n}\n```\n我们就可以在其他的组件中，通过使用app-required标签来嵌套我们的组件。\n\n```typescript\nimport { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-sample',\n  template: `\n  <input type=\"text\" name=\"heroName\" />\n\t<app-required name=\"Hero Name\"></app-required>\n`\n})\nexport class SampleComponent {\n  @Input()\n  public name = '';\n}\n```\n\n","source":"_posts/Angular核心技术之组件.md","raw":"---\ntitle: Angular核心技术之组件\nid: angular-he-xin-ji-shu-zhi-zu-jian\ndate: 2019-08-02 18:09:40\ntags:\n---\n\n# 组件(component)\n\nAngular 组件是一个由模板组成的元素，通过组件来渲染我们的应用。\n\n<a name=\"FEhYx\"></a>\n## 一个简单组件\nAngular提供了@Component装饰器来，我们需要使用该装饰器来定义一个组件。\n\n@Component内置了一些参数：\n\n- `providers` : 用来声明一些资源，这些资源可以在构造函数中通过DI注入。\n- `selector` :  在html中适应的查询选择器，Angular会使用定义的组件替换html中的该选择器\n- `styles` :  定义一组内联样式，数组类型\n- `styleUrls` ：一组样式文件\n- `template` ：内联模板\n- `templateUrl` ：模板文件\n\n例子：\n\n```typescript\nimport { Component } from '@angular/core';\n\n@Component({\n\tselector: 'app-required',\n  styleUrls: ['requried.component.scss'],\n  templateUrl: 'required.component.html'\n})\nexport class RequiredComponent { }\n```\n\n<a name=\"wtq6O\"></a>\n## 模板 & 样式\n模板是html文件，里面可以包含一些逻辑。\n\n我们可以通过两种方式来指定组件的模板：\n\n1. 通过文件路径来指定模板\n\n```typescript\n@Component({\n  templateUrl: 'hero.component.html'\n})\n```\n\n2. 通过使用内联方式指定模板\n\n```typescript\n@Component({\n  template: '<div>This is a template.</div>'\n})\n```\n\n组件中定义的模板可以包含样式，我们可以在@Component中定义当前模板的样式。在组件中定义的样式和应用的style.css中定义是有区别的。组件中定义的任何样式，作用域都被限制在此组件内。<br />例如，我们在组件中添加样式：\n\n```css\ndiv {background: red;}\n```\n\n组件模板内的所有的div背景都会渲染成红色，但是其他组件中的div不会受到此样式的影响。<br />编译后的代码类似如下这样：\n\n```html\n<style>div[_ngcontent-c1] {background:red;}</style>\n```\n\n我们可以通过两种方式为组件的模板定义样式：\n\n1. 通过文件的方式\n\n```typescript\n@Component({\n  styleUrls: ['hero.component.css']\n})\n```\n\n\n2. 通过内联的方式\n\n```typescript\nstyles: [`div {background: red;}`]\n```\n\n<a name=\"kG6AR\"></a>\n## 如何选择\n不论模版还是样式，组件都提供来两种方式来声明它们。理论上我们可以随心所欲，自由组合。但实际的开发过程中我们还是需要有自己的原则：根据实际内容的多少来选择声明方式，内容较多就选择文件方式，这样可以使代码结构更加清晰，整洁。\n\n<a name=\"H1L5Y\"></a>\n## 组件测试\n`hero.component.html` \n\n```html\n<form (ngSubmit)=\"submit($event)\" [formGroup]=\"form\" novalidate>\n  <input type=\"text\" formControlName=\"name\"/>\n  <button type=\"submit\"> Show hero name</button>\n</form>\n```\n\n`hero.component.ts` \n\n```typescript\nimport { FromControl, FormGroup, Validators } from '@angular/forms';\nimport { Component } from '@angular/core';\n\n@Component({\n  slector: 'app-hero',\n  templateUrl: 'hero.component.html'\n})\nexport class HeroComponent {\n  public form = new FormGroup({\n    name: new FormControl('', Validators.required)\n  });\n  \n  submit(event) {\n    console.log(event);\n    console.log(this.form.controls.name.value);\n  }\n}\n```\n\n`hero.component.spec.ts` \n\n```typescript\nimport { ComponentFixture, TestBed, async } from '@angular/core/testing';\n\nimport { HeroComponent } from 'hero.component';\nimport { ReactiveFormsModule } from '@angular/forms';\n\ndescribe('HeroComponent', () => {\n  let component: HeroComponent;\n  let fixture: ComponentFixture<HeroComponent>;\n  \n  beforeEach(async(() => {\n    TestBed.configureTestingModule({\n      declarations: [HeroComponent],\n      imports: [ReactiveFormsModule]\n    }).compileComponents();\n    \n    fixtrue = TestBed.createComponent(HeroComponent);\n    component = fixtrue.componentInstance;\n    fixture.detectChanges();\n  }));\n  \n  it('should be created', () => {\n    expect(component).toBetruthy();\n  });\n  \n  it('should log hero name in the console when user submit form', async(() => {\n    const heroName = 'Saitama';\n    const element = <HTMLFormElement>fixture.debugElement.nativeElement.querySelector('form');\n    \n    spyOn(console, 'log').and.callThrough();\n    \n    component.form.controls['name'].setValue(heroName);\n    \n    element.querySelector('button').click();\n    \n    fixture.whenStable().then(() => {\n      fixture.detectChanges();\n      expect(console.log).toHaveBeenCalledWith(heroName);\n    });\n  }));\n  \n  it('should validate name field as required', () => {\n    component.form.controls['name'].setValue('');\n    expect(component.form.invalid).toBeTruthy();\n  });\n})\n```\n\n<a name=\"RVpq8\"></a>\n## 嵌套组件\n组件是通过selector来渲染的，所以我们就可以通过嵌套的方式来使用所有的组件。\n\n```typescript\nimport { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-required',\n  template: `{{name}} is required.`\n})\nexport class RequiredComponent {\n  @Input()\n  public name: string = '';\n}\n```\n我们就可以在其他的组件中，通过使用app-required标签来嵌套我们的组件。\n\n```typescript\nimport { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-sample',\n  template: `\n  <input type=\"text\" name=\"heroName\" />\n\t<app-required name=\"Hero Name\"></app-required>\n`\n})\nexport class SampleComponent {\n  @Input()\n  public name = '';\n}\n```\n\n","slug":"Angular核心技术之组件","published":1,"updated":"2020-07-17T02:32:01.174Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcpntugu002m04oixtwt4dot","content":"<h1 id=\"组件-component\"><a href=\"#组件-component\" class=\"headerlink\" title=\"组件(component)\"></a>组件(component)</h1><p>Angular 组件是一个由模板组成的元素，通过组件来渲染我们的应用。</p>\n<p><a name=\"FEhYx\"></a></p>\n<h2 id=\"一个简单组件\"><a href=\"#一个简单组件\" class=\"headerlink\" title=\"一个简单组件\"></a>一个简单组件</h2><p>Angular提供了@Component装饰器来，我们需要使用该装饰器来定义一个组件。</p>\n<p>@Component内置了一些参数：</p>\n<ul>\n<li><code>providers</code> : 用来声明一些资源，这些资源可以在构造函数中通过DI注入。</li>\n<li><code>selector</code> :  在html中适应的查询选择器，Angular会使用定义的组件替换html中的该选择器</li>\n<li><code>styles</code> :  定义一组内联样式，数组类型</li>\n<li><code>styleUrls</code> ：一组样式文件</li>\n<li><code>template</code> ：内联模板</li>\n<li><code>templateUrl</code> ：模板文件</li>\n</ul>\n<p>例子：</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">import</span> &#123; Component &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n\n<span class=\"hljs-meta\">@Component</span>(&#123;\n\tselector: <span class=\"hljs-string\">'app-required'</span>,\n  styleUrls: [<span class=\"hljs-string\">'requried.component.scss'</span>],\n  templateUrl: <span class=\"hljs-string\">'required.component.html'</span>\n&#125;)\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> RequiredComponent &#123; &#125;</code></pre>\n<p><a name=\"wtq6O\"></a></p>\n<h2 id=\"模板-amp-样式\"><a href=\"#模板-amp-样式\" class=\"headerlink\" title=\"模板 &amp; 样式\"></a>模板 &amp; 样式</h2><p>模板是html文件，里面可以包含一些逻辑。</p>\n<p>我们可以通过两种方式来指定组件的模板：</p>\n<ol>\n<li>通过文件路径来指定模板</li>\n</ol>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-meta\">@Component</span>(&#123;\n  templateUrl: <span class=\"hljs-string\">'hero.component.html'</span>\n&#125;)</code></pre>\n<ol start=\"2\">\n<li>通过使用内联方式指定模板</li>\n</ol>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-meta\">@Component</span>(&#123;\n  template: <span class=\"hljs-string\">'&lt;div&gt;This is a template.&lt;/div&gt;'</span>\n&#125;)</code></pre>\n<p>组件中定义的模板可以包含样式，我们可以在@Component中定义当前模板的样式。在组件中定义的样式和应用的style.css中定义是有区别的。组件中定义的任何样式，作用域都被限制在此组件内。<br>例如，我们在组件中添加样式：</p>\n<pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">div</span> &#123;<span class=\"hljs-attribute\">background</span>: red;&#125;</code></pre>\n<p>组件模板内的所有的div背景都会渲染成红色，但是其他组件中的div不会受到此样式的影响。<br>编译后的代码类似如下这样：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\"><span class=\"hljs-selector-tag\">div</span><span class=\"hljs-selector-attr\">[_ngcontent-c1]</span> &#123;<span class=\"hljs-attribute\">background</span>:red;&#125;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></code></pre>\n<p>我们可以通过两种方式为组件的模板定义样式：</p>\n<ol>\n<li>通过文件的方式</li>\n</ol>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-meta\">@Component</span>(&#123;\n  styleUrls: [<span class=\"hljs-string\">'hero.component.css'</span>]\n&#125;)</code></pre>\n<ol start=\"2\">\n<li>通过内联的方式</li>\n</ol>\n<pre><code class=\"hljs typescript\">styles: [<span class=\"hljs-string\">`div &#123;background: red;&#125;`</span>]</code></pre>\n<p><a name=\"kG6AR\"></a></p>\n<h2 id=\"如何选择\"><a href=\"#如何选择\" class=\"headerlink\" title=\"如何选择\"></a>如何选择</h2><p>不论模版还是样式，组件都提供来两种方式来声明它们。理论上我们可以随心所欲，自由组合。但实际的开发过程中我们还是需要有自己的原则：根据实际内容的多少来选择声明方式，内容较多就选择文件方式，这样可以使代码结构更加清晰，整洁。</p>\n<p><a name=\"H1L5Y\"></a></p>\n<h2 id=\"组件测试\"><a href=\"#组件测试\" class=\"headerlink\" title=\"组件测试\"></a>组件测试</h2><p><code>hero.component.html</code> </p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> (<span class=\"hljs-attr\">ngSubmit</span>)=<span class=\"hljs-string\">\"submit($event)\"</span> [<span class=\"hljs-attr\">formGroup</span>]=<span class=\"hljs-string\">\"form\"</span> <span class=\"hljs-attr\">novalidate</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">formControlName</span>=<span class=\"hljs-string\">\"name\"</span>/&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"submit\"</span>&gt;</span> Show hero name<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span></code></pre>\n<p><code>hero.component.ts</code> </p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">import</span> &#123; FromControl, FormGroup, Validators &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/forms'</span>;\n<span class=\"hljs-keyword\">import</span> &#123; Component &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n\n<span class=\"hljs-meta\">@Component</span>(&#123;\n  slector: <span class=\"hljs-string\">'app-hero'</span>,\n  templateUrl: <span class=\"hljs-string\">'hero.component.html'</span>\n&#125;)\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> HeroComponent &#123;\n  <span class=\"hljs-keyword\">public</span> form = <span class=\"hljs-keyword\">new</span> FormGroup(&#123;\n    name: <span class=\"hljs-keyword\">new</span> FormControl(<span class=\"hljs-string\">''</span>, Validators.required)\n  &#125;);\n  \n  submit(event) &#123;\n    <span class=\"hljs-built_in\">console</span>.log(event);\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>.form.controls.name.value);\n  &#125;\n&#125;</code></pre>\n<p><code>hero.component.spec.ts</code> </p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">import</span> &#123; ComponentFixture, TestBed, <span class=\"hljs-keyword\">async</span> &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core/testing'</span>;\n\n<span class=\"hljs-keyword\">import</span> &#123; HeroComponent &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'hero.component'</span>;\n<span class=\"hljs-keyword\">import</span> &#123; ReactiveFormsModule &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/forms'</span>;\n\ndescribe(<span class=\"hljs-string\">'HeroComponent'</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;\n  <span class=\"hljs-keyword\">let</span> component: HeroComponent;\n  <span class=\"hljs-keyword\">let</span> fixture: ComponentFixture&lt;HeroComponent&gt;;\n  \n  beforeEach(<span class=\"hljs-keyword\">async</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;\n    TestBed.configureTestingModule(&#123;\n      declarations: [HeroComponent],\n      imports: [ReactiveFormsModule]\n    &#125;).compileComponents();\n    \n    fixtrue = TestBed.createComponent(HeroComponent);\n    component = fixtrue.componentInstance;\n    fixture.detectChanges();\n  &#125;));\n  \n  it(<span class=\"hljs-string\">'should be created'</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;\n    expect(component).toBetruthy();\n  &#125;);\n  \n  it(<span class=\"hljs-string\">'should log hero name in the console when user submit form'</span>, <span class=\"hljs-keyword\">async</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;\n    <span class=\"hljs-keyword\">const</span> heroName = <span class=\"hljs-string\">'Saitama'</span>;\n    <span class=\"hljs-keyword\">const</span> element = &lt;HTMLFormElement&gt;fixture.debugElement.nativeElement.querySelector(<span class=\"hljs-string\">'form'</span>);\n    \n    spyOn(<span class=\"hljs-built_in\">console</span>, <span class=\"hljs-string\">'log'</span>).and.callThrough();\n    \n    component.form.controls[<span class=\"hljs-string\">'name'</span>].setValue(heroName);\n    \n    element.querySelector(<span class=\"hljs-string\">'button'</span>).click();\n    \n    fixture.whenStable().then(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;\n      fixture.detectChanges();\n      expect(<span class=\"hljs-built_in\">console</span>.log).toHaveBeenCalledWith(heroName);\n    &#125;);\n  &#125;));\n  \n  it(<span class=\"hljs-string\">'should validate name field as required'</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;\n    component.form.controls[<span class=\"hljs-string\">'name'</span>].setValue(<span class=\"hljs-string\">''</span>);\n    expect(component.form.invalid).toBeTruthy();\n  &#125;);\n&#125;)</code></pre>\n<p><a name=\"RVpq8\"></a></p>\n<h2 id=\"嵌套组件\"><a href=\"#嵌套组件\" class=\"headerlink\" title=\"嵌套组件\"></a>嵌套组件</h2><p>组件是通过selector来渲染的，所以我们就可以通过嵌套的方式来使用所有的组件。</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">import</span> &#123; Component, Input &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n\n<span class=\"hljs-meta\">@Component</span>(&#123;\n  selector: <span class=\"hljs-string\">'app-required'</span>,\n  template: <span class=\"hljs-string\">`&#123;&#123;name&#125;&#125; is required.`</span>\n&#125;)\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> RequiredComponent &#123;\n  <span class=\"hljs-meta\">@Input</span>()\n  <span class=\"hljs-keyword\">public</span> name: <span class=\"hljs-built_in\">string</span> = <span class=\"hljs-string\">''</span>;\n&#125;</code></pre>\n<p>我们就可以在其他的组件中，通过使用app-required标签来嵌套我们的组件。</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">import</span> &#123; Component, Input &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n\n<span class=\"hljs-meta\">@Component</span>(&#123;\n  selector: <span class=\"hljs-string\">'app-sample'</span>,\n  template: <span class=\"hljs-string\">`\n  &lt;input type=\"text\" name=\"heroName\" /&gt;\n\t&lt;app-required name=\"Hero Name\"&gt;&lt;/app-required&gt;\n`</span>\n&#125;)\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> SampleComponent &#123;\n  <span class=\"hljs-meta\">@Input</span>()\n  <span class=\"hljs-keyword\">public</span> name = <span class=\"hljs-string\">''</span>;\n&#125;</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"组件-component\"><a href=\"#组件-component\" class=\"headerlink\" title=\"组件(component)\"></a>组件(component)</h1><p>Angular 组件是一个由模板组成的元素，通过组件来渲染我们的应用。</p>\n<p><a name=\"FEhYx\"></a></p>\n<h2 id=\"一个简单组件\"><a href=\"#一个简单组件\" class=\"headerlink\" title=\"一个简单组件\"></a>一个简单组件</h2><p>Angular提供了@Component装饰器来，我们需要使用该装饰器来定义一个组件。</p>\n<p>@Component内置了一些参数：</p>\n<ul>\n<li><code>providers</code> : 用来声明一些资源，这些资源可以在构造函数中通过DI注入。</li>\n<li><code>selector</code> :  在html中适应的查询选择器，Angular会使用定义的组件替换html中的该选择器</li>\n<li><code>styles</code> :  定义一组内联样式，数组类型</li>\n<li><code>styleUrls</code> ：一组样式文件</li>\n<li><code>template</code> ：内联模板</li>\n<li><code>templateUrl</code> ：模板文件</li>\n</ul>\n<p>例子：</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">import</span> &#123; Component &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n\n<span class=\"hljs-meta\">@Component</span>(&#123;\n\tselector: <span class=\"hljs-string\">'app-required'</span>,\n  styleUrls: [<span class=\"hljs-string\">'requried.component.scss'</span>],\n  templateUrl: <span class=\"hljs-string\">'required.component.html'</span>\n&#125;)\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> RequiredComponent &#123; &#125;</code></pre>\n<p><a name=\"wtq6O\"></a></p>\n<h2 id=\"模板-amp-样式\"><a href=\"#模板-amp-样式\" class=\"headerlink\" title=\"模板 &amp; 样式\"></a>模板 &amp; 样式</h2><p>模板是html文件，里面可以包含一些逻辑。</p>\n<p>我们可以通过两种方式来指定组件的模板：</p>\n<ol>\n<li>通过文件路径来指定模板</li>\n</ol>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-meta\">@Component</span>(&#123;\n  templateUrl: <span class=\"hljs-string\">'hero.component.html'</span>\n&#125;)</code></pre>\n<ol start=\"2\">\n<li>通过使用内联方式指定模板</li>\n</ol>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-meta\">@Component</span>(&#123;\n  template: <span class=\"hljs-string\">'&lt;div&gt;This is a template.&lt;/div&gt;'</span>\n&#125;)</code></pre>\n<p>组件中定义的模板可以包含样式，我们可以在@Component中定义当前模板的样式。在组件中定义的样式和应用的style.css中定义是有区别的。组件中定义的任何样式，作用域都被限制在此组件内。<br>例如，我们在组件中添加样式：</p>\n<pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">div</span> &#123;<span class=\"hljs-attribute\">background</span>: red;&#125;</code></pre>\n<p>组件模板内的所有的div背景都会渲染成红色，但是其他组件中的div不会受到此样式的影响。<br>编译后的代码类似如下这样：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\"><span class=\"hljs-selector-tag\">div</span><span class=\"hljs-selector-attr\">[_ngcontent-c1]</span> &#123;<span class=\"hljs-attribute\">background</span>:red;&#125;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></code></pre>\n<p>我们可以通过两种方式为组件的模板定义样式：</p>\n<ol>\n<li>通过文件的方式</li>\n</ol>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-meta\">@Component</span>(&#123;\n  styleUrls: [<span class=\"hljs-string\">'hero.component.css'</span>]\n&#125;)</code></pre>\n<ol start=\"2\">\n<li>通过内联的方式</li>\n</ol>\n<pre><code class=\"hljs typescript\">styles: [<span class=\"hljs-string\">`div &#123;background: red;&#125;`</span>]</code></pre>\n<p><a name=\"kG6AR\"></a></p>\n<h2 id=\"如何选择\"><a href=\"#如何选择\" class=\"headerlink\" title=\"如何选择\"></a>如何选择</h2><p>不论模版还是样式，组件都提供来两种方式来声明它们。理论上我们可以随心所欲，自由组合。但实际的开发过程中我们还是需要有自己的原则：根据实际内容的多少来选择声明方式，内容较多就选择文件方式，这样可以使代码结构更加清晰，整洁。</p>\n<p><a name=\"H1L5Y\"></a></p>\n<h2 id=\"组件测试\"><a href=\"#组件测试\" class=\"headerlink\" title=\"组件测试\"></a>组件测试</h2><p><code>hero.component.html</code> </p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> (<span class=\"hljs-attr\">ngSubmit</span>)=<span class=\"hljs-string\">\"submit($event)\"</span> [<span class=\"hljs-attr\">formGroup</span>]=<span class=\"hljs-string\">\"form\"</span> <span class=\"hljs-attr\">novalidate</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">formControlName</span>=<span class=\"hljs-string\">\"name\"</span>/&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"submit\"</span>&gt;</span> Show hero name<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span></code></pre>\n<p><code>hero.component.ts</code> </p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">import</span> &#123; FromControl, FormGroup, Validators &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/forms'</span>;\n<span class=\"hljs-keyword\">import</span> &#123; Component &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n\n<span class=\"hljs-meta\">@Component</span>(&#123;\n  slector: <span class=\"hljs-string\">'app-hero'</span>,\n  templateUrl: <span class=\"hljs-string\">'hero.component.html'</span>\n&#125;)\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> HeroComponent &#123;\n  <span class=\"hljs-keyword\">public</span> form = <span class=\"hljs-keyword\">new</span> FormGroup(&#123;\n    name: <span class=\"hljs-keyword\">new</span> FormControl(<span class=\"hljs-string\">''</span>, Validators.required)\n  &#125;);\n  \n  submit(event) &#123;\n    <span class=\"hljs-built_in\">console</span>.log(event);\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>.form.controls.name.value);\n  &#125;\n&#125;</code></pre>\n<p><code>hero.component.spec.ts</code> </p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">import</span> &#123; ComponentFixture, TestBed, <span class=\"hljs-keyword\">async</span> &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core/testing'</span>;\n\n<span class=\"hljs-keyword\">import</span> &#123; HeroComponent &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'hero.component'</span>;\n<span class=\"hljs-keyword\">import</span> &#123; ReactiveFormsModule &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/forms'</span>;\n\ndescribe(<span class=\"hljs-string\">'HeroComponent'</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;\n  <span class=\"hljs-keyword\">let</span> component: HeroComponent;\n  <span class=\"hljs-keyword\">let</span> fixture: ComponentFixture&lt;HeroComponent&gt;;\n  \n  beforeEach(<span class=\"hljs-keyword\">async</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;\n    TestBed.configureTestingModule(&#123;\n      declarations: [HeroComponent],\n      imports: [ReactiveFormsModule]\n    &#125;).compileComponents();\n    \n    fixtrue = TestBed.createComponent(HeroComponent);\n    component = fixtrue.componentInstance;\n    fixture.detectChanges();\n  &#125;));\n  \n  it(<span class=\"hljs-string\">'should be created'</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;\n    expect(component).toBetruthy();\n  &#125;);\n  \n  it(<span class=\"hljs-string\">'should log hero name in the console when user submit form'</span>, <span class=\"hljs-keyword\">async</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;\n    <span class=\"hljs-keyword\">const</span> heroName = <span class=\"hljs-string\">'Saitama'</span>;\n    <span class=\"hljs-keyword\">const</span> element = &lt;HTMLFormElement&gt;fixture.debugElement.nativeElement.querySelector(<span class=\"hljs-string\">'form'</span>);\n    \n    spyOn(<span class=\"hljs-built_in\">console</span>, <span class=\"hljs-string\">'log'</span>).and.callThrough();\n    \n    component.form.controls[<span class=\"hljs-string\">'name'</span>].setValue(heroName);\n    \n    element.querySelector(<span class=\"hljs-string\">'button'</span>).click();\n    \n    fixture.whenStable().then(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;\n      fixture.detectChanges();\n      expect(<span class=\"hljs-built_in\">console</span>.log).toHaveBeenCalledWith(heroName);\n    &#125;);\n  &#125;));\n  \n  it(<span class=\"hljs-string\">'should validate name field as required'</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;\n    component.form.controls[<span class=\"hljs-string\">'name'</span>].setValue(<span class=\"hljs-string\">''</span>);\n    expect(component.form.invalid).toBeTruthy();\n  &#125;);\n&#125;)</code></pre>\n<p><a name=\"RVpq8\"></a></p>\n<h2 id=\"嵌套组件\"><a href=\"#嵌套组件\" class=\"headerlink\" title=\"嵌套组件\"></a>嵌套组件</h2><p>组件是通过selector来渲染的，所以我们就可以通过嵌套的方式来使用所有的组件。</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">import</span> &#123; Component, Input &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n\n<span class=\"hljs-meta\">@Component</span>(&#123;\n  selector: <span class=\"hljs-string\">'app-required'</span>,\n  template: <span class=\"hljs-string\">`&#123;&#123;name&#125;&#125; is required.`</span>\n&#125;)\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> RequiredComponent &#123;\n  <span class=\"hljs-meta\">@Input</span>()\n  <span class=\"hljs-keyword\">public</span> name: <span class=\"hljs-built_in\">string</span> = <span class=\"hljs-string\">''</span>;\n&#125;</code></pre>\n<p>我们就可以在其他的组件中，通过使用app-required标签来嵌套我们的组件。</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">import</span> &#123; Component, Input &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n\n<span class=\"hljs-meta\">@Component</span>(&#123;\n  selector: <span class=\"hljs-string\">'app-sample'</span>,\n  template: <span class=\"hljs-string\">`\n  &lt;input type=\"text\" name=\"heroName\" /&gt;\n\t&lt;app-required name=\"Hero Name\"&gt;&lt;/app-required&gt;\n`</span>\n&#125;)\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> SampleComponent &#123;\n  <span class=\"hljs-meta\">@Input</span>()\n  <span class=\"hljs-keyword\">public</span> name = <span class=\"hljs-string\">''</span>;\n&#125;</code></pre>\n"},{"title":"HashMap","date":"2016-07-19T01:06:30.000Z","_content":"\n> 代码基于JDK 1.8\n\n\n## 基数知识\nMap是保存了Key-Value键值对的数据集合接口。HashMap是基于HashCode的Map实现。因为基于Key的HashCode进行存储，所以HashMap中Key都是唯一的。\n- **HashMap中Key，Value均可以为null。**\n\n## 源码解析\n\n### 类声明\n```java\npublic class HashMap<K, V> extends AbstractMap<K,V> implements Map<K, V>, Cloneable, Serializable {\n    // ...\n}\n```\n* `Map` -  `AbstractMap<K,V>`本身实现了`Map<K,V>`接口，在这里再次强调了`HashMap`实现了`Map`\n* `Cloneable`  实现了克隆接口\n* `Serializable`  实现了序列化接口\n\n### 数据结构\n```java\n/**\n * table, 在初次使用时进行初始化, 必要时进行大小调整。\n * 在分配大小时，长度总是 2的幂\n */\ntransient Node<K,V>[] table;\n\n\n// Node静态内部类，链表数据结构\nstatic class Node<K, V> implements Map.Entry<K, V> {\n    final int hash;\n    final K key;\n    V value;\n    Node<K, V> next;\n    Node(int hash, K key, V value, Node<K,V> next) {\n        this.hash = hash;\n        this.key = key;\n        this.value = value;\n        this.next = next;\n    }\n}\n```\n\n\n上面代码描述了`HashMap`的底层数据结构：`数组` + `链表`。 \n>*在1.8中，增加了红黑树，带详细研究...*\n\n### 构造函数\n对于构造函数，提供了多个重载，以方便创建实例：\n```java\npublic HashMap()\npublic HashMap(int initialCapacity)\npublic HashMap(int initialCapacity, float loadFactor)\npublic HashMap(Map<? extends K, ? extends V> m)\n```\n在构造函数中，`initialCapacity`和`loadFactor`两个参数对map的性能有很大的影响。\n* `initialCapacity`: 初始化大小， 即`table`数组的长度，如果此值太小，可能会因引起`table`频繁调整数组大小，如果太大，实际内容很少，则造成资源浪费，默认 1 << 4。\n* `loadFactor`: 加载因子，取值范围（0,1）的浮点数，如果此值太小，可能会因引起`table`频繁调整数组大小，如果太大，`table`大小很长时间不调整，调整时内容移动大。默认值0.75\n\n```java\ni = (n - 1) & h;\n```\n计算key在table中的索引,h为key的hashcode，n为当前table的大小。\n\nHashMap为非线程安全Map，其中key和value均可以为null。\n","source":"_posts/HashMap.md","raw":"---\ntitle: HashMap\ndate: 2016-07-19 09:06:30\ntags: \n    - Java\ncategories:\n    - 后端\n---\n\n> 代码基于JDK 1.8\n\n\n## 基数知识\nMap是保存了Key-Value键值对的数据集合接口。HashMap是基于HashCode的Map实现。因为基于Key的HashCode进行存储，所以HashMap中Key都是唯一的。\n- **HashMap中Key，Value均可以为null。**\n\n## 源码解析\n\n### 类声明\n```java\npublic class HashMap<K, V> extends AbstractMap<K,V> implements Map<K, V>, Cloneable, Serializable {\n    // ...\n}\n```\n* `Map` -  `AbstractMap<K,V>`本身实现了`Map<K,V>`接口，在这里再次强调了`HashMap`实现了`Map`\n* `Cloneable`  实现了克隆接口\n* `Serializable`  实现了序列化接口\n\n### 数据结构\n```java\n/**\n * table, 在初次使用时进行初始化, 必要时进行大小调整。\n * 在分配大小时，长度总是 2的幂\n */\ntransient Node<K,V>[] table;\n\n\n// Node静态内部类，链表数据结构\nstatic class Node<K, V> implements Map.Entry<K, V> {\n    final int hash;\n    final K key;\n    V value;\n    Node<K, V> next;\n    Node(int hash, K key, V value, Node<K,V> next) {\n        this.hash = hash;\n        this.key = key;\n        this.value = value;\n        this.next = next;\n    }\n}\n```\n\n\n上面代码描述了`HashMap`的底层数据结构：`数组` + `链表`。 \n>*在1.8中，增加了红黑树，带详细研究...*\n\n### 构造函数\n对于构造函数，提供了多个重载，以方便创建实例：\n```java\npublic HashMap()\npublic HashMap(int initialCapacity)\npublic HashMap(int initialCapacity, float loadFactor)\npublic HashMap(Map<? extends K, ? extends V> m)\n```\n在构造函数中，`initialCapacity`和`loadFactor`两个参数对map的性能有很大的影响。\n* `initialCapacity`: 初始化大小， 即`table`数组的长度，如果此值太小，可能会因引起`table`频繁调整数组大小，如果太大，实际内容很少，则造成资源浪费，默认 1 << 4。\n* `loadFactor`: 加载因子，取值范围（0,1）的浮点数，如果此值太小，可能会因引起`table`频繁调整数组大小，如果太大，`table`大小很长时间不调整，调整时内容移动大。默认值0.75\n\n```java\ni = (n - 1) & h;\n```\n计算key在table中的索引,h为key的hashcode，n为当前table的大小。\n\nHashMap为非线程安全Map，其中key和value均可以为null。\n","slug":"HashMap","published":1,"updated":"2020-07-17T02:32:01.176Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcpntugw002p04oij5vd9z0j","content":"<blockquote>\n<p>代码基于JDK 1.8</p>\n</blockquote>\n<h2 id=\"基数知识\"><a href=\"#基数知识\" class=\"headerlink\" title=\"基数知识\"></a>基数知识</h2><p>Map是保存了Key-Value键值对的数据集合接口。HashMap是基于HashCode的Map实现。因为基于Key的HashCode进行存储，所以HashMap中Key都是唯一的。</p>\n<ul>\n<li><strong>HashMap中Key，Value均可以为null。</strong></li>\n</ul>\n<h2 id=\"源码解析\"><a href=\"#源码解析\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h2><h3 id=\"类声明\"><a href=\"#类声明\" class=\"headerlink\" title=\"类声明\"></a>类声明</h3><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HashMap</span>&lt;<span class=\"hljs-title\">K</span>, <span class=\"hljs-title\">V</span>&gt; <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">AbstractMap</span>&lt;<span class=\"hljs-title\">K</span>,<span class=\"hljs-title\">V</span>&gt; <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Map</span>&lt;<span class=\"hljs-title\">K</span>, <span class=\"hljs-title\">V</span>&gt;, <span class=\"hljs-title\">Cloneable</span>, <span class=\"hljs-title\">Serializable</span> </span>&#123;\n    <span class=\"hljs-comment\">// ...</span>\n&#125;</code></pre>\n<ul>\n<li><code>Map</code> -  <code>AbstractMap&lt;K,V&gt;</code>本身实现了<code>Map&lt;K,V&gt;</code>接口，在这里再次强调了<code>HashMap</code>实现了<code>Map</code></li>\n<li><code>Cloneable</code>  实现了克隆接口</li>\n<li><code>Serializable</code>  实现了序列化接口</li>\n</ul>\n<h3 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h3><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**\n * table, 在初次使用时进行初始化, 必要时进行大小调整。\n * 在分配大小时，长度总是 2的幂\n */</span>\n<span class=\"hljs-keyword\">transient</span> Node&lt;K,V&gt;[] table;\n\n\n<span class=\"hljs-comment\">// Node静态内部类，链表数据结构</span>\n<span class=\"hljs-keyword\">static</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Node</span>&lt;<span class=\"hljs-title\">K</span>, <span class=\"hljs-title\">V</span>&gt; <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Map</span>.<span class=\"hljs-title\">Entry</span>&lt;<span class=\"hljs-title\">K</span>, <span class=\"hljs-title\">V</span>&gt; </span>&#123;\n    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> hash;\n    <span class=\"hljs-keyword\">final</span> K key;\n    V value;\n    Node&lt;K, V&gt; next;\n    Node(<span class=\"hljs-keyword\">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;\n        <span class=\"hljs-keyword\">this</span>.hash = hash;\n        <span class=\"hljs-keyword\">this</span>.key = key;\n        <span class=\"hljs-keyword\">this</span>.value = value;\n        <span class=\"hljs-keyword\">this</span>.next = next;\n    &#125;\n&#125;</code></pre>\n<p>上面代码描述了<code>HashMap</code>的底层数据结构：<code>数组</code> + <code>链表</code>。 </p>\n<blockquote>\n<p><em>在1.8中，增加了红黑树，带详细研究…</em></p>\n</blockquote>\n<h3 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h3><p>对于构造函数，提供了多个重载，以方便创建实例：<br><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">HashMap</span><span class=\"hljs-params\">()</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">HashMap</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> initialCapacity)</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">HashMap</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> initialCapacity, <span class=\"hljs-keyword\">float</span> loadFactor)</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">HashMap</span><span class=\"hljs-params\">(Map&lt;? extends K, ? extends V&gt; m)</span></span></code></pre></p>\n<p>在构造函数中，<code>initialCapacity</code>和<code>loadFactor</code>两个参数对map的性能有很大的影响。</p>\n<ul>\n<li><code>initialCapacity</code>: 初始化大小， 即<code>table</code>数组的长度，如果此值太小，可能会因引起<code>table</code>频繁调整数组大小，如果太大，实际内容很少，则造成资源浪费，默认 1 &lt;&lt; 4。</li>\n<li><code>loadFactor</code>: 加载因子，取值范围（0,1）的浮点数，如果此值太小，可能会因引起<code>table</code>频繁调整数组大小，如果太大，<code>table</code>大小很长时间不调整，调整时内容移动大。默认值0.75</li>\n</ul>\n<pre><code class=\"hljs java\">i = (n - <span class=\"hljs-number\">1</span>) &amp; h;</code></pre>\n<p>计算key在table中的索引,h为key的hashcode，n为当前table的大小。</p>\n<p>HashMap为非线程安全Map，其中key和value均可以为null。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>代码基于JDK 1.8</p>\n</blockquote>\n<h2 id=\"基数知识\"><a href=\"#基数知识\" class=\"headerlink\" title=\"基数知识\"></a>基数知识</h2><p>Map是保存了Key-Value键值对的数据集合接口。HashMap是基于HashCode的Map实现。因为基于Key的HashCode进行存储，所以HashMap中Key都是唯一的。</p>\n<ul>\n<li><strong>HashMap中Key，Value均可以为null。</strong></li>\n</ul>\n<h2 id=\"源码解析\"><a href=\"#源码解析\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h2><h3 id=\"类声明\"><a href=\"#类声明\" class=\"headerlink\" title=\"类声明\"></a>类声明</h3><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HashMap</span>&lt;<span class=\"hljs-title\">K</span>, <span class=\"hljs-title\">V</span>&gt; <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">AbstractMap</span>&lt;<span class=\"hljs-title\">K</span>,<span class=\"hljs-title\">V</span>&gt; <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Map</span>&lt;<span class=\"hljs-title\">K</span>, <span class=\"hljs-title\">V</span>&gt;, <span class=\"hljs-title\">Cloneable</span>, <span class=\"hljs-title\">Serializable</span> </span>&#123;\n    <span class=\"hljs-comment\">// ...</span>\n&#125;</code></pre>\n<ul>\n<li><code>Map</code> -  <code>AbstractMap&lt;K,V&gt;</code>本身实现了<code>Map&lt;K,V&gt;</code>接口，在这里再次强调了<code>HashMap</code>实现了<code>Map</code></li>\n<li><code>Cloneable</code>  实现了克隆接口</li>\n<li><code>Serializable</code>  实现了序列化接口</li>\n</ul>\n<h3 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h3><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**\n * table, 在初次使用时进行初始化, 必要时进行大小调整。\n * 在分配大小时，长度总是 2的幂\n */</span>\n<span class=\"hljs-keyword\">transient</span> Node&lt;K,V&gt;[] table;\n\n\n<span class=\"hljs-comment\">// Node静态内部类，链表数据结构</span>\n<span class=\"hljs-keyword\">static</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Node</span>&lt;<span class=\"hljs-title\">K</span>, <span class=\"hljs-title\">V</span>&gt; <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Map</span>.<span class=\"hljs-title\">Entry</span>&lt;<span class=\"hljs-title\">K</span>, <span class=\"hljs-title\">V</span>&gt; </span>&#123;\n    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> hash;\n    <span class=\"hljs-keyword\">final</span> K key;\n    V value;\n    Node&lt;K, V&gt; next;\n    Node(<span class=\"hljs-keyword\">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;\n        <span class=\"hljs-keyword\">this</span>.hash = hash;\n        <span class=\"hljs-keyword\">this</span>.key = key;\n        <span class=\"hljs-keyword\">this</span>.value = value;\n        <span class=\"hljs-keyword\">this</span>.next = next;\n    &#125;\n&#125;</code></pre>\n<p>上面代码描述了<code>HashMap</code>的底层数据结构：<code>数组</code> + <code>链表</code>。 </p>\n<blockquote>\n<p><em>在1.8中，增加了红黑树，带详细研究…</em></p>\n</blockquote>\n<h3 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h3><p>对于构造函数，提供了多个重载，以方便创建实例：<br><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">HashMap</span><span class=\"hljs-params\">()</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">HashMap</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> initialCapacity)</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">HashMap</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> initialCapacity, <span class=\"hljs-keyword\">float</span> loadFactor)</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">HashMap</span><span class=\"hljs-params\">(Map&lt;? extends K, ? extends V&gt; m)</span></span></code></pre></p>\n<p>在构造函数中，<code>initialCapacity</code>和<code>loadFactor</code>两个参数对map的性能有很大的影响。</p>\n<ul>\n<li><code>initialCapacity</code>: 初始化大小， 即<code>table</code>数组的长度，如果此值太小，可能会因引起<code>table</code>频繁调整数组大小，如果太大，实际内容很少，则造成资源浪费，默认 1 &lt;&lt; 4。</li>\n<li><code>loadFactor</code>: 加载因子，取值范围（0,1）的浮点数，如果此值太小，可能会因引起<code>table</code>频繁调整数组大小，如果太大，<code>table</code>大小很长时间不调整，调整时内容移动大。默认值0.75</li>\n</ul>\n<pre><code class=\"hljs java\">i = (n - <span class=\"hljs-number\">1</span>) &amp; h;</code></pre>\n<p>计算key在table中的索引,h为key的hashcode，n为当前table的大小。</p>\n<p>HashMap为非线程安全Map，其中key和value均可以为null。</p>\n"},{"title":"Keepalived 简单配置","date":"2017-04-21T05:10:50.000Z","_content":"\n\n## 安装\n\n解压文件\n```bash\ntar -xvf keepalived-x.x.x.tar.gz\n```\n进入文件夹`keepalived-x.x.x`\n\n```\n./configure\n\nmake && make install \n```\n\n在安装过程中需要注意以下几点：\n\n- gcc环境\n- openssl环境\n- root权限\n\n\n## 配置\n\n```bash\n# cp /usr/local/etc/rc.d/init.d/keepalived /etc/rc.d/init.d/ \n# cp /usr/local/etc/sysconfig/keepalived /etc/sysconfig/ \n# mkdir /etc/keepalived  \n# cp /usr/local/etc/keepalived/keepalived.conf /etc/keepalived/ \n# cp /usr/local/sbin/keepalived /usr/sbin/ \n```\n\n做成系统启动服务方便管理. \n\n```bash\n# vi /etc/rc.local   \n/etc/init.d/keepalived start \n```\n增加上面一行。\n\n修改配置`/etc/keepalived/keepalived.conf`\n\n\n```config\n! Configuation File for keepalived\n\nglobal_defs {\n    notification_email {\n        acassen@firewall.loc    # 邮件地址，当异常时发邮件通知。可以是多个，每个一行\n        \n    }\n    notification_email_from Alexandre.Cassen@firewall.loc\n    smtp_server 192.168.200.1\n    smtp_connect_timeout 30\n    router_id LVS_DEVEL\n    vrrp_skip_check_adv_addr\n    vrrp_strict\n}\n\nvrrp_instance VI_1 {\n    state MASTER    # 从机设为BACKUP\n    interface   eth0   # 网卡接口\n    mcast_src_ip 10.0.0.131  # 默认没有这项，加上这项后服务好用了\n    priority  100  # 优先级，从机小与主机\n    advert_int 1  \n    authentication {\n        auth_type PASS\n        auth_pass 1111\n    }\n    virtual_ipaddress {\n        10.0.0.111   # 虚拟ip设置，可以是多个，主从一致\n    }\n}\n\n```\n\n\n> 参考文档 http://wenku.baidu.com/view/8e38022d2af90242a895e532.html\n","source":"_posts/Keepalived.md","raw":"---\ntitle: Keepalived 简单配置\ndate: 2017-04-21 13:10:50\ntags:\n    - Keepalived\ncategories:\n    - 工具\n---\n\n\n## 安装\n\n解压文件\n```bash\ntar -xvf keepalived-x.x.x.tar.gz\n```\n进入文件夹`keepalived-x.x.x`\n\n```\n./configure\n\nmake && make install \n```\n\n在安装过程中需要注意以下几点：\n\n- gcc环境\n- openssl环境\n- root权限\n\n\n## 配置\n\n```bash\n# cp /usr/local/etc/rc.d/init.d/keepalived /etc/rc.d/init.d/ \n# cp /usr/local/etc/sysconfig/keepalived /etc/sysconfig/ \n# mkdir /etc/keepalived  \n# cp /usr/local/etc/keepalived/keepalived.conf /etc/keepalived/ \n# cp /usr/local/sbin/keepalived /usr/sbin/ \n```\n\n做成系统启动服务方便管理. \n\n```bash\n# vi /etc/rc.local   \n/etc/init.d/keepalived start \n```\n增加上面一行。\n\n修改配置`/etc/keepalived/keepalived.conf`\n\n\n```config\n! Configuation File for keepalived\n\nglobal_defs {\n    notification_email {\n        acassen@firewall.loc    # 邮件地址，当异常时发邮件通知。可以是多个，每个一行\n        \n    }\n    notification_email_from Alexandre.Cassen@firewall.loc\n    smtp_server 192.168.200.1\n    smtp_connect_timeout 30\n    router_id LVS_DEVEL\n    vrrp_skip_check_adv_addr\n    vrrp_strict\n}\n\nvrrp_instance VI_1 {\n    state MASTER    # 从机设为BACKUP\n    interface   eth0   # 网卡接口\n    mcast_src_ip 10.0.0.131  # 默认没有这项，加上这项后服务好用了\n    priority  100  # 优先级，从机小与主机\n    advert_int 1  \n    authentication {\n        auth_type PASS\n        auth_pass 1111\n    }\n    virtual_ipaddress {\n        10.0.0.111   # 虚拟ip设置，可以是多个，主从一致\n    }\n}\n\n```\n\n\n> 参考文档 http://wenku.baidu.com/view/8e38022d2af90242a895e532.html\n","slug":"Keepalived","published":1,"updated":"2020-07-17T02:32:01.177Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcpntugy002s04oiz73cpbp8","content":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>解压文件<br><pre><code class=\"hljs bash\">tar -xvf keepalived-x.x.x.tar.gz</code></pre></p>\n<p>进入文件夹<code>keepalived-x.x.x</code></p>\n<pre><code class=\"hljs undefined\">./configure\n\n<span class=\"hljs-built_in\">make</span> &amp;&amp; <span class=\"hljs-built_in\">make</span> install</code></pre>\n<p>在安装过程中需要注意以下几点：</p>\n<ul>\n<li>gcc环境</li>\n<li>openssl环境</li>\n<li>root权限</li>\n</ul>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># cp /usr/local/etc/rc.d/init.d/keepalived /etc/rc.d/init.d/ </span>\n<span class=\"hljs-comment\"># cp /usr/local/etc/sysconfig/keepalived /etc/sysconfig/ </span>\n<span class=\"hljs-comment\"># mkdir /etc/keepalived  </span>\n<span class=\"hljs-comment\"># cp /usr/local/etc/keepalived/keepalived.conf /etc/keepalived/ </span>\n<span class=\"hljs-comment\"># cp /usr/local/sbin/keepalived /usr/sbin/</span></code></pre>\n<p>做成系统启动服务方便管理. </p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># vi /etc/rc.local   </span>\n/etc/init.d/keepalived start</code></pre>\n<p>增加上面一行。</p>\n<p>修改配置<code>/etc/keepalived/keepalived.conf</code></p>\n<pre><code class=\"hljs config\">! Configuation File for keepalived\n\nglobal_defs &#123;\n    notification_email &#123;\n        acassen@firewall.loc    # 邮件地址，当异常时发邮件通知。可以是多个，每个一行\n        \n    &#125;\n    notification_email_from Alexandre.Cassen@firewall.loc\n    smtp_server 192.168.200.1\n    smtp_connect_timeout 30\n    router_id LVS_DEVEL\n    vrrp_skip_check_adv_addr\n    vrrp_strict\n&#125;\n\nvrrp_instance VI_1 &#123;\n    state MASTER    # 从机设为BACKUP\n    interface   eth0   # 网卡接口\n    mcast_src_ip 10.0.0.131  # 默认没有这项，加上这项后服务好用了\n    priority  100  # 优先级，从机小与主机\n    advert_int 1  \n    authentication &#123;\n        auth_type PASS\n        auth_pass 1111\n    &#125;\n    virtual_ipaddress &#123;\n        10.0.0.111   # 虚拟ip设置，可以是多个，主从一致\n    &#125;\n&#125;</code></pre>\n<blockquote>\n<p>参考文档 <a href=\"http://wenku.baidu.com/view/8e38022d2af90242a895e532.html\" target=\"_blank\" rel=\"noopener\">http://wenku.baidu.com/view/8e38022d2af90242a895e532.html</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>解压文件<br><pre><code class=\"hljs bash\">tar -xvf keepalived-x.x.x.tar.gz</code></pre></p>\n<p>进入文件夹<code>keepalived-x.x.x</code></p>\n<pre><code class=\"hljs undefined\">./configure\n\n<span class=\"hljs-built_in\">make</span> &amp;&amp; <span class=\"hljs-built_in\">make</span> install</code></pre>\n<p>在安装过程中需要注意以下几点：</p>\n<ul>\n<li>gcc环境</li>\n<li>openssl环境</li>\n<li>root权限</li>\n</ul>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># cp /usr/local/etc/rc.d/init.d/keepalived /etc/rc.d/init.d/ </span>\n<span class=\"hljs-comment\"># cp /usr/local/etc/sysconfig/keepalived /etc/sysconfig/ </span>\n<span class=\"hljs-comment\"># mkdir /etc/keepalived  </span>\n<span class=\"hljs-comment\"># cp /usr/local/etc/keepalived/keepalived.conf /etc/keepalived/ </span>\n<span class=\"hljs-comment\"># cp /usr/local/sbin/keepalived /usr/sbin/</span></code></pre>\n<p>做成系统启动服务方便管理. </p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># vi /etc/rc.local   </span>\n/etc/init.d/keepalived start</code></pre>\n<p>增加上面一行。</p>\n<p>修改配置<code>/etc/keepalived/keepalived.conf</code></p>\n<pre><code class=\"hljs config\">! Configuation File for keepalived\n\nglobal_defs &#123;\n    notification_email &#123;\n        acassen@firewall.loc    # 邮件地址，当异常时发邮件通知。可以是多个，每个一行\n        \n    &#125;\n    notification_email_from Alexandre.Cassen@firewall.loc\n    smtp_server 192.168.200.1\n    smtp_connect_timeout 30\n    router_id LVS_DEVEL\n    vrrp_skip_check_adv_addr\n    vrrp_strict\n&#125;\n\nvrrp_instance VI_1 &#123;\n    state MASTER    # 从机设为BACKUP\n    interface   eth0   # 网卡接口\n    mcast_src_ip 10.0.0.131  # 默认没有这项，加上这项后服务好用了\n    priority  100  # 优先级，从机小与主机\n    advert_int 1  \n    authentication &#123;\n        auth_type PASS\n        auth_pass 1111\n    &#125;\n    virtual_ipaddress &#123;\n        10.0.0.111   # 虚拟ip设置，可以是多个，主从一致\n    &#125;\n&#125;</code></pre>\n<blockquote>\n<p>参考文档 <a href=\"http://wenku.baidu.com/view/8e38022d2af90242a895e532.html\" target=\"_blank\" rel=\"noopener\">http://wenku.baidu.com/view/8e38022d2af90242a895e532.html</a></p>\n</blockquote>\n"},{"title":"vs code调试Angular","date":"2018-07-10T02:49:46.000Z","_content":"\n# vs code调试Angular\n为了调试客户端Angular代码，需要安装[Debugger for Chrome](https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-chrome) Chrome扩展应用\n\n打开vs code的扩展应用视图(`Ctrl+Shift+X`), 搜索`chrome`。\n\n![image](https://code.visualstudio.com/assets/docs/nodejs/reactjs/debugger-for-chrome.png)\n\n点击`Install`，等安装完成后点击`Reload`，重新加载扩展应用使新安装的应用生效。\n\n## 设置断点\n\n在`app.component.ts`中设置断点，断点显示为红色原点。\n\n![image](https://code.visualstudio.com/assets/docs/nodejs/angular/breakpoint.png)\n\n## 配置Chrome debugger\n首先配置调试器。打开调试视图(`Ctrl+Shift+D`)，点击设置按钮，创建调试器配置文件`launch.json`。环境选择`Chrome`，会在`.vscode`文件夹下生成一个`launch.json`文件。\n\n修改url端口号，将`8080`修改为`4200`，如下：\n\n```json\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"type\": \"chrome\",\n            \"request\": \"launch\",\n            \"name\": \"Launch Chrome against localhost\",\n            \"url\": \"http://localhost:4200\",\n            \"webRoot\": \"${workspaceFolder}\"\n        }\n    ]\n}\n```\n\n`F5`或绿色三角运行调试器，会打开一个新的浏览器实例。\n\n![image](https://code.visualstudio.com/assets/docs/nodejs/angular/hit-breakpoint.png)\n\n可以用`F10`单步调试。还可以查看变量信息，栈信息。\n![image](https://code.visualstudio.com/assets/docs/nodejs/angular/debug-variable.png)\n\n","source":"_posts/VS code调试Angular.md","raw":"---\ntitle: vs code调试Angular\ndate: 2018-07-10 10:49:46\ntags:\n    - Angular\n    - VS Code\ncategories:\n    - 前端\n---\n\n# vs code调试Angular\n为了调试客户端Angular代码，需要安装[Debugger for Chrome](https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-chrome) Chrome扩展应用\n\n打开vs code的扩展应用视图(`Ctrl+Shift+X`), 搜索`chrome`。\n\n![image](https://code.visualstudio.com/assets/docs/nodejs/reactjs/debugger-for-chrome.png)\n\n点击`Install`，等安装完成后点击`Reload`，重新加载扩展应用使新安装的应用生效。\n\n## 设置断点\n\n在`app.component.ts`中设置断点，断点显示为红色原点。\n\n![image](https://code.visualstudio.com/assets/docs/nodejs/angular/breakpoint.png)\n\n## 配置Chrome debugger\n首先配置调试器。打开调试视图(`Ctrl+Shift+D`)，点击设置按钮，创建调试器配置文件`launch.json`。环境选择`Chrome`，会在`.vscode`文件夹下生成一个`launch.json`文件。\n\n修改url端口号，将`8080`修改为`4200`，如下：\n\n```json\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"type\": \"chrome\",\n            \"request\": \"launch\",\n            \"name\": \"Launch Chrome against localhost\",\n            \"url\": \"http://localhost:4200\",\n            \"webRoot\": \"${workspaceFolder}\"\n        }\n    ]\n}\n```\n\n`F5`或绿色三角运行调试器，会打开一个新的浏览器实例。\n\n![image](https://code.visualstudio.com/assets/docs/nodejs/angular/hit-breakpoint.png)\n\n可以用`F10`单步调试。还可以查看变量信息，栈信息。\n![image](https://code.visualstudio.com/assets/docs/nodejs/angular/debug-variable.png)\n\n","slug":"VS code调试Angular","published":1,"updated":"2020-07-17T02:32:01.179Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcpntugz002v04oiydcesm1l","content":"<h1 id=\"vs-code调试Angular\"><a href=\"#vs-code调试Angular\" class=\"headerlink\" title=\"vs code调试Angular\"></a>vs code调试Angular</h1><p>为了调试客户端Angular代码，需要安装<a href=\"https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-chrome\" target=\"_blank\" rel=\"noopener\">Debugger for Chrome</a> Chrome扩展应用</p>\n<p>打开vs code的扩展应用视图(<code>Ctrl+Shift+X</code>), 搜索<code>chrome</code>。</p>\n<p><img src=\"https://code.visualstudio.com/assets/docs/nodejs/reactjs/debugger-for-chrome.png\" srcset=\"/img/loading.gif\" alt=\"image\"></p>\n<p>点击<code>Install</code>，等安装完成后点击<code>Reload</code>，重新加载扩展应用使新安装的应用生效。</p>\n<h2 id=\"设置断点\"><a href=\"#设置断点\" class=\"headerlink\" title=\"设置断点\"></a>设置断点</h2><p>在<code>app.component.ts</code>中设置断点，断点显示为红色原点。</p>\n<p><img src=\"https://code.visualstudio.com/assets/docs/nodejs/angular/breakpoint.png\" srcset=\"/img/loading.gif\" alt=\"image\"></p>\n<h2 id=\"配置Chrome-debugger\"><a href=\"#配置Chrome-debugger\" class=\"headerlink\" title=\"配置Chrome debugger\"></a>配置Chrome debugger</h2><p>首先配置调试器。打开调试视图(<code>Ctrl+Shift+D</code>)，点击设置按钮，创建调试器配置文件<code>launch.json</code>。环境选择<code>Chrome</code>，会在<code>.vscode</code>文件夹下生成一个<code>launch.json</code>文件。</p>\n<p>修改url端口号，将<code>8080</code>修改为<code>4200</code>，如下：</p>\n<pre><code class=\"hljs json\">&#123;\n    <span class=\"hljs-attr\">\"version\"</span>: <span class=\"hljs-string\">\"0.2.0\"</span>,\n    <span class=\"hljs-attr\">\"configurations\"</span>: [\n        &#123;\n            <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-string\">\"chrome\"</span>,\n            <span class=\"hljs-attr\">\"request\"</span>: <span class=\"hljs-string\">\"launch\"</span>,\n            <span class=\"hljs-attr\">\"name\"</span>: <span class=\"hljs-string\">\"Launch Chrome against localhost\"</span>,\n            <span class=\"hljs-attr\">\"url\"</span>: <span class=\"hljs-string\">\"http://localhost:4200\"</span>,\n            <span class=\"hljs-attr\">\"webRoot\"</span>: <span class=\"hljs-string\">\"$&#123;workspaceFolder&#125;\"</span>\n        &#125;\n    ]\n&#125;</code></pre>\n<p><code>F5</code>或绿色三角运行调试器，会打开一个新的浏览器实例。</p>\n<p><img src=\"https://code.visualstudio.com/assets/docs/nodejs/angular/hit-breakpoint.png\" srcset=\"/img/loading.gif\" alt=\"image\"></p>\n<p>可以用<code>F10</code>单步调试。还可以查看变量信息，栈信息。<br><img src=\"https://code.visualstudio.com/assets/docs/nodejs/angular/debug-variable.png\" srcset=\"/img/loading.gif\" alt=\"image\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"vs-code调试Angular\"><a href=\"#vs-code调试Angular\" class=\"headerlink\" title=\"vs code调试Angular\"></a>vs code调试Angular</h1><p>为了调试客户端Angular代码，需要安装<a href=\"https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-chrome\" target=\"_blank\" rel=\"noopener\">Debugger for Chrome</a> Chrome扩展应用</p>\n<p>打开vs code的扩展应用视图(<code>Ctrl+Shift+X</code>), 搜索<code>chrome</code>。</p>\n<p><img src=\"https://code.visualstudio.com/assets/docs/nodejs/reactjs/debugger-for-chrome.png\" srcset=\"/img/loading.gif\" alt=\"image\"></p>\n<p>点击<code>Install</code>，等安装完成后点击<code>Reload</code>，重新加载扩展应用使新安装的应用生效。</p>\n<h2 id=\"设置断点\"><a href=\"#设置断点\" class=\"headerlink\" title=\"设置断点\"></a>设置断点</h2><p>在<code>app.component.ts</code>中设置断点，断点显示为红色原点。</p>\n<p><img src=\"https://code.visualstudio.com/assets/docs/nodejs/angular/breakpoint.png\" srcset=\"/img/loading.gif\" alt=\"image\"></p>\n<h2 id=\"配置Chrome-debugger\"><a href=\"#配置Chrome-debugger\" class=\"headerlink\" title=\"配置Chrome debugger\"></a>配置Chrome debugger</h2><p>首先配置调试器。打开调试视图(<code>Ctrl+Shift+D</code>)，点击设置按钮，创建调试器配置文件<code>launch.json</code>。环境选择<code>Chrome</code>，会在<code>.vscode</code>文件夹下生成一个<code>launch.json</code>文件。</p>\n<p>修改url端口号，将<code>8080</code>修改为<code>4200</code>，如下：</p>\n<pre><code class=\"hljs json\">&#123;\n    <span class=\"hljs-attr\">\"version\"</span>: <span class=\"hljs-string\">\"0.2.0\"</span>,\n    <span class=\"hljs-attr\">\"configurations\"</span>: [\n        &#123;\n            <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-string\">\"chrome\"</span>,\n            <span class=\"hljs-attr\">\"request\"</span>: <span class=\"hljs-string\">\"launch\"</span>,\n            <span class=\"hljs-attr\">\"name\"</span>: <span class=\"hljs-string\">\"Launch Chrome against localhost\"</span>,\n            <span class=\"hljs-attr\">\"url\"</span>: <span class=\"hljs-string\">\"http://localhost:4200\"</span>,\n            <span class=\"hljs-attr\">\"webRoot\"</span>: <span class=\"hljs-string\">\"$&#123;workspaceFolder&#125;\"</span>\n        &#125;\n    ]\n&#125;</code></pre>\n<p><code>F5</code>或绿色三角运行调试器，会打开一个新的浏览器实例。</p>\n<p><img src=\"https://code.visualstudio.com/assets/docs/nodejs/angular/hit-breakpoint.png\" srcset=\"/img/loading.gif\" alt=\"image\"></p>\n<p>可以用<code>F10</code>单步调试。还可以查看变量信息，栈信息。<br><img src=\"https://code.visualstudio.com/assets/docs/nodejs/angular/debug-variable.png\" srcset=\"/img/loading.gif\" alt=\"image\"></p>\n"},{"title":"WebStorm VSCode集成cmder","date":"2019-06-26T10:27:25.000Z","_content":"\n## 概述\n\ncmder是一个增强型命令行工具，不仅可以使用windows下的所有命令，更爽的是可以使用linux的命令,shell命令。\n\n## 安装\n\n1. 去[cmder官网](https://cmder.net/)下载压缩包\n2. 解压下载的cmder\n3. (可选)将您自己的可执行文件放入`bin`文件夹中，以便注入到系统的`Path`中\n4. 运行cmder.exe\n\n## VS Code配置Cmder\n\n使用`ctrl+,`快捷键打开设置页面，选择右上角的`{}`切换到`settings.json`文件，添加下面的配置即可\n\n```json\n{\n    ...\n    \"terminal.integrated.shell.windows\": \"C:\\\\windows\\\\System32\\\\cmd.exe\",\n    \"terminal.integrated.shellArgs.windows\": [\n        \"/k D:\\\\Tools\\\\cmder_mini\\\\vendor\\\\init.bat\"\n    ],\n    ...\n}\n```\n\n## WebStorm配置Cmder\n\n`ctrl+alt+s`打开设置窗口，选择`Tools>Terminal`\n\n设置\n\n```text\n\"cmd.exe\" /k \"\"%Cmder%\\vendor\\init.bat\"\"\n```\n\n![Cmder](https://cdn.nlark.com/yuque/0/2019/png/269363/1561552882498-assets/web-upload/380d4999-0a28-4c73-8d54-e7055d85fc41.png)\n","source":"_posts/WebStorm-VSCode集成cmder.md","raw":"---\ntitle: WebStorm VSCode集成cmder\ndate: 2019-06-26 18:27:25\ncategories:\n    - 工具\n---\n\n## 概述\n\ncmder是一个增强型命令行工具，不仅可以使用windows下的所有命令，更爽的是可以使用linux的命令,shell命令。\n\n## 安装\n\n1. 去[cmder官网](https://cmder.net/)下载压缩包\n2. 解压下载的cmder\n3. (可选)将您自己的可执行文件放入`bin`文件夹中，以便注入到系统的`Path`中\n4. 运行cmder.exe\n\n## VS Code配置Cmder\n\n使用`ctrl+,`快捷键打开设置页面，选择右上角的`{}`切换到`settings.json`文件，添加下面的配置即可\n\n```json\n{\n    ...\n    \"terminal.integrated.shell.windows\": \"C:\\\\windows\\\\System32\\\\cmd.exe\",\n    \"terminal.integrated.shellArgs.windows\": [\n        \"/k D:\\\\Tools\\\\cmder_mini\\\\vendor\\\\init.bat\"\n    ],\n    ...\n}\n```\n\n## WebStorm配置Cmder\n\n`ctrl+alt+s`打开设置窗口，选择`Tools>Terminal`\n\n设置\n\n```text\n\"cmd.exe\" /k \"\"%Cmder%\\vendor\\init.bat\"\"\n```\n\n![Cmder](https://cdn.nlark.com/yuque/0/2019/png/269363/1561552882498-assets/web-upload/380d4999-0a28-4c73-8d54-e7055d85fc41.png)\n","slug":"WebStorm-VSCode集成cmder","published":1,"updated":"2020-07-17T02:32:01.180Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcpntuh1002x04oiu5y83owc","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>cmder是一个增强型命令行工具，不仅可以使用windows下的所有命令，更爽的是可以使用linux的命令,shell命令。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ol>\n<li>去<a href=\"https://cmder.net/\" target=\"_blank\" rel=\"noopener\">cmder官网</a>下载压缩包</li>\n<li>解压下载的cmder</li>\n<li>(可选)将您自己的可执行文件放入<code>bin</code>文件夹中，以便注入到系统的<code>Path</code>中</li>\n<li>运行cmder.exe</li>\n</ol>\n<h2 id=\"VS-Code配置Cmder\"><a href=\"#VS-Code配置Cmder\" class=\"headerlink\" title=\"VS Code配置Cmder\"></a>VS Code配置Cmder</h2><p>使用<code>ctrl+,</code>快捷键打开设置页面，选择右上角的<code>{}</code>切换到<code>settings.json</code>文件，添加下面的配置即可</p>\n<pre><code class=\"hljs json\">&#123;\n    ...\n    \"terminal.integrated.shell.windows\": \"C:\\\\windows\\\\System32\\\\cmd.exe\",\n    \"terminal.integrated.shellArgs.windows\": [\n        \"/k D:\\\\Tools\\\\cmder_mini\\\\vendor\\\\init.bat\"\n    ],\n    ...\n&#125;</code></pre>\n<h2 id=\"WebStorm配置Cmder\"><a href=\"#WebStorm配置Cmder\" class=\"headerlink\" title=\"WebStorm配置Cmder\"></a>WebStorm配置Cmder</h2><p><code>ctrl+alt+s</code>打开设置窗口，选择<code>Tools&gt;Terminal</code></p>\n<p>设置</p>\n<pre><code class=\"hljs text\">&quot;cmd.exe&quot; /k &quot;&quot;%Cmder%\\vendor\\init.bat&quot;&quot;</code></pre>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/269363/1561552882498-assets/web-upload/380d4999-0a28-4c73-8d54-e7055d85fc41.png\" srcset=\"/img/loading.gif\" alt=\"Cmder\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>cmder是一个增强型命令行工具，不仅可以使用windows下的所有命令，更爽的是可以使用linux的命令,shell命令。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ol>\n<li>去<a href=\"https://cmder.net/\" target=\"_blank\" rel=\"noopener\">cmder官网</a>下载压缩包</li>\n<li>解压下载的cmder</li>\n<li>(可选)将您自己的可执行文件放入<code>bin</code>文件夹中，以便注入到系统的<code>Path</code>中</li>\n<li>运行cmder.exe</li>\n</ol>\n<h2 id=\"VS-Code配置Cmder\"><a href=\"#VS-Code配置Cmder\" class=\"headerlink\" title=\"VS Code配置Cmder\"></a>VS Code配置Cmder</h2><p>使用<code>ctrl+,</code>快捷键打开设置页面，选择右上角的<code>{}</code>切换到<code>settings.json</code>文件，添加下面的配置即可</p>\n<pre><code class=\"hljs json\">&#123;\n    ...\n    \"terminal.integrated.shell.windows\": \"C:\\\\windows\\\\System32\\\\cmd.exe\",\n    \"terminal.integrated.shellArgs.windows\": [\n        \"/k D:\\\\Tools\\\\cmder_mini\\\\vendor\\\\init.bat\"\n    ],\n    ...\n&#125;</code></pre>\n<h2 id=\"WebStorm配置Cmder\"><a href=\"#WebStorm配置Cmder\" class=\"headerlink\" title=\"WebStorm配置Cmder\"></a>WebStorm配置Cmder</h2><p><code>ctrl+alt+s</code>打开设置窗口，选择<code>Tools&gt;Terminal</code></p>\n<p>设置</p>\n<pre><code class=\"hljs text\">&quot;cmd.exe&quot; /k &quot;&quot;%Cmder%\\vendor\\init.bat&quot;&quot;</code></pre>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/269363/1561552882498-assets/web-upload/380d4999-0a28-4c73-8d54-e7055d85fc41.png\" srcset=\"/img/loading.gif\" alt=\"Cmder\"></p>\n"},{"title":"构建基于Electron技术的Angular桌面应用","date":"2018-10-15T09:06:30.000Z","_content":"\n\n\nIn this lesson, you will learn how to build native desktop apps with Angular and Electron. You might be surprised how easy it is to start building high-quality desktop apps for any platform, or even port your existing Angular app to native desktop platforms.\n通过本文，你可以学到如何使用Angular和Electron构建桌面应用。\n\nThis lesson covers the following topics:\n\n1. Configure Electron 1.7 with Angular 4.x.\n2. Build a simple timer app in Angular.\n3. Package the app for install on Windows 10, macOS, and Linux Ubuntu.\n\nYou can obtain the [source code](https://github.com/AngularFirebase/angular-electron) for this project on Github.\n\n![](https://angularfirebase.com/images/electron-angular-macos.gif)\n\n# Initial Setup\nLet’s kick things off by building a new angular app from scratch.\n\n# Generate the Angular App\nGenerate a default app with the Angular CLI.\n\n```\nnpm install -g @angular/cli\nng new angular-electron\ncd angular-electron\n```\n\n# Update index.html\n\nThe generated root page in Angular points the base href to `/` - this will cause problems with Electron later on, so let’s update it now. Just add a period in front of the slash in `src/index.html`.\n\n```\n<base href=\"./\">\n```\n# Install Electron\nYou can install Electron in the Angular development environment.\n\n```\nnpm install electron --save-dev\n```\n\n# Configure Electron\nThe next step is to configure Electron. There are all sorts of possibilities for customization and we’re just scratching the surface.\n\n# main.js\nCreate a new file named main.js in the root of your project - this is the Electron NodeJS backend. This is the entry point for Electron and defines how our desktop app will react to various events performed via the desktop operating system.\n\nThe createWindow function defines the properties of the program window that the user will see. There are many more window options that faciliate additional customization, child windows, modals, etc.\n\nNotice we are loading the window by pointing it to the index.html file in the dist/ folder. Do NOT confuse this with the index file in the src/ folder. At this point, this file does not exist, but it will be created automatically in the next step by running ng build --prod\n\n```typescript\nconst { app, BrowserWindow } = require('electron')\n\nlet win;\n\nfunction createWindow () {\n\n  win = new BrowserWindow({\n    width: 600,\n    height: 600,\n    backgroundColor: '#ffffff',\n    icon: `file://${__dirname}/dist/assets/logo.png`\n  })\n\n\n  win.loadURL(`file://${__dirname}/dist/index.html`)\n\n\n\n\n\n  win.on('closed', function () {\n    win = null\n  })\n}\n\n\napp.on('ready', createWindow)\n\n\napp.on('window-all-closed', function () {\n\n\n  if (process.platform !== 'darwin') {\n    app.quit()\n  }\n})\n\napp.on('activate', function () {\n\n  if (win === null) {\n    createWindow()\n  }\n})\n```\nThat’s it for the Electron setup, all the desktop app magic is happens under the hood.\n\n# Custom Build Command\nThe deployed desktop app will be an Angular AOT build - this happens by default when you run ng build --prod. It’s useful to have a command that will run an AOT production build and start Electron at the same time. This can be easily configured in the package.json file.\n\n# package.json\n```json\n{\n  \"name\": \"angular-electron\",\n  \"version\": \"0.0.0\",\n  \"license\": \"MIT\",\n  \"main\": \"main.js\",\n  \"scripts\": {\n    \"ng\": \"ng\",\n    \"start\": \"ng serve\",\n    \"build\": \"ng build\",\n    \"test\": \"ng test\",\n    \"lint\": \"ng lint\",\n    \"e2e\": \"ng e2e\",\n    \"electron\": \"electron .\",\n    \"electron-build\": \"ng build --prod && electron .\"\n  },\n\n}\n```\n# Run the command\nYou can run your angular app as an native desktop app with the following command.\n\n```\nnpm run electron-build\n```\nAt this point, you can run the command (it will take a few seconds) and it will create the dist/ folder and will automatically bring up a window on your operating system with default Angular app.\n\nThis setup does not support hot code reloads. Whenever you change some Angular code, you need to rerun the electron-build command. It is possible to setup hot reloads by pointing the window to a remote URL (such as https://localhost:4200) and running ng serve in a separate terminal.\n\n\n# Building the Angular App\nNow we need to build an Angular App that’s worthy of being installed. I am building a single page timer that will animate a progress circle, then make a chime sound when complete.\n\n![](https://angularfirebase.com/images/angular-electron-timer.gif)\n\nTo keep things super simple, I am writing all the code in the app.component\n\n# Install Round Progress Bar\nTo get the progress timer looking good quickly, I installed the angular-svg-round-progressbar package. It gives us a pre-built component that we can animate based on the current state of the timer.\n\n```\nnpm install angular-svg-round-progressbar --save\n```\nThen add it to the app.module.ts (also add the FormsModule).\n\n```typescript\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\n\nimport { FormsModule } from '@angular/forms';\nimport { RoundProgressModule } from 'angular-svg-round-progressbar';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    RoundProgressModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n```\n# app.component.ts\n\nThe app works by allowing the user to set the number of seconds the timer will run max. The timer progresses by running an RxJS Observable interval every 10th of a second and incrementing the current value.\n\nI also defined several getters help deal with NaN values that can cause errors in the progress circle. They also help keep the HTML logic clean and readable.\n\n```typescript\nimport { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/observable/interval';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/takeWhile';\nimport 'rxjs/add/operator/do';\n\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n\n  max     = 1;\n  current = 0;\n\n\n  start() {\n    const interval = Observable.interval(100);\n\n        interval\n          .takeWhile(_ => !this.isFinished )\n          .do(i => this.current += 0.1)\n          .subscribe();\n  }\n\n\n  finish() {\n    this.current = this.max;\n  }\n\n\n  reset() {\n    this.current = 0;\n  }\n\n\n\n  get maxVal() {\n    return isNaN(this.max) || this.max < 0.1 ? 0.1 : this.max;\n  }\n\n  get currentVal() {\n    return isNaN(this.current) || this.current < 0 ? 0 : this.current;\n  }\n\n  get isFinished() {\n    return this.currentVal >= this.maxVal;\n  }\n\n}\n```\n\n# app.component.html\nIn the HTML, we can declare the progress component and display the user interface elements conditionally based on the state of the timer.\n\n```HTML\n<main class=\"content\">\n\n    <h1>Electron Timer</h1>\n\n    <div class=\"progress-wrapper\" *ngIf=\"maxVal\">\n\n        <div class=\"text\" *ngIf=\"!isFinished\">\n          {{ max - current | number: '1.1-1' }}\n        </div>\n\n        <div class=\"text\" *ngIf=\"isFinished\">\n            ding!\n            <audio src=\"assets/chime.mp3\" autoplay></audio>\n        </div>\n\n        <round-progress\n                [max]=\"max\"\n                [current]=\"current\"\n                [radius]=\"100\"\n                [stroke]=\"25\">\n        </round-progress>\n\n    </div>\n\n    <div class=\"controls-wrapper\">\n\n        <label>Seconds</label>\n        <input class=\"input\" placeholder=\"number of seconds\" type=\"text\"\n              [(ngModel)]=\"max\"\n              (keydown)=\"reset()\">\n\n\n        <button *ngIf=\"currentVal <= 0\" (click)=\"start()\">Start</button>\n        <button *ngIf=\"!isFinished\" (click)=\"finish()\">Finish</button>\n    </div>\n\n\n</main>\n```\n# Packaging for Desktop Operating Systems\nNow that we have a decent app ready for desktops, we need to package and distribute it. The electron packager tool will allow to package our code into an executable for desktop platforms - including Windows (win32), MacOS (darwin), and Linux. Keep in mind, there are several other electron packaging tools that might better fit your needs.\n\n```xml\nnpm install electron-packager -g\nnpm install electron-packager --save-dev\n```\n\nLinux and MacOS developers will need to install WineHQ if they plan on building desktop apps for Windows.\n\nIn this example, I am going to build an executable for Windows.\n\n```\nelectron-packager . --platform=win32\n```\nThis will generate a directory /angular-electron-win32-x64/ that contains the executable file.\n\nAnd why not build one for MacOS while we’re at it.\n\n```\nelectron-packager . --platform=darwin\n```\nThis will generate a directory /angular-electron-darwin-x64/ that contains the app. Zip it and extract it on a mac system and you should be able to run it natively. You will get warnings that it’s from an unknown developer, but this is expected and it’s perfectly safe to open - it’s your own code after all.\n\n# The End\nThat’s it for the basic setup with Electron with Angular. In the future, I will post some more advanced examples of these technologies in action.\n","source":"_posts/build-angular-desktop-apps-with-electron.md","raw":"---\ntitle: 构建基于Electron技术的Angular桌面应用\ndate: 2018-10-15 17:06:30\ntags:\n    - Angular\n    - Electron\ncategories:\n    - 前端\n---\n\n\n\nIn this lesson, you will learn how to build native desktop apps with Angular and Electron. You might be surprised how easy it is to start building high-quality desktop apps for any platform, or even port your existing Angular app to native desktop platforms.\n通过本文，你可以学到如何使用Angular和Electron构建桌面应用。\n\nThis lesson covers the following topics:\n\n1. Configure Electron 1.7 with Angular 4.x.\n2. Build a simple timer app in Angular.\n3. Package the app for install on Windows 10, macOS, and Linux Ubuntu.\n\nYou can obtain the [source code](https://github.com/AngularFirebase/angular-electron) for this project on Github.\n\n![](https://angularfirebase.com/images/electron-angular-macos.gif)\n\n# Initial Setup\nLet’s kick things off by building a new angular app from scratch.\n\n# Generate the Angular App\nGenerate a default app with the Angular CLI.\n\n```\nnpm install -g @angular/cli\nng new angular-electron\ncd angular-electron\n```\n\n# Update index.html\n\nThe generated root page in Angular points the base href to `/` - this will cause problems with Electron later on, so let’s update it now. Just add a period in front of the slash in `src/index.html`.\n\n```\n<base href=\"./\">\n```\n# Install Electron\nYou can install Electron in the Angular development environment.\n\n```\nnpm install electron --save-dev\n```\n\n# Configure Electron\nThe next step is to configure Electron. There are all sorts of possibilities for customization and we’re just scratching the surface.\n\n# main.js\nCreate a new file named main.js in the root of your project - this is the Electron NodeJS backend. This is the entry point for Electron and defines how our desktop app will react to various events performed via the desktop operating system.\n\nThe createWindow function defines the properties of the program window that the user will see. There are many more window options that faciliate additional customization, child windows, modals, etc.\n\nNotice we are loading the window by pointing it to the index.html file in the dist/ folder. Do NOT confuse this with the index file in the src/ folder. At this point, this file does not exist, but it will be created automatically in the next step by running ng build --prod\n\n```typescript\nconst { app, BrowserWindow } = require('electron')\n\nlet win;\n\nfunction createWindow () {\n\n  win = new BrowserWindow({\n    width: 600,\n    height: 600,\n    backgroundColor: '#ffffff',\n    icon: `file://${__dirname}/dist/assets/logo.png`\n  })\n\n\n  win.loadURL(`file://${__dirname}/dist/index.html`)\n\n\n\n\n\n  win.on('closed', function () {\n    win = null\n  })\n}\n\n\napp.on('ready', createWindow)\n\n\napp.on('window-all-closed', function () {\n\n\n  if (process.platform !== 'darwin') {\n    app.quit()\n  }\n})\n\napp.on('activate', function () {\n\n  if (win === null) {\n    createWindow()\n  }\n})\n```\nThat’s it for the Electron setup, all the desktop app magic is happens under the hood.\n\n# Custom Build Command\nThe deployed desktop app will be an Angular AOT build - this happens by default when you run ng build --prod. It’s useful to have a command that will run an AOT production build and start Electron at the same time. This can be easily configured in the package.json file.\n\n# package.json\n```json\n{\n  \"name\": \"angular-electron\",\n  \"version\": \"0.0.0\",\n  \"license\": \"MIT\",\n  \"main\": \"main.js\",\n  \"scripts\": {\n    \"ng\": \"ng\",\n    \"start\": \"ng serve\",\n    \"build\": \"ng build\",\n    \"test\": \"ng test\",\n    \"lint\": \"ng lint\",\n    \"e2e\": \"ng e2e\",\n    \"electron\": \"electron .\",\n    \"electron-build\": \"ng build --prod && electron .\"\n  },\n\n}\n```\n# Run the command\nYou can run your angular app as an native desktop app with the following command.\n\n```\nnpm run electron-build\n```\nAt this point, you can run the command (it will take a few seconds) and it will create the dist/ folder and will automatically bring up a window on your operating system with default Angular app.\n\nThis setup does not support hot code reloads. Whenever you change some Angular code, you need to rerun the electron-build command. It is possible to setup hot reloads by pointing the window to a remote URL (such as https://localhost:4200) and running ng serve in a separate terminal.\n\n\n# Building the Angular App\nNow we need to build an Angular App that’s worthy of being installed. I am building a single page timer that will animate a progress circle, then make a chime sound when complete.\n\n![](https://angularfirebase.com/images/angular-electron-timer.gif)\n\nTo keep things super simple, I am writing all the code in the app.component\n\n# Install Round Progress Bar\nTo get the progress timer looking good quickly, I installed the angular-svg-round-progressbar package. It gives us a pre-built component that we can animate based on the current state of the timer.\n\n```\nnpm install angular-svg-round-progressbar --save\n```\nThen add it to the app.module.ts (also add the FormsModule).\n\n```typescript\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\n\nimport { FormsModule } from '@angular/forms';\nimport { RoundProgressModule } from 'angular-svg-round-progressbar';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    RoundProgressModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n```\n# app.component.ts\n\nThe app works by allowing the user to set the number of seconds the timer will run max. The timer progresses by running an RxJS Observable interval every 10th of a second and incrementing the current value.\n\nI also defined several getters help deal with NaN values that can cause errors in the progress circle. They also help keep the HTML logic clean and readable.\n\n```typescript\nimport { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/observable/interval';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/takeWhile';\nimport 'rxjs/add/operator/do';\n\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n\n  max     = 1;\n  current = 0;\n\n\n  start() {\n    const interval = Observable.interval(100);\n\n        interval\n          .takeWhile(_ => !this.isFinished )\n          .do(i => this.current += 0.1)\n          .subscribe();\n  }\n\n\n  finish() {\n    this.current = this.max;\n  }\n\n\n  reset() {\n    this.current = 0;\n  }\n\n\n\n  get maxVal() {\n    return isNaN(this.max) || this.max < 0.1 ? 0.1 : this.max;\n  }\n\n  get currentVal() {\n    return isNaN(this.current) || this.current < 0 ? 0 : this.current;\n  }\n\n  get isFinished() {\n    return this.currentVal >= this.maxVal;\n  }\n\n}\n```\n\n# app.component.html\nIn the HTML, we can declare the progress component and display the user interface elements conditionally based on the state of the timer.\n\n```HTML\n<main class=\"content\">\n\n    <h1>Electron Timer</h1>\n\n    <div class=\"progress-wrapper\" *ngIf=\"maxVal\">\n\n        <div class=\"text\" *ngIf=\"!isFinished\">\n          {{ max - current | number: '1.1-1' }}\n        </div>\n\n        <div class=\"text\" *ngIf=\"isFinished\">\n            ding!\n            <audio src=\"assets/chime.mp3\" autoplay></audio>\n        </div>\n\n        <round-progress\n                [max]=\"max\"\n                [current]=\"current\"\n                [radius]=\"100\"\n                [stroke]=\"25\">\n        </round-progress>\n\n    </div>\n\n    <div class=\"controls-wrapper\">\n\n        <label>Seconds</label>\n        <input class=\"input\" placeholder=\"number of seconds\" type=\"text\"\n              [(ngModel)]=\"max\"\n              (keydown)=\"reset()\">\n\n\n        <button *ngIf=\"currentVal <= 0\" (click)=\"start()\">Start</button>\n        <button *ngIf=\"!isFinished\" (click)=\"finish()\">Finish</button>\n    </div>\n\n\n</main>\n```\n# Packaging for Desktop Operating Systems\nNow that we have a decent app ready for desktops, we need to package and distribute it. The electron packager tool will allow to package our code into an executable for desktop platforms - including Windows (win32), MacOS (darwin), and Linux. Keep in mind, there are several other electron packaging tools that might better fit your needs.\n\n```xml\nnpm install electron-packager -g\nnpm install electron-packager --save-dev\n```\n\nLinux and MacOS developers will need to install WineHQ if they plan on building desktop apps for Windows.\n\nIn this example, I am going to build an executable for Windows.\n\n```\nelectron-packager . --platform=win32\n```\nThis will generate a directory /angular-electron-win32-x64/ that contains the executable file.\n\nAnd why not build one for MacOS while we’re at it.\n\n```\nelectron-packager . --platform=darwin\n```\nThis will generate a directory /angular-electron-darwin-x64/ that contains the app. Zip it and extract it on a mac system and you should be able to run it natively. You will get warnings that it’s from an unknown developer, but this is expected and it’s perfectly safe to open - it’s your own code after all.\n\n# The End\nThat’s it for the basic setup with Electron with Angular. In the future, I will post some more advanced examples of these technologies in action.\n","slug":"build-angular-desktop-apps-with-electron","published":1,"updated":"2020-07-17T02:32:01.181Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcpntuh3003104oiwavz9l5j","content":"<p>In this lesson, you will learn how to build native desktop apps with Angular and Electron. You might be surprised how easy it is to start building high-quality desktop apps for any platform, or even port your existing Angular app to native desktop platforms.<br>通过本文，你可以学到如何使用Angular和Electron构建桌面应用。</p>\n<p>This lesson covers the following topics:</p>\n<ol>\n<li>Configure Electron 1.7 with Angular 4.x.</li>\n<li>Build a simple timer app in Angular.</li>\n<li>Package the app for install on Windows 10, macOS, and Linux Ubuntu.</li>\n</ol>\n<p>You can obtain the <a href=\"https://github.com/AngularFirebase/angular-electron\" target=\"_blank\" rel=\"noopener\">source code</a> for this project on Github.</p>\n<p><img src=\"https://angularfirebase.com/images/electron-angular-macos.gif\" srcset=\"/img/loading.gif\" alt></p>\n<h1 id=\"Initial-Setup\"><a href=\"#Initial-Setup\" class=\"headerlink\" title=\"Initial Setup\"></a>Initial Setup</h1><p>Let’s kick things off by building a new angular app from scratch.</p>\n<h1 id=\"Generate-the-Angular-App\"><a href=\"#Generate-the-Angular-App\" class=\"headerlink\" title=\"Generate the Angular App\"></a>Generate the Angular App</h1><p>Generate a default app with the Angular CLI.</p>\n<pre><code class=\"hljs undefined\"><span class=\"hljs-built_in\">npm</span> install -g @angular/cli\nng <span class=\"hljs-keyword\">new</span> angular-electron\ncd angular-electron</code></pre>\n<h1 id=\"Update-index-html\"><a href=\"#Update-index-html\" class=\"headerlink\" title=\"Update index.html\"></a>Update index.html</h1><p>The generated root page in Angular points the base href to <code>/</code> - this will cause problems with Electron later on, so let’s update it now. Just add a period in front of the slash in <code>src/index.html</code>.</p>\n<pre><code class=\"hljs undefined\">&lt;base <span class=\"hljs-attribute\">href</span>=<span class=\"hljs-string\">\"./\"</span>&gt;</code></pre>\n<h1 id=\"Install-Electron\"><a href=\"#Install-Electron\" class=\"headerlink\" title=\"Install Electron\"></a>Install Electron</h1><p>You can install Electron in the Angular development environment.</p>\n<pre><code class=\"hljs undefined\">npm install electron --<span class=\"hljs-built_in\">save</span>-<span class=\"hljs-built_in\">dev</span></code></pre>\n<h1 id=\"Configure-Electron\"><a href=\"#Configure-Electron\" class=\"headerlink\" title=\"Configure Electron\"></a>Configure Electron</h1><p>The next step is to configure Electron. There are all sorts of possibilities for customization and we’re just scratching the surface.</p>\n<h1 id=\"main-js\"><a href=\"#main-js\" class=\"headerlink\" title=\"main.js\"></a>main.js</h1><p>Create a new file named main.js in the root of your project - this is the Electron NodeJS backend. This is the entry point for Electron and defines how our desktop app will react to various events performed via the desktop operating system.</p>\n<p>The createWindow function defines the properties of the program window that the user will see. There are many more window options that faciliate additional customization, child windows, modals, etc.</p>\n<p>Notice we are loading the window by pointing it to the index.html file in the dist/ folder. Do NOT confuse this with the index file in the src/ folder. At this point, this file does not exist, but it will be created automatically in the next step by running ng build –prod</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">const</span> &#123; app, BrowserWindow &#125; = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'electron'</span>)\n\n<span class=\"hljs-keyword\">let</span> win;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createWindow</span> (<span class=\"hljs-params\"></span>) </span>&#123;\n\n  win = <span class=\"hljs-keyword\">new</span> BrowserWindow(&#123;\n    width: <span class=\"hljs-number\">600</span>,\n    height: <span class=\"hljs-number\">600</span>,\n    backgroundColor: <span class=\"hljs-string\">'#ffffff'</span>,\n    icon: <span class=\"hljs-string\">`file://<span class=\"hljs-subst\">$&#123;__dirname&#125;</span>/dist/assets/logo.png`</span>\n  &#125;)\n\n\n  win.loadURL(<span class=\"hljs-string\">`file://<span class=\"hljs-subst\">$&#123;__dirname&#125;</span>/dist/index.html`</span>)\n\n\n\n\n\n  win.on(<span class=\"hljs-string\">'closed'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;\n    win = <span class=\"hljs-literal\">null</span>\n  &#125;)\n&#125;\n\n\napp.on(<span class=\"hljs-string\">'ready'</span>, createWindow)\n\n\napp.on(<span class=\"hljs-string\">'window-all-closed'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;\n\n\n  <span class=\"hljs-keyword\">if</span> (process.platform !== <span class=\"hljs-string\">'darwin'</span>) &#123;\n    app.quit()\n  &#125;\n&#125;)\n\napp.on(<span class=\"hljs-string\">'activate'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;\n\n  <span class=\"hljs-keyword\">if</span> (win === <span class=\"hljs-literal\">null</span>) &#123;\n    createWindow()\n  &#125;\n&#125;)</code></pre>\n<p>That’s it for the Electron setup, all the desktop app magic is happens under the hood.</p>\n<h1 id=\"Custom-Build-Command\"><a href=\"#Custom-Build-Command\" class=\"headerlink\" title=\"Custom Build Command\"></a>Custom Build Command</h1><p>The deployed desktop app will be an Angular AOT build - this happens by default when you run ng build –prod. It’s useful to have a command that will run an AOT production build and start Electron at the same time. This can be easily configured in the package.json file.</p>\n<h1 id=\"package-json\"><a href=\"#package-json\" class=\"headerlink\" title=\"package.json\"></a>package.json</h1><pre><code class=\"hljs json\">&#123;\n  <span class=\"hljs-attr\">\"name\"</span>: <span class=\"hljs-string\">\"angular-electron\"</span>,\n  <span class=\"hljs-attr\">\"version\"</span>: <span class=\"hljs-string\">\"0.0.0\"</span>,\n  <span class=\"hljs-attr\">\"license\"</span>: <span class=\"hljs-string\">\"MIT\"</span>,\n  <span class=\"hljs-attr\">\"main\"</span>: <span class=\"hljs-string\">\"main.js\"</span>,\n  <span class=\"hljs-attr\">\"scripts\"</span>: &#123;\n    <span class=\"hljs-attr\">\"ng\"</span>: <span class=\"hljs-string\">\"ng\"</span>,\n    <span class=\"hljs-attr\">\"start\"</span>: <span class=\"hljs-string\">\"ng serve\"</span>,\n    <span class=\"hljs-attr\">\"build\"</span>: <span class=\"hljs-string\">\"ng build\"</span>,\n    <span class=\"hljs-attr\">\"test\"</span>: <span class=\"hljs-string\">\"ng test\"</span>,\n    <span class=\"hljs-attr\">\"lint\"</span>: <span class=\"hljs-string\">\"ng lint\"</span>,\n    <span class=\"hljs-attr\">\"e2e\"</span>: <span class=\"hljs-string\">\"ng e2e\"</span>,\n    <span class=\"hljs-attr\">\"electron\"</span>: <span class=\"hljs-string\">\"electron .\"</span>,\n    <span class=\"hljs-attr\">\"electron-build\"</span>: <span class=\"hljs-string\">\"ng build --prod &amp;&amp; electron .\"</span>\n  &#125;,\n\n&#125;</code></pre>\n<h1 id=\"Run-the-command\"><a href=\"#Run-the-command\" class=\"headerlink\" title=\"Run the command\"></a>Run the command</h1><p>You can run your angular app as an native desktop app with the following command.</p>\n<pre><code class=\"hljs undefined\">npm <span class=\"hljs-keyword\">run</span><span class=\"bash\"> electron-build</span></code></pre>\n<p>At this point, you can run the command (it will take a few seconds) and it will create the dist/ folder and will automatically bring up a window on your operating system with default Angular app.</p>\n<p>This setup does not support hot code reloads. Whenever you change some Angular code, you need to rerun the electron-build command. It is possible to setup hot reloads by pointing the window to a remote URL (such as <a href=\"https://localhost:4200\" target=\"_blank\" rel=\"noopener\">https://localhost:4200</a>) and running ng serve in a separate terminal.</p>\n<h1 id=\"Building-the-Angular-App\"><a href=\"#Building-the-Angular-App\" class=\"headerlink\" title=\"Building the Angular App\"></a>Building the Angular App</h1><p>Now we need to build an Angular App that’s worthy of being installed. I am building a single page timer that will animate a progress circle, then make a chime sound when complete.</p>\n<p><img src=\"https://angularfirebase.com/images/angular-electron-timer.gif\" srcset=\"/img/loading.gif\" alt></p>\n<p>To keep things super simple, I am writing all the code in the app.component</p>\n<h1 id=\"Install-Round-Progress-Bar\"><a href=\"#Install-Round-Progress-Bar\" class=\"headerlink\" title=\"Install Round Progress Bar\"></a>Install Round Progress Bar</h1><p>To get the progress timer looking good quickly, I installed the angular-svg-round-progressbar package. It gives us a pre-built component that we can animate based on the current state of the timer.</p>\n<pre><code class=\"hljs undefined\">npm <span class=\"hljs-keyword\">install</span> angular-svg-<span class=\"hljs-keyword\">round</span>-progressbar <span class=\"hljs-comment\">--save</span></code></pre>\n<p>Then add it to the app.module.ts (also add the FormsModule).</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">import</span> &#123; BrowserModule &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/platform-browser'</span>;\n<span class=\"hljs-keyword\">import</span> &#123; NgModule &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n\n<span class=\"hljs-keyword\">import</span> &#123; AppComponent &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./app.component'</span>;\n\n<span class=\"hljs-keyword\">import</span> &#123; FormsModule &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/forms'</span>;\n<span class=\"hljs-keyword\">import</span> &#123; RoundProgressModule &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'angular-svg-round-progressbar'</span>;\n\n<span class=\"hljs-meta\">@NgModule</span>(&#123;\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    RoundProgressModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n&#125;)\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> AppModule &#123; &#125;</code></pre>\n<h1 id=\"app-component-ts\"><a href=\"#app-component-ts\" class=\"headerlink\" title=\"app.component.ts\"></a>app.component.ts</h1><p>The app works by allowing the user to set the number of seconds the timer will run max. The timer progresses by running an RxJS Observable interval every 10th of a second and incrementing the current value.</p>\n<p>I also defined several getters help deal with NaN values that can cause errors in the progress circle. They also help keep the HTML logic clean and readable.</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">import</span> &#123; Component, OnInit &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n<span class=\"hljs-keyword\">import</span> &#123; Observable &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'rxjs/Observable'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'rxjs/add/observable/interval'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'rxjs/add/operator/map'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'rxjs/add/operator/takeWhile'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'rxjs/add/operator/do'</span>;\n\n\n<span class=\"hljs-meta\">@Component</span>(&#123;\n  selector: <span class=\"hljs-string\">'app-root'</span>,\n  templateUrl: <span class=\"hljs-string\">'./app.component.html'</span>,\n  styleUrls: [<span class=\"hljs-string\">'./app.component.scss'</span>]\n&#125;)\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> AppComponent &#123;\n\n  max     = <span class=\"hljs-number\">1</span>;\n  current = <span class=\"hljs-number\">0</span>;\n\n\n  start() &#123;\n    <span class=\"hljs-keyword\">const</span> interval = Observable.interval(<span class=\"hljs-number\">100</span>);\n\n        interval\n          .takeWhile(_ =&gt; !<span class=\"hljs-keyword\">this</span>.isFinished )\n          .do(<span class=\"hljs-function\"><span class=\"hljs-params\">i</span> =&gt;</span> <span class=\"hljs-keyword\">this</span>.current += <span class=\"hljs-number\">0.1</span>)\n          .subscribe();\n  &#125;\n\n\n  finish() &#123;\n    <span class=\"hljs-keyword\">this</span>.current = <span class=\"hljs-keyword\">this</span>.max;\n  &#125;\n\n\n  reset() &#123;\n    <span class=\"hljs-keyword\">this</span>.current = <span class=\"hljs-number\">0</span>;\n  &#125;\n\n\n\n  <span class=\"hljs-keyword\">get</span> maxVal() &#123;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">isNaN</span>(<span class=\"hljs-keyword\">this</span>.max) || <span class=\"hljs-keyword\">this</span>.max &lt; <span class=\"hljs-number\">0.1</span> ? <span class=\"hljs-number\">0.1</span> : <span class=\"hljs-keyword\">this</span>.max;\n  &#125;\n\n  <span class=\"hljs-keyword\">get</span> currentVal() &#123;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">isNaN</span>(<span class=\"hljs-keyword\">this</span>.current) || <span class=\"hljs-keyword\">this</span>.current &lt; <span class=\"hljs-number\">0</span> ? <span class=\"hljs-number\">0</span> : <span class=\"hljs-keyword\">this</span>.current;\n  &#125;\n\n  <span class=\"hljs-keyword\">get</span> isFinished() &#123;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.currentVal &gt;= <span class=\"hljs-keyword\">this</span>.maxVal;\n  &#125;\n\n&#125;</code></pre>\n<h1 id=\"app-component-html\"><a href=\"#app-component-html\" class=\"headerlink\" title=\"app.component.html\"></a>app.component.html</h1><p>In the HTML, we can declare the progress component and display the user interface elements conditionally based on the state of the timer.</p>\n<pre><code class=\"hljs HTML\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">main</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"content\"</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Electron Timer<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"progress-wrapper\"</span> *<span class=\"hljs-attr\">ngIf</span>=<span class=\"hljs-string\">\"maxVal\"</span>&gt;</span>\n\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"text\"</span> *<span class=\"hljs-attr\">ngIf</span>=<span class=\"hljs-string\">\"!isFinished\"</span>&gt;</span>\n          &#123;&#123; max - current | number: '1.1-1' &#125;&#125;\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"text\"</span> *<span class=\"hljs-attr\">ngIf</span>=<span class=\"hljs-string\">\"isFinished\"</span>&gt;</span>\n            ding!\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">audio</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"assets/chime.mp3\"</span> <span class=\"hljs-attr\">autoplay</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">audio</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">round-progress</span>\n                [<span class=\"hljs-attr\">max</span>]=<span class=\"hljs-string\">\"max\"</span>\n                [<span class=\"hljs-attr\">current</span>]=<span class=\"hljs-string\">\"current\"</span>\n                [<span class=\"hljs-attr\">radius</span>]=<span class=\"hljs-string\">\"100\"</span>\n                [<span class=\"hljs-attr\">stroke</span>]=<span class=\"hljs-string\">\"25\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">round-progress</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"controls-wrapper\"</span>&gt;</span>\n\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span>&gt;</span>Seconds<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"input\"</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"number of seconds\"</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span>\n              [(<span class=\"hljs-attr\">ngModel</span>)]=<span class=\"hljs-string\">\"max\"</span>\n              (<span class=\"hljs-attr\">keydown</span>)=<span class=\"hljs-string\">\"reset()\"</span>&gt;</span>\n\n\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> *<span class=\"hljs-attr\">ngIf</span>=<span class=\"hljs-string\">\"currentVal &lt;= 0\"</span> (<span class=\"hljs-attr\">click</span>)=<span class=\"hljs-string\">\"start()\"</span>&gt;</span>Start<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> *<span class=\"hljs-attr\">ngIf</span>=<span class=\"hljs-string\">\"!isFinished\"</span> (<span class=\"hljs-attr\">click</span>)=<span class=\"hljs-string\">\"finish()\"</span>&gt;</span>Finish<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">main</span>&gt;</span></code></pre>\n<h1 id=\"Packaging-for-Desktop-Operating-Systems\"><a href=\"#Packaging-for-Desktop-Operating-Systems\" class=\"headerlink\" title=\"Packaging for Desktop Operating Systems\"></a>Packaging for Desktop Operating Systems</h1><p>Now that we have a decent app ready for desktops, we need to package and distribute it. The electron packager tool will allow to package our code into an executable for desktop platforms - including Windows (win32), MacOS (darwin), and Linux. Keep in mind, there are several other electron packaging tools that might better fit your needs.</p>\n<pre><code class=\"hljs xml\">npm install electron-packager -g\nnpm install electron-packager --save-dev</code></pre>\n<p>Linux and MacOS developers will need to install WineHQ if they plan on building desktop apps for Windows.</p>\n<p>In this example, I am going to build an executable for Windows.</p>\n<pre><code class=\"hljs undefined\">electron-packager . <span class=\"hljs-attribute\">--platform</span>=win32</code></pre>\n<p>This will generate a directory /angular-electron-win32-x64/ that contains the executable file.</p>\n<p>And why not build one for MacOS while we’re at it.</p>\n<pre><code class=\"hljs undefined\">electron-packager . <span class=\"hljs-attribute\">--platform</span>=darwin</code></pre>\n<p>This will generate a directory /angular-electron-darwin-x64/ that contains the app. Zip it and extract it on a mac system and you should be able to run it natively. You will get warnings that it’s from an unknown developer, but this is expected and it’s perfectly safe to open - it’s your own code after all.</p>\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The End\"></a>The End</h1><p>That’s it for the basic setup with Electron with Angular. In the future, I will post some more advanced examples of these technologies in action.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>In this lesson, you will learn how to build native desktop apps with Angular and Electron. You might be surprised how easy it is to start building high-quality desktop apps for any platform, or even port your existing Angular app to native desktop platforms.<br>通过本文，你可以学到如何使用Angular和Electron构建桌面应用。</p>\n<p>This lesson covers the following topics:</p>\n<ol>\n<li>Configure Electron 1.7 with Angular 4.x.</li>\n<li>Build a simple timer app in Angular.</li>\n<li>Package the app for install on Windows 10, macOS, and Linux Ubuntu.</li>\n</ol>\n<p>You can obtain the <a href=\"https://github.com/AngularFirebase/angular-electron\" target=\"_blank\" rel=\"noopener\">source code</a> for this project on Github.</p>\n<p><img src=\"https://angularfirebase.com/images/electron-angular-macos.gif\" srcset=\"/img/loading.gif\" alt></p>\n<h1 id=\"Initial-Setup\"><a href=\"#Initial-Setup\" class=\"headerlink\" title=\"Initial Setup\"></a>Initial Setup</h1><p>Let’s kick things off by building a new angular app from scratch.</p>\n<h1 id=\"Generate-the-Angular-App\"><a href=\"#Generate-the-Angular-App\" class=\"headerlink\" title=\"Generate the Angular App\"></a>Generate the Angular App</h1><p>Generate a default app with the Angular CLI.</p>\n<pre><code class=\"hljs undefined\"><span class=\"hljs-built_in\">npm</span> install -g @angular/cli\nng <span class=\"hljs-keyword\">new</span> angular-electron\ncd angular-electron</code></pre>\n<h1 id=\"Update-index-html\"><a href=\"#Update-index-html\" class=\"headerlink\" title=\"Update index.html\"></a>Update index.html</h1><p>The generated root page in Angular points the base href to <code>/</code> - this will cause problems with Electron later on, so let’s update it now. Just add a period in front of the slash in <code>src/index.html</code>.</p>\n<pre><code class=\"hljs undefined\">&lt;base <span class=\"hljs-attribute\">href</span>=<span class=\"hljs-string\">\"./\"</span>&gt;</code></pre>\n<h1 id=\"Install-Electron\"><a href=\"#Install-Electron\" class=\"headerlink\" title=\"Install Electron\"></a>Install Electron</h1><p>You can install Electron in the Angular development environment.</p>\n<pre><code class=\"hljs undefined\">npm install electron --<span class=\"hljs-built_in\">save</span>-<span class=\"hljs-built_in\">dev</span></code></pre>\n<h1 id=\"Configure-Electron\"><a href=\"#Configure-Electron\" class=\"headerlink\" title=\"Configure Electron\"></a>Configure Electron</h1><p>The next step is to configure Electron. There are all sorts of possibilities for customization and we’re just scratching the surface.</p>\n<h1 id=\"main-js\"><a href=\"#main-js\" class=\"headerlink\" title=\"main.js\"></a>main.js</h1><p>Create a new file named main.js in the root of your project - this is the Electron NodeJS backend. This is the entry point for Electron and defines how our desktop app will react to various events performed via the desktop operating system.</p>\n<p>The createWindow function defines the properties of the program window that the user will see. There are many more window options that faciliate additional customization, child windows, modals, etc.</p>\n<p>Notice we are loading the window by pointing it to the index.html file in the dist/ folder. Do NOT confuse this with the index file in the src/ folder. At this point, this file does not exist, but it will be created automatically in the next step by running ng build –prod</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">const</span> &#123; app, BrowserWindow &#125; = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'electron'</span>)\n\n<span class=\"hljs-keyword\">let</span> win;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createWindow</span> (<span class=\"hljs-params\"></span>) </span>&#123;\n\n  win = <span class=\"hljs-keyword\">new</span> BrowserWindow(&#123;\n    width: <span class=\"hljs-number\">600</span>,\n    height: <span class=\"hljs-number\">600</span>,\n    backgroundColor: <span class=\"hljs-string\">'#ffffff'</span>,\n    icon: <span class=\"hljs-string\">`file://<span class=\"hljs-subst\">$&#123;__dirname&#125;</span>/dist/assets/logo.png`</span>\n  &#125;)\n\n\n  win.loadURL(<span class=\"hljs-string\">`file://<span class=\"hljs-subst\">$&#123;__dirname&#125;</span>/dist/index.html`</span>)\n\n\n\n\n\n  win.on(<span class=\"hljs-string\">'closed'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;\n    win = <span class=\"hljs-literal\">null</span>\n  &#125;)\n&#125;\n\n\napp.on(<span class=\"hljs-string\">'ready'</span>, createWindow)\n\n\napp.on(<span class=\"hljs-string\">'window-all-closed'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;\n\n\n  <span class=\"hljs-keyword\">if</span> (process.platform !== <span class=\"hljs-string\">'darwin'</span>) &#123;\n    app.quit()\n  &#125;\n&#125;)\n\napp.on(<span class=\"hljs-string\">'activate'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;\n\n  <span class=\"hljs-keyword\">if</span> (win === <span class=\"hljs-literal\">null</span>) &#123;\n    createWindow()\n  &#125;\n&#125;)</code></pre>\n<p>That’s it for the Electron setup, all the desktop app magic is happens under the hood.</p>\n<h1 id=\"Custom-Build-Command\"><a href=\"#Custom-Build-Command\" class=\"headerlink\" title=\"Custom Build Command\"></a>Custom Build Command</h1><p>The deployed desktop app will be an Angular AOT build - this happens by default when you run ng build –prod. It’s useful to have a command that will run an AOT production build and start Electron at the same time. This can be easily configured in the package.json file.</p>\n<h1 id=\"package-json\"><a href=\"#package-json\" class=\"headerlink\" title=\"package.json\"></a>package.json</h1><pre><code class=\"hljs json\">&#123;\n  <span class=\"hljs-attr\">\"name\"</span>: <span class=\"hljs-string\">\"angular-electron\"</span>,\n  <span class=\"hljs-attr\">\"version\"</span>: <span class=\"hljs-string\">\"0.0.0\"</span>,\n  <span class=\"hljs-attr\">\"license\"</span>: <span class=\"hljs-string\">\"MIT\"</span>,\n  <span class=\"hljs-attr\">\"main\"</span>: <span class=\"hljs-string\">\"main.js\"</span>,\n  <span class=\"hljs-attr\">\"scripts\"</span>: &#123;\n    <span class=\"hljs-attr\">\"ng\"</span>: <span class=\"hljs-string\">\"ng\"</span>,\n    <span class=\"hljs-attr\">\"start\"</span>: <span class=\"hljs-string\">\"ng serve\"</span>,\n    <span class=\"hljs-attr\">\"build\"</span>: <span class=\"hljs-string\">\"ng build\"</span>,\n    <span class=\"hljs-attr\">\"test\"</span>: <span class=\"hljs-string\">\"ng test\"</span>,\n    <span class=\"hljs-attr\">\"lint\"</span>: <span class=\"hljs-string\">\"ng lint\"</span>,\n    <span class=\"hljs-attr\">\"e2e\"</span>: <span class=\"hljs-string\">\"ng e2e\"</span>,\n    <span class=\"hljs-attr\">\"electron\"</span>: <span class=\"hljs-string\">\"electron .\"</span>,\n    <span class=\"hljs-attr\">\"electron-build\"</span>: <span class=\"hljs-string\">\"ng build --prod &amp;&amp; electron .\"</span>\n  &#125;,\n\n&#125;</code></pre>\n<h1 id=\"Run-the-command\"><a href=\"#Run-the-command\" class=\"headerlink\" title=\"Run the command\"></a>Run the command</h1><p>You can run your angular app as an native desktop app with the following command.</p>\n<pre><code class=\"hljs undefined\">npm <span class=\"hljs-keyword\">run</span><span class=\"bash\"> electron-build</span></code></pre>\n<p>At this point, you can run the command (it will take a few seconds) and it will create the dist/ folder and will automatically bring up a window on your operating system with default Angular app.</p>\n<p>This setup does not support hot code reloads. Whenever you change some Angular code, you need to rerun the electron-build command. It is possible to setup hot reloads by pointing the window to a remote URL (such as <a href=\"https://localhost:4200\" target=\"_blank\" rel=\"noopener\">https://localhost:4200</a>) and running ng serve in a separate terminal.</p>\n<h1 id=\"Building-the-Angular-App\"><a href=\"#Building-the-Angular-App\" class=\"headerlink\" title=\"Building the Angular App\"></a>Building the Angular App</h1><p>Now we need to build an Angular App that’s worthy of being installed. I am building a single page timer that will animate a progress circle, then make a chime sound when complete.</p>\n<p><img src=\"https://angularfirebase.com/images/angular-electron-timer.gif\" srcset=\"/img/loading.gif\" alt></p>\n<p>To keep things super simple, I am writing all the code in the app.component</p>\n<h1 id=\"Install-Round-Progress-Bar\"><a href=\"#Install-Round-Progress-Bar\" class=\"headerlink\" title=\"Install Round Progress Bar\"></a>Install Round Progress Bar</h1><p>To get the progress timer looking good quickly, I installed the angular-svg-round-progressbar package. It gives us a pre-built component that we can animate based on the current state of the timer.</p>\n<pre><code class=\"hljs undefined\">npm <span class=\"hljs-keyword\">install</span> angular-svg-<span class=\"hljs-keyword\">round</span>-progressbar <span class=\"hljs-comment\">--save</span></code></pre>\n<p>Then add it to the app.module.ts (also add the FormsModule).</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">import</span> &#123; BrowserModule &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/platform-browser'</span>;\n<span class=\"hljs-keyword\">import</span> &#123; NgModule &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n\n<span class=\"hljs-keyword\">import</span> &#123; AppComponent &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./app.component'</span>;\n\n<span class=\"hljs-keyword\">import</span> &#123; FormsModule &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/forms'</span>;\n<span class=\"hljs-keyword\">import</span> &#123; RoundProgressModule &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'angular-svg-round-progressbar'</span>;\n\n<span class=\"hljs-meta\">@NgModule</span>(&#123;\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    RoundProgressModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n&#125;)\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> AppModule &#123; &#125;</code></pre>\n<h1 id=\"app-component-ts\"><a href=\"#app-component-ts\" class=\"headerlink\" title=\"app.component.ts\"></a>app.component.ts</h1><p>The app works by allowing the user to set the number of seconds the timer will run max. The timer progresses by running an RxJS Observable interval every 10th of a second and incrementing the current value.</p>\n<p>I also defined several getters help deal with NaN values that can cause errors in the progress circle. They also help keep the HTML logic clean and readable.</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">import</span> &#123; Component, OnInit &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n<span class=\"hljs-keyword\">import</span> &#123; Observable &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'rxjs/Observable'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'rxjs/add/observable/interval'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'rxjs/add/operator/map'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'rxjs/add/operator/takeWhile'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'rxjs/add/operator/do'</span>;\n\n\n<span class=\"hljs-meta\">@Component</span>(&#123;\n  selector: <span class=\"hljs-string\">'app-root'</span>,\n  templateUrl: <span class=\"hljs-string\">'./app.component.html'</span>,\n  styleUrls: [<span class=\"hljs-string\">'./app.component.scss'</span>]\n&#125;)\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> AppComponent &#123;\n\n  max     = <span class=\"hljs-number\">1</span>;\n  current = <span class=\"hljs-number\">0</span>;\n\n\n  start() &#123;\n    <span class=\"hljs-keyword\">const</span> interval = Observable.interval(<span class=\"hljs-number\">100</span>);\n\n        interval\n          .takeWhile(_ =&gt; !<span class=\"hljs-keyword\">this</span>.isFinished )\n          .do(<span class=\"hljs-function\"><span class=\"hljs-params\">i</span> =&gt;</span> <span class=\"hljs-keyword\">this</span>.current += <span class=\"hljs-number\">0.1</span>)\n          .subscribe();\n  &#125;\n\n\n  finish() &#123;\n    <span class=\"hljs-keyword\">this</span>.current = <span class=\"hljs-keyword\">this</span>.max;\n  &#125;\n\n\n  reset() &#123;\n    <span class=\"hljs-keyword\">this</span>.current = <span class=\"hljs-number\">0</span>;\n  &#125;\n\n\n\n  <span class=\"hljs-keyword\">get</span> maxVal() &#123;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">isNaN</span>(<span class=\"hljs-keyword\">this</span>.max) || <span class=\"hljs-keyword\">this</span>.max &lt; <span class=\"hljs-number\">0.1</span> ? <span class=\"hljs-number\">0.1</span> : <span class=\"hljs-keyword\">this</span>.max;\n  &#125;\n\n  <span class=\"hljs-keyword\">get</span> currentVal() &#123;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">isNaN</span>(<span class=\"hljs-keyword\">this</span>.current) || <span class=\"hljs-keyword\">this</span>.current &lt; <span class=\"hljs-number\">0</span> ? <span class=\"hljs-number\">0</span> : <span class=\"hljs-keyword\">this</span>.current;\n  &#125;\n\n  <span class=\"hljs-keyword\">get</span> isFinished() &#123;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.currentVal &gt;= <span class=\"hljs-keyword\">this</span>.maxVal;\n  &#125;\n\n&#125;</code></pre>\n<h1 id=\"app-component-html\"><a href=\"#app-component-html\" class=\"headerlink\" title=\"app.component.html\"></a>app.component.html</h1><p>In the HTML, we can declare the progress component and display the user interface elements conditionally based on the state of the timer.</p>\n<pre><code class=\"hljs HTML\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">main</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"content\"</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Electron Timer<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"progress-wrapper\"</span> *<span class=\"hljs-attr\">ngIf</span>=<span class=\"hljs-string\">\"maxVal\"</span>&gt;</span>\n\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"text\"</span> *<span class=\"hljs-attr\">ngIf</span>=<span class=\"hljs-string\">\"!isFinished\"</span>&gt;</span>\n          &#123;&#123; max - current | number: '1.1-1' &#125;&#125;\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"text\"</span> *<span class=\"hljs-attr\">ngIf</span>=<span class=\"hljs-string\">\"isFinished\"</span>&gt;</span>\n            ding!\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">audio</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"assets/chime.mp3\"</span> <span class=\"hljs-attr\">autoplay</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">audio</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">round-progress</span>\n                [<span class=\"hljs-attr\">max</span>]=<span class=\"hljs-string\">\"max\"</span>\n                [<span class=\"hljs-attr\">current</span>]=<span class=\"hljs-string\">\"current\"</span>\n                [<span class=\"hljs-attr\">radius</span>]=<span class=\"hljs-string\">\"100\"</span>\n                [<span class=\"hljs-attr\">stroke</span>]=<span class=\"hljs-string\">\"25\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">round-progress</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"controls-wrapper\"</span>&gt;</span>\n\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span>&gt;</span>Seconds<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"input\"</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"number of seconds\"</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span>\n              [(<span class=\"hljs-attr\">ngModel</span>)]=<span class=\"hljs-string\">\"max\"</span>\n              (<span class=\"hljs-attr\">keydown</span>)=<span class=\"hljs-string\">\"reset()\"</span>&gt;</span>\n\n\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> *<span class=\"hljs-attr\">ngIf</span>=<span class=\"hljs-string\">\"currentVal &lt;= 0\"</span> (<span class=\"hljs-attr\">click</span>)=<span class=\"hljs-string\">\"start()\"</span>&gt;</span>Start<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> *<span class=\"hljs-attr\">ngIf</span>=<span class=\"hljs-string\">\"!isFinished\"</span> (<span class=\"hljs-attr\">click</span>)=<span class=\"hljs-string\">\"finish()\"</span>&gt;</span>Finish<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">main</span>&gt;</span></code></pre>\n<h1 id=\"Packaging-for-Desktop-Operating-Systems\"><a href=\"#Packaging-for-Desktop-Operating-Systems\" class=\"headerlink\" title=\"Packaging for Desktop Operating Systems\"></a>Packaging for Desktop Operating Systems</h1><p>Now that we have a decent app ready for desktops, we need to package and distribute it. The electron packager tool will allow to package our code into an executable for desktop platforms - including Windows (win32), MacOS (darwin), and Linux. Keep in mind, there are several other electron packaging tools that might better fit your needs.</p>\n<pre><code class=\"hljs xml\">npm install electron-packager -g\nnpm install electron-packager --save-dev</code></pre>\n<p>Linux and MacOS developers will need to install WineHQ if they plan on building desktop apps for Windows.</p>\n<p>In this example, I am going to build an executable for Windows.</p>\n<pre><code class=\"hljs undefined\">electron-packager . <span class=\"hljs-attribute\">--platform</span>=win32</code></pre>\n<p>This will generate a directory /angular-electron-win32-x64/ that contains the executable file.</p>\n<p>And why not build one for MacOS while we’re at it.</p>\n<pre><code class=\"hljs undefined\">electron-packager . <span class=\"hljs-attribute\">--platform</span>=darwin</code></pre>\n<p>This will generate a directory /angular-electron-darwin-x64/ that contains the app. Zip it and extract it on a mac system and you should be able to run it natively. You will get warnings that it’s from an unknown developer, but this is expected and it’s perfectly safe to open - it’s your own code after all.</p>\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The End\"></a>The End</h1><p>That’s it for the basic setup with Electron with Angular. In the future, I will post some more advanced examples of these technologies in action.</p>\n"},{"title":"win10下手动编译Spring","date":"2018-10-12T01:06:30.000Z","_content":"\n\n在windows下执行`gradlew.bat build`发生异常，如下：\n![image](http://img.hb.aicdn.com/6257b1a43c17c6eba97c52034c6f398c459788305765-exykoC_fw658)\n\n原因是执行gradle编译时，没有生成`xxx-schema.zip`文件。\n\n通过修改task schemaZip,将文件路径分符由Unix系统的`/`修改为windows系统的`\\\\`.\n\n```\ntask schemaZip(type: Zip) {\n\tgroup = \"Distribution\"\n\tbaseName = \"spring-framework\"\n\tclassifier = \"schema\"\n\tdescription = \"Builds -${classifier} archive containing all \" +\n\t\t\t\"XSDs for deployment at http://springframework.org/schema.\"\n\tduplicatesStrategy 'exclude'\n\tmoduleProjects.each { subproject ->\n\t\tdef Properties schemas = new Properties();\n\n\t\tsubproject.sourceSets.main.resources.find {\n\t\t\tit.path.endsWith(\"META-INF\\\\spring.schemas\")\n\t\t}?.withInputStream { schemas.load(it) }\n\n\t\tfor (def key : schemas.keySet()) {\n\t\t\tdef shortName = key.replaceAll(/http.*schema.(.*).spring-.*/, '$1')\n\t\t\tassert shortName != key\n\t\t\tFile xsdFile = subproject.sourceSets.main.resources.find {\n\t\t\t\tit.path.endsWith(schemas.get(key).replaceAll('\\\\/', '\\\\\\\\'))\n\t\t\t}\n\t\t\tassert xsdFile != null\n\t\t\tinto (shortName) {\n\t\t\t\tfrom xsdFile.path\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n> [参考stackoverflow](https://stackoverflow.com/questions/34916981/build-spring-framework-source-code-encounter-an-error)\n","source":"_posts/build-spring-on-win10.md","raw":"---\ntitle: win10下手动编译Spring\ndate: 2018-10-12 09:06:30\ntags: \n    - Spring\ncategories:\n    - 后端\n---\n\n\n在windows下执行`gradlew.bat build`发生异常，如下：\n![image](http://img.hb.aicdn.com/6257b1a43c17c6eba97c52034c6f398c459788305765-exykoC_fw658)\n\n原因是执行gradle编译时，没有生成`xxx-schema.zip`文件。\n\n通过修改task schemaZip,将文件路径分符由Unix系统的`/`修改为windows系统的`\\\\`.\n\n```\ntask schemaZip(type: Zip) {\n\tgroup = \"Distribution\"\n\tbaseName = \"spring-framework\"\n\tclassifier = \"schema\"\n\tdescription = \"Builds -${classifier} archive containing all \" +\n\t\t\t\"XSDs for deployment at http://springframework.org/schema.\"\n\tduplicatesStrategy 'exclude'\n\tmoduleProjects.each { subproject ->\n\t\tdef Properties schemas = new Properties();\n\n\t\tsubproject.sourceSets.main.resources.find {\n\t\t\tit.path.endsWith(\"META-INF\\\\spring.schemas\")\n\t\t}?.withInputStream { schemas.load(it) }\n\n\t\tfor (def key : schemas.keySet()) {\n\t\t\tdef shortName = key.replaceAll(/http.*schema.(.*).spring-.*/, '$1')\n\t\t\tassert shortName != key\n\t\t\tFile xsdFile = subproject.sourceSets.main.resources.find {\n\t\t\t\tit.path.endsWith(schemas.get(key).replaceAll('\\\\/', '\\\\\\\\'))\n\t\t\t}\n\t\t\tassert xsdFile != null\n\t\t\tinto (shortName) {\n\t\t\t\tfrom xsdFile.path\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n> [参考stackoverflow](https://stackoverflow.com/questions/34916981/build-spring-framework-source-code-encounter-an-error)\n","slug":"build-spring-on-win10","published":1,"updated":"2020-07-17T02:32:01.183Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcpntuh4003304oibsuf4epw","content":"<p>在windows下执行<code>gradlew.bat build</code>发生异常，如下：<br><img src=\"http://img.hb.aicdn.com/6257b1a43c17c6eba97c52034c6f398c459788305765-exykoC_fw658\" srcset=\"/img/loading.gif\" alt=\"image\"></p>\n<p>原因是执行gradle编译时，没有生成<code>xxx-schema.zip</code>文件。</p>\n<p>通过修改task schemaZip,将文件路径分符由Unix系统的<code>/</code>修改为windows系统的<code>\\\\</code>.</p>\n<pre><code class=\"hljs undefined\">task schemaZip(type: Zip) &#123;\n<span class=\"hljs-built_in\">\tgroup </span>= <span class=\"hljs-string\">\"Distribution\"</span>\n\tbaseName = <span class=\"hljs-string\">\"spring-framework\"</span>\n\tclassifier = <span class=\"hljs-string\">\"schema\"</span>\n\tdescription = <span class=\"hljs-string\">\"Builds -<span class=\"hljs-variable\">$&#123;classifier&#125;</span> archive containing all \"</span> +\n\t\t\t<span class=\"hljs-string\">\"XSDs for deployment at http://springframework.org/schema.\"</span>\n\tduplicatesStrategy <span class=\"hljs-string\">'exclude'</span>\n\tmoduleProjects.each &#123; subproject -&gt;\n\t\tdef Properties schemas = new Properties();\n\n\t\tsubproject.sourceSets.main.resources.<span class=\"hljs-builtin-name\">find</span> &#123;\n\t\t\tit.path.endsWith(<span class=\"hljs-string\">\"META-INF\\\\spring.schemas\"</span>)\n\t\t&#125;?.withInputStream &#123; schemas.load(it) &#125;\n\n\t\t<span class=\"hljs-keyword\">for</span> (def key : schemas.keySet()) &#123;\n\t\t\tdef shortName = key.replaceAll(/http.*schema.(.*).spring-.*/, <span class=\"hljs-string\">'$1'</span>)\n\t\t\tassert shortName != key\n\t\t\tFile xsdFile = subproject.sourceSets.main.resources.<span class=\"hljs-builtin-name\">find</span> &#123;\n\t\t\t\tit.path.endsWith(schemas.<span class=\"hljs-builtin-name\">get</span>(key).replaceAll(<span class=\"hljs-string\">'\\\\/'</span>, <span class=\"hljs-string\">'\\\\\\\\'</span>))\n\t\t\t&#125;\n\t\t\tassert xsdFile != <span class=\"hljs-literal\">null</span>\n\t\t\tinto (shortName) &#123;\n\t\t\t\t<span class=\"hljs-keyword\">from</span> xsdFile.path\n\t\t\t&#125;\n\t\t&#125;\n\t&#125;\n&#125;</code></pre>\n<blockquote>\n<p><a href=\"https://stackoverflow.com/questions/34916981/build-spring-framework-source-code-encounter-an-error\" target=\"_blank\" rel=\"noopener\">参考stackoverflow</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>在windows下执行<code>gradlew.bat build</code>发生异常，如下：<br><img src=\"http://img.hb.aicdn.com/6257b1a43c17c6eba97c52034c6f398c459788305765-exykoC_fw658\" srcset=\"/img/loading.gif\" alt=\"image\"></p>\n<p>原因是执行gradle编译时，没有生成<code>xxx-schema.zip</code>文件。</p>\n<p>通过修改task schemaZip,将文件路径分符由Unix系统的<code>/</code>修改为windows系统的<code>\\\\</code>.</p>\n<pre><code class=\"hljs undefined\">task schemaZip(type: Zip) &#123;\n<span class=\"hljs-built_in\">\tgroup </span>= <span class=\"hljs-string\">\"Distribution\"</span>\n\tbaseName = <span class=\"hljs-string\">\"spring-framework\"</span>\n\tclassifier = <span class=\"hljs-string\">\"schema\"</span>\n\tdescription = <span class=\"hljs-string\">\"Builds -<span class=\"hljs-variable\">$&#123;classifier&#125;</span> archive containing all \"</span> +\n\t\t\t<span class=\"hljs-string\">\"XSDs for deployment at http://springframework.org/schema.\"</span>\n\tduplicatesStrategy <span class=\"hljs-string\">'exclude'</span>\n\tmoduleProjects.each &#123; subproject -&gt;\n\t\tdef Properties schemas = new Properties();\n\n\t\tsubproject.sourceSets.main.resources.<span class=\"hljs-builtin-name\">find</span> &#123;\n\t\t\tit.path.endsWith(<span class=\"hljs-string\">\"META-INF\\\\spring.schemas\"</span>)\n\t\t&#125;?.withInputStream &#123; schemas.load(it) &#125;\n\n\t\t<span class=\"hljs-keyword\">for</span> (def key : schemas.keySet()) &#123;\n\t\t\tdef shortName = key.replaceAll(/http.*schema.(.*).spring-.*/, <span class=\"hljs-string\">'$1'</span>)\n\t\t\tassert shortName != key\n\t\t\tFile xsdFile = subproject.sourceSets.main.resources.<span class=\"hljs-builtin-name\">find</span> &#123;\n\t\t\t\tit.path.endsWith(schemas.<span class=\"hljs-builtin-name\">get</span>(key).replaceAll(<span class=\"hljs-string\">'\\\\/'</span>, <span class=\"hljs-string\">'\\\\\\\\'</span>))\n\t\t\t&#125;\n\t\t\tassert xsdFile != <span class=\"hljs-literal\">null</span>\n\t\t\tinto (shortName) &#123;\n\t\t\t\t<span class=\"hljs-keyword\">from</span> xsdFile.path\n\t\t\t&#125;\n\t\t&#125;\n\t&#125;\n&#125;</code></pre>\n<blockquote>\n<p><a href=\"https://stackoverflow.com/questions/34916981/build-spring-framework-source-code-encounter-an-error\" target=\"_blank\" rel=\"noopener\">参考stackoverflow</a></p>\n</blockquote>\n"},{"title":"Display real-time data in Angular","date":"2018-06-28T02:49:46.000Z","_content":"\n\n\n\nIn this article, we'll be taking a look at two ways to display real-time data in an Angular application. We'll discuss how to push real-time data via a service. One approach will be using sockets while the other will be using the Angular AsyncPipe and Observables.\n\n## Setting the scene\nOften in an application, we work with a backend API service. We create a component, we call an Angular service which in turn calls an API. That API call returns some data and that data is then displayed in the template of the component. This is a very simple scenario. But what happens when data that arrives is updated frequently - think about stock symbols and their values, an online radio that needs to display a new artist & song title. We somehow need to update the component when the data changes at the API level.\n\n## Async Pipe & Observables\nThe first approach that we'll take a look doesn't require any modification at the API level. In light of this, we'll be using the `Async Pipe`. Pipes in Angular work just as pipes work in Linux. They accept an input and produce an output. What the output is going to be is determined by the pipe's functionality. This pipe accepts a promise or an observable as an input, and it can update the template whenever the promise is resolved or when the observable emits some new value. As with all pipes, we need to apply the pipe in the template.\n\nLet's assume that we have a list of products returned by an API and that we have the following service available:\n\n```typescript\n// api.service.ts\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable()\nexport class ApiService {\n\n  constructor(private http: HttpClient) { }\n\n  getProducts() {\n    return this.http.get('http://localhost:3000/api/products');\n  }\n}\n```\nThe code above is straightforward - we specify the `getProducts()` method that returns the HTTP GET call.\n\nIt's time to consume this service in the component. And what we'll do here is create an Observable and assign the result of the `getProducts()` method to it. Furthermore, we'll make that call every 1 second, so if there's an update at the API level, we can refresh the template:\n\n```typescript\n// some.component.ts\nimport { Component, OnInit, OnDestroy, Input } from '@angular/core';\nimport { ApiService } from './../api.service';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/observable/interval';\nimport 'rxjs/add/operator/startWith';\nimport 'rxjs/add/operator/switchMap';\n\n@Component({\n  selector: 'app-products',\n  templateUrl: './products.component.html',\n  styleUrls: ['./products.component.css']\n})\n\nexport class ProductsComponent implements OnInit {\n  @Input() products$: Observable<any>;\n  constructor(private api: ApiService) { }\n\n  ngOnInit() {\n    this.products$ = Observable      \n                        .interval(1000)\n                        .startWith(0).switchMap(() => this.api.getProducts());\n  }\n}\n```\n\nAnd last but not least, we need to apply the async pipe in our template:\n\n```html\n<!-- some.component.html -->\n<ul>\n  <li *ngFor=\"let product of products$ | async\">{{ product.prod_name }} for {{ product.price | currency:'£'}}</li>\n</ul>\n```\nThis way, if we push a new item to the API (or remove one or multiple item(s)) the updates are going to be visible in the component in 1 second.\n\n## Sockets\nAnother approach to creating a component and a service that accepts push data from the server is by implementing sockets. To achieve such functionality, changes need to be performed both at the API and the Client side as well.\n\n## API level modifications\nAt the API level, we need to enable sockets, and one of the most used packages that developers use is `socket.io` which can be installed via `npm i socket.io`.\n\nHere's an implementation of the server using Restify and Socket.io:\n\n```typescript\nconst restify = require('restify');\nconst server = restify.createServer();\nconst products = require('./products');\nconst io = require('socket.io')(server.server);\n\nlet sockets = new Set();\nconst corsMiddleware = require('restify-cors-middleware');\nconst port = 3000;\nconst cors = corsMiddleware({origins: ['*'],});\nserver.use(restify.plugins.bodyParser());\nserver.pre(cors.preflight);\nserver.use(cors.actual);\nio.on('connection', socket => {\n  sockets.add(socket);\n  socket.emit('data', { data: products });\n  socket.on('clientData', data => console.log(data));\n  socket.on('disconnect', () => sockets.delete(socket));\n});\n\nserver.get('/', (request, response, next) => {\n  response.end();\n  next();\n});\n\nserver.post('/api/products', (request, response) => {\n  const product = request.body;\n  products.push(product);\n  for (const socket of sockets) {\n    console.log(`Emitting value: ${products}`);\n    socket.emit('data', { data: products });\n  }\n  response.json(products);\n});\n  \nserver.listen(port, () => console.info(`Server is up on ${port}.`));\n```\n\n> Note how Restify requires us to use `server.server` when requiring `socket.io`.\n\nThe above code may look complex; however, it is a straightforward implementation. The required `products` file contains an array of objects which represent some data. On the first connection to the server we send data to the requester as well as making sure that we store the socket in a JavaScript `Set`:\n\n```typescript\nio.on('connection', socket => {\n  sockets.add(socket);\n  socket.emit('data', { data: products });\n  socket.on('clientData', data => console.log(data));\n  socket.on('disconnect', () => sockets.delete(socket));\n});\n```\nWhen a new product is added (in this case it's just a simple push to the `products` array), then we again, emit the updated array to all the clients who are connected:\n\n```typescript\nserver.post('/api/products', (request, response) => {\n  const product = request.body;\n  products.push(product);\n  for (const socket of sockets) {\n    console.log(`Emitting value: ${products}`);\n    socket.emit('data', { data: products });\n  }\n  response.json(products);\n});\n```\n\n> Note, that in this article we're only going through the basics and henceforth the API is kept at an elementary level.\n\n# Client side modifications\nAt the client side - from our Angular application - we also need to connect to the socket, and for this, we'll be using a package called `socket.io-client` along with its typing. Both of these can be installed via npm: `npm i socket.io-client @types/socket.io-client`.\n\nOnce installed we can update our Angular service:\n\n```typescript\n// api.service.ts\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport * as socketIo from 'socket.io-client';\nimport { Observer } from 'rxjs/Observer';\nimport { Observable } from 'rxjs/Observable';\n@Injectable()\nexport class ApiService {\n\n  observer: Observer<any>;\n\n  getProducts() {\n    const socket = socketIo('http://localhost:3000/');\n    socket.on('data', response => {\n      return this.observer.next(response.data);\n    });\n    return this.createObservable();\n  }\n\n  createObservable() {\n    return new Observable(observer => this.observer = observer);\n  }\n}\n```\nHere we are creating an observer first, then connect to the socket server running on port 3000 (or whatever port we have specified for the API). If data is emitted from the socket server (which happens on the first load as well as when someone adds a new product), an observable is created. This is what gets passed on to the component and then to the template which still utilises the async pipe - the rest of the code does not change.\n\nAdding a new product will also now mean that the list of products is updated.\n\n# Conclusion\nIn this article, we had a look at two ways to achieve real-time data updates in Angular components.\n\n> [原文地址](https://fullstack-developer.academy/display-real-time-data-in-angular/)\n","source":"_posts/display-real-time-data-in-angular.md","raw":"---\ntitle: Display real-time data in Angular\ndate: 2018-06-28 10:49:46\ntags:\n    - Angular\ncategories:\n    - 前端\n---\n\n\n\n\nIn this article, we'll be taking a look at two ways to display real-time data in an Angular application. We'll discuss how to push real-time data via a service. One approach will be using sockets while the other will be using the Angular AsyncPipe and Observables.\n\n## Setting the scene\nOften in an application, we work with a backend API service. We create a component, we call an Angular service which in turn calls an API. That API call returns some data and that data is then displayed in the template of the component. This is a very simple scenario. But what happens when data that arrives is updated frequently - think about stock symbols and their values, an online radio that needs to display a new artist & song title. We somehow need to update the component when the data changes at the API level.\n\n## Async Pipe & Observables\nThe first approach that we'll take a look doesn't require any modification at the API level. In light of this, we'll be using the `Async Pipe`. Pipes in Angular work just as pipes work in Linux. They accept an input and produce an output. What the output is going to be is determined by the pipe's functionality. This pipe accepts a promise or an observable as an input, and it can update the template whenever the promise is resolved or when the observable emits some new value. As with all pipes, we need to apply the pipe in the template.\n\nLet's assume that we have a list of products returned by an API and that we have the following service available:\n\n```typescript\n// api.service.ts\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable()\nexport class ApiService {\n\n  constructor(private http: HttpClient) { }\n\n  getProducts() {\n    return this.http.get('http://localhost:3000/api/products');\n  }\n}\n```\nThe code above is straightforward - we specify the `getProducts()` method that returns the HTTP GET call.\n\nIt's time to consume this service in the component. And what we'll do here is create an Observable and assign the result of the `getProducts()` method to it. Furthermore, we'll make that call every 1 second, so if there's an update at the API level, we can refresh the template:\n\n```typescript\n// some.component.ts\nimport { Component, OnInit, OnDestroy, Input } from '@angular/core';\nimport { ApiService } from './../api.service';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/observable/interval';\nimport 'rxjs/add/operator/startWith';\nimport 'rxjs/add/operator/switchMap';\n\n@Component({\n  selector: 'app-products',\n  templateUrl: './products.component.html',\n  styleUrls: ['./products.component.css']\n})\n\nexport class ProductsComponent implements OnInit {\n  @Input() products$: Observable<any>;\n  constructor(private api: ApiService) { }\n\n  ngOnInit() {\n    this.products$ = Observable      \n                        .interval(1000)\n                        .startWith(0).switchMap(() => this.api.getProducts());\n  }\n}\n```\n\nAnd last but not least, we need to apply the async pipe in our template:\n\n```html\n<!-- some.component.html -->\n<ul>\n  <li *ngFor=\"let product of products$ | async\">{{ product.prod_name }} for {{ product.price | currency:'£'}}</li>\n</ul>\n```\nThis way, if we push a new item to the API (or remove one or multiple item(s)) the updates are going to be visible in the component in 1 second.\n\n## Sockets\nAnother approach to creating a component and a service that accepts push data from the server is by implementing sockets. To achieve such functionality, changes need to be performed both at the API and the Client side as well.\n\n## API level modifications\nAt the API level, we need to enable sockets, and one of the most used packages that developers use is `socket.io` which can be installed via `npm i socket.io`.\n\nHere's an implementation of the server using Restify and Socket.io:\n\n```typescript\nconst restify = require('restify');\nconst server = restify.createServer();\nconst products = require('./products');\nconst io = require('socket.io')(server.server);\n\nlet sockets = new Set();\nconst corsMiddleware = require('restify-cors-middleware');\nconst port = 3000;\nconst cors = corsMiddleware({origins: ['*'],});\nserver.use(restify.plugins.bodyParser());\nserver.pre(cors.preflight);\nserver.use(cors.actual);\nio.on('connection', socket => {\n  sockets.add(socket);\n  socket.emit('data', { data: products });\n  socket.on('clientData', data => console.log(data));\n  socket.on('disconnect', () => sockets.delete(socket));\n});\n\nserver.get('/', (request, response, next) => {\n  response.end();\n  next();\n});\n\nserver.post('/api/products', (request, response) => {\n  const product = request.body;\n  products.push(product);\n  for (const socket of sockets) {\n    console.log(`Emitting value: ${products}`);\n    socket.emit('data', { data: products });\n  }\n  response.json(products);\n});\n  \nserver.listen(port, () => console.info(`Server is up on ${port}.`));\n```\n\n> Note how Restify requires us to use `server.server` when requiring `socket.io`.\n\nThe above code may look complex; however, it is a straightforward implementation. The required `products` file contains an array of objects which represent some data. On the first connection to the server we send data to the requester as well as making sure that we store the socket in a JavaScript `Set`:\n\n```typescript\nio.on('connection', socket => {\n  sockets.add(socket);\n  socket.emit('data', { data: products });\n  socket.on('clientData', data => console.log(data));\n  socket.on('disconnect', () => sockets.delete(socket));\n});\n```\nWhen a new product is added (in this case it's just a simple push to the `products` array), then we again, emit the updated array to all the clients who are connected:\n\n```typescript\nserver.post('/api/products', (request, response) => {\n  const product = request.body;\n  products.push(product);\n  for (const socket of sockets) {\n    console.log(`Emitting value: ${products}`);\n    socket.emit('data', { data: products });\n  }\n  response.json(products);\n});\n```\n\n> Note, that in this article we're only going through the basics and henceforth the API is kept at an elementary level.\n\n# Client side modifications\nAt the client side - from our Angular application - we also need to connect to the socket, and for this, we'll be using a package called `socket.io-client` along with its typing. Both of these can be installed via npm: `npm i socket.io-client @types/socket.io-client`.\n\nOnce installed we can update our Angular service:\n\n```typescript\n// api.service.ts\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport * as socketIo from 'socket.io-client';\nimport { Observer } from 'rxjs/Observer';\nimport { Observable } from 'rxjs/Observable';\n@Injectable()\nexport class ApiService {\n\n  observer: Observer<any>;\n\n  getProducts() {\n    const socket = socketIo('http://localhost:3000/');\n    socket.on('data', response => {\n      return this.observer.next(response.data);\n    });\n    return this.createObservable();\n  }\n\n  createObservable() {\n    return new Observable(observer => this.observer = observer);\n  }\n}\n```\nHere we are creating an observer first, then connect to the socket server running on port 3000 (or whatever port we have specified for the API). If data is emitted from the socket server (which happens on the first load as well as when someone adds a new product), an observable is created. This is what gets passed on to the component and then to the template which still utilises the async pipe - the rest of the code does not change.\n\nAdding a new product will also now mean that the list of products is updated.\n\n# Conclusion\nIn this article, we had a look at two ways to achieve real-time data updates in Angular components.\n\n> [原文地址](https://fullstack-developer.academy/display-real-time-data-in-angular/)\n","slug":"display-real-time-data-in-angular","published":1,"updated":"2020-07-17T02:32:01.184Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcpntuh6003604oitoq0mumd","content":"<p>In this article, we’ll be taking a look at two ways to display real-time data in an Angular application. We’ll discuss how to push real-time data via a service. One approach will be using sockets while the other will be using the Angular AsyncPipe and Observables.</p>\n<h2 id=\"Setting-the-scene\"><a href=\"#Setting-the-scene\" class=\"headerlink\" title=\"Setting the scene\"></a>Setting the scene</h2><p>Often in an application, we work with a backend API service. We create a component, we call an Angular service which in turn calls an API. That API call returns some data and that data is then displayed in the template of the component. This is a very simple scenario. But what happens when data that arrives is updated frequently - think about stock symbols and their values, an online radio that needs to display a new artist &amp; song title. We somehow need to update the component when the data changes at the API level.</p>\n<h2 id=\"Async-Pipe-amp-Observables\"><a href=\"#Async-Pipe-amp-Observables\" class=\"headerlink\" title=\"Async Pipe &amp; Observables\"></a>Async Pipe &amp; Observables</h2><p>The first approach that we’ll take a look doesn’t require any modification at the API level. In light of this, we’ll be using the <code>Async Pipe</code>. Pipes in Angular work just as pipes work in Linux. They accept an input and produce an output. What the output is going to be is determined by the pipe’s functionality. This pipe accepts a promise or an observable as an input, and it can update the template whenever the promise is resolved or when the observable emits some new value. As with all pipes, we need to apply the pipe in the template.</p>\n<p>Let’s assume that we have a list of products returned by an API and that we have the following service available:</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">// api.service.ts</span>\n<span class=\"hljs-keyword\">import</span> &#123; Injectable &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n<span class=\"hljs-keyword\">import</span> &#123; HttpClient &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/common/http'</span>;\n\n<span class=\"hljs-meta\">@Injectable</span>()\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> ApiService &#123;\n\n  <span class=\"hljs-keyword\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">private</span> http: HttpClient</span>) &#123; &#125;\n\n  getProducts() &#123;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.http.get(<span class=\"hljs-string\">'http://localhost:3000/api/products'</span>);\n  &#125;\n&#125;</code></pre>\n<p>The code above is straightforward - we specify the <code>getProducts()</code> method that returns the HTTP GET call.</p>\n<p>It’s time to consume this service in the component. And what we’ll do here is create an Observable and assign the result of the <code>getProducts()</code> method to it. Furthermore, we’ll make that call every 1 second, so if there’s an update at the API level, we can refresh the template:</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">// some.component.ts</span>\n<span class=\"hljs-keyword\">import</span> &#123; Component, OnInit, OnDestroy, Input &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n<span class=\"hljs-keyword\">import</span> &#123; ApiService &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./../api.service'</span>;\n<span class=\"hljs-keyword\">import</span> &#123; Observable &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'rxjs/Observable'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'rxjs/add/observable/interval'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'rxjs/add/operator/startWith'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'rxjs/add/operator/switchMap'</span>;\n\n<span class=\"hljs-meta\">@Component</span>(&#123;\n  selector: <span class=\"hljs-string\">'app-products'</span>,\n  templateUrl: <span class=\"hljs-string\">'./products.component.html'</span>,\n  styleUrls: [<span class=\"hljs-string\">'./products.component.css'</span>]\n&#125;)\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> ProductsComponent <span class=\"hljs-keyword\">implements</span> OnInit &#123;\n  <span class=\"hljs-meta\">@Input</span>() products$: Observable&lt;<span class=\"hljs-built_in\">any</span>&gt;;\n  <span class=\"hljs-keyword\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">private</span> api: ApiService</span>) &#123; &#125;\n\n  ngOnInit() &#123;\n    <span class=\"hljs-keyword\">this</span>.products$ = Observable      \n                        .interval(<span class=\"hljs-number\">1000</span>)\n                        .startWith(<span class=\"hljs-number\">0</span>).switchMap(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> <span class=\"hljs-keyword\">this</span>.api.getProducts());\n  &#125;\n&#125;</code></pre>\n<p>And last but not least, we need to apply the async pipe in our template:</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- some.component.html --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> *<span class=\"hljs-attr\">ngFor</span>=<span class=\"hljs-string\">\"let product of products$ | async\"</span>&gt;</span>&#123;&#123; product.prod_name &#125;&#125; for &#123;&#123; product.price | currency:'£'&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></code></pre>\n<p>This way, if we push a new item to the API (or remove one or multiple item(s)) the updates are going to be visible in the component in 1 second.</p>\n<h2 id=\"Sockets\"><a href=\"#Sockets\" class=\"headerlink\" title=\"Sockets\"></a>Sockets</h2><p>Another approach to creating a component and a service that accepts push data from the server is by implementing sockets. To achieve such functionality, changes need to be performed both at the API and the Client side as well.</p>\n<h2 id=\"API-level-modifications\"><a href=\"#API-level-modifications\" class=\"headerlink\" title=\"API level modifications\"></a>API level modifications</h2><p>At the API level, we need to enable sockets, and one of the most used packages that developers use is <code>socket.io</code> which can be installed via <code>npm i socket.io</code>.</p>\n<p>Here’s an implementation of the server using Restify and Socket.io:</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">const</span> restify = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'restify'</span>);\n<span class=\"hljs-keyword\">const</span> server = restify.createServer();\n<span class=\"hljs-keyword\">const</span> products = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./products'</span>);\n<span class=\"hljs-keyword\">const</span> io = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'socket.io'</span>)(server.server);\n\n<span class=\"hljs-keyword\">let</span> sockets = <span class=\"hljs-keyword\">new</span> Set();\n<span class=\"hljs-keyword\">const</span> corsMiddleware = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'restify-cors-middleware'</span>);\n<span class=\"hljs-keyword\">const</span> port = <span class=\"hljs-number\">3000</span>;\n<span class=\"hljs-keyword\">const</span> cors = corsMiddleware(&#123;origins: [<span class=\"hljs-string\">'*'</span>],&#125;);\nserver.use(restify.plugins.bodyParser());\nserver.pre(cors.preflight);\nserver.use(cors.actual);\nio.on(<span class=\"hljs-string\">'connection'</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">socket</span> =&gt;</span> &#123;\n  sockets.add(socket);\n  socket.emit(<span class=\"hljs-string\">'data'</span>, &#123; data: products &#125;);\n  socket.on(<span class=\"hljs-string\">'clientData'</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">data</span> =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(data));\n  socket.on(<span class=\"hljs-string\">'disconnect'</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> sockets.delete(socket));\n&#125;);\n\nserver.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">request, response, next</span>) =&gt;</span> &#123;\n  response.end();\n  next();\n&#125;);\n\nserver.post(<span class=\"hljs-string\">'/api/products'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">request, response</span>) =&gt;</span> &#123;\n  <span class=\"hljs-keyword\">const</span> product = request.body;\n  products.push(product);\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> socket of sockets) &#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`Emitting value: <span class=\"hljs-subst\">$&#123;products&#125;</span>`</span>);\n    socket.emit(<span class=\"hljs-string\">'data'</span>, &#123; data: products &#125;);\n  &#125;\n  response.json(products);\n&#125;);\n  \nserver.listen(port, <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> <span class=\"hljs-built_in\">console</span>.info(<span class=\"hljs-string\">`Server is up on <span class=\"hljs-subst\">$&#123;port&#125;</span>.`</span>));</code></pre>\n<blockquote>\n<p>Note how Restify requires us to use <code>server.server</code> when requiring <code>socket.io</code>.</p>\n</blockquote>\n<p>The above code may look complex; however, it is a straightforward implementation. The required <code>products</code> file contains an array of objects which represent some data. On the first connection to the server we send data to the requester as well as making sure that we store the socket in a JavaScript <code>Set</code>:</p>\n<pre><code class=\"hljs typescript\">io.on(<span class=\"hljs-string\">'connection'</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">socket</span> =&gt;</span> &#123;\n  sockets.add(socket);\n  socket.emit(<span class=\"hljs-string\">'data'</span>, &#123; data: products &#125;);\n  socket.on(<span class=\"hljs-string\">'clientData'</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">data</span> =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(data));\n  socket.on(<span class=\"hljs-string\">'disconnect'</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> sockets.delete(socket));\n&#125;);</code></pre>\n<p>When a new product is added (in this case it’s just a simple push to the <code>products</code> array), then we again, emit the updated array to all the clients who are connected:</p>\n<pre><code class=\"hljs typescript\">server.post(<span class=\"hljs-string\">'/api/products'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">request, response</span>) =&gt;</span> &#123;\n  <span class=\"hljs-keyword\">const</span> product = request.body;\n  products.push(product);\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> socket of sockets) &#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`Emitting value: <span class=\"hljs-subst\">$&#123;products&#125;</span>`</span>);\n    socket.emit(<span class=\"hljs-string\">'data'</span>, &#123; data: products &#125;);\n  &#125;\n  response.json(products);\n&#125;);</code></pre>\n<blockquote>\n<p>Note, that in this article we’re only going through the basics and henceforth the API is kept at an elementary level.</p>\n</blockquote>\n<h1 id=\"Client-side-modifications\"><a href=\"#Client-side-modifications\" class=\"headerlink\" title=\"Client side modifications\"></a>Client side modifications</h1><p>At the client side - from our Angular application - we also need to connect to the socket, and for this, we’ll be using a package called <code>socket.io-client</code> along with its typing. Both of these can be installed via npm: <code>npm i socket.io-client @types/socket.io-client</code>.</p>\n<p>Once installed we can update our Angular service:</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">// api.service.ts</span>\n<span class=\"hljs-keyword\">import</span> &#123; Injectable &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n<span class=\"hljs-keyword\">import</span> &#123; HttpClient &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/common/http'</span>;\n<span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> socketIo <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'socket.io-client'</span>;\n<span class=\"hljs-keyword\">import</span> &#123; Observer &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'rxjs/Observer'</span>;\n<span class=\"hljs-keyword\">import</span> &#123; Observable &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'rxjs/Observable'</span>;\n<span class=\"hljs-meta\">@Injectable</span>()\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> ApiService &#123;\n\n  observer: Observer&lt;<span class=\"hljs-built_in\">any</span>&gt;;\n\n  getProducts() &#123;\n    <span class=\"hljs-keyword\">const</span> socket = socketIo(<span class=\"hljs-string\">'http://localhost:3000/'</span>);\n    socket.on(<span class=\"hljs-string\">'data'</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">response</span> =&gt;</span> &#123;\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.observer.next(response.data);\n    &#125;);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.createObservable();\n  &#125;\n\n  createObservable() &#123;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Observable(<span class=\"hljs-function\"><span class=\"hljs-params\">observer</span> =&gt;</span> <span class=\"hljs-keyword\">this</span>.observer = observer);\n  &#125;\n&#125;</code></pre>\n<p>Here we are creating an observer first, then connect to the socket server running on port 3000 (or whatever port we have specified for the API). If data is emitted from the socket server (which happens on the first load as well as when someone adds a new product), an observable is created. This is what gets passed on to the component and then to the template which still utilises the async pipe - the rest of the code does not change.</p>\n<p>Adding a new product will also now mean that the list of products is updated.</p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>In this article, we had a look at two ways to achieve real-time data updates in Angular components.</p>\n<blockquote>\n<p><a href=\"https://fullstack-developer.academy/display-real-time-data-in-angular/\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>In this article, we’ll be taking a look at two ways to display real-time data in an Angular application. We’ll discuss how to push real-time data via a service. One approach will be using sockets while the other will be using the Angular AsyncPipe and Observables.</p>\n<h2 id=\"Setting-the-scene\"><a href=\"#Setting-the-scene\" class=\"headerlink\" title=\"Setting the scene\"></a>Setting the scene</h2><p>Often in an application, we work with a backend API service. We create a component, we call an Angular service which in turn calls an API. That API call returns some data and that data is then displayed in the template of the component. This is a very simple scenario. But what happens when data that arrives is updated frequently - think about stock symbols and their values, an online radio that needs to display a new artist &amp; song title. We somehow need to update the component when the data changes at the API level.</p>\n<h2 id=\"Async-Pipe-amp-Observables\"><a href=\"#Async-Pipe-amp-Observables\" class=\"headerlink\" title=\"Async Pipe &amp; Observables\"></a>Async Pipe &amp; Observables</h2><p>The first approach that we’ll take a look doesn’t require any modification at the API level. In light of this, we’ll be using the <code>Async Pipe</code>. Pipes in Angular work just as pipes work in Linux. They accept an input and produce an output. What the output is going to be is determined by the pipe’s functionality. This pipe accepts a promise or an observable as an input, and it can update the template whenever the promise is resolved or when the observable emits some new value. As with all pipes, we need to apply the pipe in the template.</p>\n<p>Let’s assume that we have a list of products returned by an API and that we have the following service available:</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">// api.service.ts</span>\n<span class=\"hljs-keyword\">import</span> &#123; Injectable &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n<span class=\"hljs-keyword\">import</span> &#123; HttpClient &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/common/http'</span>;\n\n<span class=\"hljs-meta\">@Injectable</span>()\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> ApiService &#123;\n\n  <span class=\"hljs-keyword\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">private</span> http: HttpClient</span>) &#123; &#125;\n\n  getProducts() &#123;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.http.get(<span class=\"hljs-string\">'http://localhost:3000/api/products'</span>);\n  &#125;\n&#125;</code></pre>\n<p>The code above is straightforward - we specify the <code>getProducts()</code> method that returns the HTTP GET call.</p>\n<p>It’s time to consume this service in the component. And what we’ll do here is create an Observable and assign the result of the <code>getProducts()</code> method to it. Furthermore, we’ll make that call every 1 second, so if there’s an update at the API level, we can refresh the template:</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">// some.component.ts</span>\n<span class=\"hljs-keyword\">import</span> &#123; Component, OnInit, OnDestroy, Input &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n<span class=\"hljs-keyword\">import</span> &#123; ApiService &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./../api.service'</span>;\n<span class=\"hljs-keyword\">import</span> &#123; Observable &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'rxjs/Observable'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'rxjs/add/observable/interval'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'rxjs/add/operator/startWith'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'rxjs/add/operator/switchMap'</span>;\n\n<span class=\"hljs-meta\">@Component</span>(&#123;\n  selector: <span class=\"hljs-string\">'app-products'</span>,\n  templateUrl: <span class=\"hljs-string\">'./products.component.html'</span>,\n  styleUrls: [<span class=\"hljs-string\">'./products.component.css'</span>]\n&#125;)\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> ProductsComponent <span class=\"hljs-keyword\">implements</span> OnInit &#123;\n  <span class=\"hljs-meta\">@Input</span>() products$: Observable&lt;<span class=\"hljs-built_in\">any</span>&gt;;\n  <span class=\"hljs-keyword\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">private</span> api: ApiService</span>) &#123; &#125;\n\n  ngOnInit() &#123;\n    <span class=\"hljs-keyword\">this</span>.products$ = Observable      \n                        .interval(<span class=\"hljs-number\">1000</span>)\n                        .startWith(<span class=\"hljs-number\">0</span>).switchMap(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> <span class=\"hljs-keyword\">this</span>.api.getProducts());\n  &#125;\n&#125;</code></pre>\n<p>And last but not least, we need to apply the async pipe in our template:</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- some.component.html --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> *<span class=\"hljs-attr\">ngFor</span>=<span class=\"hljs-string\">\"let product of products$ | async\"</span>&gt;</span>&#123;&#123; product.prod_name &#125;&#125; for &#123;&#123; product.price | currency:'£'&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></code></pre>\n<p>This way, if we push a new item to the API (or remove one or multiple item(s)) the updates are going to be visible in the component in 1 second.</p>\n<h2 id=\"Sockets\"><a href=\"#Sockets\" class=\"headerlink\" title=\"Sockets\"></a>Sockets</h2><p>Another approach to creating a component and a service that accepts push data from the server is by implementing sockets. To achieve such functionality, changes need to be performed both at the API and the Client side as well.</p>\n<h2 id=\"API-level-modifications\"><a href=\"#API-level-modifications\" class=\"headerlink\" title=\"API level modifications\"></a>API level modifications</h2><p>At the API level, we need to enable sockets, and one of the most used packages that developers use is <code>socket.io</code> which can be installed via <code>npm i socket.io</code>.</p>\n<p>Here’s an implementation of the server using Restify and Socket.io:</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">const</span> restify = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'restify'</span>);\n<span class=\"hljs-keyword\">const</span> server = restify.createServer();\n<span class=\"hljs-keyword\">const</span> products = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./products'</span>);\n<span class=\"hljs-keyword\">const</span> io = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'socket.io'</span>)(server.server);\n\n<span class=\"hljs-keyword\">let</span> sockets = <span class=\"hljs-keyword\">new</span> Set();\n<span class=\"hljs-keyword\">const</span> corsMiddleware = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'restify-cors-middleware'</span>);\n<span class=\"hljs-keyword\">const</span> port = <span class=\"hljs-number\">3000</span>;\n<span class=\"hljs-keyword\">const</span> cors = corsMiddleware(&#123;origins: [<span class=\"hljs-string\">'*'</span>],&#125;);\nserver.use(restify.plugins.bodyParser());\nserver.pre(cors.preflight);\nserver.use(cors.actual);\nio.on(<span class=\"hljs-string\">'connection'</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">socket</span> =&gt;</span> &#123;\n  sockets.add(socket);\n  socket.emit(<span class=\"hljs-string\">'data'</span>, &#123; data: products &#125;);\n  socket.on(<span class=\"hljs-string\">'clientData'</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">data</span> =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(data));\n  socket.on(<span class=\"hljs-string\">'disconnect'</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> sockets.delete(socket));\n&#125;);\n\nserver.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">request, response, next</span>) =&gt;</span> &#123;\n  response.end();\n  next();\n&#125;);\n\nserver.post(<span class=\"hljs-string\">'/api/products'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">request, response</span>) =&gt;</span> &#123;\n  <span class=\"hljs-keyword\">const</span> product = request.body;\n  products.push(product);\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> socket of sockets) &#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`Emitting value: <span class=\"hljs-subst\">$&#123;products&#125;</span>`</span>);\n    socket.emit(<span class=\"hljs-string\">'data'</span>, &#123; data: products &#125;);\n  &#125;\n  response.json(products);\n&#125;);\n  \nserver.listen(port, <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> <span class=\"hljs-built_in\">console</span>.info(<span class=\"hljs-string\">`Server is up on <span class=\"hljs-subst\">$&#123;port&#125;</span>.`</span>));</code></pre>\n<blockquote>\n<p>Note how Restify requires us to use <code>server.server</code> when requiring <code>socket.io</code>.</p>\n</blockquote>\n<p>The above code may look complex; however, it is a straightforward implementation. The required <code>products</code> file contains an array of objects which represent some data. On the first connection to the server we send data to the requester as well as making sure that we store the socket in a JavaScript <code>Set</code>:</p>\n<pre><code class=\"hljs typescript\">io.on(<span class=\"hljs-string\">'connection'</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">socket</span> =&gt;</span> &#123;\n  sockets.add(socket);\n  socket.emit(<span class=\"hljs-string\">'data'</span>, &#123; data: products &#125;);\n  socket.on(<span class=\"hljs-string\">'clientData'</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">data</span> =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(data));\n  socket.on(<span class=\"hljs-string\">'disconnect'</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> sockets.delete(socket));\n&#125;);</code></pre>\n<p>When a new product is added (in this case it’s just a simple push to the <code>products</code> array), then we again, emit the updated array to all the clients who are connected:</p>\n<pre><code class=\"hljs typescript\">server.post(<span class=\"hljs-string\">'/api/products'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">request, response</span>) =&gt;</span> &#123;\n  <span class=\"hljs-keyword\">const</span> product = request.body;\n  products.push(product);\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> socket of sockets) &#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`Emitting value: <span class=\"hljs-subst\">$&#123;products&#125;</span>`</span>);\n    socket.emit(<span class=\"hljs-string\">'data'</span>, &#123; data: products &#125;);\n  &#125;\n  response.json(products);\n&#125;);</code></pre>\n<blockquote>\n<p>Note, that in this article we’re only going through the basics and henceforth the API is kept at an elementary level.</p>\n</blockquote>\n<h1 id=\"Client-side-modifications\"><a href=\"#Client-side-modifications\" class=\"headerlink\" title=\"Client side modifications\"></a>Client side modifications</h1><p>At the client side - from our Angular application - we also need to connect to the socket, and for this, we’ll be using a package called <code>socket.io-client</code> along with its typing. Both of these can be installed via npm: <code>npm i socket.io-client @types/socket.io-client</code>.</p>\n<p>Once installed we can update our Angular service:</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">// api.service.ts</span>\n<span class=\"hljs-keyword\">import</span> &#123; Injectable &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n<span class=\"hljs-keyword\">import</span> &#123; HttpClient &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/common/http'</span>;\n<span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> socketIo <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'socket.io-client'</span>;\n<span class=\"hljs-keyword\">import</span> &#123; Observer &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'rxjs/Observer'</span>;\n<span class=\"hljs-keyword\">import</span> &#123; Observable &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'rxjs/Observable'</span>;\n<span class=\"hljs-meta\">@Injectable</span>()\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> ApiService &#123;\n\n  observer: Observer&lt;<span class=\"hljs-built_in\">any</span>&gt;;\n\n  getProducts() &#123;\n    <span class=\"hljs-keyword\">const</span> socket = socketIo(<span class=\"hljs-string\">'http://localhost:3000/'</span>);\n    socket.on(<span class=\"hljs-string\">'data'</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">response</span> =&gt;</span> &#123;\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.observer.next(response.data);\n    &#125;);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.createObservable();\n  &#125;\n\n  createObservable() &#123;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Observable(<span class=\"hljs-function\"><span class=\"hljs-params\">observer</span> =&gt;</span> <span class=\"hljs-keyword\">this</span>.observer = observer);\n  &#125;\n&#125;</code></pre>\n<p>Here we are creating an observer first, then connect to the socket server running on port 3000 (or whatever port we have specified for the API). If data is emitted from the socket server (which happens on the first load as well as when someone adds a new product), an observable is created. This is what gets passed on to the component and then to the template which still utilises the async pipe - the rest of the code does not change.</p>\n<p>Adding a new product will also now mean that the list of products is updated.</p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>In this article, we had a look at two ways to achieve real-time data updates in Angular components.</p>\n<blockquote>\n<p><a href=\"https://fullstack-developer.academy/display-real-time-data-in-angular/\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>\n</blockquote>\n"},{"title":"CentOS7使用firewalld打开关闭防火墙与端口","date":"2017-04-21T05:10:50.000Z","_content":"\n1、firewalld的基本使用\n\n启动： systemctl start firewalld\n\n查看状态： systemctl status firewalld \n\n停止： systemctl disable firewalld\n\n禁用： systemctl stop firewalld\n \n2.systemctl是CentOS7的服务管理工具中主要的工具，它融合之前service和chkconfig的功能于一体。\n\n启动一个服务：systemctl start firewalld.service\n\n关闭一个服务：systemctl stop firewalld.service\n\n重启一个服务：systemctl restart firewalld.service\n\n显示一个服务的状态：systemctl status firewalld.service\n\n在开机时启用一个服务：systemctl enable firewalld.service\n\n在开机时禁用一个服务：systemctl disable firewalld.service\n\n查看服务是否开机启动：systemctl is-enabled firewalld.service\n\n查看已启动的服务列表：systemctl list-unit-files|grep enabled\n\n查看启动失败的服务列表：systemctl --failed\n\n3.配置firewalld-cmd\n\n\n查看版本： firewall-cmd --version\n\n查看帮助： firewall-cmd --help\n\n显示状态： firewall-cmd --state\n\n查看所有打开的端口： firewall-cmd \n--zone=public --list-ports\n\n更新防火墙规则： firewall-cmd --reload\n\n查看区域信息:  firewall-cmd \n--get-active-zones\n\n查看指定接口所属区域： firewall-cmd \n--get-zone-of-interface=eth0\n\n拒绝所有包：firewall-cmd --panic-on\n\n取消拒绝状态： firewall-cmd --panic-off\n\n查看是否拒绝： firewall-cmd --query-panic\n \n那怎么开启一个端口呢\n添加\n\nfirewall-cmd --zone=public \n--add-port=80/tcp --permanent    \n（--permanent永久生效，没有此参数重启后失\n效）\n\n重新载入\n\nfirewall-cmd --reload\n\n查看\n\nfirewall-cmd --zone= public \n--query-port=80/tcp\n\n删除\n\nfirewall-cmd --zone= public \n--remove-port=80/tcp --permanent\n","source":"_posts/firewalld.md","raw":"---\ntitle: CentOS7使用firewalld打开关闭防火墙与端口\ndate: 2017-04-21 13:10:50\ntags:\n    - Linux\ncategories:\n    - 工具\n---\n\n1、firewalld的基本使用\n\n启动： systemctl start firewalld\n\n查看状态： systemctl status firewalld \n\n停止： systemctl disable firewalld\n\n禁用： systemctl stop firewalld\n \n2.systemctl是CentOS7的服务管理工具中主要的工具，它融合之前service和chkconfig的功能于一体。\n\n启动一个服务：systemctl start firewalld.service\n\n关闭一个服务：systemctl stop firewalld.service\n\n重启一个服务：systemctl restart firewalld.service\n\n显示一个服务的状态：systemctl status firewalld.service\n\n在开机时启用一个服务：systemctl enable firewalld.service\n\n在开机时禁用一个服务：systemctl disable firewalld.service\n\n查看服务是否开机启动：systemctl is-enabled firewalld.service\n\n查看已启动的服务列表：systemctl list-unit-files|grep enabled\n\n查看启动失败的服务列表：systemctl --failed\n\n3.配置firewalld-cmd\n\n\n查看版本： firewall-cmd --version\n\n查看帮助： firewall-cmd --help\n\n显示状态： firewall-cmd --state\n\n查看所有打开的端口： firewall-cmd \n--zone=public --list-ports\n\n更新防火墙规则： firewall-cmd --reload\n\n查看区域信息:  firewall-cmd \n--get-active-zones\n\n查看指定接口所属区域： firewall-cmd \n--get-zone-of-interface=eth0\n\n拒绝所有包：firewall-cmd --panic-on\n\n取消拒绝状态： firewall-cmd --panic-off\n\n查看是否拒绝： firewall-cmd --query-panic\n \n那怎么开启一个端口呢\n添加\n\nfirewall-cmd --zone=public \n--add-port=80/tcp --permanent    \n（--permanent永久生效，没有此参数重启后失\n效）\n\n重新载入\n\nfirewall-cmd --reload\n\n查看\n\nfirewall-cmd --zone= public \n--query-port=80/tcp\n\n删除\n\nfirewall-cmd --zone= public \n--remove-port=80/tcp --permanent\n","slug":"firewalld","published":1,"updated":"2020-07-17T02:32:01.186Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcpntuh8003904oi5vl3lzcp","content":"<p>1、firewalld的基本使用</p>\n<p>启动： systemctl start firewalld</p>\n<p>查看状态： systemctl status firewalld </p>\n<p>停止： systemctl disable firewalld</p>\n<p>禁用： systemctl stop firewalld</p>\n<p>2.systemctl是CentOS7的服务管理工具中主要的工具，它融合之前service和chkconfig的功能于一体。</p>\n<p>启动一个服务：systemctl start firewalld.service</p>\n<p>关闭一个服务：systemctl stop firewalld.service</p>\n<p>重启一个服务：systemctl restart firewalld.service</p>\n<p>显示一个服务的状态：systemctl status firewalld.service</p>\n<p>在开机时启用一个服务：systemctl enable firewalld.service</p>\n<p>在开机时禁用一个服务：systemctl disable firewalld.service</p>\n<p>查看服务是否开机启动：systemctl is-enabled firewalld.service</p>\n<p>查看已启动的服务列表：systemctl list-unit-files|grep enabled</p>\n<p>查看启动失败的服务列表：systemctl –failed</p>\n<p>3.配置firewalld-cmd</p>\n<p>查看版本： firewall-cmd –version</p>\n<p>查看帮助： firewall-cmd –help</p>\n<p>显示状态： firewall-cmd –state</p>\n<p>查看所有打开的端口： firewall-cmd<br>–zone=public –list-ports</p>\n<p>更新防火墙规则： firewall-cmd –reload</p>\n<p>查看区域信息:  firewall-cmd<br>–get-active-zones</p>\n<p>查看指定接口所属区域： firewall-cmd<br>–get-zone-of-interface=eth0</p>\n<p>拒绝所有包：firewall-cmd –panic-on</p>\n<p>取消拒绝状态： firewall-cmd –panic-off</p>\n<p>查看是否拒绝： firewall-cmd –query-panic</p>\n<p>那怎么开启一个端口呢<br>添加</p>\n<p>firewall-cmd –zone=public<br>–add-port=80/tcp –permanent<br>（–permanent永久生效，没有此参数重启后失<br>效）</p>\n<p>重新载入</p>\n<p>firewall-cmd –reload</p>\n<p>查看</p>\n<p>firewall-cmd –zone= public<br>–query-port=80/tcp</p>\n<p>删除</p>\n<p>firewall-cmd –zone= public<br>–remove-port=80/tcp –permanent</p>\n","site":{"data":{}},"excerpt":"","more":"<p>1、firewalld的基本使用</p>\n<p>启动： systemctl start firewalld</p>\n<p>查看状态： systemctl status firewalld </p>\n<p>停止： systemctl disable firewalld</p>\n<p>禁用： systemctl stop firewalld</p>\n<p>2.systemctl是CentOS7的服务管理工具中主要的工具，它融合之前service和chkconfig的功能于一体。</p>\n<p>启动一个服务：systemctl start firewalld.service</p>\n<p>关闭一个服务：systemctl stop firewalld.service</p>\n<p>重启一个服务：systemctl restart firewalld.service</p>\n<p>显示一个服务的状态：systemctl status firewalld.service</p>\n<p>在开机时启用一个服务：systemctl enable firewalld.service</p>\n<p>在开机时禁用一个服务：systemctl disable firewalld.service</p>\n<p>查看服务是否开机启动：systemctl is-enabled firewalld.service</p>\n<p>查看已启动的服务列表：systemctl list-unit-files|grep enabled</p>\n<p>查看启动失败的服务列表：systemctl –failed</p>\n<p>3.配置firewalld-cmd</p>\n<p>查看版本： firewall-cmd –version</p>\n<p>查看帮助： firewall-cmd –help</p>\n<p>显示状态： firewall-cmd –state</p>\n<p>查看所有打开的端口： firewall-cmd<br>–zone=public –list-ports</p>\n<p>更新防火墙规则： firewall-cmd –reload</p>\n<p>查看区域信息:  firewall-cmd<br>–get-active-zones</p>\n<p>查看指定接口所属区域： firewall-cmd<br>–get-zone-of-interface=eth0</p>\n<p>拒绝所有包：firewall-cmd –panic-on</p>\n<p>取消拒绝状态： firewall-cmd –panic-off</p>\n<p>查看是否拒绝： firewall-cmd –query-panic</p>\n<p>那怎么开启一个端口呢<br>添加</p>\n<p>firewall-cmd –zone=public<br>–add-port=80/tcp –permanent<br>（–permanent永久生效，没有此参数重启后失<br>效）</p>\n<p>重新载入</p>\n<p>firewall-cmd –reload</p>\n<p>查看</p>\n<p>firewall-cmd –zone= public<br>–query-port=80/tcp</p>\n<p>删除</p>\n<p>firewall-cmd –zone= public<br>–remove-port=80/tcp –permanent</p>\n"},{"title":"前端框架","date":"2016-10-19T05:30:00.000Z","_content":"\n## Semantic UI\n\nSemantic UI—完全语义化的前端界面开发框架，跟 Bootstrap 和 Foundation 比起来，还是有些不同的，在功能特性上、布局设计上、用户体验上均存在很多差异。\n\nSemantic UI 特点：\n\n- 文档和演示非常完善\n- 易于学习和使用\n- 配备网格布局\n- 支持 Sass 和 LESS 动态样式语言\n- 有一些非常实用的附加配置，例如inverted类。\n- 对于社区贡献来说是比较开放的。\n- 有一个非常好的按钮实现，情态动词，和进度条。\n- 在许多功能上使用图标字体。\n\n\nSemantic UI 对浏览器的支持：\n\n- Last 2 Versions FF, Chrome, IE (aka 10+)\n- Safari 6\n- IE 9+ (Browser prefix only)\n- Android 4\n- Blackberry 10\n\n![Semantic UI](http://static.oschina.net/uploads/space/2013/1008/140748_1T9v_119807.jpg)\n\n\n## Bootstrap\n\nBootstrap是快速开发Web应用程序的前端工具包。它是一个CSS和HTML的集合，它使用了最新的浏览器技术，给你的Web开发提供了时尚的版式，表单，buttons，表格，网格系统等等。\n\n\n\n## EasyUI\njQuery EasyUI 为网页开发提供了一堆的常用UI组件，包括菜单、对话框、布局、窗帘、表格、表单等等组件。\n\n下图是一个具有布局效果的窗口：\n\n\n\n## Extjs\n\nExtJS 主要用来开发RIA富客户端的AJAX应用，主要用于创建前端用户界面，与后台技术无关的前端ajax框架。因此，可以把ExtJS用在.Net、Java、Php等各种开发语言开发的应用中。ExtJs最开始基于YUI技术，由开发人员 JackSlocum开发，通过参考JavaSwing等机制来组织可视化组件，无论从UI界面上CSS样式的应用，到数据解析上的异常处理，都可算是一 款不可多得的JavaScript客户端技术的精品。\n\n\n\nExt的UI组件模型和开发理念脱胎、成型于Yahoo组件库YUI和Java平台上Swing两者，并为开发者屏蔽了大量跨浏览器方面的处理。相对来说，EXT要比开发者直接针对DOM、W3C对象模型开发UI组件轻松。\n\n特点如下：\n\n- 高性能, customizable UI widgets\n- Well designed, documented and extensible Component model\n- Commercial and Open Source licenses available\n- \n\n\n## Amaze UI\n\n Amaze UI是国内首款Html5开源跨屏前端框架，优秀开源前端框架，拥有丰富的CSS+JS组件。轻量级高性能开源框架，以移动优先（Mobile first）为理念，从小屏逐步扩展到大屏，最终实现所有屏幕适配，适应移动互联潮流；面向 HTML5 开发，使用 CSS3 来做动画交互，平滑、高效，更适合移动设备，让 Web 应用更快速载；含近 20 个 CSS 组件、10 个 JS 组件，更有 17 款包含近 60 个主题的 Web 组件，可快速构建界面出色、体验优秀的跨屏页面，大幅提升开发效率；相比国外框架，Amaze UI 关注中文排版，根据用户代理调整字体，实现更好的中文排版效果；兼顾国内主流浏览器及 App 内置浏览器兼容支持。\n","source":"_posts/front-framework.md","raw":"---\ntitle: 前端框架\ndate: 2016-10-19 13:30\ncategories:\n    - 前端\n---\n\n## Semantic UI\n\nSemantic UI—完全语义化的前端界面开发框架，跟 Bootstrap 和 Foundation 比起来，还是有些不同的，在功能特性上、布局设计上、用户体验上均存在很多差异。\n\nSemantic UI 特点：\n\n- 文档和演示非常完善\n- 易于学习和使用\n- 配备网格布局\n- 支持 Sass 和 LESS 动态样式语言\n- 有一些非常实用的附加配置，例如inverted类。\n- 对于社区贡献来说是比较开放的。\n- 有一个非常好的按钮实现，情态动词，和进度条。\n- 在许多功能上使用图标字体。\n\n\nSemantic UI 对浏览器的支持：\n\n- Last 2 Versions FF, Chrome, IE (aka 10+)\n- Safari 6\n- IE 9+ (Browser prefix only)\n- Android 4\n- Blackberry 10\n\n![Semantic UI](http://static.oschina.net/uploads/space/2013/1008/140748_1T9v_119807.jpg)\n\n\n## Bootstrap\n\nBootstrap是快速开发Web应用程序的前端工具包。它是一个CSS和HTML的集合，它使用了最新的浏览器技术，给你的Web开发提供了时尚的版式，表单，buttons，表格，网格系统等等。\n\n\n\n## EasyUI\njQuery EasyUI 为网页开发提供了一堆的常用UI组件，包括菜单、对话框、布局、窗帘、表格、表单等等组件。\n\n下图是一个具有布局效果的窗口：\n\n\n\n## Extjs\n\nExtJS 主要用来开发RIA富客户端的AJAX应用，主要用于创建前端用户界面，与后台技术无关的前端ajax框架。因此，可以把ExtJS用在.Net、Java、Php等各种开发语言开发的应用中。ExtJs最开始基于YUI技术，由开发人员 JackSlocum开发，通过参考JavaSwing等机制来组织可视化组件，无论从UI界面上CSS样式的应用，到数据解析上的异常处理，都可算是一 款不可多得的JavaScript客户端技术的精品。\n\n\n\nExt的UI组件模型和开发理念脱胎、成型于Yahoo组件库YUI和Java平台上Swing两者，并为开发者屏蔽了大量跨浏览器方面的处理。相对来说，EXT要比开发者直接针对DOM、W3C对象模型开发UI组件轻松。\n\n特点如下：\n\n- 高性能, customizable UI widgets\n- Well designed, documented and extensible Component model\n- Commercial and Open Source licenses available\n- \n\n\n## Amaze UI\n\n Amaze UI是国内首款Html5开源跨屏前端框架，优秀开源前端框架，拥有丰富的CSS+JS组件。轻量级高性能开源框架，以移动优先（Mobile first）为理念，从小屏逐步扩展到大屏，最终实现所有屏幕适配，适应移动互联潮流；面向 HTML5 开发，使用 CSS3 来做动画交互，平滑、高效，更适合移动设备，让 Web 应用更快速载；含近 20 个 CSS 组件、10 个 JS 组件，更有 17 款包含近 60 个主题的 Web 组件，可快速构建界面出色、体验优秀的跨屏页面，大幅提升开发效率；相比国外框架，Amaze UI 关注中文排版，根据用户代理调整字体，实现更好的中文排版效果；兼顾国内主流浏览器及 App 内置浏览器兼容支持。\n","slug":"front-framework","published":1,"updated":"2020-07-17T02:32:01.187Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcpntuha003d04oiz1cfxoxp","content":"<h2 id=\"Semantic-UI\"><a href=\"#Semantic-UI\" class=\"headerlink\" title=\"Semantic UI\"></a>Semantic UI</h2><p>Semantic UI—完全语义化的前端界面开发框架，跟 Bootstrap 和 Foundation 比起来，还是有些不同的，在功能特性上、布局设计上、用户体验上均存在很多差异。</p>\n<p>Semantic UI 特点：</p>\n<ul>\n<li>文档和演示非常完善</li>\n<li>易于学习和使用</li>\n<li>配备网格布局</li>\n<li>支持 Sass 和 LESS 动态样式语言</li>\n<li>有一些非常实用的附加配置，例如inverted类。</li>\n<li>对于社区贡献来说是比较开放的。</li>\n<li>有一个非常好的按钮实现，情态动词，和进度条。</li>\n<li>在许多功能上使用图标字体。</li>\n</ul>\n<p>Semantic UI 对浏览器的支持：</p>\n<ul>\n<li>Last 2 Versions FF, Chrome, IE (aka 10+)</li>\n<li>Safari 6</li>\n<li>IE 9+ (Browser prefix only)</li>\n<li>Android 4</li>\n<li>Blackberry 10</li>\n</ul>\n<p><img src=\"http://static.oschina.net/uploads/space/2013/1008/140748_1T9v_119807.jpg\" srcset=\"/img/loading.gif\" alt=\"Semantic UI\"></p>\n<h2 id=\"Bootstrap\"><a href=\"#Bootstrap\" class=\"headerlink\" title=\"Bootstrap\"></a>Bootstrap</h2><p>Bootstrap是快速开发Web应用程序的前端工具包。它是一个CSS和HTML的集合，它使用了最新的浏览器技术，给你的Web开发提供了时尚的版式，表单，buttons，表格，网格系统等等。</p>\n<h2 id=\"EasyUI\"><a href=\"#EasyUI\" class=\"headerlink\" title=\"EasyUI\"></a>EasyUI</h2><p>jQuery EasyUI 为网页开发提供了一堆的常用UI组件，包括菜单、对话框、布局、窗帘、表格、表单等等组件。</p>\n<p>下图是一个具有布局效果的窗口：</p>\n<h2 id=\"Extjs\"><a href=\"#Extjs\" class=\"headerlink\" title=\"Extjs\"></a>Extjs</h2><p>ExtJS 主要用来开发RIA富客户端的AJAX应用，主要用于创建前端用户界面，与后台技术无关的前端ajax框架。因此，可以把ExtJS用在.Net、Java、Php等各种开发语言开发的应用中。ExtJs最开始基于YUI技术，由开发人员 JackSlocum开发，通过参考JavaSwing等机制来组织可视化组件，无论从UI界面上CSS样式的应用，到数据解析上的异常处理，都可算是一 款不可多得的JavaScript客户端技术的精品。</p>\n<p>Ext的UI组件模型和开发理念脱胎、成型于Yahoo组件库YUI和Java平台上Swing两者，并为开发者屏蔽了大量跨浏览器方面的处理。相对来说，EXT要比开发者直接针对DOM、W3C对象模型开发UI组件轻松。</p>\n<p>特点如下：</p>\n<ul>\n<li>高性能, customizable UI widgets</li>\n<li>Well designed, documented and extensible Component model</li>\n<li>Commercial and Open Source licenses available</li>\n<li></li>\n</ul>\n<h2 id=\"Amaze-UI\"><a href=\"#Amaze-UI\" class=\"headerlink\" title=\"Amaze UI\"></a>Amaze UI</h2><p> Amaze UI是国内首款Html5开源跨屏前端框架，优秀开源前端框架，拥有丰富的CSS+JS组件。轻量级高性能开源框架，以移动优先（Mobile first）为理念，从小屏逐步扩展到大屏，最终实现所有屏幕适配，适应移动互联潮流；面向 HTML5 开发，使用 CSS3 来做动画交互，平滑、高效，更适合移动设备，让 Web 应用更快速载；含近 20 个 CSS 组件、10 个 JS 组件，更有 17 款包含近 60 个主题的 Web 组件，可快速构建界面出色、体验优秀的跨屏页面，大幅提升开发效率；相比国外框架，Amaze UI 关注中文排版，根据用户代理调整字体，实现更好的中文排版效果；兼顾国内主流浏览器及 App 内置浏览器兼容支持。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Semantic-UI\"><a href=\"#Semantic-UI\" class=\"headerlink\" title=\"Semantic UI\"></a>Semantic UI</h2><p>Semantic UI—完全语义化的前端界面开发框架，跟 Bootstrap 和 Foundation 比起来，还是有些不同的，在功能特性上、布局设计上、用户体验上均存在很多差异。</p>\n<p>Semantic UI 特点：</p>\n<ul>\n<li>文档和演示非常完善</li>\n<li>易于学习和使用</li>\n<li>配备网格布局</li>\n<li>支持 Sass 和 LESS 动态样式语言</li>\n<li>有一些非常实用的附加配置，例如inverted类。</li>\n<li>对于社区贡献来说是比较开放的。</li>\n<li>有一个非常好的按钮实现，情态动词，和进度条。</li>\n<li>在许多功能上使用图标字体。</li>\n</ul>\n<p>Semantic UI 对浏览器的支持：</p>\n<ul>\n<li>Last 2 Versions FF, Chrome, IE (aka 10+)</li>\n<li>Safari 6</li>\n<li>IE 9+ (Browser prefix only)</li>\n<li>Android 4</li>\n<li>Blackberry 10</li>\n</ul>\n<p><img src=\"http://static.oschina.net/uploads/space/2013/1008/140748_1T9v_119807.jpg\" srcset=\"/img/loading.gif\" alt=\"Semantic UI\"></p>\n<h2 id=\"Bootstrap\"><a href=\"#Bootstrap\" class=\"headerlink\" title=\"Bootstrap\"></a>Bootstrap</h2><p>Bootstrap是快速开发Web应用程序的前端工具包。它是一个CSS和HTML的集合，它使用了最新的浏览器技术，给你的Web开发提供了时尚的版式，表单，buttons，表格，网格系统等等。</p>\n<h2 id=\"EasyUI\"><a href=\"#EasyUI\" class=\"headerlink\" title=\"EasyUI\"></a>EasyUI</h2><p>jQuery EasyUI 为网页开发提供了一堆的常用UI组件，包括菜单、对话框、布局、窗帘、表格、表单等等组件。</p>\n<p>下图是一个具有布局效果的窗口：</p>\n<h2 id=\"Extjs\"><a href=\"#Extjs\" class=\"headerlink\" title=\"Extjs\"></a>Extjs</h2><p>ExtJS 主要用来开发RIA富客户端的AJAX应用，主要用于创建前端用户界面，与后台技术无关的前端ajax框架。因此，可以把ExtJS用在.Net、Java、Php等各种开发语言开发的应用中。ExtJs最开始基于YUI技术，由开发人员 JackSlocum开发，通过参考JavaSwing等机制来组织可视化组件，无论从UI界面上CSS样式的应用，到数据解析上的异常处理，都可算是一 款不可多得的JavaScript客户端技术的精品。</p>\n<p>Ext的UI组件模型和开发理念脱胎、成型于Yahoo组件库YUI和Java平台上Swing两者，并为开发者屏蔽了大量跨浏览器方面的处理。相对来说，EXT要比开发者直接针对DOM、W3C对象模型开发UI组件轻松。</p>\n<p>特点如下：</p>\n<ul>\n<li>高性能, customizable UI widgets</li>\n<li>Well designed, documented and extensible Component model</li>\n<li>Commercial and Open Source licenses available</li>\n<li></li>\n</ul>\n<h2 id=\"Amaze-UI\"><a href=\"#Amaze-UI\" class=\"headerlink\" title=\"Amaze UI\"></a>Amaze UI</h2><p> Amaze UI是国内首款Html5开源跨屏前端框架，优秀开源前端框架，拥有丰富的CSS+JS组件。轻量级高性能开源框架，以移动优先（Mobile first）为理念，从小屏逐步扩展到大屏，最终实现所有屏幕适配，适应移动互联潮流；面向 HTML5 开发，使用 CSS3 来做动画交互，平滑、高效，更适合移动设备，让 Web 应用更快速载；含近 20 个 CSS 组件、10 个 JS 组件，更有 17 款包含近 60 个主题的 Web 组件，可快速构建界面出色、体验优秀的跨屏页面，大幅提升开发效率；相比国外框架，Amaze UI 关注中文排版，根据用户代理调整字体，实现更好的中文排版效果；兼顾国内主流浏览器及 App 内置浏览器兼容支持。</p>\n"},{"title":"Java各版本特性","date":"2018-06-06T16:00:00.000Z","_content":"\n# Java 5\n1. 泛型Generics\n2. 枚举类型Enumeration\n3. 自动装箱（自动类型包装和解包）autoboxing & unboxing\n4. 可变参数varargs（varargs number of arguments）\n5. Annotations\n6. 新的迭代语句\n7. 静态导入\n8. 新的格式化方法\n9. 新的线程模型和并发库\n\n# Java 6\n1. 引入一个支持脚本引擎的新框架\n2. UI的增强\n3. 对WebService支持的增强\n4. 一系列的安全相关的增强\n5. JDBC 4.0\n6. Compiler API\n7. 通用的Annotations支持\n\n\n# Java 7\n1. switch中可以使用字符串\n2. 泛型实例化类型自动推断\n3. 语法上支持集合，而不一定是数组\n4. 新增了一些取环境信息的工具方法\n5. Boolean类型反转，空指针安全，参与为运算\n6. 两个char间的equals\n7. 安全的加减乘除\n8. Map集合支持并发请求\n\n\n\n\n# Java 8\n1. Lambda表达式\n\n2. 默认方法\n\n3. 静态方法\n\n4. 优化了HashMap以及ConcurrentHashMap\n将HashMap原来的数组+链表的结构优化成了数组+链表+红黑树的结构，减少了hash碰撞造成的链表长度过长，时间复杂度过高的问题，ConcurrentHashMap则改进了原先的分段锁的方式，采用transient volatile HashEntry<K,V>[] table来保存数据。\n\n5. JVM\nPermGen空间被移除了，取而代之的是Metaspace。JVM选项-XX:PermSize与-XX:MaxPermSize分别被-XX:MetaSpaceSize与-XX:MaxMetaspaceSize所代替。\n6. 新增原子性操作类LongAdder\n\n7. 新增StampedLock\n\n# Java 9\n1. jshell\n2. 私有接口方法\n3. 更改了HTTP调动的相关API\n4. 集合工厂方法\n5. 改进了Stream API\n\n","source":"_posts/future-of-java-each-version.md","raw":"---\ntitle: Java各版本特性\ndate: 2018-06-07\ntags: \n    - Java\ncategories:\n    - 后端\n---\n\n# Java 5\n1. 泛型Generics\n2. 枚举类型Enumeration\n3. 自动装箱（自动类型包装和解包）autoboxing & unboxing\n4. 可变参数varargs（varargs number of arguments）\n5. Annotations\n6. 新的迭代语句\n7. 静态导入\n8. 新的格式化方法\n9. 新的线程模型和并发库\n\n# Java 6\n1. 引入一个支持脚本引擎的新框架\n2. UI的增强\n3. 对WebService支持的增强\n4. 一系列的安全相关的增强\n5. JDBC 4.0\n6. Compiler API\n7. 通用的Annotations支持\n\n\n# Java 7\n1. switch中可以使用字符串\n2. 泛型实例化类型自动推断\n3. 语法上支持集合，而不一定是数组\n4. 新增了一些取环境信息的工具方法\n5. Boolean类型反转，空指针安全，参与为运算\n6. 两个char间的equals\n7. 安全的加减乘除\n8. Map集合支持并发请求\n\n\n\n\n# Java 8\n1. Lambda表达式\n\n2. 默认方法\n\n3. 静态方法\n\n4. 优化了HashMap以及ConcurrentHashMap\n将HashMap原来的数组+链表的结构优化成了数组+链表+红黑树的结构，减少了hash碰撞造成的链表长度过长，时间复杂度过高的问题，ConcurrentHashMap则改进了原先的分段锁的方式，采用transient volatile HashEntry<K,V>[] table来保存数据。\n\n5. JVM\nPermGen空间被移除了，取而代之的是Metaspace。JVM选项-XX:PermSize与-XX:MaxPermSize分别被-XX:MetaSpaceSize与-XX:MaxMetaspaceSize所代替。\n6. 新增原子性操作类LongAdder\n\n7. 新增StampedLock\n\n# Java 9\n1. jshell\n2. 私有接口方法\n3. 更改了HTTP调动的相关API\n4. 集合工厂方法\n5. 改进了Stream API\n\n","slug":"future-of-java-each-version","published":1,"updated":"2020-07-17T02:32:01.189Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcpntuhc003g04oi3fy2d95g","content":"<h1 id=\"Java-5\"><a href=\"#Java-5\" class=\"headerlink\" title=\"Java 5\"></a>Java 5</h1><ol>\n<li>泛型Generics</li>\n<li>枚举类型Enumeration</li>\n<li>自动装箱（自动类型包装和解包）autoboxing &amp; unboxing</li>\n<li>可变参数varargs（varargs number of arguments）</li>\n<li>Annotations</li>\n<li>新的迭代语句</li>\n<li>静态导入</li>\n<li>新的格式化方法</li>\n<li>新的线程模型和并发库</li>\n</ol>\n<h1 id=\"Java-6\"><a href=\"#Java-6\" class=\"headerlink\" title=\"Java 6\"></a>Java 6</h1><ol>\n<li>引入一个支持脚本引擎的新框架</li>\n<li>UI的增强</li>\n<li>对WebService支持的增强</li>\n<li>一系列的安全相关的增强</li>\n<li>JDBC 4.0</li>\n<li>Compiler API</li>\n<li>通用的Annotations支持</li>\n</ol>\n<h1 id=\"Java-7\"><a href=\"#Java-7\" class=\"headerlink\" title=\"Java 7\"></a>Java 7</h1><ol>\n<li>switch中可以使用字符串</li>\n<li>泛型实例化类型自动推断</li>\n<li>语法上支持集合，而不一定是数组</li>\n<li>新增了一些取环境信息的工具方法</li>\n<li>Boolean类型反转，空指针安全，参与为运算</li>\n<li>两个char间的equals</li>\n<li>安全的加减乘除</li>\n<li>Map集合支持并发请求</li>\n</ol>\n<h1 id=\"Java-8\"><a href=\"#Java-8\" class=\"headerlink\" title=\"Java 8\"></a>Java 8</h1><ol>\n<li><p>Lambda表达式</p>\n</li>\n<li><p>默认方法</p>\n</li>\n<li><p>静态方法</p>\n</li>\n<li><p>优化了HashMap以及ConcurrentHashMap<br>将HashMap原来的数组+链表的结构优化成了数组+链表+红黑树的结构，减少了hash碰撞造成的链表长度过长，时间复杂度过高的问题，ConcurrentHashMap则改进了原先的分段锁的方式，采用transient volatile HashEntry&lt;K,V&gt;[] table来保存数据。</p>\n</li>\n<li><p>JVM<br>PermGen空间被移除了，取而代之的是Metaspace。JVM选项-XX:PermSize与-XX:MaxPermSize分别被-XX:MetaSpaceSize与-XX:MaxMetaspaceSize所代替。</p>\n</li>\n<li><p>新增原子性操作类LongAdder</p>\n</li>\n<li><p>新增StampedLock</p>\n</li>\n</ol>\n<h1 id=\"Java-9\"><a href=\"#Java-9\" class=\"headerlink\" title=\"Java 9\"></a>Java 9</h1><ol>\n<li>jshell</li>\n<li>私有接口方法</li>\n<li>更改了HTTP调动的相关API</li>\n<li>集合工厂方法</li>\n<li>改进了Stream API</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Java-5\"><a href=\"#Java-5\" class=\"headerlink\" title=\"Java 5\"></a>Java 5</h1><ol>\n<li>泛型Generics</li>\n<li>枚举类型Enumeration</li>\n<li>自动装箱（自动类型包装和解包）autoboxing &amp; unboxing</li>\n<li>可变参数varargs（varargs number of arguments）</li>\n<li>Annotations</li>\n<li>新的迭代语句</li>\n<li>静态导入</li>\n<li>新的格式化方法</li>\n<li>新的线程模型和并发库</li>\n</ol>\n<h1 id=\"Java-6\"><a href=\"#Java-6\" class=\"headerlink\" title=\"Java 6\"></a>Java 6</h1><ol>\n<li>引入一个支持脚本引擎的新框架</li>\n<li>UI的增强</li>\n<li>对WebService支持的增强</li>\n<li>一系列的安全相关的增强</li>\n<li>JDBC 4.0</li>\n<li>Compiler API</li>\n<li>通用的Annotations支持</li>\n</ol>\n<h1 id=\"Java-7\"><a href=\"#Java-7\" class=\"headerlink\" title=\"Java 7\"></a>Java 7</h1><ol>\n<li>switch中可以使用字符串</li>\n<li>泛型实例化类型自动推断</li>\n<li>语法上支持集合，而不一定是数组</li>\n<li>新增了一些取环境信息的工具方法</li>\n<li>Boolean类型反转，空指针安全，参与为运算</li>\n<li>两个char间的equals</li>\n<li>安全的加减乘除</li>\n<li>Map集合支持并发请求</li>\n</ol>\n<h1 id=\"Java-8\"><a href=\"#Java-8\" class=\"headerlink\" title=\"Java 8\"></a>Java 8</h1><ol>\n<li><p>Lambda表达式</p>\n</li>\n<li><p>默认方法</p>\n</li>\n<li><p>静态方法</p>\n</li>\n<li><p>优化了HashMap以及ConcurrentHashMap<br>将HashMap原来的数组+链表的结构优化成了数组+链表+红黑树的结构，减少了hash碰撞造成的链表长度过长，时间复杂度过高的问题，ConcurrentHashMap则改进了原先的分段锁的方式，采用transient volatile HashEntry&lt;K,V&gt;[] table来保存数据。</p>\n</li>\n<li><p>JVM<br>PermGen空间被移除了，取而代之的是Metaspace。JVM选项-XX:PermSize与-XX:MaxPermSize分别被-XX:MetaSpaceSize与-XX:MaxMetaspaceSize所代替。</p>\n</li>\n<li><p>新增原子性操作类LongAdder</p>\n</li>\n<li><p>新增StampedLock</p>\n</li>\n</ol>\n<h1 id=\"Java-9\"><a href=\"#Java-9\" class=\"headerlink\" title=\"Java 9\"></a>Java 9</h1><ol>\n<li>jshell</li>\n<li>私有接口方法</li>\n<li>更改了HTTP调动的相关API</li>\n<li>集合工厂方法</li>\n<li>改进了Stream API</li>\n</ol>\n"},{"title":"Spring Boot依赖引入的多种方式","date":"2018-10-15T01:06:30.000Z","_content":"\n使用Spring Boot开发，不可避免的会面临Maven依赖包版本的管理。\n\n有如下几种方式可以管理Spring Boot的版本。\n\n## 1. 使用parent继承\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.example</groupId>\n    <artifactId>myproject</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.0.0.RELEASE</version>\n    </parent>\n\n    <!-- Additional lines to be added here... -->\n\n</project>\n```\n\n使用parent继承的方式，简单、方便使用。但是有的时候项目又需要继承其他的parent，这个时候parent继承的方式就满足不了需求了。不过不用担心，还有其他方式。\n\n## 2.使用import方式\n\n```xml\n<dependencyManagement>\n        <dependencies>\n        <dependency>\n            <!-- Import dependency management from Spring Boot -->\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-dependencies</artifactId>\n            <version>2.0.0.RELEASE</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```\n在parent的pom文件中，声明dependencyManagement，这样在实际的项目pom文件中，直接声明需要的spring boot包就可以，不需要填写version属性。\n\n还有一种是使用maven plugin。\n\n## 3.使用Spring boot Maven插件\n```xml\n<build>\n    <plugins>\n        <plugin>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-maven-plugin</artifactId>\n        </plugin>\n    </plugins>\n</build>\n```\nspring boot依赖管理，根据不同的实际需求，选择不同的管理方式，可以大大提高效率。\n","source":"_posts/how-to-import-springboot.md","raw":"---\ntitle: Spring Boot依赖引入的多种方式\ndate: 2018-10-15 09:06:30\ntags: \n    - Java\ncategories:\n    - 后端\n---\n\n使用Spring Boot开发，不可避免的会面临Maven依赖包版本的管理。\n\n有如下几种方式可以管理Spring Boot的版本。\n\n## 1. 使用parent继承\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.example</groupId>\n    <artifactId>myproject</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.0.0.RELEASE</version>\n    </parent>\n\n    <!-- Additional lines to be added here... -->\n\n</project>\n```\n\n使用parent继承的方式，简单、方便使用。但是有的时候项目又需要继承其他的parent，这个时候parent继承的方式就满足不了需求了。不过不用担心，还有其他方式。\n\n## 2.使用import方式\n\n```xml\n<dependencyManagement>\n        <dependencies>\n        <dependency>\n            <!-- Import dependency management from Spring Boot -->\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-dependencies</artifactId>\n            <version>2.0.0.RELEASE</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```\n在parent的pom文件中，声明dependencyManagement，这样在实际的项目pom文件中，直接声明需要的spring boot包就可以，不需要填写version属性。\n\n还有一种是使用maven plugin。\n\n## 3.使用Spring boot Maven插件\n```xml\n<build>\n    <plugins>\n        <plugin>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-maven-plugin</artifactId>\n        </plugin>\n    </plugins>\n</build>\n```\nspring boot依赖管理，根据不同的实际需求，选择不同的管理方式，可以大大提高效率。\n","slug":"how-to-import-springboot","published":1,"updated":"2020-07-17T02:32:01.190Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcpntuhd003j04oiufbo0ofs","content":"<p>使用Spring Boot开发，不可避免的会面临Maven依赖包版本的管理。</p>\n<p>有如下几种方式可以管理Spring Boot的版本。</p>\n<h2 id=\"1-使用parent继承\"><a href=\"#1-使用parent继承\" class=\"headerlink\" title=\"1. 使用parent继承\"></a>1. 使用parent继承</h2><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">project</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n    <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">modelVersion</span>&gt;</span>4.0.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">modelVersion</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.example<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>myproject<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">parent</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.0.0.RELEASE<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">parent</span>&gt;</span>\n\n    <span class=\"hljs-comment\">&lt;!-- Additional lines to be added here... --&gt;</span>\n\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">project</span>&gt;</span></code></pre>\n<p>使用parent继承的方式，简单、方便使用。但是有的时候项目又需要继承其他的parent，这个时候parent继承的方式就满足不了需求了。不过不用担心，还有其他方式。</p>\n<h2 id=\"2-使用import方式\"><a href=\"#2-使用import方式\" class=\"headerlink\" title=\"2.使用import方式\"></a>2.使用import方式</h2><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependencyManagement</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependencies</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n            <span class=\"hljs-comment\">&lt;!-- Import dependency management from Spring Boot --&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-dependencies<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.0.0.RELEASE<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">type</span>&gt;</span>pom<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">type</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scope</span>&gt;</span>import<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scope</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependencies</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependencyManagement</span>&gt;</span></code></pre>\n<p>在parent的pom文件中，声明dependencyManagement，这样在实际的项目pom文件中，直接声明需要的spring boot包就可以，不需要填写version属性。</p>\n<p>还有一种是使用maven plugin。</p>\n<h2 id=\"3-使用Spring-boot-Maven插件\"><a href=\"#3-使用Spring-boot-Maven插件\" class=\"headerlink\" title=\"3.使用Spring boot Maven插件\"></a>3.使用Spring boot Maven插件</h2><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">build</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugins</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugins</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">build</span>&gt;</span></code></pre>\n<p>spring boot依赖管理，根据不同的实际需求，选择不同的管理方式，可以大大提高效率。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>使用Spring Boot开发，不可避免的会面临Maven依赖包版本的管理。</p>\n<p>有如下几种方式可以管理Spring Boot的版本。</p>\n<h2 id=\"1-使用parent继承\"><a href=\"#1-使用parent继承\" class=\"headerlink\" title=\"1. 使用parent继承\"></a>1. 使用parent继承</h2><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">project</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n    <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">modelVersion</span>&gt;</span>4.0.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">modelVersion</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.example<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>myproject<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">parent</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.0.0.RELEASE<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">parent</span>&gt;</span>\n\n    <span class=\"hljs-comment\">&lt;!-- Additional lines to be added here... --&gt;</span>\n\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">project</span>&gt;</span></code></pre>\n<p>使用parent继承的方式，简单、方便使用。但是有的时候项目又需要继承其他的parent，这个时候parent继承的方式就满足不了需求了。不过不用担心，还有其他方式。</p>\n<h2 id=\"2-使用import方式\"><a href=\"#2-使用import方式\" class=\"headerlink\" title=\"2.使用import方式\"></a>2.使用import方式</h2><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependencyManagement</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependencies</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n            <span class=\"hljs-comment\">&lt;!-- Import dependency management from Spring Boot --&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-dependencies<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.0.0.RELEASE<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">type</span>&gt;</span>pom<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">type</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scope</span>&gt;</span>import<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scope</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependencies</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependencyManagement</span>&gt;</span></code></pre>\n<p>在parent的pom文件中，声明dependencyManagement，这样在实际的项目pom文件中，直接声明需要的spring boot包就可以，不需要填写version属性。</p>\n<p>还有一种是使用maven plugin。</p>\n<h2 id=\"3-使用Spring-boot-Maven插件\"><a href=\"#3-使用Spring-boot-Maven插件\" class=\"headerlink\" title=\"3.使用Spring boot Maven插件\"></a>3.使用Spring boot Maven插件</h2><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">build</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugins</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugins</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">build</span>&gt;</span></code></pre>\n<p>spring boot依赖管理，根据不同的实际需求，选择不同的管理方式，可以大大提高效率。</p>\n"},{"title":"Java系列  - JDK环境配置","date":"2017-04-21T05:10:50.000Z","_content":"\n# Linux\n打开`/etc/profile`, 添加如下代码：\n```bash\nexport JAVA_HOME=/opt/jdk\nexport JRE_HOME=$JAVA_HOME/jre\nexport CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/lib\nexport PATH=$JAVA_HOME/bin:$PATH\n```\n执行代码，使配置生效\n```bash\nsource /etc/profile\n```\n\n安装命令 **需要root权限**\n```bash\nalternatives --install /usr/bin/java java /opt/jdk/bin/java 1600\nalternatives --install /usr/bin/javac javac /opt/jdk/bin/javac 1600\n```\n\n\n# Windows\n> windows下，path路径以`;`分割，bat变量`%JAVA_HOME%`\n","source":"_posts/jdk-profile.md","raw":"---\ntitle: Java系列  - JDK环境配置\ndate: 2017-04-21 13:10:50\ntags:\n    - Java\ncategories:\n    - 工具\n---\n\n# Linux\n打开`/etc/profile`, 添加如下代码：\n```bash\nexport JAVA_HOME=/opt/jdk\nexport JRE_HOME=$JAVA_HOME/jre\nexport CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/lib\nexport PATH=$JAVA_HOME/bin:$PATH\n```\n执行代码，使配置生效\n```bash\nsource /etc/profile\n```\n\n安装命令 **需要root权限**\n```bash\nalternatives --install /usr/bin/java java /opt/jdk/bin/java 1600\nalternatives --install /usr/bin/javac javac /opt/jdk/bin/javac 1600\n```\n\n\n# Windows\n> windows下，path路径以`;`分割，bat变量`%JAVA_HOME%`\n","slug":"jdk-profile","published":1,"updated":"2020-07-17T02:32:01.195Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcpntuhf003m04oiawtlonbq","content":"<h1 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h1><p>打开<code>/etc/profile</code>, 添加如下代码：<br><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">export</span> JAVA_HOME=/opt/jdk\n<span class=\"hljs-built_in\">export</span> JRE_HOME=<span class=\"hljs-variable\">$JAVA_HOME</span>/jre\n<span class=\"hljs-built_in\">export</span> CLASSPATH=.:<span class=\"hljs-variable\">$JAVA_HOME</span>/lib:<span class=\"hljs-variable\">$JRE_HOME</span>/lib\n<span class=\"hljs-built_in\">export</span> PATH=<span class=\"hljs-variable\">$JAVA_HOME</span>/bin:<span class=\"hljs-variable\">$PATH</span></code></pre></p>\n<p>执行代码，使配置生效<br><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">source</span> /etc/profile</code></pre></p>\n<p>安装命令 <strong>需要root权限</strong><br><pre><code class=\"hljs bash\">alternatives --install /usr/bin/java java /opt/jdk/bin/java 1600\nalternatives --install /usr/bin/javac javac /opt/jdk/bin/javac 1600</code></pre></p>\n<h1 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h1><blockquote>\n<p>windows下，path路径以<code>;</code>分割，bat变量<code>%JAVA_HOME%</code></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h1><p>打开<code>/etc/profile</code>, 添加如下代码：<br><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">export</span> JAVA_HOME=/opt/jdk\n<span class=\"hljs-built_in\">export</span> JRE_HOME=<span class=\"hljs-variable\">$JAVA_HOME</span>/jre\n<span class=\"hljs-built_in\">export</span> CLASSPATH=.:<span class=\"hljs-variable\">$JAVA_HOME</span>/lib:<span class=\"hljs-variable\">$JRE_HOME</span>/lib\n<span class=\"hljs-built_in\">export</span> PATH=<span class=\"hljs-variable\">$JAVA_HOME</span>/bin:<span class=\"hljs-variable\">$PATH</span></code></pre></p>\n<p>执行代码，使配置生效<br><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">source</span> /etc/profile</code></pre></p>\n<p>安装命令 <strong>需要root权限</strong><br><pre><code class=\"hljs bash\">alternatives --install /usr/bin/java java /opt/jdk/bin/java 1600\nalternatives --install /usr/bin/javac javac /opt/jdk/bin/javac 1600</code></pre></p>\n<h1 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h1><blockquote>\n<p>windows下，path路径以<code>;</code>分割，bat变量<code>%JAVA_HOME%</code></p>\n</blockquote>\n"},{"title":"how to monitor java garbage collection","date":"2018-06-27T02:49:46.000Z","_content":"\n> [原文](https://www.cubrid.org/blog/how-to-monitor-java-garbage-collection)\n\n\n# What is GC Monitoring?\n**Garbage Collection Monitoring** refers to the _process of figuring out how JVM is running GC_. For example, we can find out:\n\n1. When an object in young has moved to old and by how much,\n2. or wehn `stop-the-world` has occurred and for how long.\n\nGC Monitoring is carried out to see _if JVM is running GC efficiently_, and _to check if additional GC tuning is necessary_. Based on this information, the application can be edited or GC method can be changed (**GC tuning**).\n\n# How to Monitor GC?\n\nThere are different ways to monitor GC, but the only difference is how the GC operation information is shown. GC is done by JVM, and since the GC monitoring tools disclose the GC information provided by JVM, you will get the same results on matter how you monitor GC. Therefore, you do not need to learn all methods to monitor GC, but since it only requires a little amount of time to learn each GC monitoring method, knowing a few of them can help you use the right one for different situations and environments.\n\nThe tools or JVM options listed below cannot be used universally regardless of the HVM vendor. This is because there is no need for a \"standard\" for disclosing GC information. In this example we will use **HotSpot JVM** (Oracle JVM). Since NHN is using Oracle(Sun) JVM, there should be no difficulties in applying the tools or JVM options that we are explaining here.\n\nFirst, the GC monitoring methods can be separated into **CUI** and **GUI** depending on the access interface. The typical CUI GC monitoring method involves using a separate CUI application called \"**jstat**\", or selecting a JVM option called \"**verbosegc**\" when running JVM.\n\nGUI GC monitoring is done by using a separate GUI application, and three most commonly used applications would be \"jconsole\", \"jvisualvm\" and \"Visual GC\".\n\nLet's learn more about each method.\n\n# jstat\n\n**jstat** is a monitoring tool in HotSpot JVM. Other monitoring tools for HotSpot JVM are **jps** and **jstatd**. Sometimes, you need all three tools to monitor a Java application.\n\n**jstat** does not provide only the GC operation information display. It also provides class loader operation information or Just-in-Time compiler operation information. Among all the information jstat can provide, in this article we will only cover its functionality to monitor GC operating information.\n\n**jstat** is located in `$JDK_HOME/bin`, so if java or javac can run without setting a separate directory from the command line, so can jstat.\n\nYou can try running the following in the command line.\n\n\n```\n$> jstat –gc  $<vmid$> 1000\n \nS0C       S1C       S0U    S1U      EC         EU          OC         OU         PC         PU         YGC     YGCT    FGC      FGCT     GCT\n3008.0   3072.0    0.0     1511.1   343360.0   46383.0     699072.0   283690.2   75392.0    41064.3    2540    18.454    4      1.133    19.588\n3008.0   3072.0    0.0     1511.1   343360.0   47530.9     699072.0   283690.2   75392.0    41064.3    2540    18.454    4      1.133    19.588\n3008.0   3072.0    0.0     1511.1   343360.0   47793.0     699072.0   283690.2   75392.0    41064.3    2540    18.454    4      1.133    19.588\n \n$>\n```\n\nJust like in the example, the real type data will be output along with the following columns:\n\n**`S0C    S1C     S0U     S1U    EC     EU     OC     OU     PC`**.\n\n**vmid** (Virtual Machine ID), as its name implies, is the ID for the VM. Java applications running either on a local machine or on a remote machine can be specified using vmid. The vmid for Java application running on a local machine is called **lvmid** (Local vmid), and usually is PID. To find out the lvmid, you can write the PID value using a **ps** command or Windows task manager, but we suggest **jps** because PID and lvmid does not always match. **jps** stands for Java PS. **jps** shows vmids and main method information. Just like ps shows PIDs and process names.\n\nFind out the vmid of the Java application that you want to monitor by using jps, then use it as a parameter in jstat. If you use jps alone, only bootstrap information will show when several WAS instances are running in one equipment. We suggest that you use `ps -ef | grep java` command along with jps.\n\nGC performance data needs constant observation, therefore when running jstat, try to output the GC monitoring information on a regular basis. \n\nFor example, running \"`jstat –gc <vmid> 1000`\" (or 1s) will display the GC monitoring data on the console every 1 second. \"`jstat –gc <vmid> 1000 10`\" will display the GC monitoring information once every 1 second for 10 times in total.\n\nThere are many options other than `-gc`, among which GC related ones are listed below.\n\n\nOption Name\t| Description\n----|----------\ngc|\tIt shows the current size for each heap area and its current usage (Ede, survivor, old, etc.), total number of GC performed, and the accumulated time for GC operations.\ngccapactiy|\tIt shows the minimum size (ms) and maximum size (mx) of each heap area, current size, and the number of GC performed for each area. (Does not show current usage and accumulated time for GC operations.)\ngccause|\tIt shows the \"information provided by -gcutil\" + reason for the last GC and the reason for the current GC.\ngcnew|\tShows the GC performance data for the new area.\ngcnewcapacity|\tShows statistics for the size of new area.\ngcold|\tShows the GC performance data for the old area.\ngcoldcapacity|\tShows statistics for the size of old area.\ngcpermcapacity|\tShows statistics for the permanent area.\ngcutil|\tShows the usage for each heap area in percentage. Also shows the total number of GC performed and the accumulated time for GC operations.\n\n\n\n","source":"_posts/how-to-monitor-java-garbage-collection.md","raw":"---\ntitle: how to monitor java garbage collection\ndate: 2018-06-27 10:49:46\ntags:\n    - Java\n    - GC\ncategories:\n    - 后端\n---\n\n> [原文](https://www.cubrid.org/blog/how-to-monitor-java-garbage-collection)\n\n\n# What is GC Monitoring?\n**Garbage Collection Monitoring** refers to the _process of figuring out how JVM is running GC_. For example, we can find out:\n\n1. When an object in young has moved to old and by how much,\n2. or wehn `stop-the-world` has occurred and for how long.\n\nGC Monitoring is carried out to see _if JVM is running GC efficiently_, and _to check if additional GC tuning is necessary_. Based on this information, the application can be edited or GC method can be changed (**GC tuning**).\n\n# How to Monitor GC?\n\nThere are different ways to monitor GC, but the only difference is how the GC operation information is shown. GC is done by JVM, and since the GC monitoring tools disclose the GC information provided by JVM, you will get the same results on matter how you monitor GC. Therefore, you do not need to learn all methods to monitor GC, but since it only requires a little amount of time to learn each GC monitoring method, knowing a few of them can help you use the right one for different situations and environments.\n\nThe tools or JVM options listed below cannot be used universally regardless of the HVM vendor. This is because there is no need for a \"standard\" for disclosing GC information. In this example we will use **HotSpot JVM** (Oracle JVM). Since NHN is using Oracle(Sun) JVM, there should be no difficulties in applying the tools or JVM options that we are explaining here.\n\nFirst, the GC monitoring methods can be separated into **CUI** and **GUI** depending on the access interface. The typical CUI GC monitoring method involves using a separate CUI application called \"**jstat**\", or selecting a JVM option called \"**verbosegc**\" when running JVM.\n\nGUI GC monitoring is done by using a separate GUI application, and three most commonly used applications would be \"jconsole\", \"jvisualvm\" and \"Visual GC\".\n\nLet's learn more about each method.\n\n# jstat\n\n**jstat** is a monitoring tool in HotSpot JVM. Other monitoring tools for HotSpot JVM are **jps** and **jstatd**. Sometimes, you need all three tools to monitor a Java application.\n\n**jstat** does not provide only the GC operation information display. It also provides class loader operation information or Just-in-Time compiler operation information. Among all the information jstat can provide, in this article we will only cover its functionality to monitor GC operating information.\n\n**jstat** is located in `$JDK_HOME/bin`, so if java or javac can run without setting a separate directory from the command line, so can jstat.\n\nYou can try running the following in the command line.\n\n\n```\n$> jstat –gc  $<vmid$> 1000\n \nS0C       S1C       S0U    S1U      EC         EU          OC         OU         PC         PU         YGC     YGCT    FGC      FGCT     GCT\n3008.0   3072.0    0.0     1511.1   343360.0   46383.0     699072.0   283690.2   75392.0    41064.3    2540    18.454    4      1.133    19.588\n3008.0   3072.0    0.0     1511.1   343360.0   47530.9     699072.0   283690.2   75392.0    41064.3    2540    18.454    4      1.133    19.588\n3008.0   3072.0    0.0     1511.1   343360.0   47793.0     699072.0   283690.2   75392.0    41064.3    2540    18.454    4      1.133    19.588\n \n$>\n```\n\nJust like in the example, the real type data will be output along with the following columns:\n\n**`S0C    S1C     S0U     S1U    EC     EU     OC     OU     PC`**.\n\n**vmid** (Virtual Machine ID), as its name implies, is the ID for the VM. Java applications running either on a local machine or on a remote machine can be specified using vmid. The vmid for Java application running on a local machine is called **lvmid** (Local vmid), and usually is PID. To find out the lvmid, you can write the PID value using a **ps** command or Windows task manager, but we suggest **jps** because PID and lvmid does not always match. **jps** stands for Java PS. **jps** shows vmids and main method information. Just like ps shows PIDs and process names.\n\nFind out the vmid of the Java application that you want to monitor by using jps, then use it as a parameter in jstat. If you use jps alone, only bootstrap information will show when several WAS instances are running in one equipment. We suggest that you use `ps -ef | grep java` command along with jps.\n\nGC performance data needs constant observation, therefore when running jstat, try to output the GC monitoring information on a regular basis. \n\nFor example, running \"`jstat –gc <vmid> 1000`\" (or 1s) will display the GC monitoring data on the console every 1 second. \"`jstat –gc <vmid> 1000 10`\" will display the GC monitoring information once every 1 second for 10 times in total.\n\nThere are many options other than `-gc`, among which GC related ones are listed below.\n\n\nOption Name\t| Description\n----|----------\ngc|\tIt shows the current size for each heap area and its current usage (Ede, survivor, old, etc.), total number of GC performed, and the accumulated time for GC operations.\ngccapactiy|\tIt shows the minimum size (ms) and maximum size (mx) of each heap area, current size, and the number of GC performed for each area. (Does not show current usage and accumulated time for GC operations.)\ngccause|\tIt shows the \"information provided by -gcutil\" + reason for the last GC and the reason for the current GC.\ngcnew|\tShows the GC performance data for the new area.\ngcnewcapacity|\tShows statistics for the size of new area.\ngcold|\tShows the GC performance data for the old area.\ngcoldcapacity|\tShows statistics for the size of old area.\ngcpermcapacity|\tShows statistics for the permanent area.\ngcutil|\tShows the usage for each heap area in percentage. Also shows the total number of GC performed and the accumulated time for GC operations.\n\n\n\n","slug":"how-to-monitor-java-garbage-collection","published":1,"updated":"2020-07-17T02:32:01.192Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcpntuhh003p04oi9j04pt9t","content":"<blockquote>\n<p><a href=\"https://www.cubrid.org/blog/how-to-monitor-java-garbage-collection\" target=\"_blank\" rel=\"noopener\">原文</a></p>\n</blockquote>\n<h1 id=\"What-is-GC-Monitoring\"><a href=\"#What-is-GC-Monitoring\" class=\"headerlink\" title=\"What is GC Monitoring?\"></a>What is GC Monitoring?</h1><p><strong>Garbage Collection Monitoring</strong> refers to the <em>process of figuring out how JVM is running GC</em>. For example, we can find out:</p>\n<ol>\n<li>When an object in young has moved to old and by how much,</li>\n<li>or wehn <code>stop-the-world</code> has occurred and for how long.</li>\n</ol>\n<p>GC Monitoring is carried out to see <em>if JVM is running GC efficiently</em>, and <em>to check if additional GC tuning is necessary</em>. Based on this information, the application can be edited or GC method can be changed (<strong>GC tuning</strong>).</p>\n<h1 id=\"How-to-Monitor-GC\"><a href=\"#How-to-Monitor-GC\" class=\"headerlink\" title=\"How to Monitor GC?\"></a>How to Monitor GC?</h1><p>There are different ways to monitor GC, but the only difference is how the GC operation information is shown. GC is done by JVM, and since the GC monitoring tools disclose the GC information provided by JVM, you will get the same results on matter how you monitor GC. Therefore, you do not need to learn all methods to monitor GC, but since it only requires a little amount of time to learn each GC monitoring method, knowing a few of them can help you use the right one for different situations and environments.</p>\n<p>The tools or JVM options listed below cannot be used universally regardless of the HVM vendor. This is because there is no need for a “standard” for disclosing GC information. In this example we will use <strong>HotSpot JVM</strong> (Oracle JVM). Since NHN is using Oracle(Sun) JVM, there should be no difficulties in applying the tools or JVM options that we are explaining here.</p>\n<p>First, the GC monitoring methods can be separated into <strong>CUI</strong> and <strong>GUI</strong> depending on the access interface. The typical CUI GC monitoring method involves using a separate CUI application called “<strong>jstat</strong>“, or selecting a JVM option called “<strong>verbosegc</strong>“ when running JVM.</p>\n<p>GUI GC monitoring is done by using a separate GUI application, and three most commonly used applications would be “jconsole”, “jvisualvm” and “Visual GC”.</p>\n<p>Let’s learn more about each method.</p>\n<h1 id=\"jstat\"><a href=\"#jstat\" class=\"headerlink\" title=\"jstat\"></a>jstat</h1><p><strong>jstat</strong> is a monitoring tool in HotSpot JVM. Other monitoring tools for HotSpot JVM are <strong>jps</strong> and <strong>jstatd</strong>. Sometimes, you need all three tools to monitor a Java application.</p>\n<p><strong>jstat</strong> does not provide only the GC operation information display. It also provides class loader operation information or Just-in-Time compiler operation information. Among all the information jstat can provide, in this article we will only cover its functionality to monitor GC operating information.</p>\n<p><strong>jstat</strong> is located in <code>$JDK_HOME/bin</code>, so if java or javac can run without setting a separate directory from the command line, so can jstat.</p>\n<p>You can try running the following in the command line.</p>\n<pre><code class=\"hljs undefined\">$&gt; jstat –gc  $&lt;vmid$&gt; <span class=\"hljs-number\">1000</span>\n \nS0C       S1C       S0U    S1U      EC         EU          OC         OU         PC         PU         YGC     YGCT    FGC      FGCT     GCT\n<span class=\"hljs-number\">3008.0</span>   <span class=\"hljs-number\">3072.0</span>    <span class=\"hljs-number\">0.0</span>     <span class=\"hljs-number\">1511.1</span>   <span class=\"hljs-number\">343360.0</span>   <span class=\"hljs-number\">46383.0</span>     <span class=\"hljs-number\">699072.0</span>   <span class=\"hljs-number\">283690.2</span>   <span class=\"hljs-number\">75392.0</span>    <span class=\"hljs-number\">41064.3</span>    <span class=\"hljs-number\">2540</span>    <span class=\"hljs-number\">18.454</span>    <span class=\"hljs-number\">4</span>      <span class=\"hljs-number\">1.133</span>    <span class=\"hljs-number\">19.588</span>\n<span class=\"hljs-number\">3008.0</span>   <span class=\"hljs-number\">3072.0</span>    <span class=\"hljs-number\">0.0</span>     <span class=\"hljs-number\">1511.1</span>   <span class=\"hljs-number\">343360.0</span>   <span class=\"hljs-number\">47530.9</span>     <span class=\"hljs-number\">699072.0</span>   <span class=\"hljs-number\">283690.2</span>   <span class=\"hljs-number\">75392.0</span>    <span class=\"hljs-number\">41064.3</span>    <span class=\"hljs-number\">2540</span>    <span class=\"hljs-number\">18.454</span>    <span class=\"hljs-number\">4</span>      <span class=\"hljs-number\">1.133</span>    <span class=\"hljs-number\">19.588</span>\n<span class=\"hljs-number\">3008.0</span>   <span class=\"hljs-number\">3072.0</span>    <span class=\"hljs-number\">0.0</span>     <span class=\"hljs-number\">1511.1</span>   <span class=\"hljs-number\">343360.0</span>   <span class=\"hljs-number\">47793.0</span>     <span class=\"hljs-number\">699072.0</span>   <span class=\"hljs-number\">283690.2</span>   <span class=\"hljs-number\">75392.0</span>    <span class=\"hljs-number\">41064.3</span>    <span class=\"hljs-number\">2540</span>    <span class=\"hljs-number\">18.454</span>    <span class=\"hljs-number\">4</span>      <span class=\"hljs-number\">1.133</span>    <span class=\"hljs-number\">19.588</span>\n \n$&gt;</code></pre>\n<p>Just like in the example, the real type data will be output along with the following columns:</p>\n<p><strong><code>S0C    S1C     S0U     S1U    EC     EU     OC     OU     PC</code></strong>.</p>\n<p><strong>vmid</strong> (Virtual Machine ID), as its name implies, is the ID for the VM. Java applications running either on a local machine or on a remote machine can be specified using vmid. The vmid for Java application running on a local machine is called <strong>lvmid</strong> (Local vmid), and usually is PID. To find out the lvmid, you can write the PID value using a <strong>ps</strong> command or Windows task manager, but we suggest <strong>jps</strong> because PID and lvmid does not always match. <strong>jps</strong> stands for Java PS. <strong>jps</strong> shows vmids and main method information. Just like ps shows PIDs and process names.</p>\n<p>Find out the vmid of the Java application that you want to monitor by using jps, then use it as a parameter in jstat. If you use jps alone, only bootstrap information will show when several WAS instances are running in one equipment. We suggest that you use <code>ps -ef | grep java</code> command along with jps.</p>\n<p>GC performance data needs constant observation, therefore when running jstat, try to output the GC monitoring information on a regular basis. </p>\n<p>For example, running “<code>jstat –gc &lt;vmid&gt; 1000</code>“ (or 1s) will display the GC monitoring data on the console every 1 second. “<code>jstat –gc &lt;vmid&gt; 1000 10</code>“ will display the GC monitoring information once every 1 second for 10 times in total.</p>\n<p>There are many options other than <code>-gc</code>, among which GC related ones are listed below.</p>\n<table>\n<thead>\n<tr>\n<th>Option Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>gc</td>\n<td>It shows the current size for each heap area and its current usage (Ede, survivor, old, etc.), total number of GC performed, and the accumulated time for GC operations.</td>\n</tr>\n<tr>\n<td>gccapactiy</td>\n<td>It shows the minimum size (ms) and maximum size (mx) of each heap area, current size, and the number of GC performed for each area. (Does not show current usage and accumulated time for GC operations.)</td>\n</tr>\n<tr>\n<td>gccause</td>\n<td>It shows the “information provided by -gcutil” + reason for the last GC and the reason for the current GC.</td>\n</tr>\n<tr>\n<td>gcnew</td>\n<td>Shows the GC performance data for the new area.</td>\n</tr>\n<tr>\n<td>gcnewcapacity</td>\n<td>Shows statistics for the size of new area.</td>\n</tr>\n<tr>\n<td>gcold</td>\n<td>Shows the GC performance data for the old area.</td>\n</tr>\n<tr>\n<td>gcoldcapacity</td>\n<td>Shows statistics for the size of old area.</td>\n</tr>\n<tr>\n<td>gcpermcapacity</td>\n<td>Shows statistics for the permanent area.</td>\n</tr>\n<tr>\n<td>gcutil</td>\n<td>Shows the usage for each heap area in percentage. Also shows the total number of GC performed and the accumulated time for GC operations.</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p><a href=\"https://www.cubrid.org/blog/how-to-monitor-java-garbage-collection\" target=\"_blank\" rel=\"noopener\">原文</a></p>\n</blockquote>\n<h1 id=\"What-is-GC-Monitoring\"><a href=\"#What-is-GC-Monitoring\" class=\"headerlink\" title=\"What is GC Monitoring?\"></a>What is GC Monitoring?</h1><p><strong>Garbage Collection Monitoring</strong> refers to the <em>process of figuring out how JVM is running GC</em>. For example, we can find out:</p>\n<ol>\n<li>When an object in young has moved to old and by how much,</li>\n<li>or wehn <code>stop-the-world</code> has occurred and for how long.</li>\n</ol>\n<p>GC Monitoring is carried out to see <em>if JVM is running GC efficiently</em>, and <em>to check if additional GC tuning is necessary</em>. Based on this information, the application can be edited or GC method can be changed (<strong>GC tuning</strong>).</p>\n<h1 id=\"How-to-Monitor-GC\"><a href=\"#How-to-Monitor-GC\" class=\"headerlink\" title=\"How to Monitor GC?\"></a>How to Monitor GC?</h1><p>There are different ways to monitor GC, but the only difference is how the GC operation information is shown. GC is done by JVM, and since the GC monitoring tools disclose the GC information provided by JVM, you will get the same results on matter how you monitor GC. Therefore, you do not need to learn all methods to monitor GC, but since it only requires a little amount of time to learn each GC monitoring method, knowing a few of them can help you use the right one for different situations and environments.</p>\n<p>The tools or JVM options listed below cannot be used universally regardless of the HVM vendor. This is because there is no need for a “standard” for disclosing GC information. In this example we will use <strong>HotSpot JVM</strong> (Oracle JVM). Since NHN is using Oracle(Sun) JVM, there should be no difficulties in applying the tools or JVM options that we are explaining here.</p>\n<p>First, the GC monitoring methods can be separated into <strong>CUI</strong> and <strong>GUI</strong> depending on the access interface. The typical CUI GC monitoring method involves using a separate CUI application called “<strong>jstat</strong>“, or selecting a JVM option called “<strong>verbosegc</strong>“ when running JVM.</p>\n<p>GUI GC monitoring is done by using a separate GUI application, and three most commonly used applications would be “jconsole”, “jvisualvm” and “Visual GC”.</p>\n<p>Let’s learn more about each method.</p>\n<h1 id=\"jstat\"><a href=\"#jstat\" class=\"headerlink\" title=\"jstat\"></a>jstat</h1><p><strong>jstat</strong> is a monitoring tool in HotSpot JVM. Other monitoring tools for HotSpot JVM are <strong>jps</strong> and <strong>jstatd</strong>. Sometimes, you need all three tools to monitor a Java application.</p>\n<p><strong>jstat</strong> does not provide only the GC operation information display. It also provides class loader operation information or Just-in-Time compiler operation information. Among all the information jstat can provide, in this article we will only cover its functionality to monitor GC operating information.</p>\n<p><strong>jstat</strong> is located in <code>$JDK_HOME/bin</code>, so if java or javac can run without setting a separate directory from the command line, so can jstat.</p>\n<p>You can try running the following in the command line.</p>\n<pre><code class=\"hljs undefined\">$&gt; jstat –gc  $&lt;vmid$&gt; <span class=\"hljs-number\">1000</span>\n \nS0C       S1C       S0U    S1U      EC         EU          OC         OU         PC         PU         YGC     YGCT    FGC      FGCT     GCT\n<span class=\"hljs-number\">3008.0</span>   <span class=\"hljs-number\">3072.0</span>    <span class=\"hljs-number\">0.0</span>     <span class=\"hljs-number\">1511.1</span>   <span class=\"hljs-number\">343360.0</span>   <span class=\"hljs-number\">46383.0</span>     <span class=\"hljs-number\">699072.0</span>   <span class=\"hljs-number\">283690.2</span>   <span class=\"hljs-number\">75392.0</span>    <span class=\"hljs-number\">41064.3</span>    <span class=\"hljs-number\">2540</span>    <span class=\"hljs-number\">18.454</span>    <span class=\"hljs-number\">4</span>      <span class=\"hljs-number\">1.133</span>    <span class=\"hljs-number\">19.588</span>\n<span class=\"hljs-number\">3008.0</span>   <span class=\"hljs-number\">3072.0</span>    <span class=\"hljs-number\">0.0</span>     <span class=\"hljs-number\">1511.1</span>   <span class=\"hljs-number\">343360.0</span>   <span class=\"hljs-number\">47530.9</span>     <span class=\"hljs-number\">699072.0</span>   <span class=\"hljs-number\">283690.2</span>   <span class=\"hljs-number\">75392.0</span>    <span class=\"hljs-number\">41064.3</span>    <span class=\"hljs-number\">2540</span>    <span class=\"hljs-number\">18.454</span>    <span class=\"hljs-number\">4</span>      <span class=\"hljs-number\">1.133</span>    <span class=\"hljs-number\">19.588</span>\n<span class=\"hljs-number\">3008.0</span>   <span class=\"hljs-number\">3072.0</span>    <span class=\"hljs-number\">0.0</span>     <span class=\"hljs-number\">1511.1</span>   <span class=\"hljs-number\">343360.0</span>   <span class=\"hljs-number\">47793.0</span>     <span class=\"hljs-number\">699072.0</span>   <span class=\"hljs-number\">283690.2</span>   <span class=\"hljs-number\">75392.0</span>    <span class=\"hljs-number\">41064.3</span>    <span class=\"hljs-number\">2540</span>    <span class=\"hljs-number\">18.454</span>    <span class=\"hljs-number\">4</span>      <span class=\"hljs-number\">1.133</span>    <span class=\"hljs-number\">19.588</span>\n \n$&gt;</code></pre>\n<p>Just like in the example, the real type data will be output along with the following columns:</p>\n<p><strong><code>S0C    S1C     S0U     S1U    EC     EU     OC     OU     PC</code></strong>.</p>\n<p><strong>vmid</strong> (Virtual Machine ID), as its name implies, is the ID for the VM. Java applications running either on a local machine or on a remote machine can be specified using vmid. The vmid for Java application running on a local machine is called <strong>lvmid</strong> (Local vmid), and usually is PID. To find out the lvmid, you can write the PID value using a <strong>ps</strong> command or Windows task manager, but we suggest <strong>jps</strong> because PID and lvmid does not always match. <strong>jps</strong> stands for Java PS. <strong>jps</strong> shows vmids and main method information. Just like ps shows PIDs and process names.</p>\n<p>Find out the vmid of the Java application that you want to monitor by using jps, then use it as a parameter in jstat. If you use jps alone, only bootstrap information will show when several WAS instances are running in one equipment. We suggest that you use <code>ps -ef | grep java</code> command along with jps.</p>\n<p>GC performance data needs constant observation, therefore when running jstat, try to output the GC monitoring information on a regular basis. </p>\n<p>For example, running “<code>jstat –gc &lt;vmid&gt; 1000</code>“ (or 1s) will display the GC monitoring data on the console every 1 second. “<code>jstat –gc &lt;vmid&gt; 1000 10</code>“ will display the GC monitoring information once every 1 second for 10 times in total.</p>\n<p>There are many options other than <code>-gc</code>, among which GC related ones are listed below.</p>\n<table>\n<thead>\n<tr>\n<th>Option Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>gc</td>\n<td>It shows the current size for each heap area and its current usage (Ede, survivor, old, etc.), total number of GC performed, and the accumulated time for GC operations.</td>\n</tr>\n<tr>\n<td>gccapactiy</td>\n<td>It shows the minimum size (ms) and maximum size (mx) of each heap area, current size, and the number of GC performed for each area. (Does not show current usage and accumulated time for GC operations.)</td>\n</tr>\n<tr>\n<td>gccause</td>\n<td>It shows the “information provided by -gcutil” + reason for the last GC and the reason for the current GC.</td>\n</tr>\n<tr>\n<td>gcnew</td>\n<td>Shows the GC performance data for the new area.</td>\n</tr>\n<tr>\n<td>gcnewcapacity</td>\n<td>Shows statistics for the size of new area.</td>\n</tr>\n<tr>\n<td>gcold</td>\n<td>Shows the GC performance data for the old area.</td>\n</tr>\n<tr>\n<td>gcoldcapacity</td>\n<td>Shows statistics for the size of old area.</td>\n</tr>\n<tr>\n<td>gcpermcapacity</td>\n<td>Shows statistics for the permanent area.</td>\n</tr>\n<tr>\n<td>gcutil</td>\n<td>Shows the usage for each heap area in percentage. Also shows the total number of GC performed and the accumulated time for GC operations.</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"Java发展史","date":"2018-06-05T16:00:00.000Z","_content":"\n![图片描述](https://segmentfault.com/img/bVbcbFO?w=220&h=209)\n\nJava创始认之一：James Gosling\n\nJava之父 -- James Gosling出生于加拿大，是一位计算机编程天才。在卡内基·梅隆大学攻读计算机博士学位时，他编写了多处理器版本的Unix操作系统。1991年，在Sun公司工作期间，James Gosling和一群技术人员创建了一个名为Oak的项目，旨在开发运行于虚拟机的编程语言，同时允许程序在电视机机顶盒等多平台上运行。后来，这项工作就演变成Java。随着互联网的普及，尤其是网景开发的网页浏览器的面世，Java成为全球最流行的开发语言。\n\n![图片描述](https://segmentfault.com/img/bVbcbF2?w=875&h=388)\n\n- 1996年1月，Sun公司发布了Java的第一个开发工具包（JDK1.0），这是Java发展历程中的重要的里程碑，标志着Java成为一种独立的开发工具。9月，约8.3万个网页应用了Java技术制作。10月，Sun公司发布了Java平台的第一个即时（JIT）编译器。\n- 1997年2月，JDK1.1面世，在随后的3周时间里，达到了22万次的下载量。4月2日，Java One会议召开，参会者逾一万人，创当时全球同类会议规模之记录。9月，Java Developer Connection社区超过10万。\n- 1998年12月8日，第二代Java平台的企业版J2EE发布。\n- 1999年6月，Sun公司发布了第二代Java平台（简称为Java2）的3个版本：J2ME（Java 2 Micro Edition， Java2平台的微型版），应用于移动、无线及有限资源的环境；J2SE（Java 2 Standard Edition, Java 2平台的标准版），应用于桌面环境；J2EE（Java 2 Enterprise Edition，Java 2平台的企业版），应用于Java的应用服务器。Java 2平台的发布，是Java发展过程中最重要的一个里程碑，标志着Java的应用开始普及。\n- 2000年5月，JDK1.3、JDK1.4和J2SE 1.3相继发布，几周后获得了Apple公司Mac OS X的工业标准的支持。\n- 2001年9月24日，J2EE1.3发布。\n- 2002年2月26日，J2SE1.4发布。自此Java的计算能力有了大幅提升。\n- 2004年9月30日，J2SE1.5发布，成为Java语言发展史上的又一里程碑。为了表示该版本的重要性，J2SE1.5更名为Java SE 5.0，代号为”Tiger“。\n- 2005年6月，在Java One大会上，Sun公司发布了Java SE 6。此时，Java的各种版本已经更名，已取消其中的数字2，如J2EE更名为JavaEE，J2SE更名为JavaSE，J2ME更名为JavaME。\n- 2006年11月13日，Java技术的发明者Sun公司宣布，将Java技术作为免费软件对外发布。\n- 2009年，甲骨文公司宣布收购Sun。\n- 2011年，甲骨文公司举行了全球性的活动，以庆祝Java7的推出，随后Java7正式发布。\n- 2014年，甲骨文公司发布了Java8正式版。\n\n\n  [1]: /img/bVbcbFO\n  [2]: /img/bVbcbF2\n","source":"_posts/java-history.md","raw":"---\ntitle: Java发展史\ndate: 2018-06-06\ntags:\n    - Java\ncategories:\n    - 后端\n---\n\n![图片描述](https://segmentfault.com/img/bVbcbFO?w=220&h=209)\n\nJava创始认之一：James Gosling\n\nJava之父 -- James Gosling出生于加拿大，是一位计算机编程天才。在卡内基·梅隆大学攻读计算机博士学位时，他编写了多处理器版本的Unix操作系统。1991年，在Sun公司工作期间，James Gosling和一群技术人员创建了一个名为Oak的项目，旨在开发运行于虚拟机的编程语言，同时允许程序在电视机机顶盒等多平台上运行。后来，这项工作就演变成Java。随着互联网的普及，尤其是网景开发的网页浏览器的面世，Java成为全球最流行的开发语言。\n\n![图片描述](https://segmentfault.com/img/bVbcbF2?w=875&h=388)\n\n- 1996年1月，Sun公司发布了Java的第一个开发工具包（JDK1.0），这是Java发展历程中的重要的里程碑，标志着Java成为一种独立的开发工具。9月，约8.3万个网页应用了Java技术制作。10月，Sun公司发布了Java平台的第一个即时（JIT）编译器。\n- 1997年2月，JDK1.1面世，在随后的3周时间里，达到了22万次的下载量。4月2日，Java One会议召开，参会者逾一万人，创当时全球同类会议规模之记录。9月，Java Developer Connection社区超过10万。\n- 1998年12月8日，第二代Java平台的企业版J2EE发布。\n- 1999年6月，Sun公司发布了第二代Java平台（简称为Java2）的3个版本：J2ME（Java 2 Micro Edition， Java2平台的微型版），应用于移动、无线及有限资源的环境；J2SE（Java 2 Standard Edition, Java 2平台的标准版），应用于桌面环境；J2EE（Java 2 Enterprise Edition，Java 2平台的企业版），应用于Java的应用服务器。Java 2平台的发布，是Java发展过程中最重要的一个里程碑，标志着Java的应用开始普及。\n- 2000年5月，JDK1.3、JDK1.4和J2SE 1.3相继发布，几周后获得了Apple公司Mac OS X的工业标准的支持。\n- 2001年9月24日，J2EE1.3发布。\n- 2002年2月26日，J2SE1.4发布。自此Java的计算能力有了大幅提升。\n- 2004年9月30日，J2SE1.5发布，成为Java语言发展史上的又一里程碑。为了表示该版本的重要性，J2SE1.5更名为Java SE 5.0，代号为”Tiger“。\n- 2005年6月，在Java One大会上，Sun公司发布了Java SE 6。此时，Java的各种版本已经更名，已取消其中的数字2，如J2EE更名为JavaEE，J2SE更名为JavaSE，J2ME更名为JavaME。\n- 2006年11月13日，Java技术的发明者Sun公司宣布，将Java技术作为免费软件对外发布。\n- 2009年，甲骨文公司宣布收购Sun。\n- 2011年，甲骨文公司举行了全球性的活动，以庆祝Java7的推出，随后Java7正式发布。\n- 2014年，甲骨文公司发布了Java8正式版。\n\n\n  [1]: /img/bVbcbFO\n  [2]: /img/bVbcbF2\n","slug":"java-history","published":1,"updated":"2020-07-17T02:32:01.193Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcpntuhm003t04oi1mv68ljx","content":"<p><img src=\"https://segmentfault.com/img/bVbcbFO?w=220&amp;h=209\" srcset=\"/img/loading.gif\" alt=\"图片描述\"></p>\n<p>Java创始认之一：James Gosling</p>\n<p>Java之父 – James Gosling出生于加拿大，是一位计算机编程天才。在卡内基·梅隆大学攻读计算机博士学位时，他编写了多处理器版本的Unix操作系统。1991年，在Sun公司工作期间，James Gosling和一群技术人员创建了一个名为Oak的项目，旨在开发运行于虚拟机的编程语言，同时允许程序在电视机机顶盒等多平台上运行。后来，这项工作就演变成Java。随着互联网的普及，尤其是网景开发的网页浏览器的面世，Java成为全球最流行的开发语言。</p>\n<p><img src=\"https://segmentfault.com/img/bVbcbF2?w=875&amp;h=388\" srcset=\"/img/loading.gif\" alt=\"图片描述\"></p>\n<ul>\n<li>1996年1月，Sun公司发布了Java的第一个开发工具包（JDK1.0），这是Java发展历程中的重要的里程碑，标志着Java成为一种独立的开发工具。9月，约8.3万个网页应用了Java技术制作。10月，Sun公司发布了Java平台的第一个即时（JIT）编译器。</li>\n<li>1997年2月，JDK1.1面世，在随后的3周时间里，达到了22万次的下载量。4月2日，Java One会议召开，参会者逾一万人，创当时全球同类会议规模之记录。9月，Java Developer Connection社区超过10万。</li>\n<li>1998年12月8日，第二代Java平台的企业版J2EE发布。</li>\n<li>1999年6月，Sun公司发布了第二代Java平台（简称为Java2）的3个版本：J2ME（Java 2 Micro Edition， Java2平台的微型版），应用于移动、无线及有限资源的环境；J2SE（Java 2 Standard Edition, Java 2平台的标准版），应用于桌面环境；J2EE（Java 2 Enterprise Edition，Java 2平台的企业版），应用于Java的应用服务器。Java 2平台的发布，是Java发展过程中最重要的一个里程碑，标志着Java的应用开始普及。</li>\n<li>2000年5月，JDK1.3、JDK1.4和J2SE 1.3相继发布，几周后获得了Apple公司Mac OS X的工业标准的支持。</li>\n<li>2001年9月24日，J2EE1.3发布。</li>\n<li>2002年2月26日，J2SE1.4发布。自此Java的计算能力有了大幅提升。</li>\n<li>2004年9月30日，J2SE1.5发布，成为Java语言发展史上的又一里程碑。为了表示该版本的重要性，J2SE1.5更名为Java SE 5.0，代号为”Tiger“。</li>\n<li>2005年6月，在Java One大会上，Sun公司发布了Java SE 6。此时，Java的各种版本已经更名，已取消其中的数字2，如J2EE更名为JavaEE，J2SE更名为JavaSE，J2ME更名为JavaME。</li>\n<li>2006年11月13日，Java技术的发明者Sun公司宣布，将Java技术作为免费软件对外发布。</li>\n<li>2009年，甲骨文公司宣布收购Sun。</li>\n<li>2011年，甲骨文公司举行了全球性的活动，以庆祝Java7的推出，随后Java7正式发布。</li>\n<li>2014年，甲骨文公司发布了Java8正式版。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://segmentfault.com/img/bVbcbFO?w=220&amp;h=209\" srcset=\"/img/loading.gif\" alt=\"图片描述\"></p>\n<p>Java创始认之一：James Gosling</p>\n<p>Java之父 – James Gosling出生于加拿大，是一位计算机编程天才。在卡内基·梅隆大学攻读计算机博士学位时，他编写了多处理器版本的Unix操作系统。1991年，在Sun公司工作期间，James Gosling和一群技术人员创建了一个名为Oak的项目，旨在开发运行于虚拟机的编程语言，同时允许程序在电视机机顶盒等多平台上运行。后来，这项工作就演变成Java。随着互联网的普及，尤其是网景开发的网页浏览器的面世，Java成为全球最流行的开发语言。</p>\n<p><img src=\"https://segmentfault.com/img/bVbcbF2?w=875&amp;h=388\" srcset=\"/img/loading.gif\" alt=\"图片描述\"></p>\n<ul>\n<li>1996年1月，Sun公司发布了Java的第一个开发工具包（JDK1.0），这是Java发展历程中的重要的里程碑，标志着Java成为一种独立的开发工具。9月，约8.3万个网页应用了Java技术制作。10月，Sun公司发布了Java平台的第一个即时（JIT）编译器。</li>\n<li>1997年2月，JDK1.1面世，在随后的3周时间里，达到了22万次的下载量。4月2日，Java One会议召开，参会者逾一万人，创当时全球同类会议规模之记录。9月，Java Developer Connection社区超过10万。</li>\n<li>1998年12月8日，第二代Java平台的企业版J2EE发布。</li>\n<li>1999年6月，Sun公司发布了第二代Java平台（简称为Java2）的3个版本：J2ME（Java 2 Micro Edition， Java2平台的微型版），应用于移动、无线及有限资源的环境；J2SE（Java 2 Standard Edition, Java 2平台的标准版），应用于桌面环境；J2EE（Java 2 Enterprise Edition，Java 2平台的企业版），应用于Java的应用服务器。Java 2平台的发布，是Java发展过程中最重要的一个里程碑，标志着Java的应用开始普及。</li>\n<li>2000年5月，JDK1.3、JDK1.4和J2SE 1.3相继发布，几周后获得了Apple公司Mac OS X的工业标准的支持。</li>\n<li>2001年9月24日，J2EE1.3发布。</li>\n<li>2002年2月26日，J2SE1.4发布。自此Java的计算能力有了大幅提升。</li>\n<li>2004年9月30日，J2SE1.5发布，成为Java语言发展史上的又一里程碑。为了表示该版本的重要性，J2SE1.5更名为Java SE 5.0，代号为”Tiger“。</li>\n<li>2005年6月，在Java One大会上，Sun公司发布了Java SE 6。此时，Java的各种版本已经更名，已取消其中的数字2，如J2EE更名为JavaEE，J2SE更名为JavaSE，J2ME更名为JavaME。</li>\n<li>2006年11月13日，Java技术的发明者Sun公司宣布，将Java技术作为免费软件对外发布。</li>\n<li>2009年，甲骨文公司宣布收购Sun。</li>\n<li>2011年，甲骨文公司举行了全球性的活动，以庆祝Java7的推出，随后Java7正式发布。</li>\n<li>2014年，甲骨文公司发布了Java8正式版。</li>\n</ul>\n"},{"title":"JavaScript编程规范","date":"2017-04-21T05:10:50.000Z","_content":"\n## 背景\nJavaScript是一种客户端脚本语言，Web工程都会用到它，这份指南列出了编写JavaScript时需要遵守的规则。\n\n## JavaScript语言规范\n\n### 变量\n声明变量必须加上var\n关键字:\n```\nvar a1 = 1;\nvar b1 = 11;\n```\n\n当你没有写var\n，变量就会暴露在全局上下文中，这样很可能会和现有的变量冲突。另外，如果没有加上，很难明确该变量的作用域是什么，变量很可能在局部作用域中，很容易泄漏到Document或者Window中，所以务必用var\n变量。\n\n### 常量\n常量的形式如：`NAMES_LIKE_THIS`，即使用大写字符，并用下划线分割，你也可用`@const`标记来指明它是一个常量，但请不要使用`const`关键字。\n对于基本类型的常量，只需要转换命名：\n```\n/**\n * The number of seconds of minute.\n * @type {number}\n */\neflag.example.SECONDES_IN_A_MINUTE = 60;\n```\n对于非基本类型，使用`@const`\n标记：\n```\n/**\n * The number of seconds in each of the given units.\n * @type {Object.<number>}\n * @const\n */\neflag.example.SECONDS_TABLE = {minute: 60,hour: 60 * 60,day: 60 * 60 * 24}\n```\n至于关键字`const`，因为IE不能识别，所以不要使用。\n\n### 分号\n总是使用分号。 如果仅依靠语句间的隐式分割，有时会很麻烦，使用分号，你自己更能清楚那里是语句的起止。\n行末分号：\n```\nvar foo = 1,bar = 2,baz = 3;\nvar obj = {foo: 1,bar: 2,baz: 3};\n```\n### 单引号(`''`)和双引号(`\"\"`)\n由于JavaScript对于单引号和双引号都可以识别为字符串，但为了统一规范，所以在JavaScript中字符串的定义要求使用单引号：\n```\nvar val = 'a';\n```\n同样，html中属性使用的是双引号：\n```\n<input type=\"text\">\n```\n在JavaScript中动态生成html标签时：\n```\nvar _input = '<input type=\"text\">';\n```\n### 空格\n参数和括号间五空格：\n```\nfunction fn(arg1, arg2){}\n```\n冒号后面有空格\n```\n{foo: 1,bar: 2,baz: 3}\n```\n条件语句有空格\n```\nif (true) {}\nwhile (true) {}\nswitch(v){}\n```\n### Tips and Tricks\n\n### True和False布尔表达式\n下面的布尔表达式都会返回`false`：\n```\nnull\nundefined\n''\n空字符串\n0\n```\n数字`0` 但小心下面的，可都返回`true`：\n```\n'0'\n字符串0\n[]\n空数组\n{}\n空对象\n```\n如果你想检查字符串是否为`null`或`空`：\n```\nif (y != null && y != '') {}\n```\n写成这样会更好：\n```\nif (y) {}\n```\n### 条件（三元）操作符(`?:`)\n三元操作符用于替代下面的代码：\n```\nif (val != 0) {\n  return foo();\n} else {\n  return bar();\n}\n```\n你可以写成：\n```\nreturn val ? foo() : bar();\n```\n在生成HTML代码时也是很有用的：\n```\nvar html = '<input type=\"checkbox\"' + (isChecked ? ' checked' : '')+ (isEnabled ? '' : ' disabled')+ ' name=\"foo\">';\n```\n### `&&`和`||`\n\n二元布尔操作符是可短路的，只有在必要的时候才会计算到最后一项。 `||`被称作为`default`操作符，因为可以这样：\n```\n/**\n * @param {*=} opt_win\n */\nfunction foo(opt_win) {\n  var win;\n  if (opt_win) {\n    win = opt_win;\n  } else {\n    win = window;\n  }\n// ...\n}\n```\n你可以使用它来简化上面的代码：\n```\n/**\n * @param {*=} opt_win\n */\nfunction foo(opt_win) {\n  var win = opt_win || window;\n  // ...\n}\n```\n### 使用`join()`来创建字符串\n通常是这样使用的：\n```\nfunction listHtml(items) {\n  var html = '<div class=\"foo\"';\n  for (var i = 0; i < items.length; i++) {\n    if (i > 0) {\n      html += ',';\n    }\n    html += itemHtml(items[i]);\n  }\n  html += '</div>';\n  return html;\n}\n```\n但这样在IE下非常慢，可以用下面的方式：\n```\nfunction listHtml(items) {\n  var html = [];\n  for (var i = 0; i < items.length; i++) {\n    html[i] = itemHtml(items[i]);\n  }\n  return '<div class=\"foo\">' + html.join(', ') + '</div>';\n}\n```\n你也可以使用数组作为字符串构造器，然后通过`myArray.join('')`\n转换成字符串，不过由于赋值操作快于数组的`push()`，所以尽量使用复制操作。\n","source":"_posts/javascript-rule.md","raw":"---\ntitle: JavaScript编程规范\ndate: 2017-04-21 13:10:50\ntags:\n    - JavaScript\ncategories:\n    - 前端\n---\n\n## 背景\nJavaScript是一种客户端脚本语言，Web工程都会用到它，这份指南列出了编写JavaScript时需要遵守的规则。\n\n## JavaScript语言规范\n\n### 变量\n声明变量必须加上var\n关键字:\n```\nvar a1 = 1;\nvar b1 = 11;\n```\n\n当你没有写var\n，变量就会暴露在全局上下文中，这样很可能会和现有的变量冲突。另外，如果没有加上，很难明确该变量的作用域是什么，变量很可能在局部作用域中，很容易泄漏到Document或者Window中，所以务必用var\n变量。\n\n### 常量\n常量的形式如：`NAMES_LIKE_THIS`，即使用大写字符，并用下划线分割，你也可用`@const`标记来指明它是一个常量，但请不要使用`const`关键字。\n对于基本类型的常量，只需要转换命名：\n```\n/**\n * The number of seconds of minute.\n * @type {number}\n */\neflag.example.SECONDES_IN_A_MINUTE = 60;\n```\n对于非基本类型，使用`@const`\n标记：\n```\n/**\n * The number of seconds in each of the given units.\n * @type {Object.<number>}\n * @const\n */\neflag.example.SECONDS_TABLE = {minute: 60,hour: 60 * 60,day: 60 * 60 * 24}\n```\n至于关键字`const`，因为IE不能识别，所以不要使用。\n\n### 分号\n总是使用分号。 如果仅依靠语句间的隐式分割，有时会很麻烦，使用分号，你自己更能清楚那里是语句的起止。\n行末分号：\n```\nvar foo = 1,bar = 2,baz = 3;\nvar obj = {foo: 1,bar: 2,baz: 3};\n```\n### 单引号(`''`)和双引号(`\"\"`)\n由于JavaScript对于单引号和双引号都可以识别为字符串，但为了统一规范，所以在JavaScript中字符串的定义要求使用单引号：\n```\nvar val = 'a';\n```\n同样，html中属性使用的是双引号：\n```\n<input type=\"text\">\n```\n在JavaScript中动态生成html标签时：\n```\nvar _input = '<input type=\"text\">';\n```\n### 空格\n参数和括号间五空格：\n```\nfunction fn(arg1, arg2){}\n```\n冒号后面有空格\n```\n{foo: 1,bar: 2,baz: 3}\n```\n条件语句有空格\n```\nif (true) {}\nwhile (true) {}\nswitch(v){}\n```\n### Tips and Tricks\n\n### True和False布尔表达式\n下面的布尔表达式都会返回`false`：\n```\nnull\nundefined\n''\n空字符串\n0\n```\n数字`0` 但小心下面的，可都返回`true`：\n```\n'0'\n字符串0\n[]\n空数组\n{}\n空对象\n```\n如果你想检查字符串是否为`null`或`空`：\n```\nif (y != null && y != '') {}\n```\n写成这样会更好：\n```\nif (y) {}\n```\n### 条件（三元）操作符(`?:`)\n三元操作符用于替代下面的代码：\n```\nif (val != 0) {\n  return foo();\n} else {\n  return bar();\n}\n```\n你可以写成：\n```\nreturn val ? foo() : bar();\n```\n在生成HTML代码时也是很有用的：\n```\nvar html = '<input type=\"checkbox\"' + (isChecked ? ' checked' : '')+ (isEnabled ? '' : ' disabled')+ ' name=\"foo\">';\n```\n### `&&`和`||`\n\n二元布尔操作符是可短路的，只有在必要的时候才会计算到最后一项。 `||`被称作为`default`操作符，因为可以这样：\n```\n/**\n * @param {*=} opt_win\n */\nfunction foo(opt_win) {\n  var win;\n  if (opt_win) {\n    win = opt_win;\n  } else {\n    win = window;\n  }\n// ...\n}\n```\n你可以使用它来简化上面的代码：\n```\n/**\n * @param {*=} opt_win\n */\nfunction foo(opt_win) {\n  var win = opt_win || window;\n  // ...\n}\n```\n### 使用`join()`来创建字符串\n通常是这样使用的：\n```\nfunction listHtml(items) {\n  var html = '<div class=\"foo\"';\n  for (var i = 0; i < items.length; i++) {\n    if (i > 0) {\n      html += ',';\n    }\n    html += itemHtml(items[i]);\n  }\n  html += '</div>';\n  return html;\n}\n```\n但这样在IE下非常慢，可以用下面的方式：\n```\nfunction listHtml(items) {\n  var html = [];\n  for (var i = 0; i < items.length; i++) {\n    html[i] = itemHtml(items[i]);\n  }\n  return '<div class=\"foo\">' + html.join(', ') + '</div>';\n}\n```\n你也可以使用数组作为字符串构造器，然后通过`myArray.join('')`\n转换成字符串，不过由于赋值操作快于数组的`push()`，所以尽量使用复制操作。\n","slug":"javascript-rule","published":1,"updated":"2020-07-17T02:32:01.194Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcpntuhp003w04oiatfh1js9","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>JavaScript是一种客户端脚本语言，Web工程都会用到它，这份指南列出了编写JavaScript时需要遵守的规则。</p>\n<h2 id=\"JavaScript语言规范\"><a href=\"#JavaScript语言规范\" class=\"headerlink\" title=\"JavaScript语言规范\"></a>JavaScript语言规范</h2><h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><p>声明变量必须加上var<br>关键字:<br><pre><code class=\"hljs undefined\">var a1 = <span class=\"hljs-number\">1</span><span class=\"hljs-comment\">;</span>\nvar b1 = <span class=\"hljs-number\">11</span><span class=\"hljs-comment\">;</span></code></pre></p>\n<p>当你没有写var<br>，变量就会暴露在全局上下文中，这样很可能会和现有的变量冲突。另外，如果没有加上，很难明确该变量的作用域是什么，变量很可能在局部作用域中，很容易泄漏到Document或者Window中，所以务必用var<br>变量。</p>\n<h3 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h3><p>常量的形式如：<code>NAMES_LIKE_THIS</code>，即使用大写字符，并用下划线分割，你也可用<code>@const</code>标记来指明它是一个常量，但请不要使用<code>const</code>关键字。<br>对于基本类型的常量，只需要转换命名：<br><pre><code class=\"hljs undefined\"><span class=\"hljs-comment\">/**\n * The number of seconds of minute.\n * @type &#123;number&#125;\n */</span>\neflag.example.SECONDES_IN_<span class=\"hljs-built_in\">A_MINUTE</span> = <span class=\"hljs-number\">60</span><span class=\"hljs-comment\">;</span></code></pre></p>\n<p>对于非基本类型，使用<code>@const</code><br>标记：<br><pre><code class=\"hljs undefined\"><span class=\"hljs-comment\">/**\n * The number of seconds in each of the given units.\n * <span class=\"hljs-doctag\">@type</span> &#123;Object.&lt;number&gt;&#125;\n * <span class=\"hljs-doctag\">@const</span>\n */</span>\neflag.example.SECONDS_TABLE = &#123;<span class=\"hljs-string\">minute:</span> <span class=\"hljs-number\">60</span>,<span class=\"hljs-string\">hour:</span> <span class=\"hljs-number\">60</span> * <span class=\"hljs-number\">60</span>,<span class=\"hljs-string\">day:</span> <span class=\"hljs-number\">60</span> * <span class=\"hljs-number\">60</span> * <span class=\"hljs-number\">24</span>&#125;</code></pre></p>\n<p>至于关键字<code>const</code>，因为IE不能识别，所以不要使用。</p>\n<h3 id=\"分号\"><a href=\"#分号\" class=\"headerlink\" title=\"分号\"></a>分号</h3><p>总是使用分号。 如果仅依靠语句间的隐式分割，有时会很麻烦，使用分号，你自己更能清楚那里是语句的起止。<br>行末分号：<br><pre><code class=\"hljs undefined\"><span class=\"hljs-string\">var</span> <span class=\"hljs-string\">foo</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-number\">1</span><span class=\"hljs-string\">,bar</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-number\">2</span><span class=\"hljs-string\">,baz</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-number\">3</span><span class=\"hljs-string\">;</span>\n<span class=\"hljs-string\">var</span> <span class=\"hljs-string\">obj</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">&#123;foo:</span> <span class=\"hljs-number\">1</span><span class=\"hljs-string\">,bar:</span> <span class=\"hljs-number\">2</span><span class=\"hljs-string\">,baz:</span> <span class=\"hljs-number\">3</span><span class=\"hljs-string\">&#125;;</span></code></pre></p>\n<h3 id=\"单引号-39-39-和双引号-quot-quot\"><a href=\"#单引号-39-39-和双引号-quot-quot\" class=\"headerlink\" title=\"单引号(&#39;&#39;)和双引号(&quot;&quot;)\"></a>单引号(<code>&#39;&#39;</code>)和双引号(<code>&quot;&quot;</code>)</h3><p>由于JavaScript对于单引号和双引号都可以识别为字符串，但为了统一规范，所以在JavaScript中字符串的定义要求使用单引号：<br><pre><code class=\"hljs undefined\"><span class=\"hljs-attribute\">var val</span> = <span class=\"hljs-string\">'a'</span>;</code></pre></p>\n<p>同样，html中属性使用的是双引号：<br><pre><code class=\"hljs undefined\">&lt;input <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span></span>=<span class=\"hljs-string\">\"text\"</span>&gt;</code></pre></p>\n<p>在JavaScript中动态生成html标签时：<br><pre><code class=\"hljs undefined\"><span class=\"hljs-keyword\">var</span> <span class=\"hljs-number\">_</span><span class=\"hljs-keyword\">input</span> = '&lt;<span class=\"hljs-keyword\">input</span> <span class=\"hljs-keyword\">type</span>=<span class=\"hljs-string\">\"text\"</span>&gt;';</code></pre></p>\n<h3 id=\"空格\"><a href=\"#空格\" class=\"headerlink\" title=\"空格\"></a>空格</h3><p>参数和括号间五空格：<br><pre><code class=\"hljs undefined\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn</span><span class=\"hljs-params\">(arg1, arg2)</span></span>&#123;&#125;</code></pre></p>\n<p>冒号后面有空格<br><pre><code class=\"hljs undefined\">&#123;<span class=\"hljs-attribute\">foo</span>: <span class=\"hljs-number\">1</span>,bar: <span class=\"hljs-number\">2</span>,baz: <span class=\"hljs-number\">3</span>&#125;</code></pre></p>\n<p>条件语句有空格<br><pre><code class=\"hljs undefined\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) &#123;&#125;\n<span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) &#123;&#125;\n<span class=\"hljs-keyword\">switch</span>(v)&#123;&#125;</code></pre></p>\n<h3 id=\"Tips-and-Tricks\"><a href=\"#Tips-and-Tricks\" class=\"headerlink\" title=\"Tips and Tricks\"></a>Tips and Tricks</h3><h3 id=\"True和False布尔表达式\"><a href=\"#True和False布尔表达式\" class=\"headerlink\" title=\"True和False布尔表达式\"></a>True和False布尔表达式</h3><p>下面的布尔表达式都会返回<code>false</code>：<br><pre><code class=\"hljs undefined\"><span class=\"hljs-literal\">null</span>\n<span class=\"hljs-literal\">undefined</span>\n<span class=\"hljs-string\">''</span>\n空字符串\n<span class=\"hljs-number\">0</span></code></pre></p>\n<p>数字<code>0</code> 但小心下面的，可都返回<code>true</code>：<br><pre><code class=\"hljs undefined\"><span class=\"hljs-string\">'0'</span>\n字符串<span class=\"hljs-number\">0</span>\n[<span class=\"hljs-meta\"></span>]\n空数组\n&#123;&#125;\n空对象</code></pre></p>\n<p>如果你想检查字符串是否为<code>null</code>或<code>空</code>：<br><pre><code class=\"hljs undefined\">if (y != null &amp;&amp; y != <span class=\"hljs-string\">''</span>) &#123;&#125;</code></pre></p>\n<p>写成这样会更好：<br><pre><code class=\"hljs undefined\"><span class=\"hljs-selector-tag\">if</span> (<span class=\"hljs-selector-tag\">y</span>) &#123;&#125;</code></pre></p>\n<h3 id=\"条件（三元）操作符\"><a href=\"#条件（三元）操作符\" class=\"headerlink\" title=\"条件（三元）操作符(?:)\"></a>条件（三元）操作符(<code>?:</code>)</h3><p>三元操作符用于替代下面的代码：<br><pre><code class=\"hljs undefined\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">val</span> != <span class=\"hljs-number\">0</span>) &#123;\n  <span class=\"hljs-keyword\">return</span> foo();\n&#125; <span class=\"hljs-keyword\">else</span> &#123;\n  <span class=\"hljs-keyword\">return</span> bar();\n&#125;</code></pre></p>\n<p>你可以写成：<br><pre><code class=\"hljs undefined\"><span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">val</span> ? foo() : bar();</code></pre></p>\n<p>在生成HTML代码时也是很有用的：<br><pre><code class=\"hljs undefined\">var html = <span class=\"hljs-string\">'&lt;input type=\"</span>checkbox<span class=\"hljs-string\">\"'</span> + (isChecked ? <span class=\"hljs-string\">' checked'</span> : <span class=\"hljs-string\">''</span>)+ (isEnabled ? <span class=\"hljs-string\">''</span> : <span class=\"hljs-string\">' disabled'</span>)+ <span class=\"hljs-string\">' name=\"</span>foo<span class=\"hljs-string\">\"&gt;'</span>;</code></pre></p>\n<h3 id=\"amp-amp-和\"><a href=\"#amp-amp-和\" class=\"headerlink\" title=\"&amp;&amp;和||\"></a><code>&amp;&amp;</code>和<code>||</code></h3><p>二元布尔操作符是可短路的，只有在必要的时候才会计算到最后一项。 <code>||</code>被称作为<code>default</code>操作符，因为可以这样：<br><pre><code class=\"hljs undefined\"><span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">&#123;*=&#125;</span> <span class=\"hljs-variable\">opt_win</span></span>\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\">opt_win</span>) </span>&#123;\n  <span class=\"hljs-keyword\">var</span> win;\n  <span class=\"hljs-keyword\">if</span> (opt_win) &#123;\n    win = opt_win;\n  &#125; <span class=\"hljs-keyword\">else</span> &#123;\n    win = <span class=\"hljs-built_in\">window</span>;\n  &#125;\n<span class=\"hljs-comment\">// ...</span>\n&#125;</code></pre></p>\n<p>你可以使用它来简化上面的代码：<br><pre><code class=\"hljs undefined\"><span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">&#123;*=&#125;</span> <span class=\"hljs-variable\">opt_win</span></span>\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\">opt_win</span>) </span>&#123;\n  <span class=\"hljs-keyword\">var</span> win = opt_win || <span class=\"hljs-built_in\">window</span>;\n  <span class=\"hljs-comment\">// ...</span>\n&#125;</code></pre></p>\n<h3 id=\"使用join-来创建字符串\"><a href=\"#使用join-来创建字符串\" class=\"headerlink\" title=\"使用join()来创建字符串\"></a>使用<code>join()</code>来创建字符串</h3><p>通常是这样使用的：<br><pre><code class=\"hljs undefined\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">listHtml</span><span class=\"hljs-params\">(items)</span> &#123;</span>\n  var html = <span class=\"hljs-string\">'&lt;div class=\"foo\"'</span>;\n  <span class=\"hljs-keyword\">for</span> (var <span class=\"hljs-built_in\">i</span> = <span class=\"hljs-number\">0</span>; <span class=\"hljs-built_in\">i</span> &lt; items.<span class=\"hljs-built_in\">length</span>; <span class=\"hljs-built_in\">i</span>++) &#123;\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">i</span> &gt; <span class=\"hljs-number\">0</span>) &#123;\n      html += <span class=\"hljs-string\">','</span>;\n    &#125;\n    html += itemHtml(items[<span class=\"hljs-built_in\">i</span>]);\n  &#125;\n  html += <span class=\"hljs-string\">'&lt;/div&gt;'</span>;\n  <span class=\"hljs-keyword\">return</span> html;\n&#125;</code></pre></p>\n<p>但这样在IE下非常慢，可以用下面的方式：<br><pre><code class=\"hljs undefined\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">listHtml</span><span class=\"hljs-params\">(items)</span> &#123;</span>\n  var html = [];\n  <span class=\"hljs-keyword\">for</span> (var <span class=\"hljs-built_in\">i</span> = <span class=\"hljs-number\">0</span>; <span class=\"hljs-built_in\">i</span> &lt; items.<span class=\"hljs-built_in\">length</span>; <span class=\"hljs-built_in\">i</span>++) &#123;\n    html[<span class=\"hljs-built_in\">i</span>] = itemHtml(items[<span class=\"hljs-built_in\">i</span>]);\n  &#125;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'&lt;div class=\"foo\"&gt;'</span> + html.join(<span class=\"hljs-string\">', '</span>) + <span class=\"hljs-string\">'&lt;/div&gt;'</span>;\n&#125;</code></pre></p>\n<p>你也可以使用数组作为字符串构造器，然后通过<code>myArray.join(&#39;&#39;)</code><br>转换成字符串，不过由于赋值操作快于数组的<code>push()</code>，所以尽量使用复制操作。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>JavaScript是一种客户端脚本语言，Web工程都会用到它，这份指南列出了编写JavaScript时需要遵守的规则。</p>\n<h2 id=\"JavaScript语言规范\"><a href=\"#JavaScript语言规范\" class=\"headerlink\" title=\"JavaScript语言规范\"></a>JavaScript语言规范</h2><h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><p>声明变量必须加上var<br>关键字:<br><pre><code class=\"hljs undefined\">var a1 = <span class=\"hljs-number\">1</span><span class=\"hljs-comment\">;</span>\nvar b1 = <span class=\"hljs-number\">11</span><span class=\"hljs-comment\">;</span></code></pre></p>\n<p>当你没有写var<br>，变量就会暴露在全局上下文中，这样很可能会和现有的变量冲突。另外，如果没有加上，很难明确该变量的作用域是什么，变量很可能在局部作用域中，很容易泄漏到Document或者Window中，所以务必用var<br>变量。</p>\n<h3 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h3><p>常量的形式如：<code>NAMES_LIKE_THIS</code>，即使用大写字符，并用下划线分割，你也可用<code>@const</code>标记来指明它是一个常量，但请不要使用<code>const</code>关键字。<br>对于基本类型的常量，只需要转换命名：<br><pre><code class=\"hljs undefined\"><span class=\"hljs-comment\">/**\n * The number of seconds of minute.\n * @type &#123;number&#125;\n */</span>\neflag.example.SECONDES_IN_<span class=\"hljs-built_in\">A_MINUTE</span> = <span class=\"hljs-number\">60</span><span class=\"hljs-comment\">;</span></code></pre></p>\n<p>对于非基本类型，使用<code>@const</code><br>标记：<br><pre><code class=\"hljs undefined\"><span class=\"hljs-comment\">/**\n * The number of seconds in each of the given units.\n * <span class=\"hljs-doctag\">@type</span> &#123;Object.&lt;number&gt;&#125;\n * <span class=\"hljs-doctag\">@const</span>\n */</span>\neflag.example.SECONDS_TABLE = &#123;<span class=\"hljs-string\">minute:</span> <span class=\"hljs-number\">60</span>,<span class=\"hljs-string\">hour:</span> <span class=\"hljs-number\">60</span> * <span class=\"hljs-number\">60</span>,<span class=\"hljs-string\">day:</span> <span class=\"hljs-number\">60</span> * <span class=\"hljs-number\">60</span> * <span class=\"hljs-number\">24</span>&#125;</code></pre></p>\n<p>至于关键字<code>const</code>，因为IE不能识别，所以不要使用。</p>\n<h3 id=\"分号\"><a href=\"#分号\" class=\"headerlink\" title=\"分号\"></a>分号</h3><p>总是使用分号。 如果仅依靠语句间的隐式分割，有时会很麻烦，使用分号，你自己更能清楚那里是语句的起止。<br>行末分号：<br><pre><code class=\"hljs undefined\"><span class=\"hljs-string\">var</span> <span class=\"hljs-string\">foo</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-number\">1</span><span class=\"hljs-string\">,bar</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-number\">2</span><span class=\"hljs-string\">,baz</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-number\">3</span><span class=\"hljs-string\">;</span>\n<span class=\"hljs-string\">var</span> <span class=\"hljs-string\">obj</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">&#123;foo:</span> <span class=\"hljs-number\">1</span><span class=\"hljs-string\">,bar:</span> <span class=\"hljs-number\">2</span><span class=\"hljs-string\">,baz:</span> <span class=\"hljs-number\">3</span><span class=\"hljs-string\">&#125;;</span></code></pre></p>\n<h3 id=\"单引号-39-39-和双引号-quot-quot\"><a href=\"#单引号-39-39-和双引号-quot-quot\" class=\"headerlink\" title=\"单引号(&#39;&#39;)和双引号(&quot;&quot;)\"></a>单引号(<code>&#39;&#39;</code>)和双引号(<code>&quot;&quot;</code>)</h3><p>由于JavaScript对于单引号和双引号都可以识别为字符串，但为了统一规范，所以在JavaScript中字符串的定义要求使用单引号：<br><pre><code class=\"hljs undefined\"><span class=\"hljs-attribute\">var val</span> = <span class=\"hljs-string\">'a'</span>;</code></pre></p>\n<p>同样，html中属性使用的是双引号：<br><pre><code class=\"hljs undefined\">&lt;input <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span></span>=<span class=\"hljs-string\">\"text\"</span>&gt;</code></pre></p>\n<p>在JavaScript中动态生成html标签时：<br><pre><code class=\"hljs undefined\"><span class=\"hljs-keyword\">var</span> <span class=\"hljs-number\">_</span><span class=\"hljs-keyword\">input</span> = '&lt;<span class=\"hljs-keyword\">input</span> <span class=\"hljs-keyword\">type</span>=<span class=\"hljs-string\">\"text\"</span>&gt;';</code></pre></p>\n<h3 id=\"空格\"><a href=\"#空格\" class=\"headerlink\" title=\"空格\"></a>空格</h3><p>参数和括号间五空格：<br><pre><code class=\"hljs undefined\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn</span><span class=\"hljs-params\">(arg1, arg2)</span></span>&#123;&#125;</code></pre></p>\n<p>冒号后面有空格<br><pre><code class=\"hljs undefined\">&#123;<span class=\"hljs-attribute\">foo</span>: <span class=\"hljs-number\">1</span>,bar: <span class=\"hljs-number\">2</span>,baz: <span class=\"hljs-number\">3</span>&#125;</code></pre></p>\n<p>条件语句有空格<br><pre><code class=\"hljs undefined\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) &#123;&#125;\n<span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) &#123;&#125;\n<span class=\"hljs-keyword\">switch</span>(v)&#123;&#125;</code></pre></p>\n<h3 id=\"Tips-and-Tricks\"><a href=\"#Tips-and-Tricks\" class=\"headerlink\" title=\"Tips and Tricks\"></a>Tips and Tricks</h3><h3 id=\"True和False布尔表达式\"><a href=\"#True和False布尔表达式\" class=\"headerlink\" title=\"True和False布尔表达式\"></a>True和False布尔表达式</h3><p>下面的布尔表达式都会返回<code>false</code>：<br><pre><code class=\"hljs undefined\"><span class=\"hljs-literal\">null</span>\n<span class=\"hljs-literal\">undefined</span>\n<span class=\"hljs-string\">''</span>\n空字符串\n<span class=\"hljs-number\">0</span></code></pre></p>\n<p>数字<code>0</code> 但小心下面的，可都返回<code>true</code>：<br><pre><code class=\"hljs undefined\"><span class=\"hljs-string\">'0'</span>\n字符串<span class=\"hljs-number\">0</span>\n[<span class=\"hljs-meta\"></span>]\n空数组\n&#123;&#125;\n空对象</code></pre></p>\n<p>如果你想检查字符串是否为<code>null</code>或<code>空</code>：<br><pre><code class=\"hljs undefined\">if (y != null &amp;&amp; y != <span class=\"hljs-string\">''</span>) &#123;&#125;</code></pre></p>\n<p>写成这样会更好：<br><pre><code class=\"hljs undefined\"><span class=\"hljs-selector-tag\">if</span> (<span class=\"hljs-selector-tag\">y</span>) &#123;&#125;</code></pre></p>\n<h3 id=\"条件（三元）操作符\"><a href=\"#条件（三元）操作符\" class=\"headerlink\" title=\"条件（三元）操作符(?:)\"></a>条件（三元）操作符(<code>?:</code>)</h3><p>三元操作符用于替代下面的代码：<br><pre><code class=\"hljs undefined\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">val</span> != <span class=\"hljs-number\">0</span>) &#123;\n  <span class=\"hljs-keyword\">return</span> foo();\n&#125; <span class=\"hljs-keyword\">else</span> &#123;\n  <span class=\"hljs-keyword\">return</span> bar();\n&#125;</code></pre></p>\n<p>你可以写成：<br><pre><code class=\"hljs undefined\"><span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">val</span> ? foo() : bar();</code></pre></p>\n<p>在生成HTML代码时也是很有用的：<br><pre><code class=\"hljs undefined\">var html = <span class=\"hljs-string\">'&lt;input type=\"</span>checkbox<span class=\"hljs-string\">\"'</span> + (isChecked ? <span class=\"hljs-string\">' checked'</span> : <span class=\"hljs-string\">''</span>)+ (isEnabled ? <span class=\"hljs-string\">''</span> : <span class=\"hljs-string\">' disabled'</span>)+ <span class=\"hljs-string\">' name=\"</span>foo<span class=\"hljs-string\">\"&gt;'</span>;</code></pre></p>\n<h3 id=\"amp-amp-和\"><a href=\"#amp-amp-和\" class=\"headerlink\" title=\"&amp;&amp;和||\"></a><code>&amp;&amp;</code>和<code>||</code></h3><p>二元布尔操作符是可短路的，只有在必要的时候才会计算到最后一项。 <code>||</code>被称作为<code>default</code>操作符，因为可以这样：<br><pre><code class=\"hljs undefined\"><span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">&#123;*=&#125;</span> <span class=\"hljs-variable\">opt_win</span></span>\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\">opt_win</span>) </span>&#123;\n  <span class=\"hljs-keyword\">var</span> win;\n  <span class=\"hljs-keyword\">if</span> (opt_win) &#123;\n    win = opt_win;\n  &#125; <span class=\"hljs-keyword\">else</span> &#123;\n    win = <span class=\"hljs-built_in\">window</span>;\n  &#125;\n<span class=\"hljs-comment\">// ...</span>\n&#125;</code></pre></p>\n<p>你可以使用它来简化上面的代码：<br><pre><code class=\"hljs undefined\"><span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">&#123;*=&#125;</span> <span class=\"hljs-variable\">opt_win</span></span>\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\">opt_win</span>) </span>&#123;\n  <span class=\"hljs-keyword\">var</span> win = opt_win || <span class=\"hljs-built_in\">window</span>;\n  <span class=\"hljs-comment\">// ...</span>\n&#125;</code></pre></p>\n<h3 id=\"使用join-来创建字符串\"><a href=\"#使用join-来创建字符串\" class=\"headerlink\" title=\"使用join()来创建字符串\"></a>使用<code>join()</code>来创建字符串</h3><p>通常是这样使用的：<br><pre><code class=\"hljs undefined\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">listHtml</span><span class=\"hljs-params\">(items)</span> &#123;</span>\n  var html = <span class=\"hljs-string\">'&lt;div class=\"foo\"'</span>;\n  <span class=\"hljs-keyword\">for</span> (var <span class=\"hljs-built_in\">i</span> = <span class=\"hljs-number\">0</span>; <span class=\"hljs-built_in\">i</span> &lt; items.<span class=\"hljs-built_in\">length</span>; <span class=\"hljs-built_in\">i</span>++) &#123;\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">i</span> &gt; <span class=\"hljs-number\">0</span>) &#123;\n      html += <span class=\"hljs-string\">','</span>;\n    &#125;\n    html += itemHtml(items[<span class=\"hljs-built_in\">i</span>]);\n  &#125;\n  html += <span class=\"hljs-string\">'&lt;/div&gt;'</span>;\n  <span class=\"hljs-keyword\">return</span> html;\n&#125;</code></pre></p>\n<p>但这样在IE下非常慢，可以用下面的方式：<br><pre><code class=\"hljs undefined\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">listHtml</span><span class=\"hljs-params\">(items)</span> &#123;</span>\n  var html = [];\n  <span class=\"hljs-keyword\">for</span> (var <span class=\"hljs-built_in\">i</span> = <span class=\"hljs-number\">0</span>; <span class=\"hljs-built_in\">i</span> &lt; items.<span class=\"hljs-built_in\">length</span>; <span class=\"hljs-built_in\">i</span>++) &#123;\n    html[<span class=\"hljs-built_in\">i</span>] = itemHtml(items[<span class=\"hljs-built_in\">i</span>]);\n  &#125;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'&lt;div class=\"foo\"&gt;'</span> + html.join(<span class=\"hljs-string\">', '</span>) + <span class=\"hljs-string\">'&lt;/div&gt;'</span>;\n&#125;</code></pre></p>\n<p>你也可以使用数组作为字符串构造器，然后通过<code>myArray.join(&#39;&#39;)</code><br>转换成字符串，不过由于赋值操作快于数组的<code>push()</code>，所以尽量使用复制操作。</p>\n"},{"title":"Linux常用系统命令","date":"2017-04-21T05:10:50.000Z","_content":"\n```bash\n# uname -a # 查看内核/操作系统/CPU信息 \n# head -n 1 /etc/issue # 查看操作系统版本 \n# cat /proc/cpuinfo # 查看CPU信息 \n# hostname # 查看计算机名 \n# lspci -tv # 列出所有PCI设备 \n# lsusb -tv # 列出所有USB设备 \n# lsmod # 列出加载的内核模块 \n# env # 查看环境变量资源 \n# free -m # 查看内存使用量和交换区使用量 \n# df -h # 查看各分区使用情况 \n# du -sh <目录名> # 查看指定目录的大小 \n# grep MemTotal /proc/meminfo # 查看内存总量 \n# grep MemFree /proc/meminfo # 查看空闲内存量 \n# uptime # 查看系统运行时间、用户数、负载 \n# cat /proc/loadavg # 查看系统负载磁盘和分区 \n# mount | column -t # 查看挂接的分区状态 \n# fdisk -l # 查看所有分区 \n# swapon -s # 查看所有交换分区 \n# hdparm -i /dev/hda # 查看磁盘参数(仅适用于IDE设备) \n# dmesg | grep IDE # 查看启动时IDE设备检测状况网络 \n# ifconfig # 查看所有网络接口的属性 \n# iptables -L # 查看防火墙设置 \n# route -n # 查看路由表 \n# netstat -lntp # 查看所有监听端口 \n# netstat -antp # 查看所有已经建立的连接 \n# netstat -s # 查看网络统计信息进程 \n# ps -ef # 查看所有进程 \n# top # 实时显示进程状态用户 \n# w # 查看活动用户 \n# id <用户名> # 查看指定用户信息 \n# last # 查看用户登录日志 \n# cut -d: -f1 /etc/passwd # 查看系统所有用户 \n# cut -d: -f1 /etc/group # 查看系统所有组 \n# crontab -l # 查看当前用户的计划任务服务 \n# chkconfig –list # 列出所有系统服务 \n# chkconfig –list | grep on # 列出所有启动的系统服务程序 \n# rpm -qa # 查看所有安装的软件包\n```\n","source":"_posts/linux-command.md","raw":"---\ntitle: Linux常用系统命令\ndate: 2017-04-21 13:10:50\ntags:\n    - Linux\ncategories:\n    - 工具\n---\n\n```bash\n# uname -a # 查看内核/操作系统/CPU信息 \n# head -n 1 /etc/issue # 查看操作系统版本 \n# cat /proc/cpuinfo # 查看CPU信息 \n# hostname # 查看计算机名 \n# lspci -tv # 列出所有PCI设备 \n# lsusb -tv # 列出所有USB设备 \n# lsmod # 列出加载的内核模块 \n# env # 查看环境变量资源 \n# free -m # 查看内存使用量和交换区使用量 \n# df -h # 查看各分区使用情况 \n# du -sh <目录名> # 查看指定目录的大小 \n# grep MemTotal /proc/meminfo # 查看内存总量 \n# grep MemFree /proc/meminfo # 查看空闲内存量 \n# uptime # 查看系统运行时间、用户数、负载 \n# cat /proc/loadavg # 查看系统负载磁盘和分区 \n# mount | column -t # 查看挂接的分区状态 \n# fdisk -l # 查看所有分区 \n# swapon -s # 查看所有交换分区 \n# hdparm -i /dev/hda # 查看磁盘参数(仅适用于IDE设备) \n# dmesg | grep IDE # 查看启动时IDE设备检测状况网络 \n# ifconfig # 查看所有网络接口的属性 \n# iptables -L # 查看防火墙设置 \n# route -n # 查看路由表 \n# netstat -lntp # 查看所有监听端口 \n# netstat -antp # 查看所有已经建立的连接 \n# netstat -s # 查看网络统计信息进程 \n# ps -ef # 查看所有进程 \n# top # 实时显示进程状态用户 \n# w # 查看活动用户 \n# id <用户名> # 查看指定用户信息 \n# last # 查看用户登录日志 \n# cut -d: -f1 /etc/passwd # 查看系统所有用户 \n# cut -d: -f1 /etc/group # 查看系统所有组 \n# crontab -l # 查看当前用户的计划任务服务 \n# chkconfig –list # 列出所有系统服务 \n# chkconfig –list | grep on # 列出所有启动的系统服务程序 \n# rpm -qa # 查看所有安装的软件包\n```\n","slug":"linux-command","published":1,"updated":"2020-07-17T02:32:01.197Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcpntuhr004004oicyd8kmgd","content":"<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># uname -a # 查看内核/操作系统/CPU信息 </span>\n<span class=\"hljs-comment\"># head -n 1 /etc/issue # 查看操作系统版本 </span>\n<span class=\"hljs-comment\"># cat /proc/cpuinfo # 查看CPU信息 </span>\n<span class=\"hljs-comment\"># hostname # 查看计算机名 </span>\n<span class=\"hljs-comment\"># lspci -tv # 列出所有PCI设备 </span>\n<span class=\"hljs-comment\"># lsusb -tv # 列出所有USB设备 </span>\n<span class=\"hljs-comment\"># lsmod # 列出加载的内核模块 </span>\n<span class=\"hljs-comment\"># env # 查看环境变量资源 </span>\n<span class=\"hljs-comment\"># free -m # 查看内存使用量和交换区使用量 </span>\n<span class=\"hljs-comment\"># df -h # 查看各分区使用情况 </span>\n<span class=\"hljs-comment\"># du -sh &lt;目录名&gt; # 查看指定目录的大小 </span>\n<span class=\"hljs-comment\"># grep MemTotal /proc/meminfo # 查看内存总量 </span>\n<span class=\"hljs-comment\"># grep MemFree /proc/meminfo # 查看空闲内存量 </span>\n<span class=\"hljs-comment\"># uptime # 查看系统运行时间、用户数、负载 </span>\n<span class=\"hljs-comment\"># cat /proc/loadavg # 查看系统负载磁盘和分区 </span>\n<span class=\"hljs-comment\"># mount | column -t # 查看挂接的分区状态 </span>\n<span class=\"hljs-comment\"># fdisk -l # 查看所有分区 </span>\n<span class=\"hljs-comment\"># swapon -s # 查看所有交换分区 </span>\n<span class=\"hljs-comment\"># hdparm -i /dev/hda # 查看磁盘参数(仅适用于IDE设备) </span>\n<span class=\"hljs-comment\"># dmesg | grep IDE # 查看启动时IDE设备检测状况网络 </span>\n<span class=\"hljs-comment\"># ifconfig # 查看所有网络接口的属性 </span>\n<span class=\"hljs-comment\"># iptables -L # 查看防火墙设置 </span>\n<span class=\"hljs-comment\"># route -n # 查看路由表 </span>\n<span class=\"hljs-comment\"># netstat -lntp # 查看所有监听端口 </span>\n<span class=\"hljs-comment\"># netstat -antp # 查看所有已经建立的连接 </span>\n<span class=\"hljs-comment\"># netstat -s # 查看网络统计信息进程 </span>\n<span class=\"hljs-comment\"># ps -ef # 查看所有进程 </span>\n<span class=\"hljs-comment\"># top # 实时显示进程状态用户 </span>\n<span class=\"hljs-comment\"># w # 查看活动用户 </span>\n<span class=\"hljs-comment\"># id &lt;用户名&gt; # 查看指定用户信息 </span>\n<span class=\"hljs-comment\"># last # 查看用户登录日志 </span>\n<span class=\"hljs-comment\"># cut -d: -f1 /etc/passwd # 查看系统所有用户 </span>\n<span class=\"hljs-comment\"># cut -d: -f1 /etc/group # 查看系统所有组 </span>\n<span class=\"hljs-comment\"># crontab -l # 查看当前用户的计划任务服务 </span>\n<span class=\"hljs-comment\"># chkconfig –list # 列出所有系统服务 </span>\n<span class=\"hljs-comment\"># chkconfig –list | grep on # 列出所有启动的系统服务程序 </span>\n<span class=\"hljs-comment\"># rpm -qa # 查看所有安装的软件包</span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># uname -a # 查看内核/操作系统/CPU信息 </span>\n<span class=\"hljs-comment\"># head -n 1 /etc/issue # 查看操作系统版本 </span>\n<span class=\"hljs-comment\"># cat /proc/cpuinfo # 查看CPU信息 </span>\n<span class=\"hljs-comment\"># hostname # 查看计算机名 </span>\n<span class=\"hljs-comment\"># lspci -tv # 列出所有PCI设备 </span>\n<span class=\"hljs-comment\"># lsusb -tv # 列出所有USB设备 </span>\n<span class=\"hljs-comment\"># lsmod # 列出加载的内核模块 </span>\n<span class=\"hljs-comment\"># env # 查看环境变量资源 </span>\n<span class=\"hljs-comment\"># free -m # 查看内存使用量和交换区使用量 </span>\n<span class=\"hljs-comment\"># df -h # 查看各分区使用情况 </span>\n<span class=\"hljs-comment\"># du -sh &lt;目录名&gt; # 查看指定目录的大小 </span>\n<span class=\"hljs-comment\"># grep MemTotal /proc/meminfo # 查看内存总量 </span>\n<span class=\"hljs-comment\"># grep MemFree /proc/meminfo # 查看空闲内存量 </span>\n<span class=\"hljs-comment\"># uptime # 查看系统运行时间、用户数、负载 </span>\n<span class=\"hljs-comment\"># cat /proc/loadavg # 查看系统负载磁盘和分区 </span>\n<span class=\"hljs-comment\"># mount | column -t # 查看挂接的分区状态 </span>\n<span class=\"hljs-comment\"># fdisk -l # 查看所有分区 </span>\n<span class=\"hljs-comment\"># swapon -s # 查看所有交换分区 </span>\n<span class=\"hljs-comment\"># hdparm -i /dev/hda # 查看磁盘参数(仅适用于IDE设备) </span>\n<span class=\"hljs-comment\"># dmesg | grep IDE # 查看启动时IDE设备检测状况网络 </span>\n<span class=\"hljs-comment\"># ifconfig # 查看所有网络接口的属性 </span>\n<span class=\"hljs-comment\"># iptables -L # 查看防火墙设置 </span>\n<span class=\"hljs-comment\"># route -n # 查看路由表 </span>\n<span class=\"hljs-comment\"># netstat -lntp # 查看所有监听端口 </span>\n<span class=\"hljs-comment\"># netstat -antp # 查看所有已经建立的连接 </span>\n<span class=\"hljs-comment\"># netstat -s # 查看网络统计信息进程 </span>\n<span class=\"hljs-comment\"># ps -ef # 查看所有进程 </span>\n<span class=\"hljs-comment\"># top # 实时显示进程状态用户 </span>\n<span class=\"hljs-comment\"># w # 查看活动用户 </span>\n<span class=\"hljs-comment\"># id &lt;用户名&gt; # 查看指定用户信息 </span>\n<span class=\"hljs-comment\"># last # 查看用户登录日志 </span>\n<span class=\"hljs-comment\"># cut -d: -f1 /etc/passwd # 查看系统所有用户 </span>\n<span class=\"hljs-comment\"># cut -d: -f1 /etc/group # 查看系统所有组 </span>\n<span class=\"hljs-comment\"># crontab -l # 查看当前用户的计划任务服务 </span>\n<span class=\"hljs-comment\"># chkconfig –list # 列出所有系统服务 </span>\n<span class=\"hljs-comment\"># chkconfig –list | grep on # 列出所有启动的系统服务程序 </span>\n<span class=\"hljs-comment\"># rpm -qa # 查看所有安装的软件包</span></code></pre>\n"},{"title":"Linux环境变量配置","date":"2017-04-21T05:10:50.000Z","_content":"\n\n不论使用Linux开发，还是使用Linux生产，都不可避免环境变量的配置。通常都是去修改系统文件：`/etc/profile`, `/etc/enviroment`, `~/.bashrc`, `~/.profile`等等，在这些文件的末尾`export`上自己想要添加的环境变量，`source`一下该文件，配置就立刻生效了。\n\n今天通过阅读`/etc/profile`文件：\n```bash\n# /etc/profile: system-wide .profile file for the Bourne shell (sh(1))\n# and Bourne compatible shells (bash(1), ksh(1), ash(1), ...).\n\nif [ \"`id -u`\" -eq 0 ]; then\n  PATH=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\nelse\n  PATH=\"/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games\"\nfi\nexport PATH\n\nif [ \"$PS1\" ]; then\n  if [ \"$BASH\" ] && [ \"$BASH\" != \"/bin/sh\" ]; then\n    # The file bash.bashrc already sets the default PS1.\n    # PS1='\\h:\\w\\$ '\n    if [ -f /etc/bash.bashrc ]; then\n      . /etc/bash.bashrc\n    fi\n  else\n    if [ \"`id -u`\" -eq 0 ]; then\n      PS1='# '\n    else\n      PS1='$ '\n    fi\n  fi\nfi\n\nif [ -d /etc/profile.d ]; then\n  for i in /etc/profile.d/*.sh; do\n    if [ -r $i ]; then\n      . $i\n    fi\n  done\n  unset i\nfi\n```\n发现最后一个`for`循环，其作用是搜用`/etc/profile.d`下的所有的`.sh`结尾的可执行文件，并运行。\n因此，我们就可以根据不同的功能编写不同的可执行文件，将他们放到`/etc/profile.d`下，如`jdk.sh`，`ant.sh`，`maven.sh`等等。\n","source":"_posts/linux-profile.md","raw":"---\ntitle: Linux环境变量配置\ndate: 2017-04-21 13:10:50\ntags:\n    - Linux\ncategories:\n    - 工具\n---\n\n\n不论使用Linux开发，还是使用Linux生产，都不可避免环境变量的配置。通常都是去修改系统文件：`/etc/profile`, `/etc/enviroment`, `~/.bashrc`, `~/.profile`等等，在这些文件的末尾`export`上自己想要添加的环境变量，`source`一下该文件，配置就立刻生效了。\n\n今天通过阅读`/etc/profile`文件：\n```bash\n# /etc/profile: system-wide .profile file for the Bourne shell (sh(1))\n# and Bourne compatible shells (bash(1), ksh(1), ash(1), ...).\n\nif [ \"`id -u`\" -eq 0 ]; then\n  PATH=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\nelse\n  PATH=\"/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games\"\nfi\nexport PATH\n\nif [ \"$PS1\" ]; then\n  if [ \"$BASH\" ] && [ \"$BASH\" != \"/bin/sh\" ]; then\n    # The file bash.bashrc already sets the default PS1.\n    # PS1='\\h:\\w\\$ '\n    if [ -f /etc/bash.bashrc ]; then\n      . /etc/bash.bashrc\n    fi\n  else\n    if [ \"`id -u`\" -eq 0 ]; then\n      PS1='# '\n    else\n      PS1='$ '\n    fi\n  fi\nfi\n\nif [ -d /etc/profile.d ]; then\n  for i in /etc/profile.d/*.sh; do\n    if [ -r $i ]; then\n      . $i\n    fi\n  done\n  unset i\nfi\n```\n发现最后一个`for`循环，其作用是搜用`/etc/profile.d`下的所有的`.sh`结尾的可执行文件，并运行。\n因此，我们就可以根据不同的功能编写不同的可执行文件，将他们放到`/etc/profile.d`下，如`jdk.sh`，`ant.sh`，`maven.sh`等等。\n","slug":"linux-profile","published":1,"updated":"2020-07-17T02:32:01.198Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcpntuht004304oifkhkm83y","content":"<p>不论使用Linux开发，还是使用Linux生产，都不可避免环境变量的配置。通常都是去修改系统文件：<code>/etc/profile</code>, <code>/etc/enviroment</code>, <code>~/.bashrc</code>, <code>~/.profile</code>等等，在这些文件的末尾<code>export</code>上自己想要添加的环境变量，<code>source</code>一下该文件，配置就立刻生效了。</p>\n<p>今天通过阅读<code>/etc/profile</code>文件：<br><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># /etc/profile: system-wide .profile file for the Bourne shell (sh(1))</span>\n<span class=\"hljs-comment\"># and Bourne compatible shells (bash(1), ksh(1), ash(1), ...).</span>\n\n<span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-string\">\"`id -u`\"</span> -eq 0 ]; <span class=\"hljs-keyword\">then</span>\n  PATH=<span class=\"hljs-string\">\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"</span>\n<span class=\"hljs-keyword\">else</span>\n  PATH=<span class=\"hljs-string\">\"/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games\"</span>\n<span class=\"hljs-keyword\">fi</span>\n<span class=\"hljs-built_in\">export</span> PATH\n\n<span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$PS1</span>\"</span> ]; <span class=\"hljs-keyword\">then</span>\n  <span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$BASH</span>\"</span> ] &amp;&amp; [ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$BASH</span>\"</span> != <span class=\"hljs-string\">\"/bin/sh\"</span> ]; <span class=\"hljs-keyword\">then</span>\n    <span class=\"hljs-comment\"># The file bash.bashrc already sets the default PS1.</span>\n    <span class=\"hljs-comment\"># PS1='\\h:\\w\\$ '</span>\n    <span class=\"hljs-keyword\">if</span> [ -f /etc/bash.bashrc ]; <span class=\"hljs-keyword\">then</span>\n      . /etc/bash.bashrc\n    <span class=\"hljs-keyword\">fi</span>\n  <span class=\"hljs-keyword\">else</span>\n    <span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-string\">\"`id -u`\"</span> -eq 0 ]; <span class=\"hljs-keyword\">then</span>\n      PS1=<span class=\"hljs-string\">'# '</span>\n    <span class=\"hljs-keyword\">else</span>\n      PS1=<span class=\"hljs-string\">'$ '</span>\n    <span class=\"hljs-keyword\">fi</span>\n  <span class=\"hljs-keyword\">fi</span>\n<span class=\"hljs-keyword\">fi</span>\n\n<span class=\"hljs-keyword\">if</span> [ -d /etc/profile.d ]; <span class=\"hljs-keyword\">then</span>\n  <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> /etc/profile.d/*.sh; <span class=\"hljs-keyword\">do</span>\n    <span class=\"hljs-keyword\">if</span> [ -r <span class=\"hljs-variable\">$i</span> ]; <span class=\"hljs-keyword\">then</span>\n      . <span class=\"hljs-variable\">$i</span>\n    <span class=\"hljs-keyword\">fi</span>\n  <span class=\"hljs-keyword\">done</span>\n  <span class=\"hljs-built_in\">unset</span> i\n<span class=\"hljs-keyword\">fi</span></code></pre></p>\n<p>发现最后一个<code>for</code>循环，其作用是搜用<code>/etc/profile.d</code>下的所有的<code>.sh</code>结尾的可执行文件，并运行。<br>因此，我们就可以根据不同的功能编写不同的可执行文件，将他们放到<code>/etc/profile.d</code>下，如<code>jdk.sh</code>，<code>ant.sh</code>，<code>maven.sh</code>等等。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>不论使用Linux开发，还是使用Linux生产，都不可避免环境变量的配置。通常都是去修改系统文件：<code>/etc/profile</code>, <code>/etc/enviroment</code>, <code>~/.bashrc</code>, <code>~/.profile</code>等等，在这些文件的末尾<code>export</code>上自己想要添加的环境变量，<code>source</code>一下该文件，配置就立刻生效了。</p>\n<p>今天通过阅读<code>/etc/profile</code>文件：<br><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># /etc/profile: system-wide .profile file for the Bourne shell (sh(1))</span>\n<span class=\"hljs-comment\"># and Bourne compatible shells (bash(1), ksh(1), ash(1), ...).</span>\n\n<span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-string\">\"`id -u`\"</span> -eq 0 ]; <span class=\"hljs-keyword\">then</span>\n  PATH=<span class=\"hljs-string\">\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"</span>\n<span class=\"hljs-keyword\">else</span>\n  PATH=<span class=\"hljs-string\">\"/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games\"</span>\n<span class=\"hljs-keyword\">fi</span>\n<span class=\"hljs-built_in\">export</span> PATH\n\n<span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$PS1</span>\"</span> ]; <span class=\"hljs-keyword\">then</span>\n  <span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$BASH</span>\"</span> ] &amp;&amp; [ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$BASH</span>\"</span> != <span class=\"hljs-string\">\"/bin/sh\"</span> ]; <span class=\"hljs-keyword\">then</span>\n    <span class=\"hljs-comment\"># The file bash.bashrc already sets the default PS1.</span>\n    <span class=\"hljs-comment\"># PS1='\\h:\\w\\$ '</span>\n    <span class=\"hljs-keyword\">if</span> [ -f /etc/bash.bashrc ]; <span class=\"hljs-keyword\">then</span>\n      . /etc/bash.bashrc\n    <span class=\"hljs-keyword\">fi</span>\n  <span class=\"hljs-keyword\">else</span>\n    <span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-string\">\"`id -u`\"</span> -eq 0 ]; <span class=\"hljs-keyword\">then</span>\n      PS1=<span class=\"hljs-string\">'# '</span>\n    <span class=\"hljs-keyword\">else</span>\n      PS1=<span class=\"hljs-string\">'$ '</span>\n    <span class=\"hljs-keyword\">fi</span>\n  <span class=\"hljs-keyword\">fi</span>\n<span class=\"hljs-keyword\">fi</span>\n\n<span class=\"hljs-keyword\">if</span> [ -d /etc/profile.d ]; <span class=\"hljs-keyword\">then</span>\n  <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> /etc/profile.d/*.sh; <span class=\"hljs-keyword\">do</span>\n    <span class=\"hljs-keyword\">if</span> [ -r <span class=\"hljs-variable\">$i</span> ]; <span class=\"hljs-keyword\">then</span>\n      . <span class=\"hljs-variable\">$i</span>\n    <span class=\"hljs-keyword\">fi</span>\n  <span class=\"hljs-keyword\">done</span>\n  <span class=\"hljs-built_in\">unset</span> i\n<span class=\"hljs-keyword\">fi</span></code></pre></p>\n<p>发现最后一个<code>for</code>循环，其作用是搜用<code>/etc/profile.d</code>下的所有的<code>.sh</code>结尾的可执行文件，并运行。<br>因此，我们就可以根据不同的功能编写不同的可执行文件，将他们放到<code>/etc/profile.d</code>下，如<code>jdk.sh</code>，<code>ant.sh</code>，<code>maven.sh</code>等等。</p>\n"},{"title":"MySQL修改root密码的多种方法","date":"2017-04-21T05:10:50.000Z","_content":"\n方法1： 用SET PASSWORD命令\n```\n　　mysql -u root\n　　mysql> SET PASSWORD FOR 'root'@'localhost' = PASSWORD('newpass');\n```\n方法2：用mysqladmin\n```\n　　mysqladmin -u root password \"newpass\"\n　　如果root已经设置过密码，采用如下方法\n　　mysqladmin -u root password oldpass \"newpass\"\n```\n方法3： 用UPDATE直接编辑user表\n```\n　　mysql -u root\n　　mysql> use mysql;\n　　mysql> UPDATE user SET Password = PASSWORD('newpass') WHERE user = 'root';\n　　mysql> FLUSH PRIVILEGES;\n```\n在丢失root密码的时候，可以这样\n```\n　　mysqld_safe --skip-grant-tables&\n　　mysql -u root mysql\n　　mysql> UPDATE user SET password=PASSWORD(\"new password\") WHERE user='root';\n　　mysql> FLUSH PRIVILEGES;\n```\n","source":"_posts/mysql-password.md","raw":"---\ntitle: MySQL修改root密码的多种方法\ndate: 2017-04-21 13:10:50\ntags: \n    - MySQL\ncategories:\n    - 工具\n---\n\n方法1： 用SET PASSWORD命令\n```\n　　mysql -u root\n　　mysql> SET PASSWORD FOR 'root'@'localhost' = PASSWORD('newpass');\n```\n方法2：用mysqladmin\n```\n　　mysqladmin -u root password \"newpass\"\n　　如果root已经设置过密码，采用如下方法\n　　mysqladmin -u root password oldpass \"newpass\"\n```\n方法3： 用UPDATE直接编辑user表\n```\n　　mysql -u root\n　　mysql> use mysql;\n　　mysql> UPDATE user SET Password = PASSWORD('newpass') WHERE user = 'root';\n　　mysql> FLUSH PRIVILEGES;\n```\n在丢失root密码的时候，可以这样\n```\n　　mysqld_safe --skip-grant-tables&\n　　mysql -u root mysql\n　　mysql> UPDATE user SET password=PASSWORD(\"new password\") WHERE user='root';\n　　mysql> FLUSH PRIVILEGES;\n```\n","slug":"mysql-password","published":1,"updated":"2020-07-17T02:32:01.201Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcpntuhw004704oiw2kcaxek","content":"<p>方法1： 用SET PASSWORD命令<br><pre><code class=\"hljs undefined\">　　mysql -u root\n　　mysql&gt; <span class=\"hljs-keyword\">SET</span> PASSWORD <span class=\"hljs-comment\">FOR</span> <span class=\"hljs-comment\">'root'</span><span class=\"hljs-comment\">@</span><span class=\"hljs-comment\">'localhost'</span><span class=\"hljs-comment\"> = PASSWORD(</span><span class=\"hljs-comment\">'newpass'</span><span class=\"hljs-comment\">)</span>;</code></pre></p>\n<p>方法2：用mysqladmin<br><pre><code class=\"hljs undefined\">　　mysqladmin -u<span class=\"hljs-built_in\"> root</span> password <span class=\"hljs-string\">\"newpass\"</span>\n　　如<span class=\"hljs-built_in\">果root</span>已经设置过密码，采用如下方法\n　　mysqladmin -u<span class=\"hljs-built_in\"> root</span> password oldpass <span class=\"hljs-string\">\"newpass\"</span></code></pre></p>\n<p>方法3： 用UPDATE直接编辑user表<br><pre><code class=\"hljs undefined\">　　mysql -u root\n　　mysql&gt; use mysql;\n　　mysql&gt; UPDATE<span class=\"hljs-built_in\"> user </span><span class=\"hljs-builtin-name\">SET</span> Password = PASSWORD(<span class=\"hljs-string\">'newpass'</span>) WHERE<span class=\"hljs-built_in\"> user </span>= <span class=\"hljs-string\">'root'</span>;\n　　mysql&gt; FLUSH PRIVILEGES;</code></pre></p>\n<p>在丢失root密码的时候，可以这样<br><pre><code class=\"hljs undefined\">　　mysqld_safe --skip-grant-tables&amp;\n　　mysql -u root mysql\n　　mysql&gt; UPDATE<span class=\"hljs-built_in\"> user </span><span class=\"hljs-builtin-name\">SET</span> <span class=\"hljs-attribute\">password</span>=PASSWORD(\"new password<span class=\"hljs-string\">\") WHERE user='root';\n　　mysql&gt; FLUSH PRIVILEGES;</span></code></pre></p>\n","site":{"data":{}},"excerpt":"","more":"<p>方法1： 用SET PASSWORD命令<br><pre><code class=\"hljs undefined\">　　mysql -u root\n　　mysql&gt; <span class=\"hljs-keyword\">SET</span> PASSWORD <span class=\"hljs-comment\">FOR</span> <span class=\"hljs-comment\">'root'</span><span class=\"hljs-comment\">@</span><span class=\"hljs-comment\">'localhost'</span><span class=\"hljs-comment\"> = PASSWORD(</span><span class=\"hljs-comment\">'newpass'</span><span class=\"hljs-comment\">)</span>;</code></pre></p>\n<p>方法2：用mysqladmin<br><pre><code class=\"hljs undefined\">　　mysqladmin -u<span class=\"hljs-built_in\"> root</span> password <span class=\"hljs-string\">\"newpass\"</span>\n　　如<span class=\"hljs-built_in\">果root</span>已经设置过密码，采用如下方法\n　　mysqladmin -u<span class=\"hljs-built_in\"> root</span> password oldpass <span class=\"hljs-string\">\"newpass\"</span></code></pre></p>\n<p>方法3： 用UPDATE直接编辑user表<br><pre><code class=\"hljs undefined\">　　mysql -u root\n　　mysql&gt; use mysql;\n　　mysql&gt; UPDATE<span class=\"hljs-built_in\"> user </span><span class=\"hljs-builtin-name\">SET</span> Password = PASSWORD(<span class=\"hljs-string\">'newpass'</span>) WHERE<span class=\"hljs-built_in\"> user </span>= <span class=\"hljs-string\">'root'</span>;\n　　mysql&gt; FLUSH PRIVILEGES;</code></pre></p>\n<p>在丢失root密码的时候，可以这样<br><pre><code class=\"hljs undefined\">　　mysqld_safe --skip-grant-tables&amp;\n　　mysql -u root mysql\n　　mysql&gt; UPDATE<span class=\"hljs-built_in\"> user </span><span class=\"hljs-builtin-name\">SET</span> <span class=\"hljs-attribute\">password</span>=PASSWORD(\"new password<span class=\"hljs-string\">\") WHERE user='root';\n　　mysql&gt; FLUSH PRIVILEGES;</span></code></pre></p>\n"},{"title":"记一次线上问题的排查过程","date":"2018-04-04T16:00:00.000Z","_content":"\n# 问题\n\nXX系统中，一个用户需要维护的项目数过多，填写的任务数超多，产生了一次工时保存中，只有前面一部分的xx数据持久化到数据库，后面的数据没有保存。\n\n`图1`\n\n![](http://ww1.sinaimg.cn/large/806e3151ly1fptj4uwnnuj21200i8gm5.jpg)\n\n\n# 排查过程\n\n## 1.增加日志，监控参数信息\n\n首先想到的是否后面部分的数据在保存过程中发生了异常。排查异常日志，发现没有该问题存在。\n\n然后增加方法参数信息日志，数据参数信息。发现参数集合size=200，前端发送集合size=400。判断问题可以能是因为服务器容器环境(Nginx+Tomcat)导致\n\n## 2.开发环境问题重现\n\n### 2.1 模拟数据\n\n在测试环境模拟线上数据。如`图1`\n\n### 2.2 只配置Tomcat\n\n在idea中直接启动tomcat，无nginx环境，如果没有问题，则可暂时确定为nginx问题。\n\n然而，在过程中发现了新的问题。 \n\n```\norg.springframework.beans.InvalidPropertyException: Invalid property 'detail[256]' of bean class [com.suning.asvp.mer.entity.InviteCooperationInfo]: Index of out of bounds in property path 'detail[256]'; nested exception is java.lang.IndexOutOfBoundsException: Index: 256, Size: 256  \n    at org.springframework.beans.BeanWrapperImpl.getPropertyValue(BeanWrapperImpl.java:833) ~[spring-beans-3.1.2.RELEASE.jar:3.1.2.RELEASE]  \n    at org.springframework.beans.BeanWrapperImpl.getNestedBeanWrapper(BeanWrapperImpl.java:576) ~[spring-beans-3.1.2.RELEASE.jar:3.1.2.RELEASE]  \n    at org.springframework.beans.BeanWrapperImpl.getBeanWrapperForPropertyPath(BeanWrapperImpl.java:553) ~[spring-beans-3.1.2.RELEASE.jar:3.1.2.RELEASE]  \n    at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:914) ~[spring-beans-3.1.2.RELEASE.jar:3.1.2.RELEASE]  \n    at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:76) ~[spring-beans-3.1.2.RELEASE.jar:3.1.2.RELEASE]  \n    at org.springframework.validation.DataBinder.applyPropertyValues(DataBinder.java:692) ~[spring-context-3.1.2.RELEASE.jar:3.1.2.RELEASE]  \n    at org.springframework.validation.DataBinder.doBind(DataBinder.java:588) ~[spring-context-3.1.2.RELEASE.jar:3.1.2.RELEASE]  \n    at org.springframework.web.bind.WebDataBinder.doBind(WebDataBinder.java:191) ~[spring-web-3.1.2.RELEASE.jar:3.1.2.RELEASE]  \n    at org.springframework.web.bind.ServletRequestDataBinder.bind(ServletRequestDataBinder.java:112) ~[spring-web-3.1.2.RELEASE.jar:3.1.2.RELEASE] \n```\n\n查看BeanWrapperImpl源码\n```\nelse if (value instanceof List) {  \n    int index = Integer.parseInt(key);                        \n    List list = (List) value;  \n    growCollectionIfNecessary(list, index, indexedPropertyName, pd, i + 1);                       \n    value = list.get(index);// 测试报错时，此处list只有256个，index为256时，取第257个报错  \n}  \n```\n\n```\n@SuppressWarnings(\"unchecked\")  \n    private void growCollectionIfNecessary(  \n            Collection collection, int index, String name, PropertyDescriptor pd, int nestingLevel) {  \n  \n  \n        if (!this.autoGrowNestedPaths) {  \n            return;  \n        }  \n        int size = collection.size();  \n        // 当个数小于autoGrowCollectionLimit这个值时才会向list中添加新元素  \n        if (index >= size && index < this.autoGrowCollectionLimit) {  \n            Class elementType = GenericCollectionTypeResolver.getCollectionReturnType(pd.getReadMethod(), nestingLevel);  \n            if (elementType != null) {  \n                for (int i = collection.size(); i < index + 1; i++) {  \n                    collection.add(newValue(elementType, name));  \n                }  \n            }  \n        }  \n    }  \n```\n\n根据上面的分析找到autoGrowCollectionLimit的定义\n\n```\npublic class DataBinder implements PropertyEditorRegistry, TypeConverter {  \n  \n    /** Default object name used for binding: \"target\" */  \n    public static final String DEFAULT_OBJECT_NAME = \"target\";  \n  \n    /** Default limit for array and collection growing: 256 */  \n    public static final int DEFAULT_AUTO_GROW_COLLECTION_LIMIT = 256;  \n  \n    private int autoGrowCollectionLimit = DEFAULT_AUTO_GROW_COLLECTION_LIMIT; \n```\n\n解决方案，是在自己的Controller中加入如下方法\n\n```\n@InitBinder  \nprotected void initBinder(WebDataBinder binder) {  \n    binder.setAutoGrowNestedPaths(true);  \n    binder.setAutoGrowCollectionLimit(1024);  \n}  \n```\n\n==**BUT** 这个问题和线上的不同，只能算是意外收获。革命尚未成功，同志仍需努力！！！！==\n\n### 2.3 增加Nginx\n经过2.2的奋斗，暂时判定是否为Nginx post请求参数做了限制。嗯，开搞~ 在开发环境配置Nginx代理，过程略·····\n\nnginx.conf 如下\n```\nupstream xxxxxxx {\n\tserver 127.0.0.1:8080  weight=10 max_fails=2 fail_timeout=30s ;\n}\n\nserver {\n    listen       80;\n    server_name  xxxxxxx.com;\n    client_max_body_size 100M;  # 配置post size\n    \n    #charset koi8-r;\n  \n    #access_log  logs/host.access.log  main;\n\t\n   location / {\n\t\t#proxy_next_upstream     http_500 http_502 http_503 http_504 error timeout invalid_header;\n\t\tproxy_set_header        Host  $host;\n\t\tproxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;\n\t\tproxy_pass              http://xxxxxxx;\n\t\texpires                 0;\n\t}\n}\n```\n\n对于`client_max_body_size 100M;`，网上都是与文件上传相关的。不过都是通过post， request body的方式上传数据，所以通用。\n\n测试~~\n\n功能正常，没有重现线上问题。 哭死~~~\n\n革命还要继续~~\n\n### 2.4 Tomcat post设置\n\n去线上服务器拉去配置\n\n```\n<Connector port=\"1601\" maxParameterCount=\"1000\" protocol=\"HTTP/1.1\" redirectPort=\"8443\" maxSpareThreads=\"750\" maxThreads=\"1000\" minSpareTHreads=\"50\" acceptCount=\"1000\" connectionTimeout=\"20000\" URIEncoding=\"utf-8\"/>\n```\n\n经分析，发现线上没有body size的配置，却有`maxParameterCount=\"1000\"`。该参数为限制请求的参数个数，从而变相限制body size。\n\n在开发环境配置该参数，测试，**问题重现**。\n\n\n## 3. 解决\n\n问题原因定位好了，剩下的就是如何解决了。\n\n两个方案：\n\n- 修改线上配置\n  \n    *该上实施难度系数高，因为公司使用的统一发布部署平台，开发人员无服务器操作权限。*\n\n- 修改代码\n    \n    *修改保存逻辑，分片存储*\n\n\n# 总结\n\n问题排查，需要先对整体有个把握，然后分析影响范围。不能钻牛角尖，采用西医“头疼医头”的方式。有可能最后结果还是要医头，但此时的医头已经是建立在中医的辩证主义上，对症下药。\n","source":"_posts/online-question-resolve.md","raw":"---\ntitle: 记一次线上问题的排查过程\ndate: 2018-04-05\ntags: \n    - Nginx\n    - Tomcat\ncategories:\n    - 工具\n---\n\n# 问题\n\nXX系统中，一个用户需要维护的项目数过多，填写的任务数超多，产生了一次工时保存中，只有前面一部分的xx数据持久化到数据库，后面的数据没有保存。\n\n`图1`\n\n![](http://ww1.sinaimg.cn/large/806e3151ly1fptj4uwnnuj21200i8gm5.jpg)\n\n\n# 排查过程\n\n## 1.增加日志，监控参数信息\n\n首先想到的是否后面部分的数据在保存过程中发生了异常。排查异常日志，发现没有该问题存在。\n\n然后增加方法参数信息日志，数据参数信息。发现参数集合size=200，前端发送集合size=400。判断问题可以能是因为服务器容器环境(Nginx+Tomcat)导致\n\n## 2.开发环境问题重现\n\n### 2.1 模拟数据\n\n在测试环境模拟线上数据。如`图1`\n\n### 2.2 只配置Tomcat\n\n在idea中直接启动tomcat，无nginx环境，如果没有问题，则可暂时确定为nginx问题。\n\n然而，在过程中发现了新的问题。 \n\n```\norg.springframework.beans.InvalidPropertyException: Invalid property 'detail[256]' of bean class [com.suning.asvp.mer.entity.InviteCooperationInfo]: Index of out of bounds in property path 'detail[256]'; nested exception is java.lang.IndexOutOfBoundsException: Index: 256, Size: 256  \n    at org.springframework.beans.BeanWrapperImpl.getPropertyValue(BeanWrapperImpl.java:833) ~[spring-beans-3.1.2.RELEASE.jar:3.1.2.RELEASE]  \n    at org.springframework.beans.BeanWrapperImpl.getNestedBeanWrapper(BeanWrapperImpl.java:576) ~[spring-beans-3.1.2.RELEASE.jar:3.1.2.RELEASE]  \n    at org.springframework.beans.BeanWrapperImpl.getBeanWrapperForPropertyPath(BeanWrapperImpl.java:553) ~[spring-beans-3.1.2.RELEASE.jar:3.1.2.RELEASE]  \n    at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:914) ~[spring-beans-3.1.2.RELEASE.jar:3.1.2.RELEASE]  \n    at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:76) ~[spring-beans-3.1.2.RELEASE.jar:3.1.2.RELEASE]  \n    at org.springframework.validation.DataBinder.applyPropertyValues(DataBinder.java:692) ~[spring-context-3.1.2.RELEASE.jar:3.1.2.RELEASE]  \n    at org.springframework.validation.DataBinder.doBind(DataBinder.java:588) ~[spring-context-3.1.2.RELEASE.jar:3.1.2.RELEASE]  \n    at org.springframework.web.bind.WebDataBinder.doBind(WebDataBinder.java:191) ~[spring-web-3.1.2.RELEASE.jar:3.1.2.RELEASE]  \n    at org.springframework.web.bind.ServletRequestDataBinder.bind(ServletRequestDataBinder.java:112) ~[spring-web-3.1.2.RELEASE.jar:3.1.2.RELEASE] \n```\n\n查看BeanWrapperImpl源码\n```\nelse if (value instanceof List) {  \n    int index = Integer.parseInt(key);                        \n    List list = (List) value;  \n    growCollectionIfNecessary(list, index, indexedPropertyName, pd, i + 1);                       \n    value = list.get(index);// 测试报错时，此处list只有256个，index为256时，取第257个报错  \n}  \n```\n\n```\n@SuppressWarnings(\"unchecked\")  \n    private void growCollectionIfNecessary(  \n            Collection collection, int index, String name, PropertyDescriptor pd, int nestingLevel) {  \n  \n  \n        if (!this.autoGrowNestedPaths) {  \n            return;  \n        }  \n        int size = collection.size();  \n        // 当个数小于autoGrowCollectionLimit这个值时才会向list中添加新元素  \n        if (index >= size && index < this.autoGrowCollectionLimit) {  \n            Class elementType = GenericCollectionTypeResolver.getCollectionReturnType(pd.getReadMethod(), nestingLevel);  \n            if (elementType != null) {  \n                for (int i = collection.size(); i < index + 1; i++) {  \n                    collection.add(newValue(elementType, name));  \n                }  \n            }  \n        }  \n    }  \n```\n\n根据上面的分析找到autoGrowCollectionLimit的定义\n\n```\npublic class DataBinder implements PropertyEditorRegistry, TypeConverter {  \n  \n    /** Default object name used for binding: \"target\" */  \n    public static final String DEFAULT_OBJECT_NAME = \"target\";  \n  \n    /** Default limit for array and collection growing: 256 */  \n    public static final int DEFAULT_AUTO_GROW_COLLECTION_LIMIT = 256;  \n  \n    private int autoGrowCollectionLimit = DEFAULT_AUTO_GROW_COLLECTION_LIMIT; \n```\n\n解决方案，是在自己的Controller中加入如下方法\n\n```\n@InitBinder  \nprotected void initBinder(WebDataBinder binder) {  \n    binder.setAutoGrowNestedPaths(true);  \n    binder.setAutoGrowCollectionLimit(1024);  \n}  \n```\n\n==**BUT** 这个问题和线上的不同，只能算是意外收获。革命尚未成功，同志仍需努力！！！！==\n\n### 2.3 增加Nginx\n经过2.2的奋斗，暂时判定是否为Nginx post请求参数做了限制。嗯，开搞~ 在开发环境配置Nginx代理，过程略·····\n\nnginx.conf 如下\n```\nupstream xxxxxxx {\n\tserver 127.0.0.1:8080  weight=10 max_fails=2 fail_timeout=30s ;\n}\n\nserver {\n    listen       80;\n    server_name  xxxxxxx.com;\n    client_max_body_size 100M;  # 配置post size\n    \n    #charset koi8-r;\n  \n    #access_log  logs/host.access.log  main;\n\t\n   location / {\n\t\t#proxy_next_upstream     http_500 http_502 http_503 http_504 error timeout invalid_header;\n\t\tproxy_set_header        Host  $host;\n\t\tproxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;\n\t\tproxy_pass              http://xxxxxxx;\n\t\texpires                 0;\n\t}\n}\n```\n\n对于`client_max_body_size 100M;`，网上都是与文件上传相关的。不过都是通过post， request body的方式上传数据，所以通用。\n\n测试~~\n\n功能正常，没有重现线上问题。 哭死~~~\n\n革命还要继续~~\n\n### 2.4 Tomcat post设置\n\n去线上服务器拉去配置\n\n```\n<Connector port=\"1601\" maxParameterCount=\"1000\" protocol=\"HTTP/1.1\" redirectPort=\"8443\" maxSpareThreads=\"750\" maxThreads=\"1000\" minSpareTHreads=\"50\" acceptCount=\"1000\" connectionTimeout=\"20000\" URIEncoding=\"utf-8\"/>\n```\n\n经分析，发现线上没有body size的配置，却有`maxParameterCount=\"1000\"`。该参数为限制请求的参数个数，从而变相限制body size。\n\n在开发环境配置该参数，测试，**问题重现**。\n\n\n## 3. 解决\n\n问题原因定位好了，剩下的就是如何解决了。\n\n两个方案：\n\n- 修改线上配置\n  \n    *该上实施难度系数高，因为公司使用的统一发布部署平台，开发人员无服务器操作权限。*\n\n- 修改代码\n    \n    *修改保存逻辑，分片存储*\n\n\n# 总结\n\n问题排查，需要先对整体有个把握，然后分析影响范围。不能钻牛角尖，采用西医“头疼医头”的方式。有可能最后结果还是要医头，但此时的医头已经是建立在中医的辩证主义上，对症下药。\n","slug":"online-question-resolve","published":1,"updated":"2020-07-17T02:32:01.202Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcpntuhy004a04oiuhcczq7p","content":"<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>XX系统中，一个用户需要维护的项目数过多，填写的任务数超多，产生了一次工时保存中，只有前面一部分的xx数据持久化到数据库，后面的数据没有保存。</p>\n<p><code>图1</code></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/806e3151ly1fptj4uwnnuj21200i8gm5.jpg\" srcset=\"/img/loading.gif\" alt></p>\n<h1 id=\"排查过程\"><a href=\"#排查过程\" class=\"headerlink\" title=\"排查过程\"></a>排查过程</h1><h2 id=\"1-增加日志，监控参数信息\"><a href=\"#1-增加日志，监控参数信息\" class=\"headerlink\" title=\"1.增加日志，监控参数信息\"></a>1.增加日志，监控参数信息</h2><p>首先想到的是否后面部分的数据在保存过程中发生了异常。排查异常日志，发现没有该问题存在。</p>\n<p>然后增加方法参数信息日志，数据参数信息。发现参数集合size=200，前端发送集合size=400。判断问题可以能是因为服务器容器环境(Nginx+Tomcat)导致</p>\n<h2 id=\"2-开发环境问题重现\"><a href=\"#2-开发环境问题重现\" class=\"headerlink\" title=\"2.开发环境问题重现\"></a>2.开发环境问题重现</h2><h3 id=\"2-1-模拟数据\"><a href=\"#2-1-模拟数据\" class=\"headerlink\" title=\"2.1 模拟数据\"></a>2.1 模拟数据</h3><p>在测试环境模拟线上数据。如<code>图1</code></p>\n<h3 id=\"2-2-只配置Tomcat\"><a href=\"#2-2-只配置Tomcat\" class=\"headerlink\" title=\"2.2 只配置Tomcat\"></a>2.2 只配置Tomcat</h3><p>在idea中直接启动tomcat，无nginx环境，如果没有问题，则可暂时确定为nginx问题。</p>\n<p>然而，在过程中发现了新的问题。 </p>\n<pre><code class=\"hljs undefined\"><span class=\"hljs-keyword\">org.springframework.beans.InvalidPropertyException: </span>Invalid property <span class=\"hljs-string\">'detail[256]'</span> of <span class=\"hljs-keyword\">bean </span>class [com.suning.asvp.mer.entity.InviteCooperationInfo]: Index of out of <span class=\"hljs-keyword\">bounds </span>in property path <span class=\"hljs-string\">'detail[256]'</span><span class=\"hljs-comment\">; nested exception is java.lang.IndexOutOfBoundsException: Index: 256, Size: 256  </span>\n    <span class=\"hljs-built_in\">at</span> <span class=\"hljs-keyword\">org.springframework.beans.BeanWrapperImpl.getPropertyValue(BeanWrapperImpl.java:833) </span>~[spring-<span class=\"hljs-keyword\">beans-3.1.2.RELEASE.jar:3.1.2.RELEASE] </span> \n    <span class=\"hljs-built_in\">at</span> <span class=\"hljs-keyword\">org.springframework.beans.BeanWrapperImpl.getNestedBeanWrapper(BeanWrapperImpl.java:576) </span>~[spring-<span class=\"hljs-keyword\">beans-3.1.2.RELEASE.jar:3.1.2.RELEASE] </span> \n    <span class=\"hljs-built_in\">at</span> <span class=\"hljs-keyword\">org.springframework.beans.BeanWrapperImpl.getBeanWrapperForPropertyPath(BeanWrapperImpl.java:553) </span>~[spring-<span class=\"hljs-keyword\">beans-3.1.2.RELEASE.jar:3.1.2.RELEASE] </span> \n    <span class=\"hljs-built_in\">at</span> <span class=\"hljs-keyword\">org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:914) </span>~[spring-<span class=\"hljs-keyword\">beans-3.1.2.RELEASE.jar:3.1.2.RELEASE] </span> \n    <span class=\"hljs-built_in\">at</span> <span class=\"hljs-keyword\">org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:76) </span>~[spring-<span class=\"hljs-keyword\">beans-3.1.2.RELEASE.jar:3.1.2.RELEASE] </span> \n    <span class=\"hljs-built_in\">at</span> <span class=\"hljs-keyword\">org.springframework.validation.DataBinder.applyPropertyValues(DataBinder.java:692) </span>~[spring-<span class=\"hljs-built_in\">context</span><span class=\"hljs-number\">-3</span>.<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">2</span>.RELEASE.<span class=\"hljs-keyword\">jar:3.1.2.RELEASE] </span> \n    <span class=\"hljs-built_in\">at</span> <span class=\"hljs-keyword\">org.springframework.validation.DataBinder.doBind(DataBinder.java:588) </span>~[spring-<span class=\"hljs-built_in\">context</span><span class=\"hljs-number\">-3</span>.<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">2</span>.RELEASE.<span class=\"hljs-keyword\">jar:3.1.2.RELEASE] </span> \n    <span class=\"hljs-built_in\">at</span> <span class=\"hljs-keyword\">org.springframework.web.bind.WebDataBinder.doBind(WebDataBinder.java:191) </span>~[spring-web<span class=\"hljs-number\">-3</span>.<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">2</span>.RELEASE.<span class=\"hljs-keyword\">jar:3.1.2.RELEASE] </span> \n    <span class=\"hljs-built_in\">at</span> <span class=\"hljs-keyword\">org.springframework.web.bind.ServletRequestDataBinder.bind(ServletRequestDataBinder.java:112) </span>~[spring-web<span class=\"hljs-number\">-3</span>.<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">2</span>.RELEASE.<span class=\"hljs-keyword\">jar:3.1.2.RELEASE]</span></code></pre>\n<p>查看BeanWrapperImpl源码<br><pre><code class=\"hljs undefined\"><span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">value</span> instanceof List) &#123;  \n    <span class=\"hljs-built_in\">int</span> <span class=\"hljs-built_in\">index</span> = <span class=\"hljs-keyword\">Integer</span>.parseInt(key);                        \n    List list = (List) <span class=\"hljs-keyword\">value</span>;  \n    growCollectionIfNecessary(list, <span class=\"hljs-built_in\">index</span>, indexedPropertyName, pd, i + <span class=\"hljs-number\">1</span>);                       \n    <span class=\"hljs-keyword\">value</span> = list.get(<span class=\"hljs-built_in\">index</span>);// 测试报错时，此处list只有<span class=\"hljs-number\">256</span>个，<span class=\"hljs-built_in\">index</span>为<span class=\"hljs-number\">256</span>时，取第<span class=\"hljs-number\">257</span>个报错  \n&#125;</code></pre></p>\n<pre><code class=\"hljs undefined\">@SuppressWarnings(<span class=\"hljs-string\">\"unchecked\"</span>)  \n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> growCollectionIfNecessary(  \n            Collection collection, <span class=\"hljs-built_in\">int</span> index, <span class=\"hljs-keyword\">String</span> name, PropertyDescriptor pd, <span class=\"hljs-built_in\">int</span> nestingLevel) &#123;  \n  \n  \n        <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-keyword\">this</span>.autoGrowNestedPaths) &#123;  \n            <span class=\"hljs-keyword\">return</span>;  \n        &#125;  \n        <span class=\"hljs-built_in\">int</span> <span class=\"hljs-built_in\">size</span> = collection.<span class=\"hljs-built_in\">size</span>();  \n        <span class=\"hljs-comment\">// 当个数小于autoGrowCollectionLimit这个值时才会向list中添加新元素  </span>\n        <span class=\"hljs-keyword\">if</span> (index &gt;= <span class=\"hljs-built_in\">size</span> &amp;&amp; index &lt; <span class=\"hljs-keyword\">this</span>.autoGrowCollectionLimit) &#123;  \n            Class elementType = GenericCollectionTypeResolver.getCollectionReturnType(pd.getReadMethod(), nestingLevel);  \n            <span class=\"hljs-keyword\">if</span> (elementType != <span class=\"hljs-keyword\">null</span>) &#123;  \n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = collection.<span class=\"hljs-built_in\">size</span>(); i &lt; index + <span class=\"hljs-number\">1</span>; i++) &#123;  \n                    collection.<span class=\"hljs-built_in\">add</span>(newValue(elementType, name));  \n                &#125;  \n            &#125;  \n        &#125;  \n    &#125;</code></pre>\n<p>根据上面的分析找到autoGrowCollectionLimit的定义</p>\n<pre><code class=\"hljs undefined\">public class DataBinder implements PropertyEditorRegistry, TypeConverter &#123;  \n  \n    /** Default object name used for binding: <span class=\"hljs-string\">\"target\"</span> */  \n   <span class=\"hljs-keyword\"> public</span><span class=\"hljs-keyword\"> static</span><span class=\"hljs-keyword\"> final</span> String DEFAU<span class=\"hljs-class\">LT_OBJECT_NAME = \"target\";</span>  \n  \n    /** Default limit for<span class=\"hljs-built_in\"> array </span>and collection growing: 256 */  \n   <span class=\"hljs-keyword\"> public</span><span class=\"hljs-keyword\"> static</span><span class=\"hljs-keyword\"> final</span><span class=\"hljs-built_in\"> int </span>DEFAU<span class=\"hljs-class\">LT_AUTO_GROW_COLLECTION_LIMIT = 256;</span>  \n  \n   <span class=\"hljs-keyword\"> private</span><span class=\"hljs-built_in\"> int </span>autoGrowCollection<span class=\"hljs-class\">Limit = DEFAULT_AUTO_GROW_COLLECTION_LIMIT;</span></code></pre>\n<p>解决方案，是在自己的Controller中加入如下方法</p>\n<pre><code class=\"hljs undefined\"><span class=\"hljs-meta\">@InitBinder</span>  \n<span class=\"hljs-keyword\">protected</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">initBinder</span><span class=\"hljs-params\">(WebDataBinder binder)</span> </span>&#123;  \n    binder.setAutoGrowNestedPaths(<span class=\"hljs-keyword\">true</span>);  \n    binder.setAutoGrowCollectionLimit(<span class=\"hljs-number\">1024</span>);  \n&#125;</code></pre>\n<p>==<strong>BUT</strong> 这个问题和线上的不同，只能算是意外收获。革命尚未成功，同志仍需努力！！！！==</p>\n<h3 id=\"2-3-增加Nginx\"><a href=\"#2-3-增加Nginx\" class=\"headerlink\" title=\"2.3 增加Nginx\"></a>2.3 增加Nginx</h3><p>经过2.2的奋斗，暂时判定是否为Nginx post请求参数做了限制。嗯，开搞~ 在开发环境配置Nginx代理，过程略·····</p>\n<p>nginx.conf 如下<br><pre><code class=\"hljs undefined\"><span class=\"hljs-attribute\">upstream</span> xxxxxxx &#123;\n\t<span class=\"hljs-attribute\">server</span> <span class=\"hljs-number\">127.0.0.1:8080</span>  weight=<span class=\"hljs-number\">10</span> max_fails=<span class=\"hljs-number\">2</span> fail_timeout=<span class=\"hljs-number\">30s</span> ;\n&#125;\n\n<span class=\"hljs-section\">server</span> &#123;\n    <span class=\"hljs-attribute\">listen</span>       <span class=\"hljs-number\">80</span>;\n    <span class=\"hljs-attribute\">server_name</span>  xxxxxxx.com;\n    <span class=\"hljs-attribute\">client_max_body_size</span> <span class=\"hljs-number\">100M</span>;  <span class=\"hljs-comment\"># 配置post size</span>\n    \n    <span class=\"hljs-comment\">#charset koi8-r;</span>\n  \n    <span class=\"hljs-comment\">#access_log  logs/host.access.log  main;</span>\n\t\n   <span class=\"hljs-attribute\">location</span> / &#123;\n\t\t<span class=\"hljs-comment\">#proxy_next_upstream     http_500 http_502 http_503 http_504 error timeout invalid_header;</span>\n\t\t<span class=\"hljs-attribute\">proxy_set_header</span>        Host  <span class=\"hljs-variable\">$host</span>;\n\t\t<span class=\"hljs-attribute\">proxy_set_header</span>        X-Forwarded-For <span class=\"hljs-variable\">$proxy_add_x_forwarded_for</span>;\n\t\t<span class=\"hljs-attribute\">proxy_pass</span>              http://xxxxxxx;\n\t\t<span class=\"hljs-attribute\">expires</span>                 <span class=\"hljs-number\">0</span>;\n\t&#125;\n&#125;</code></pre></p>\n<p>对于<code>client_max_body_size 100M;</code>，网上都是与文件上传相关的。不过都是通过post， request body的方式上传数据，所以通用。</p>\n<p>测试~~</p>\n<p>功能正常，没有重现线上问题。 哭死~~~</p>\n<p>革命还要继续~~</p>\n<h3 id=\"2-4-Tomcat-post设置\"><a href=\"#2-4-Tomcat-post设置\" class=\"headerlink\" title=\"2.4 Tomcat post设置\"></a>2.4 Tomcat post设置</h3><p>去线上服务器拉去配置</p>\n<pre><code class=\"hljs undefined\">&lt;Connector <span class=\"hljs-attribute\">port</span>=<span class=\"hljs-string\">\"1601\"</span> <span class=\"hljs-attribute\">maxParameterCount</span>=<span class=\"hljs-string\">\"1000\"</span> <span class=\"hljs-attribute\">protocol</span>=<span class=\"hljs-string\">\"HTTP/1.1\"</span> <span class=\"hljs-attribute\">redirectPort</span>=<span class=\"hljs-string\">\"8443\"</span> <span class=\"hljs-attribute\">maxSpareThreads</span>=<span class=\"hljs-string\">\"750\"</span> <span class=\"hljs-attribute\">maxThreads</span>=<span class=\"hljs-string\">\"1000\"</span> <span class=\"hljs-attribute\">minSpareTHreads</span>=<span class=\"hljs-string\">\"50\"</span> <span class=\"hljs-attribute\">acceptCount</span>=<span class=\"hljs-string\">\"1000\"</span> <span class=\"hljs-attribute\">connectionTimeout</span>=<span class=\"hljs-string\">\"20000\"</span> <span class=\"hljs-attribute\">URIEncoding</span>=<span class=\"hljs-string\">\"utf-8\"</span>/&gt;</code></pre>\n<p>经分析，发现线上没有body size的配置，却有<code>maxParameterCount=&quot;1000&quot;</code>。该参数为限制请求的参数个数，从而变相限制body size。</p>\n<p>在开发环境配置该参数，测试，<strong>问题重现</strong>。</p>\n<h2 id=\"3-解决\"><a href=\"#3-解决\" class=\"headerlink\" title=\"3. 解决\"></a>3. 解决</h2><p>问题原因定位好了，剩下的就是如何解决了。</p>\n<p>两个方案：</p>\n<ul>\n<li><p>修改线上配置</p>\n<p>  <em>该上实施难度系数高，因为公司使用的统一发布部署平台，开发人员无服务器操作权限。</em></p>\n</li>\n<li><p>修改代码</p>\n<p>  <em>修改保存逻辑，分片存储</em></p>\n</li>\n</ul>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>问题排查，需要先对整体有个把握，然后分析影响范围。不能钻牛角尖，采用西医“头疼医头”的方式。有可能最后结果还是要医头，但此时的医头已经是建立在中医的辩证主义上，对症下药。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>XX系统中，一个用户需要维护的项目数过多，填写的任务数超多，产生了一次工时保存中，只有前面一部分的xx数据持久化到数据库，后面的数据没有保存。</p>\n<p><code>图1</code></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/806e3151ly1fptj4uwnnuj21200i8gm5.jpg\" srcset=\"/img/loading.gif\" alt></p>\n<h1 id=\"排查过程\"><a href=\"#排查过程\" class=\"headerlink\" title=\"排查过程\"></a>排查过程</h1><h2 id=\"1-增加日志，监控参数信息\"><a href=\"#1-增加日志，监控参数信息\" class=\"headerlink\" title=\"1.增加日志，监控参数信息\"></a>1.增加日志，监控参数信息</h2><p>首先想到的是否后面部分的数据在保存过程中发生了异常。排查异常日志，发现没有该问题存在。</p>\n<p>然后增加方法参数信息日志，数据参数信息。发现参数集合size=200，前端发送集合size=400。判断问题可以能是因为服务器容器环境(Nginx+Tomcat)导致</p>\n<h2 id=\"2-开发环境问题重现\"><a href=\"#2-开发环境问题重现\" class=\"headerlink\" title=\"2.开发环境问题重现\"></a>2.开发环境问题重现</h2><h3 id=\"2-1-模拟数据\"><a href=\"#2-1-模拟数据\" class=\"headerlink\" title=\"2.1 模拟数据\"></a>2.1 模拟数据</h3><p>在测试环境模拟线上数据。如<code>图1</code></p>\n<h3 id=\"2-2-只配置Tomcat\"><a href=\"#2-2-只配置Tomcat\" class=\"headerlink\" title=\"2.2 只配置Tomcat\"></a>2.2 只配置Tomcat</h3><p>在idea中直接启动tomcat，无nginx环境，如果没有问题，则可暂时确定为nginx问题。</p>\n<p>然而，在过程中发现了新的问题。 </p>\n<pre><code class=\"hljs undefined\"><span class=\"hljs-keyword\">org.springframework.beans.InvalidPropertyException: </span>Invalid property <span class=\"hljs-string\">'detail[256]'</span> of <span class=\"hljs-keyword\">bean </span>class [com.suning.asvp.mer.entity.InviteCooperationInfo]: Index of out of <span class=\"hljs-keyword\">bounds </span>in property path <span class=\"hljs-string\">'detail[256]'</span><span class=\"hljs-comment\">; nested exception is java.lang.IndexOutOfBoundsException: Index: 256, Size: 256  </span>\n    <span class=\"hljs-built_in\">at</span> <span class=\"hljs-keyword\">org.springframework.beans.BeanWrapperImpl.getPropertyValue(BeanWrapperImpl.java:833) </span>~[spring-<span class=\"hljs-keyword\">beans-3.1.2.RELEASE.jar:3.1.2.RELEASE] </span> \n    <span class=\"hljs-built_in\">at</span> <span class=\"hljs-keyword\">org.springframework.beans.BeanWrapperImpl.getNestedBeanWrapper(BeanWrapperImpl.java:576) </span>~[spring-<span class=\"hljs-keyword\">beans-3.1.2.RELEASE.jar:3.1.2.RELEASE] </span> \n    <span class=\"hljs-built_in\">at</span> <span class=\"hljs-keyword\">org.springframework.beans.BeanWrapperImpl.getBeanWrapperForPropertyPath(BeanWrapperImpl.java:553) </span>~[spring-<span class=\"hljs-keyword\">beans-3.1.2.RELEASE.jar:3.1.2.RELEASE] </span> \n    <span class=\"hljs-built_in\">at</span> <span class=\"hljs-keyword\">org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:914) </span>~[spring-<span class=\"hljs-keyword\">beans-3.1.2.RELEASE.jar:3.1.2.RELEASE] </span> \n    <span class=\"hljs-built_in\">at</span> <span class=\"hljs-keyword\">org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:76) </span>~[spring-<span class=\"hljs-keyword\">beans-3.1.2.RELEASE.jar:3.1.2.RELEASE] </span> \n    <span class=\"hljs-built_in\">at</span> <span class=\"hljs-keyword\">org.springframework.validation.DataBinder.applyPropertyValues(DataBinder.java:692) </span>~[spring-<span class=\"hljs-built_in\">context</span><span class=\"hljs-number\">-3</span>.<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">2</span>.RELEASE.<span class=\"hljs-keyword\">jar:3.1.2.RELEASE] </span> \n    <span class=\"hljs-built_in\">at</span> <span class=\"hljs-keyword\">org.springframework.validation.DataBinder.doBind(DataBinder.java:588) </span>~[spring-<span class=\"hljs-built_in\">context</span><span class=\"hljs-number\">-3</span>.<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">2</span>.RELEASE.<span class=\"hljs-keyword\">jar:3.1.2.RELEASE] </span> \n    <span class=\"hljs-built_in\">at</span> <span class=\"hljs-keyword\">org.springframework.web.bind.WebDataBinder.doBind(WebDataBinder.java:191) </span>~[spring-web<span class=\"hljs-number\">-3</span>.<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">2</span>.RELEASE.<span class=\"hljs-keyword\">jar:3.1.2.RELEASE] </span> \n    <span class=\"hljs-built_in\">at</span> <span class=\"hljs-keyword\">org.springframework.web.bind.ServletRequestDataBinder.bind(ServletRequestDataBinder.java:112) </span>~[spring-web<span class=\"hljs-number\">-3</span>.<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">2</span>.RELEASE.<span class=\"hljs-keyword\">jar:3.1.2.RELEASE]</span></code></pre>\n<p>查看BeanWrapperImpl源码<br><pre><code class=\"hljs undefined\"><span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">value</span> instanceof List) &#123;  \n    <span class=\"hljs-built_in\">int</span> <span class=\"hljs-built_in\">index</span> = <span class=\"hljs-keyword\">Integer</span>.parseInt(key);                        \n    List list = (List) <span class=\"hljs-keyword\">value</span>;  \n    growCollectionIfNecessary(list, <span class=\"hljs-built_in\">index</span>, indexedPropertyName, pd, i + <span class=\"hljs-number\">1</span>);                       \n    <span class=\"hljs-keyword\">value</span> = list.get(<span class=\"hljs-built_in\">index</span>);// 测试报错时，此处list只有<span class=\"hljs-number\">256</span>个，<span class=\"hljs-built_in\">index</span>为<span class=\"hljs-number\">256</span>时，取第<span class=\"hljs-number\">257</span>个报错  \n&#125;</code></pre></p>\n<pre><code class=\"hljs undefined\">@SuppressWarnings(<span class=\"hljs-string\">\"unchecked\"</span>)  \n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> growCollectionIfNecessary(  \n            Collection collection, <span class=\"hljs-built_in\">int</span> index, <span class=\"hljs-keyword\">String</span> name, PropertyDescriptor pd, <span class=\"hljs-built_in\">int</span> nestingLevel) &#123;  \n  \n  \n        <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-keyword\">this</span>.autoGrowNestedPaths) &#123;  \n            <span class=\"hljs-keyword\">return</span>;  \n        &#125;  \n        <span class=\"hljs-built_in\">int</span> <span class=\"hljs-built_in\">size</span> = collection.<span class=\"hljs-built_in\">size</span>();  \n        <span class=\"hljs-comment\">// 当个数小于autoGrowCollectionLimit这个值时才会向list中添加新元素  </span>\n        <span class=\"hljs-keyword\">if</span> (index &gt;= <span class=\"hljs-built_in\">size</span> &amp;&amp; index &lt; <span class=\"hljs-keyword\">this</span>.autoGrowCollectionLimit) &#123;  \n            Class elementType = GenericCollectionTypeResolver.getCollectionReturnType(pd.getReadMethod(), nestingLevel);  \n            <span class=\"hljs-keyword\">if</span> (elementType != <span class=\"hljs-keyword\">null</span>) &#123;  \n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = collection.<span class=\"hljs-built_in\">size</span>(); i &lt; index + <span class=\"hljs-number\">1</span>; i++) &#123;  \n                    collection.<span class=\"hljs-built_in\">add</span>(newValue(elementType, name));  \n                &#125;  \n            &#125;  \n        &#125;  \n    &#125;</code></pre>\n<p>根据上面的分析找到autoGrowCollectionLimit的定义</p>\n<pre><code class=\"hljs undefined\">public class DataBinder implements PropertyEditorRegistry, TypeConverter &#123;  \n  \n    /** Default object name used for binding: <span class=\"hljs-string\">\"target\"</span> */  \n   <span class=\"hljs-keyword\"> public</span><span class=\"hljs-keyword\"> static</span><span class=\"hljs-keyword\"> final</span> String DEFAU<span class=\"hljs-class\">LT_OBJECT_NAME = \"target\";</span>  \n  \n    /** Default limit for<span class=\"hljs-built_in\"> array </span>and collection growing: 256 */  \n   <span class=\"hljs-keyword\"> public</span><span class=\"hljs-keyword\"> static</span><span class=\"hljs-keyword\"> final</span><span class=\"hljs-built_in\"> int </span>DEFAU<span class=\"hljs-class\">LT_AUTO_GROW_COLLECTION_LIMIT = 256;</span>  \n  \n   <span class=\"hljs-keyword\"> private</span><span class=\"hljs-built_in\"> int </span>autoGrowCollection<span class=\"hljs-class\">Limit = DEFAULT_AUTO_GROW_COLLECTION_LIMIT;</span></code></pre>\n<p>解决方案，是在自己的Controller中加入如下方法</p>\n<pre><code class=\"hljs undefined\"><span class=\"hljs-meta\">@InitBinder</span>  \n<span class=\"hljs-keyword\">protected</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">initBinder</span><span class=\"hljs-params\">(WebDataBinder binder)</span> </span>&#123;  \n    binder.setAutoGrowNestedPaths(<span class=\"hljs-keyword\">true</span>);  \n    binder.setAutoGrowCollectionLimit(<span class=\"hljs-number\">1024</span>);  \n&#125;</code></pre>\n<p>==<strong>BUT</strong> 这个问题和线上的不同，只能算是意外收获。革命尚未成功，同志仍需努力！！！！==</p>\n<h3 id=\"2-3-增加Nginx\"><a href=\"#2-3-增加Nginx\" class=\"headerlink\" title=\"2.3 增加Nginx\"></a>2.3 增加Nginx</h3><p>经过2.2的奋斗，暂时判定是否为Nginx post请求参数做了限制。嗯，开搞~ 在开发环境配置Nginx代理，过程略·····</p>\n<p>nginx.conf 如下<br><pre><code class=\"hljs undefined\"><span class=\"hljs-attribute\">upstream</span> xxxxxxx &#123;\n\t<span class=\"hljs-attribute\">server</span> <span class=\"hljs-number\">127.0.0.1:8080</span>  weight=<span class=\"hljs-number\">10</span> max_fails=<span class=\"hljs-number\">2</span> fail_timeout=<span class=\"hljs-number\">30s</span> ;\n&#125;\n\n<span class=\"hljs-section\">server</span> &#123;\n    <span class=\"hljs-attribute\">listen</span>       <span class=\"hljs-number\">80</span>;\n    <span class=\"hljs-attribute\">server_name</span>  xxxxxxx.com;\n    <span class=\"hljs-attribute\">client_max_body_size</span> <span class=\"hljs-number\">100M</span>;  <span class=\"hljs-comment\"># 配置post size</span>\n    \n    <span class=\"hljs-comment\">#charset koi8-r;</span>\n  \n    <span class=\"hljs-comment\">#access_log  logs/host.access.log  main;</span>\n\t\n   <span class=\"hljs-attribute\">location</span> / &#123;\n\t\t<span class=\"hljs-comment\">#proxy_next_upstream     http_500 http_502 http_503 http_504 error timeout invalid_header;</span>\n\t\t<span class=\"hljs-attribute\">proxy_set_header</span>        Host  <span class=\"hljs-variable\">$host</span>;\n\t\t<span class=\"hljs-attribute\">proxy_set_header</span>        X-Forwarded-For <span class=\"hljs-variable\">$proxy_add_x_forwarded_for</span>;\n\t\t<span class=\"hljs-attribute\">proxy_pass</span>              http://xxxxxxx;\n\t\t<span class=\"hljs-attribute\">expires</span>                 <span class=\"hljs-number\">0</span>;\n\t&#125;\n&#125;</code></pre></p>\n<p>对于<code>client_max_body_size 100M;</code>，网上都是与文件上传相关的。不过都是通过post， request body的方式上传数据，所以通用。</p>\n<p>测试~~</p>\n<p>功能正常，没有重现线上问题。 哭死~~~</p>\n<p>革命还要继续~~</p>\n<h3 id=\"2-4-Tomcat-post设置\"><a href=\"#2-4-Tomcat-post设置\" class=\"headerlink\" title=\"2.4 Tomcat post设置\"></a>2.4 Tomcat post设置</h3><p>去线上服务器拉去配置</p>\n<pre><code class=\"hljs undefined\">&lt;Connector <span class=\"hljs-attribute\">port</span>=<span class=\"hljs-string\">\"1601\"</span> <span class=\"hljs-attribute\">maxParameterCount</span>=<span class=\"hljs-string\">\"1000\"</span> <span class=\"hljs-attribute\">protocol</span>=<span class=\"hljs-string\">\"HTTP/1.1\"</span> <span class=\"hljs-attribute\">redirectPort</span>=<span class=\"hljs-string\">\"8443\"</span> <span class=\"hljs-attribute\">maxSpareThreads</span>=<span class=\"hljs-string\">\"750\"</span> <span class=\"hljs-attribute\">maxThreads</span>=<span class=\"hljs-string\">\"1000\"</span> <span class=\"hljs-attribute\">minSpareTHreads</span>=<span class=\"hljs-string\">\"50\"</span> <span class=\"hljs-attribute\">acceptCount</span>=<span class=\"hljs-string\">\"1000\"</span> <span class=\"hljs-attribute\">connectionTimeout</span>=<span class=\"hljs-string\">\"20000\"</span> <span class=\"hljs-attribute\">URIEncoding</span>=<span class=\"hljs-string\">\"utf-8\"</span>/&gt;</code></pre>\n<p>经分析，发现线上没有body size的配置，却有<code>maxParameterCount=&quot;1000&quot;</code>。该参数为限制请求的参数个数，从而变相限制body size。</p>\n<p>在开发环境配置该参数，测试，<strong>问题重现</strong>。</p>\n<h2 id=\"3-解决\"><a href=\"#3-解决\" class=\"headerlink\" title=\"3. 解决\"></a>3. 解决</h2><p>问题原因定位好了，剩下的就是如何解决了。</p>\n<p>两个方案：</p>\n<ul>\n<li><p>修改线上配置</p>\n<p>  <em>该上实施难度系数高，因为公司使用的统一发布部署平台，开发人员无服务器操作权限。</em></p>\n</li>\n<li><p>修改代码</p>\n<p>  <em>修改保存逻辑，分片存储</em></p>\n</li>\n</ul>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>问题排查，需要先对整体有个把握，然后分析影响范围。不能钻牛角尖，采用西医“头疼医头”的方式。有可能最后结果还是要医头，但此时的医头已经是建立在中医的辩证主义上，对症下药。</p>\n"},{"title":"RocketMQ架构简介","date":"2018-04-08T16:00:00.000Z","_content":"\n\n# 概览\nApache RocketMQ是一款具有低延迟，高性能和可靠性，数十亿容量和灵活可扩展性的分布式消息传递和流媒体平台。它由四部分组成：Name Servers，brokers，producers和consumers。 它们中的每一个都可以在没有单点故障的情况下进行水平扩展。 \n\n![RocketMQ架构](http://rocketmq.apache.org/assets/images/rmq-basic-arc.png)\n\n# NameServer集群\nName Servers提供轻量级服务发现和路由。每个Name Server记录完整的路由信息，提供相应的读写服务，并支持快速存储扩展。\n\n# Broker集群\nBrokers通过提供轻量级的TOPIC和QUEUE机制来实现消息存储。 它们支持Push和Pull模式，包含容错机制（2个或3个副本），并提供强大的峰值填充和按原始时间顺序累积数千亿条消息的能力。此外，broker提供灾难恢复，丰富的指标统计数据和警报机制，而传统的消息传递系统都缺乏这些机制。\n\n# Producer集群\nProducer集群支持分布式部署。分布式producer通过多种负载均衡模式向Broker集群发送消息。发送过程支持fast failure并具有低延迟。\n\n# Consumer集群\nConsumer也支持Push和Pull模型的分布式部署。 它还支持群集消费和消息广播。 它提供了实时的消息订阅机制，可以满足大多数消费者的需求。\n\n","source":"_posts/rocketmq-architecture.md","raw":"---\ntitle: RocketMQ架构简介\ndate: 2018-04-09\ntags: \n    - MQ\ncategories:\n    - 后端\n---\n\n\n# 概览\nApache RocketMQ是一款具有低延迟，高性能和可靠性，数十亿容量和灵活可扩展性的分布式消息传递和流媒体平台。它由四部分组成：Name Servers，brokers，producers和consumers。 它们中的每一个都可以在没有单点故障的情况下进行水平扩展。 \n\n![RocketMQ架构](http://rocketmq.apache.org/assets/images/rmq-basic-arc.png)\n\n# NameServer集群\nName Servers提供轻量级服务发现和路由。每个Name Server记录完整的路由信息，提供相应的读写服务，并支持快速存储扩展。\n\n# Broker集群\nBrokers通过提供轻量级的TOPIC和QUEUE机制来实现消息存储。 它们支持Push和Pull模式，包含容错机制（2个或3个副本），并提供强大的峰值填充和按原始时间顺序累积数千亿条消息的能力。此外，broker提供灾难恢复，丰富的指标统计数据和警报机制，而传统的消息传递系统都缺乏这些机制。\n\n# Producer集群\nProducer集群支持分布式部署。分布式producer通过多种负载均衡模式向Broker集群发送消息。发送过程支持fast failure并具有低延迟。\n\n# Consumer集群\nConsumer也支持Push和Pull模型的分布式部署。 它还支持群集消费和消息广播。 它提供了实时的消息订阅机制，可以满足大多数消费者的需求。\n\n","slug":"rocketmq-architecture","published":1,"updated":"2020-07-17T02:32:01.203Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcpntui0004e04oizqx6wf2t","content":"<h1 id=\"概览\"><a href=\"#概览\" class=\"headerlink\" title=\"概览\"></a>概览</h1><p>Apache RocketMQ是一款具有低延迟，高性能和可靠性，数十亿容量和灵活可扩展性的分布式消息传递和流媒体平台。它由四部分组成：Name Servers，brokers，producers和consumers。 它们中的每一个都可以在没有单点故障的情况下进行水平扩展。 </p>\n<p><img src=\"http://rocketmq.apache.org/assets/images/rmq-basic-arc.png\" srcset=\"/img/loading.gif\" alt=\"RocketMQ架构\"></p>\n<h1 id=\"NameServer集群\"><a href=\"#NameServer集群\" class=\"headerlink\" title=\"NameServer集群\"></a>NameServer集群</h1><p>Name Servers提供轻量级服务发现和路由。每个Name Server记录完整的路由信息，提供相应的读写服务，并支持快速存储扩展。</p>\n<h1 id=\"Broker集群\"><a href=\"#Broker集群\" class=\"headerlink\" title=\"Broker集群\"></a>Broker集群</h1><p>Brokers通过提供轻量级的TOPIC和QUEUE机制来实现消息存储。 它们支持Push和Pull模式，包含容错机制（2个或3个副本），并提供强大的峰值填充和按原始时间顺序累积数千亿条消息的能力。此外，broker提供灾难恢复，丰富的指标统计数据和警报机制，而传统的消息传递系统都缺乏这些机制。</p>\n<h1 id=\"Producer集群\"><a href=\"#Producer集群\" class=\"headerlink\" title=\"Producer集群\"></a>Producer集群</h1><p>Producer集群支持分布式部署。分布式producer通过多种负载均衡模式向Broker集群发送消息。发送过程支持fast failure并具有低延迟。</p>\n<h1 id=\"Consumer集群\"><a href=\"#Consumer集群\" class=\"headerlink\" title=\"Consumer集群\"></a>Consumer集群</h1><p>Consumer也支持Push和Pull模型的分布式部署。 它还支持群集消费和消息广播。 它提供了实时的消息订阅机制，可以满足大多数消费者的需求。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"概览\"><a href=\"#概览\" class=\"headerlink\" title=\"概览\"></a>概览</h1><p>Apache RocketMQ是一款具有低延迟，高性能和可靠性，数十亿容量和灵活可扩展性的分布式消息传递和流媒体平台。它由四部分组成：Name Servers，brokers，producers和consumers。 它们中的每一个都可以在没有单点故障的情况下进行水平扩展。 </p>\n<p><img src=\"http://rocketmq.apache.org/assets/images/rmq-basic-arc.png\" srcset=\"/img/loading.gif\" alt=\"RocketMQ架构\"></p>\n<h1 id=\"NameServer集群\"><a href=\"#NameServer集群\" class=\"headerlink\" title=\"NameServer集群\"></a>NameServer集群</h1><p>Name Servers提供轻量级服务发现和路由。每个Name Server记录完整的路由信息，提供相应的读写服务，并支持快速存储扩展。</p>\n<h1 id=\"Broker集群\"><a href=\"#Broker集群\" class=\"headerlink\" title=\"Broker集群\"></a>Broker集群</h1><p>Brokers通过提供轻量级的TOPIC和QUEUE机制来实现消息存储。 它们支持Push和Pull模式，包含容错机制（2个或3个副本），并提供强大的峰值填充和按原始时间顺序累积数千亿条消息的能力。此外，broker提供灾难恢复，丰富的指标统计数据和警报机制，而传统的消息传递系统都缺乏这些机制。</p>\n<h1 id=\"Producer集群\"><a href=\"#Producer集群\" class=\"headerlink\" title=\"Producer集群\"></a>Producer集群</h1><p>Producer集群支持分布式部署。分布式producer通过多种负载均衡模式向Broker集群发送消息。发送过程支持fast failure并具有低延迟。</p>\n<h1 id=\"Consumer集群\"><a href=\"#Consumer集群\" class=\"headerlink\" title=\"Consumer集群\"></a>Consumer集群</h1><p>Consumer也支持Push和Pull模型的分布式部署。 它还支持群集消费和消息广播。 它提供了实时的消息订阅机制，可以满足大多数消费者的需求。</p>\n"},{"title":"Spring常用Annotation详解","date":"2018-01-26T01:16:06.000Z","_content":"\n\n# Annotation介绍\n\n---\n\n\n# Spring项目开发常用Annotation\n\n## Java\n### @Resource\nResource 注释标记应用程序所需的资源。此注释可以应用于应用程序组件类，或者该组件类的字段或方法。如果将该注释应用于一个字段或方法，那么初始化应用程序组件时容器将把所请求资源的一个实例注入其中。如果将该注释应用于组件类，则该注释将声明一个应用程序在运行时将查找的资源。\n\n即使此注释没有被标记为Inherited，部署工具仍然需要检查任意组件类的所有超类，以发现这些超类中所有使用此注释的地方。所有此类注释实例都指定了应用程序组件所需的资源。注意，此注释可能出现在超类的 private 字段和方法上；在这种情况下容器也需要执行注入操作。\n\n在Spring中使用该注解，表示按name注入。\n\n\n## Spring\n### @Required\n此注解用于JavaBean的setter方法上，表示此属性是必须的，必须在配置阶段注入，否则会抛出`BeanInitializationException`。\n\n### @Autowired\n此注解用于构造方法、字段、setter方法和注解类型。显示声明依赖，根据type来autowiring, 默认注入是必须的。\n\n```java\n@Target({ElementType.CONSTRUCTOR, ElementType.FIELD, ElementType.METHOD, ElementType.ANNOTATION_TYPE})\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\npublic @interface Autowired {\n\n\t/**\n\t * Declares whether the annotated dependency is required.\n\t * <p>Defaults to {@code true}.\n\t */\n\tboolean required() default true;\n\n}\n```\n\n在构造方法上使用此注解时，需要注意的是，一个类只允许有一个构造方法使用此注解。==此外，在Spring4.3后，如果一个类仅仅只有一个构造方法，那么即使不使用此注解，spring也会自动注入相关的bean。==\n\n```\n@Componentpublic class User {\n    private Address address;\n    public User(Address address) {\n        this.address=address;     \n    }\n    \n}\n\n<bean id=\"user\" class=\"xx.User\"/>\n```\n\n\n### @Qualifier\n此注解是和`@Autowired`一起使用的。使用此注解可以让你对注入的过程有更多的控制，用@Qulifier指定要绑定的bean的名称。当一个type有多个bean时，使用@Autowired的时候需要配合上@Qulifier才能正常。\n\n\n```\n@Componentpublic class User {\n    @Autowired    \n    @Qualifier(\"address1\")    \n    private Address address;    \n    \n    ...\n    \n}\n```\n\n\n### @Configuration\n此注解一般和@Configuration注解一起使用，指定Spring扫描注解的package。如果没有指定包，那么默认会扫描此配置类所在的package。\n\n```\n@Configuartion\npublic class SpringCoreConfig {\n    @Bean    \n    public AdminUser adminUser() {\n        AdminUser adminUser = new AdminUser();\n        return adminUser;    \n        \n    }\n    \n}\n```\n\n### @Lazy\n此注解使用在Spring的组件类上。默认的，Spring中Bean的依赖一开始就被创建和配置。如果想要延迟初始化一个bean，那么可以在此类上使用Lazy注解，表示此bean只有在第一次被使用的时候才会被创建和初始化。此注解也可以使用在被@Configuration注解的类上，表示其中所有被@Bean注解的方法都会延迟初始化。\n\n### @Value\n此注解使用在字段、构造器参数和方法参数上。@Value可以指定属性取值的表达式，支持通过#{}使用SpringEL来取值，也支持使用${}来将属性来源中(Properties文件呢、本地环境变量、系统属性等)的值注入到bean的属性中。此注解的注入时发生在AutowiredAnnotationBeanPostProcessor中。\n\n## Stereotype注解\n### @Component\n此注解使用在class上来声明一个Spring组件(Bean), 将其加入到应用上下文中。\n### @Controller\n此注解使用在class上声明此类是一个Spring controller，是@Component注解的一种具体形式。\n### @Service\n此注解使用在class上，声明此类是一个服务类，执行业务逻辑、计算、调用内部api等。是@Component注解的一种具体形式。\n### @Repository\n此类使用在class上声明此类用于访问数据库，一般作为DAO的角色。\n此注解有自动翻译的特性，例如：当此种component抛出了一个异常，那么会有一个handler来处理此异常，无需使用try-catch块。\n\n## Spring Boot注解\n### @EnableAutoConfiguration\n此注解通常被用在主应用class上，告诉`Spring Boot` 自动基于当前包添加Bean、对bean的属性进行设置等。\n### @SpringBootApplication\n此注解用在Spring Boot项目的应用主类上（此类需要在base package中）。使用了此注解的类首先会让Spring Boot启动对base package下以及其sub-pacakages的类进行component scan。\n\n此注解同时添加了以下几个注解：\n- @Configuration\n- @EnableAutoConfiguration\n- @ComponentScan\n\n\n## Spring MVC和REST注解\n### @Controller\n上述已经提到过此注解。\n### @RequestMapping\n\n此注解可以用在class和method上，用来映射web请求到某一个handler类或者handler方法上。当此注解用在Class上时，就创造了一个基础url，其所有的方法上的@RequestMapping都是在此url之上的。\n\n可以使用其method属性来限制请求匹配的http method。\n\n此外，Spring4.3之后引入了一系列@RequestMapping的变种。如下：c\n- @GetMapping\n- @PostMapping\n- @PutMapping\n- @PatchMapping\n- @DeleteMapping\n\n分别对应了相应method的RequestMapping配置。\n\n### @CrossOrigin\n此注解用在class和method上用来支持跨域请求，是Spring 4.2后引入的。\n\n```\nCrossOrigin(maxAge = 3600)\n@RestController\n@RequestMapping(\"/users\")\npublic class AccountController {    \n    @CrossOrigin(origins = \"http://xx.com\")\n    @RequestMapping(\"/login\")\n    public Result userLogin() {\n        // ...    \n        \n    }\n    \n}\n```\n### @ExceptionHandler\n此注解使用在方法级别，声明对Exception的处理逻辑。可以指定目标Exception。\n### @InitBinder\n此注解使用在方法上，声明对WebDataBinder的初始化(绑定请求参数到JavaBean上的DataBinder)。在controller上使用此注解可以自定义请求参数的绑定。\n### @MatrixVariable\n此注解使用在请求handler方法的参数上，Spring可以注入matrix url中相关的值。这里的矩阵变量可以出现在url中的任何地方，变量之间用;分隔。如下：\n\n\n```\n// GET /pets/42;q=11;r=22@RequestMapping(value = \"/pets/{petId}\")public void findPet(@PathVariable String petId, @MatrixVariable int q) {    // petId == 42    // q == 11}\n```\n需要注意的是默认Spring mvc是不支持矩阵变量的，需要开启。\n\n```xml\n<mvc:annotation-driven enable-matrix-variables=\"true\" />\n```\n\n注解配置则需要如下开启：\n\n```\n@Configurationpublic class WebConfig extends WebMvcConfigurerAdapter {     @Override    public void configurePathMatch(PathMatchConfigurer configurer) {        UrlPathHelper urlPathHelper = new UrlPathHelper();        urlPathHelper.setRemoveSemicolonContent(false);        configurer.setUrlPathHelper(urlPathHelper);    }}\n```\n### @PathVariable\n此注解使用在请求handler方法的参数上。@RequestMapping可以定义动态路径，如:\n\n\n```\nRequestMapping(\"/users/{uid}\")\npublic String execute(@PathVariable(\"uid\") String uid){\n}\n```\n\n### @RequestAttribute\n此注解用在请求handler方法的参数上，用于将web请求中的属性(requst attributes，是服务器放入的属性值)绑定到方法参数上。\n### @RequestBody\n此注解用在请求handler方法的参数上，用于将http请求的Body映射绑定到此参数上。HttpMessageConverter负责将对象转换为http请求。\n### @RequestHeader\n此注解用在请求handler方法的参数上，用于将http请求头部的值绑定到参数上。\n### @RequestParam\n此注解用在请求handler方法的参数上，用于将http请求参数的值绑定到参数上。\n### @RequestPart\n此注解用在请求handler方法的参数上，用于将文件之类的multipart绑定到参数上。\n### @ResponseBody\n此注解用在请求handler方法上。和@RequestBody作用类似，用于将方法的返回对象直接输出到http响应中。\n### @ResponseStatus\n此注解用于方法和exception类上，声明此方法或者异常类返回的http状态码。可以在Controller上使用此注解，这样所有的@RequestMapping都会继承。\n### @ControllerAdvice\n此注解用于class上。前面说过可以对每一个controller声明一个ExceptionMethod。这里可以使用@ControllerAdvice来声明一个类来统一对所有@RequestMapping方法来做@ExceptionHandler, @InitBinder, and @ModelAttribute处理。\n### @RestController\n此注解用于class上，声明此controller返回的不是一个视图而是一个领域对象。其同时引入了@Controller and @ResponseBody两个注解。\n### @RestControllerAdvice\n此注解用于class上，同时引入了@ControllerAdvice and @ResponseBody两个注解。\n### @SessionAttribute\n此注解用于方法的参数上，用于将session中的属性绑定到参数。\n### @SessionAttributes\n此注解用于type级别，用于将JavaBean对象存储到session中。一般和@ModelAttribute注解一起使用。如下：\n\n```\n@ModelAttribute(\"user\")\npublic PUser getUser() {}\n\n// controller和上面的代码在同一controller中\n@Controller\n@SessionAttributes(value = \"user\", types = {\n    User.class\n})\npublic class UserController {}\n```\n\n\n## 数据访问注解\n### @Transactional\n此注解使用在接口定义、接口中的方法、类定义或者类中的public方法上。需要注意的是此注解并不激活事务行为，它仅仅是一个元数据，会被一些运行时基础设施来消费。\n## 任务执行、调度注解\n### @Scheduled\n此注解使用在方法上，声明此方法被定时调度。使用了此注解的方法返回类型需要是Void，并且不能接受任何参数。\n\n```\n@Scheduled(fixedDelay=1000)\npublic void schedule() {}\n\n@Scheduled(fixedRate=1000)\npublic void schedulg() {\n}\n```\n\n第二个与第一个不同之处在于其不会等待上一次的任务执行结束。\n### @Async\n此注解使用在方法上，声明此方法会在一个单独的线程中执行。不同于Scheduled注解，此注解可以接受参数。\n使用此注解的方法的返回类型可以是Void也可是返回值。但是返回值的类型必须是一个Future。\n## 测试注解\n### @ContextConfiguration\n此注解使用在Class上，声明测试使用的配置文件，此外，也可以指定加载上下文的类。\n\n此注解一般需要搭配SpringJUnit4ClassRunner使用。\n\n```\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(classes = SpringCoreConfig.class)\npublic class UserServiceTest {}\n```\n\n","source":"_posts/spring-annotation.md","raw":"---\ntitle: Spring常用Annotation详解\ndate: 2018-01-26 09:16:06\ntags:\n    - Spring\n    - Java\ncategories:\n    - 后端\n---\n\n\n# Annotation介绍\n\n---\n\n\n# Spring项目开发常用Annotation\n\n## Java\n### @Resource\nResource 注释标记应用程序所需的资源。此注释可以应用于应用程序组件类，或者该组件类的字段或方法。如果将该注释应用于一个字段或方法，那么初始化应用程序组件时容器将把所请求资源的一个实例注入其中。如果将该注释应用于组件类，则该注释将声明一个应用程序在运行时将查找的资源。\n\n即使此注释没有被标记为Inherited，部署工具仍然需要检查任意组件类的所有超类，以发现这些超类中所有使用此注释的地方。所有此类注释实例都指定了应用程序组件所需的资源。注意，此注释可能出现在超类的 private 字段和方法上；在这种情况下容器也需要执行注入操作。\n\n在Spring中使用该注解，表示按name注入。\n\n\n## Spring\n### @Required\n此注解用于JavaBean的setter方法上，表示此属性是必须的，必须在配置阶段注入，否则会抛出`BeanInitializationException`。\n\n### @Autowired\n此注解用于构造方法、字段、setter方法和注解类型。显示声明依赖，根据type来autowiring, 默认注入是必须的。\n\n```java\n@Target({ElementType.CONSTRUCTOR, ElementType.FIELD, ElementType.METHOD, ElementType.ANNOTATION_TYPE})\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\npublic @interface Autowired {\n\n\t/**\n\t * Declares whether the annotated dependency is required.\n\t * <p>Defaults to {@code true}.\n\t */\n\tboolean required() default true;\n\n}\n```\n\n在构造方法上使用此注解时，需要注意的是，一个类只允许有一个构造方法使用此注解。==此外，在Spring4.3后，如果一个类仅仅只有一个构造方法，那么即使不使用此注解，spring也会自动注入相关的bean。==\n\n```\n@Componentpublic class User {\n    private Address address;\n    public User(Address address) {\n        this.address=address;     \n    }\n    \n}\n\n<bean id=\"user\" class=\"xx.User\"/>\n```\n\n\n### @Qualifier\n此注解是和`@Autowired`一起使用的。使用此注解可以让你对注入的过程有更多的控制，用@Qulifier指定要绑定的bean的名称。当一个type有多个bean时，使用@Autowired的时候需要配合上@Qulifier才能正常。\n\n\n```\n@Componentpublic class User {\n    @Autowired    \n    @Qualifier(\"address1\")    \n    private Address address;    \n    \n    ...\n    \n}\n```\n\n\n### @Configuration\n此注解一般和@Configuration注解一起使用，指定Spring扫描注解的package。如果没有指定包，那么默认会扫描此配置类所在的package。\n\n```\n@Configuartion\npublic class SpringCoreConfig {\n    @Bean    \n    public AdminUser adminUser() {\n        AdminUser adminUser = new AdminUser();\n        return adminUser;    \n        \n    }\n    \n}\n```\n\n### @Lazy\n此注解使用在Spring的组件类上。默认的，Spring中Bean的依赖一开始就被创建和配置。如果想要延迟初始化一个bean，那么可以在此类上使用Lazy注解，表示此bean只有在第一次被使用的时候才会被创建和初始化。此注解也可以使用在被@Configuration注解的类上，表示其中所有被@Bean注解的方法都会延迟初始化。\n\n### @Value\n此注解使用在字段、构造器参数和方法参数上。@Value可以指定属性取值的表达式，支持通过#{}使用SpringEL来取值，也支持使用${}来将属性来源中(Properties文件呢、本地环境变量、系统属性等)的值注入到bean的属性中。此注解的注入时发生在AutowiredAnnotationBeanPostProcessor中。\n\n## Stereotype注解\n### @Component\n此注解使用在class上来声明一个Spring组件(Bean), 将其加入到应用上下文中。\n### @Controller\n此注解使用在class上声明此类是一个Spring controller，是@Component注解的一种具体形式。\n### @Service\n此注解使用在class上，声明此类是一个服务类，执行业务逻辑、计算、调用内部api等。是@Component注解的一种具体形式。\n### @Repository\n此类使用在class上声明此类用于访问数据库，一般作为DAO的角色。\n此注解有自动翻译的特性，例如：当此种component抛出了一个异常，那么会有一个handler来处理此异常，无需使用try-catch块。\n\n## Spring Boot注解\n### @EnableAutoConfiguration\n此注解通常被用在主应用class上，告诉`Spring Boot` 自动基于当前包添加Bean、对bean的属性进行设置等。\n### @SpringBootApplication\n此注解用在Spring Boot项目的应用主类上（此类需要在base package中）。使用了此注解的类首先会让Spring Boot启动对base package下以及其sub-pacakages的类进行component scan。\n\n此注解同时添加了以下几个注解：\n- @Configuration\n- @EnableAutoConfiguration\n- @ComponentScan\n\n\n## Spring MVC和REST注解\n### @Controller\n上述已经提到过此注解。\n### @RequestMapping\n\n此注解可以用在class和method上，用来映射web请求到某一个handler类或者handler方法上。当此注解用在Class上时，就创造了一个基础url，其所有的方法上的@RequestMapping都是在此url之上的。\n\n可以使用其method属性来限制请求匹配的http method。\n\n此外，Spring4.3之后引入了一系列@RequestMapping的变种。如下：c\n- @GetMapping\n- @PostMapping\n- @PutMapping\n- @PatchMapping\n- @DeleteMapping\n\n分别对应了相应method的RequestMapping配置。\n\n### @CrossOrigin\n此注解用在class和method上用来支持跨域请求，是Spring 4.2后引入的。\n\n```\nCrossOrigin(maxAge = 3600)\n@RestController\n@RequestMapping(\"/users\")\npublic class AccountController {    \n    @CrossOrigin(origins = \"http://xx.com\")\n    @RequestMapping(\"/login\")\n    public Result userLogin() {\n        // ...    \n        \n    }\n    \n}\n```\n### @ExceptionHandler\n此注解使用在方法级别，声明对Exception的处理逻辑。可以指定目标Exception。\n### @InitBinder\n此注解使用在方法上，声明对WebDataBinder的初始化(绑定请求参数到JavaBean上的DataBinder)。在controller上使用此注解可以自定义请求参数的绑定。\n### @MatrixVariable\n此注解使用在请求handler方法的参数上，Spring可以注入matrix url中相关的值。这里的矩阵变量可以出现在url中的任何地方，变量之间用;分隔。如下：\n\n\n```\n// GET /pets/42;q=11;r=22@RequestMapping(value = \"/pets/{petId}\")public void findPet(@PathVariable String petId, @MatrixVariable int q) {    // petId == 42    // q == 11}\n```\n需要注意的是默认Spring mvc是不支持矩阵变量的，需要开启。\n\n```xml\n<mvc:annotation-driven enable-matrix-variables=\"true\" />\n```\n\n注解配置则需要如下开启：\n\n```\n@Configurationpublic class WebConfig extends WebMvcConfigurerAdapter {     @Override    public void configurePathMatch(PathMatchConfigurer configurer) {        UrlPathHelper urlPathHelper = new UrlPathHelper();        urlPathHelper.setRemoveSemicolonContent(false);        configurer.setUrlPathHelper(urlPathHelper);    }}\n```\n### @PathVariable\n此注解使用在请求handler方法的参数上。@RequestMapping可以定义动态路径，如:\n\n\n```\nRequestMapping(\"/users/{uid}\")\npublic String execute(@PathVariable(\"uid\") String uid){\n}\n```\n\n### @RequestAttribute\n此注解用在请求handler方法的参数上，用于将web请求中的属性(requst attributes，是服务器放入的属性值)绑定到方法参数上。\n### @RequestBody\n此注解用在请求handler方法的参数上，用于将http请求的Body映射绑定到此参数上。HttpMessageConverter负责将对象转换为http请求。\n### @RequestHeader\n此注解用在请求handler方法的参数上，用于将http请求头部的值绑定到参数上。\n### @RequestParam\n此注解用在请求handler方法的参数上，用于将http请求参数的值绑定到参数上。\n### @RequestPart\n此注解用在请求handler方法的参数上，用于将文件之类的multipart绑定到参数上。\n### @ResponseBody\n此注解用在请求handler方法上。和@RequestBody作用类似，用于将方法的返回对象直接输出到http响应中。\n### @ResponseStatus\n此注解用于方法和exception类上，声明此方法或者异常类返回的http状态码。可以在Controller上使用此注解，这样所有的@RequestMapping都会继承。\n### @ControllerAdvice\n此注解用于class上。前面说过可以对每一个controller声明一个ExceptionMethod。这里可以使用@ControllerAdvice来声明一个类来统一对所有@RequestMapping方法来做@ExceptionHandler, @InitBinder, and @ModelAttribute处理。\n### @RestController\n此注解用于class上，声明此controller返回的不是一个视图而是一个领域对象。其同时引入了@Controller and @ResponseBody两个注解。\n### @RestControllerAdvice\n此注解用于class上，同时引入了@ControllerAdvice and @ResponseBody两个注解。\n### @SessionAttribute\n此注解用于方法的参数上，用于将session中的属性绑定到参数。\n### @SessionAttributes\n此注解用于type级别，用于将JavaBean对象存储到session中。一般和@ModelAttribute注解一起使用。如下：\n\n```\n@ModelAttribute(\"user\")\npublic PUser getUser() {}\n\n// controller和上面的代码在同一controller中\n@Controller\n@SessionAttributes(value = \"user\", types = {\n    User.class\n})\npublic class UserController {}\n```\n\n\n## 数据访问注解\n### @Transactional\n此注解使用在接口定义、接口中的方法、类定义或者类中的public方法上。需要注意的是此注解并不激活事务行为，它仅仅是一个元数据，会被一些运行时基础设施来消费。\n## 任务执行、调度注解\n### @Scheduled\n此注解使用在方法上，声明此方法被定时调度。使用了此注解的方法返回类型需要是Void，并且不能接受任何参数。\n\n```\n@Scheduled(fixedDelay=1000)\npublic void schedule() {}\n\n@Scheduled(fixedRate=1000)\npublic void schedulg() {\n}\n```\n\n第二个与第一个不同之处在于其不会等待上一次的任务执行结束。\n### @Async\n此注解使用在方法上，声明此方法会在一个单独的线程中执行。不同于Scheduled注解，此注解可以接受参数。\n使用此注解的方法的返回类型可以是Void也可是返回值。但是返回值的类型必须是一个Future。\n## 测试注解\n### @ContextConfiguration\n此注解使用在Class上，声明测试使用的配置文件，此外，也可以指定加载上下文的类。\n\n此注解一般需要搭配SpringJUnit4ClassRunner使用。\n\n```\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(classes = SpringCoreConfig.class)\npublic class UserServiceTest {}\n```\n\n","slug":"spring-annotation","published":1,"updated":"2020-07-17T02:32:01.206Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcpntui2004h04oierrsgb9g","content":"<h1 id=\"Annotation介绍\"><a href=\"#Annotation介绍\" class=\"headerlink\" title=\"Annotation介绍\"></a>Annotation介绍</h1><hr>\n<h1 id=\"Spring项目开发常用Annotation\"><a href=\"#Spring项目开发常用Annotation\" class=\"headerlink\" title=\"Spring项目开发常用Annotation\"></a>Spring项目开发常用Annotation</h1><h2 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h2><h3 id=\"Resource\"><a href=\"#Resource\" class=\"headerlink\" title=\"@Resource\"></a>@Resource</h3><p>Resource 注释标记应用程序所需的资源。此注释可以应用于应用程序组件类，或者该组件类的字段或方法。如果将该注释应用于一个字段或方法，那么初始化应用程序组件时容器将把所请求资源的一个实例注入其中。如果将该注释应用于组件类，则该注释将声明一个应用程序在运行时将查找的资源。</p>\n<p>即使此注释没有被标记为Inherited，部署工具仍然需要检查任意组件类的所有超类，以发现这些超类中所有使用此注释的地方。所有此类注释实例都指定了应用程序组件所需的资源。注意，此注释可能出现在超类的 private 字段和方法上；在这种情况下容器也需要执行注入操作。</p>\n<p>在Spring中使用该注解，表示按name注入。</p>\n<h2 id=\"Spring\"><a href=\"#Spring\" class=\"headerlink\" title=\"Spring\"></a>Spring</h2><h3 id=\"Required\"><a href=\"#Required\" class=\"headerlink\" title=\"@Required\"></a>@Required</h3><p>此注解用于JavaBean的setter方法上，表示此属性是必须的，必须在配置阶段注入，否则会抛出<code>BeanInitializationException</code>。</p>\n<h3 id=\"Autowired\"><a href=\"#Autowired\" class=\"headerlink\" title=\"@Autowired\"></a>@Autowired</h3><p>此注解用于构造方法、字段、setter方法和注解类型。显示声明依赖，根据type来autowiring, 默认注入是必须的。</p>\n<pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Target</span>(&#123;ElementType.CONSTRUCTOR, ElementType.FIELD, ElementType.METHOD, ElementType.ANNOTATION_TYPE&#125;)\n<span class=\"hljs-meta\">@Retention</span>(RetentionPolicy.RUNTIME)\n<span class=\"hljs-meta\">@Documented</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-meta\">@interface</span> Autowired &#123;\n\n\t<span class=\"hljs-comment\">/**\n\t * Declares whether the annotated dependency is required.\n\t * &lt;p&gt;Defaults to &#123;<span class=\"hljs-doctag\">@code</span> true&#125;.\n\t */</span>\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">required</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">true</span></span>;\n\n&#125;</code></pre>\n<p>在构造方法上使用此注解时，需要注意的是，一个类只允许有一个构造方法使用此注解。==此外，在Spring4.3后，如果一个类仅仅只有一个构造方法，那么即使不使用此注解，spring也会自动注入相关的bean。==</p>\n<pre><code class=\"hljs undefined\"><span class=\"hljs-meta\">@Componentpublic</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">User</span> </span>&#123;\n    <span class=\"hljs-keyword\">private</span> Address address;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">User</span><span class=\"hljs-params\">(Address address)</span> </span>&#123;\n        <span class=\"hljs-keyword\">this</span>.address=address;     \n    &#125;\n    \n&#125;\n\n&lt;bean id=<span class=\"hljs-string\">\"user\"</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">\"xx.User\"</span>/&gt;</code></pre>\n<h3 id=\"Qualifier\"><a href=\"#Qualifier\" class=\"headerlink\" title=\"@Qualifier\"></a>@Qualifier</h3><p>此注解是和<code>@Autowired</code>一起使用的。使用此注解可以让你对注入的过程有更多的控制，用@Qulifier指定要绑定的bean的名称。当一个type有多个bean时，使用@Autowired的时候需要配合上@Qulifier才能正常。</p>\n<pre><code class=\"hljs undefined\"><span class=\"hljs-variable\">@Componentpublic</span> class User &#123;\n    <span class=\"hljs-variable\">@Autowired</span>    \n    <span class=\"hljs-variable\">@Qualifier</span>(<span class=\"hljs-string\">\"address1\"</span>)    \n    private Address address;    \n    \n    ...\n    \n&#125;</code></pre>\n<h3 id=\"Configuration\"><a href=\"#Configuration\" class=\"headerlink\" title=\"@Configuration\"></a>@Configuration</h3><p>此注解一般和@Configuration注解一起使用，指定Spring扫描注解的package。如果没有指定包，那么默认会扫描此配置类所在的package。</p>\n<pre><code class=\"hljs undefined\"><span class=\"hljs-meta\">@Configuartion</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SpringCoreConfig</span> </span>&#123;\n    <span class=\"hljs-meta\">@Bean</span>    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> AdminUser <span class=\"hljs-title\">adminUser</span><span class=\"hljs-params\">()</span> </span>&#123;\n        AdminUser adminUser = <span class=\"hljs-keyword\">new</span> AdminUser();\n        <span class=\"hljs-keyword\">return</span> adminUser;    \n        \n    &#125;\n    \n&#125;</code></pre>\n<h3 id=\"Lazy\"><a href=\"#Lazy\" class=\"headerlink\" title=\"@Lazy\"></a>@Lazy</h3><p>此注解使用在Spring的组件类上。默认的，Spring中Bean的依赖一开始就被创建和配置。如果想要延迟初始化一个bean，那么可以在此类上使用Lazy注解，表示此bean只有在第一次被使用的时候才会被创建和初始化。此注解也可以使用在被@Configuration注解的类上，表示其中所有被@Bean注解的方法都会延迟初始化。</p>\n<h3 id=\"Value\"><a href=\"#Value\" class=\"headerlink\" title=\"@Value\"></a>@Value</h3><p>此注解使用在字段、构造器参数和方法参数上。@Value可以指定属性取值的表达式，支持通过#{}使用SpringEL来取值，也支持使用${}来将属性来源中(Properties文件呢、本地环境变量、系统属性等)的值注入到bean的属性中。此注解的注入时发生在AutowiredAnnotationBeanPostProcessor中。</p>\n<h2 id=\"Stereotype注解\"><a href=\"#Stereotype注解\" class=\"headerlink\" title=\"Stereotype注解\"></a>Stereotype注解</h2><h3 id=\"Component\"><a href=\"#Component\" class=\"headerlink\" title=\"@Component\"></a>@Component</h3><p>此注解使用在class上来声明一个Spring组件(Bean), 将其加入到应用上下文中。</p>\n<h3 id=\"Controller\"><a href=\"#Controller\" class=\"headerlink\" title=\"@Controller\"></a>@Controller</h3><p>此注解使用在class上声明此类是一个Spring controller，是@Component注解的一种具体形式。</p>\n<h3 id=\"Service\"><a href=\"#Service\" class=\"headerlink\" title=\"@Service\"></a>@Service</h3><p>此注解使用在class上，声明此类是一个服务类，执行业务逻辑、计算、调用内部api等。是@Component注解的一种具体形式。</p>\n<h3 id=\"Repository\"><a href=\"#Repository\" class=\"headerlink\" title=\"@Repository\"></a>@Repository</h3><p>此类使用在class上声明此类用于访问数据库，一般作为DAO的角色。<br>此注解有自动翻译的特性，例如：当此种component抛出了一个异常，那么会有一个handler来处理此异常，无需使用try-catch块。</p>\n<h2 id=\"Spring-Boot注解\"><a href=\"#Spring-Boot注解\" class=\"headerlink\" title=\"Spring Boot注解\"></a>Spring Boot注解</h2><h3 id=\"EnableAutoConfiguration\"><a href=\"#EnableAutoConfiguration\" class=\"headerlink\" title=\"@EnableAutoConfiguration\"></a>@EnableAutoConfiguration</h3><p>此注解通常被用在主应用class上，告诉<code>Spring Boot</code> 自动基于当前包添加Bean、对bean的属性进行设置等。</p>\n<h3 id=\"SpringBootApplication\"><a href=\"#SpringBootApplication\" class=\"headerlink\" title=\"@SpringBootApplication\"></a>@SpringBootApplication</h3><p>此注解用在Spring Boot项目的应用主类上（此类需要在base package中）。使用了此注解的类首先会让Spring Boot启动对base package下以及其sub-pacakages的类进行component scan。</p>\n<p>此注解同时添加了以下几个注解：</p>\n<ul>\n<li>@Configuration</li>\n<li>@EnableAutoConfiguration</li>\n<li>@ComponentScan</li>\n</ul>\n<h2 id=\"Spring-MVC和REST注解\"><a href=\"#Spring-MVC和REST注解\" class=\"headerlink\" title=\"Spring MVC和REST注解\"></a>Spring MVC和REST注解</h2><h3 id=\"Controller-1\"><a href=\"#Controller-1\" class=\"headerlink\" title=\"@Controller\"></a>@Controller</h3><p>上述已经提到过此注解。</p>\n<h3 id=\"RequestMapping\"><a href=\"#RequestMapping\" class=\"headerlink\" title=\"@RequestMapping\"></a>@RequestMapping</h3><p>此注解可以用在class和method上，用来映射web请求到某一个handler类或者handler方法上。当此注解用在Class上时，就创造了一个基础url，其所有的方法上的@RequestMapping都是在此url之上的。</p>\n<p>可以使用其method属性来限制请求匹配的http method。</p>\n<p>此外，Spring4.3之后引入了一系列@RequestMapping的变种。如下：c</p>\n<ul>\n<li>@GetMapping</li>\n<li>@PostMapping</li>\n<li>@PutMapping</li>\n<li>@PatchMapping</li>\n<li>@DeleteMapping</li>\n</ul>\n<p>分别对应了相应method的RequestMapping配置。</p>\n<h3 id=\"CrossOrigin\"><a href=\"#CrossOrigin\" class=\"headerlink\" title=\"@CrossOrigin\"></a>@CrossOrigin</h3><p>此注解用在class和method上用来支持跨域请求，是Spring 4.2后引入的。</p>\n<pre><code class=\"hljs undefined\"><span class=\"hljs-selector-tag\">CrossOrigin</span>(maxAge = <span class=\"hljs-number\">3600</span>)\n@<span class=\"hljs-selector-tag\">RestController</span>\n@<span class=\"hljs-selector-tag\">RequestMapping</span>(<span class=\"hljs-string\">\"/users\"</span>)\n<span class=\"hljs-selector-tag\">public</span> <span class=\"hljs-selector-tag\">class</span> <span class=\"hljs-selector-tag\">AccountController</span> &#123;    \n    <span class=\"hljs-variable\">@CrossOrigin</span>(origins = <span class=\"hljs-string\">\"http://xx.com\"</span>)\n    <span class=\"hljs-variable\">@RequestMapping</span>(<span class=\"hljs-string\">\"/login\"</span>)\n    public Result userLogin() &#123;\n        <span class=\"hljs-comment\">// ...    </span>\n        \n    &#125;\n    \n&#125;</code></pre>\n<h3 id=\"ExceptionHandler\"><a href=\"#ExceptionHandler\" class=\"headerlink\" title=\"@ExceptionHandler\"></a>@ExceptionHandler</h3><p>此注解使用在方法级别，声明对Exception的处理逻辑。可以指定目标Exception。</p>\n<h3 id=\"InitBinder\"><a href=\"#InitBinder\" class=\"headerlink\" title=\"@InitBinder\"></a>@InitBinder</h3><p>此注解使用在方法上，声明对WebDataBinder的初始化(绑定请求参数到JavaBean上的DataBinder)。在controller上使用此注解可以自定义请求参数的绑定。</p>\n<h3 id=\"MatrixVariable\"><a href=\"#MatrixVariable\" class=\"headerlink\" title=\"@MatrixVariable\"></a>@MatrixVariable</h3><p>此注解使用在请求handler方法的参数上，Spring可以注入matrix url中相关的值。这里的矩阵变量可以出现在url中的任何地方，变量之间用;分隔。如下：</p>\n<pre><code class=\"hljs undefined\"><span class=\"hljs-regexp\">//</span> GET <span class=\"hljs-regexp\">/pets/</span><span class=\"hljs-number\">42</span>;q=<span class=\"hljs-number\">11</span>;r=<span class=\"hljs-number\">22</span>@RequestMapping(value = <span class=\"hljs-string\">\"/pets/&#123;petId&#125;\"</span>)public void findPet(@PathVariable String petId, @MatrixVariable int q) &#123;    <span class=\"hljs-regexp\">//</span> petId == <span class=\"hljs-number\">42</span>    <span class=\"hljs-regexp\">//</span> q == <span class=\"hljs-number\">11</span>&#125;</code></pre>\n<p>需要注意的是默认Spring mvc是不支持矩阵变量的，需要开启。</p>\n<pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mvc:annotation-driven</span> <span class=\"hljs-attr\">enable-matrix-variables</span>=<span class=\"hljs-string\">\"true\"</span> /&gt;</span></code></pre>\n<p>注解配置则需要如下开启：</p>\n<pre><code class=\"hljs undefined\"><span class=\"hljs-meta\">@Configurationpublic</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">WebConfig</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">WebMvcConfigurerAdapter</span> </span>&#123;     <span class=\"hljs-meta\">@Override</span>    public void configurePathMatch(<span class=\"hljs-type\">PathMatchConfigurer</span> configurer) &#123;        <span class=\"hljs-type\">UrlPathHelper</span> urlPathHelper = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">UrlPathHelper</span>();        urlPathHelper.setRemoveSemicolonContent(<span class=\"hljs-literal\">false</span>);        configurer.setUrlPathHelper(urlPathHelper);    &#125;&#125;</code></pre>\n<h3 id=\"PathVariable\"><a href=\"#PathVariable\" class=\"headerlink\" title=\"@PathVariable\"></a>@PathVariable</h3><p>此注解使用在请求handler方法的参数上。@RequestMapping可以定义动态路径，如:</p>\n<pre><code class=\"hljs undefined\"><span class=\"hljs-selector-tag\">RequestMapping</span>(<span class=\"hljs-string\">\"/users/&#123;uid&#125;\"</span>)\n<span class=\"hljs-selector-tag\">public</span> <span class=\"hljs-selector-tag\">String</span> <span class=\"hljs-selector-tag\">execute</span>(<span class=\"hljs-variable\">@PathVariable</span>(<span class=\"hljs-string\">\"uid\"</span>) String uid)&#123;\n&#125;</code></pre>\n<h3 id=\"RequestAttribute\"><a href=\"#RequestAttribute\" class=\"headerlink\" title=\"@RequestAttribute\"></a>@RequestAttribute</h3><p>此注解用在请求handler方法的参数上，用于将web请求中的属性(requst attributes，是服务器放入的属性值)绑定到方法参数上。</p>\n<h3 id=\"RequestBody\"><a href=\"#RequestBody\" class=\"headerlink\" title=\"@RequestBody\"></a>@RequestBody</h3><p>此注解用在请求handler方法的参数上，用于将http请求的Body映射绑定到此参数上。HttpMessageConverter负责将对象转换为http请求。</p>\n<h3 id=\"RequestHeader\"><a href=\"#RequestHeader\" class=\"headerlink\" title=\"@RequestHeader\"></a>@RequestHeader</h3><p>此注解用在请求handler方法的参数上，用于将http请求头部的值绑定到参数上。</p>\n<h3 id=\"RequestParam\"><a href=\"#RequestParam\" class=\"headerlink\" title=\"@RequestParam\"></a>@RequestParam</h3><p>此注解用在请求handler方法的参数上，用于将http请求参数的值绑定到参数上。</p>\n<h3 id=\"RequestPart\"><a href=\"#RequestPart\" class=\"headerlink\" title=\"@RequestPart\"></a>@RequestPart</h3><p>此注解用在请求handler方法的参数上，用于将文件之类的multipart绑定到参数上。</p>\n<h3 id=\"ResponseBody\"><a href=\"#ResponseBody\" class=\"headerlink\" title=\"@ResponseBody\"></a>@ResponseBody</h3><p>此注解用在请求handler方法上。和@RequestBody作用类似，用于将方法的返回对象直接输出到http响应中。</p>\n<h3 id=\"ResponseStatus\"><a href=\"#ResponseStatus\" class=\"headerlink\" title=\"@ResponseStatus\"></a>@ResponseStatus</h3><p>此注解用于方法和exception类上，声明此方法或者异常类返回的http状态码。可以在Controller上使用此注解，这样所有的@RequestMapping都会继承。</p>\n<h3 id=\"ControllerAdvice\"><a href=\"#ControllerAdvice\" class=\"headerlink\" title=\"@ControllerAdvice\"></a>@ControllerAdvice</h3><p>此注解用于class上。前面说过可以对每一个controller声明一个ExceptionMethod。这里可以使用@ControllerAdvice来声明一个类来统一对所有@RequestMapping方法来做@ExceptionHandler, @InitBinder, and @ModelAttribute处理。</p>\n<h3 id=\"RestController\"><a href=\"#RestController\" class=\"headerlink\" title=\"@RestController\"></a>@RestController</h3><p>此注解用于class上，声明此controller返回的不是一个视图而是一个领域对象。其同时引入了@Controller and @ResponseBody两个注解。</p>\n<h3 id=\"RestControllerAdvice\"><a href=\"#RestControllerAdvice\" class=\"headerlink\" title=\"@RestControllerAdvice\"></a>@RestControllerAdvice</h3><p>此注解用于class上，同时引入了@ControllerAdvice and @ResponseBody两个注解。</p>\n<h3 id=\"SessionAttribute\"><a href=\"#SessionAttribute\" class=\"headerlink\" title=\"@SessionAttribute\"></a>@SessionAttribute</h3><p>此注解用于方法的参数上，用于将session中的属性绑定到参数。</p>\n<h3 id=\"SessionAttributes\"><a href=\"#SessionAttributes\" class=\"headerlink\" title=\"@SessionAttributes\"></a>@SessionAttributes</h3><p>此注解用于type级别，用于将JavaBean对象存储到session中。一般和@ModelAttribute注解一起使用。如下：</p>\n<pre><code class=\"hljs undefined\"><span class=\"hljs-variable\">@ModelAttribute</span>(<span class=\"hljs-string\">\"user\"</span>)\npublic PUser getUser() &#123;&#125;\n\n<span class=\"hljs-comment\">// controller和上面的代码在同一controller中</span>\n<span class=\"hljs-variable\">@Controller</span>\n<span class=\"hljs-variable\">@SessionAttributes</span>(value = <span class=\"hljs-string\">\"user\"</span>, types = &#123;\n    User.class\n&#125;)\npublic class UserController &#123;&#125;</code></pre>\n<h2 id=\"数据访问注解\"><a href=\"#数据访问注解\" class=\"headerlink\" title=\"数据访问注解\"></a>数据访问注解</h2><h3 id=\"Transactional\"><a href=\"#Transactional\" class=\"headerlink\" title=\"@Transactional\"></a>@Transactional</h3><p>此注解使用在接口定义、接口中的方法、类定义或者类中的public方法上。需要注意的是此注解并不激活事务行为，它仅仅是一个元数据，会被一些运行时基础设施来消费。</p>\n<h2 id=\"任务执行、调度注解\"><a href=\"#任务执行、调度注解\" class=\"headerlink\" title=\"任务执行、调度注解\"></a>任务执行、调度注解</h2><h3 id=\"Scheduled\"><a href=\"#Scheduled\" class=\"headerlink\" title=\"@Scheduled\"></a>@Scheduled</h3><p>此注解使用在方法上，声明此方法被定时调度。使用了此注解的方法返回类型需要是Void，并且不能接受任何参数。</p>\n<pre><code class=\"hljs undefined\"><span class=\"hljs-variable\">@Scheduled</span>(fixedDelay=<span class=\"hljs-number\">1000</span>)\npublic void schedule() &#123;&#125;\n\n<span class=\"hljs-variable\">@Scheduled</span>(fixedRate=<span class=\"hljs-number\">1000</span>)\npublic void schedulg() &#123;\n&#125;</code></pre>\n<p>第二个与第一个不同之处在于其不会等待上一次的任务执行结束。</p>\n<h3 id=\"Async\"><a href=\"#Async\" class=\"headerlink\" title=\"@Async\"></a>@Async</h3><p>此注解使用在方法上，声明此方法会在一个单独的线程中执行。不同于Scheduled注解，此注解可以接受参数。<br>使用此注解的方法的返回类型可以是Void也可是返回值。但是返回值的类型必须是一个Future。</p>\n<h2 id=\"测试注解\"><a href=\"#测试注解\" class=\"headerlink\" title=\"测试注解\"></a>测试注解</h2><h3 id=\"ContextConfiguration\"><a href=\"#ContextConfiguration\" class=\"headerlink\" title=\"@ContextConfiguration\"></a>@ContextConfiguration</h3><p>此注解使用在Class上，声明测试使用的配置文件，此外，也可以指定加载上下文的类。</p>\n<p>此注解一般需要搭配SpringJUnit4ClassRunner使用。</p>\n<pre><code class=\"hljs undefined\"><span class=\"hljs-variable\">@RunWith</span>(SpringJUnit4ClassRunner.class)\n<span class=\"hljs-variable\">@ContextConfiguration</span>(classes = SpringCoreConfig.class)\npublic class UserServiceTest &#123;&#125;</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Annotation介绍\"><a href=\"#Annotation介绍\" class=\"headerlink\" title=\"Annotation介绍\"></a>Annotation介绍</h1><hr>\n<h1 id=\"Spring项目开发常用Annotation\"><a href=\"#Spring项目开发常用Annotation\" class=\"headerlink\" title=\"Spring项目开发常用Annotation\"></a>Spring项目开发常用Annotation</h1><h2 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h2><h3 id=\"Resource\"><a href=\"#Resource\" class=\"headerlink\" title=\"@Resource\"></a>@Resource</h3><p>Resource 注释标记应用程序所需的资源。此注释可以应用于应用程序组件类，或者该组件类的字段或方法。如果将该注释应用于一个字段或方法，那么初始化应用程序组件时容器将把所请求资源的一个实例注入其中。如果将该注释应用于组件类，则该注释将声明一个应用程序在运行时将查找的资源。</p>\n<p>即使此注释没有被标记为Inherited，部署工具仍然需要检查任意组件类的所有超类，以发现这些超类中所有使用此注释的地方。所有此类注释实例都指定了应用程序组件所需的资源。注意，此注释可能出现在超类的 private 字段和方法上；在这种情况下容器也需要执行注入操作。</p>\n<p>在Spring中使用该注解，表示按name注入。</p>\n<h2 id=\"Spring\"><a href=\"#Spring\" class=\"headerlink\" title=\"Spring\"></a>Spring</h2><h3 id=\"Required\"><a href=\"#Required\" class=\"headerlink\" title=\"@Required\"></a>@Required</h3><p>此注解用于JavaBean的setter方法上，表示此属性是必须的，必须在配置阶段注入，否则会抛出<code>BeanInitializationException</code>。</p>\n<h3 id=\"Autowired\"><a href=\"#Autowired\" class=\"headerlink\" title=\"@Autowired\"></a>@Autowired</h3><p>此注解用于构造方法、字段、setter方法和注解类型。显示声明依赖，根据type来autowiring, 默认注入是必须的。</p>\n<pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Target</span>(&#123;ElementType.CONSTRUCTOR, ElementType.FIELD, ElementType.METHOD, ElementType.ANNOTATION_TYPE&#125;)\n<span class=\"hljs-meta\">@Retention</span>(RetentionPolicy.RUNTIME)\n<span class=\"hljs-meta\">@Documented</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-meta\">@interface</span> Autowired &#123;\n\n\t<span class=\"hljs-comment\">/**\n\t * Declares whether the annotated dependency is required.\n\t * &lt;p&gt;Defaults to &#123;<span class=\"hljs-doctag\">@code</span> true&#125;.\n\t */</span>\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">required</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">true</span></span>;\n\n&#125;</code></pre>\n<p>在构造方法上使用此注解时，需要注意的是，一个类只允许有一个构造方法使用此注解。==此外，在Spring4.3后，如果一个类仅仅只有一个构造方法，那么即使不使用此注解，spring也会自动注入相关的bean。==</p>\n<pre><code class=\"hljs undefined\"><span class=\"hljs-meta\">@Componentpublic</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">User</span> </span>&#123;\n    <span class=\"hljs-keyword\">private</span> Address address;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">User</span><span class=\"hljs-params\">(Address address)</span> </span>&#123;\n        <span class=\"hljs-keyword\">this</span>.address=address;     \n    &#125;\n    \n&#125;\n\n&lt;bean id=<span class=\"hljs-string\">\"user\"</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">\"xx.User\"</span>/&gt;</code></pre>\n<h3 id=\"Qualifier\"><a href=\"#Qualifier\" class=\"headerlink\" title=\"@Qualifier\"></a>@Qualifier</h3><p>此注解是和<code>@Autowired</code>一起使用的。使用此注解可以让你对注入的过程有更多的控制，用@Qulifier指定要绑定的bean的名称。当一个type有多个bean时，使用@Autowired的时候需要配合上@Qulifier才能正常。</p>\n<pre><code class=\"hljs undefined\"><span class=\"hljs-variable\">@Componentpublic</span> class User &#123;\n    <span class=\"hljs-variable\">@Autowired</span>    \n    <span class=\"hljs-variable\">@Qualifier</span>(<span class=\"hljs-string\">\"address1\"</span>)    \n    private Address address;    \n    \n    ...\n    \n&#125;</code></pre>\n<h3 id=\"Configuration\"><a href=\"#Configuration\" class=\"headerlink\" title=\"@Configuration\"></a>@Configuration</h3><p>此注解一般和@Configuration注解一起使用，指定Spring扫描注解的package。如果没有指定包，那么默认会扫描此配置类所在的package。</p>\n<pre><code class=\"hljs undefined\"><span class=\"hljs-meta\">@Configuartion</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SpringCoreConfig</span> </span>&#123;\n    <span class=\"hljs-meta\">@Bean</span>    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> AdminUser <span class=\"hljs-title\">adminUser</span><span class=\"hljs-params\">()</span> </span>&#123;\n        AdminUser adminUser = <span class=\"hljs-keyword\">new</span> AdminUser();\n        <span class=\"hljs-keyword\">return</span> adminUser;    \n        \n    &#125;\n    \n&#125;</code></pre>\n<h3 id=\"Lazy\"><a href=\"#Lazy\" class=\"headerlink\" title=\"@Lazy\"></a>@Lazy</h3><p>此注解使用在Spring的组件类上。默认的，Spring中Bean的依赖一开始就被创建和配置。如果想要延迟初始化一个bean，那么可以在此类上使用Lazy注解，表示此bean只有在第一次被使用的时候才会被创建和初始化。此注解也可以使用在被@Configuration注解的类上，表示其中所有被@Bean注解的方法都会延迟初始化。</p>\n<h3 id=\"Value\"><a href=\"#Value\" class=\"headerlink\" title=\"@Value\"></a>@Value</h3><p>此注解使用在字段、构造器参数和方法参数上。@Value可以指定属性取值的表达式，支持通过#{}使用SpringEL来取值，也支持使用${}来将属性来源中(Properties文件呢、本地环境变量、系统属性等)的值注入到bean的属性中。此注解的注入时发生在AutowiredAnnotationBeanPostProcessor中。</p>\n<h2 id=\"Stereotype注解\"><a href=\"#Stereotype注解\" class=\"headerlink\" title=\"Stereotype注解\"></a>Stereotype注解</h2><h3 id=\"Component\"><a href=\"#Component\" class=\"headerlink\" title=\"@Component\"></a>@Component</h3><p>此注解使用在class上来声明一个Spring组件(Bean), 将其加入到应用上下文中。</p>\n<h3 id=\"Controller\"><a href=\"#Controller\" class=\"headerlink\" title=\"@Controller\"></a>@Controller</h3><p>此注解使用在class上声明此类是一个Spring controller，是@Component注解的一种具体形式。</p>\n<h3 id=\"Service\"><a href=\"#Service\" class=\"headerlink\" title=\"@Service\"></a>@Service</h3><p>此注解使用在class上，声明此类是一个服务类，执行业务逻辑、计算、调用内部api等。是@Component注解的一种具体形式。</p>\n<h3 id=\"Repository\"><a href=\"#Repository\" class=\"headerlink\" title=\"@Repository\"></a>@Repository</h3><p>此类使用在class上声明此类用于访问数据库，一般作为DAO的角色。<br>此注解有自动翻译的特性，例如：当此种component抛出了一个异常，那么会有一个handler来处理此异常，无需使用try-catch块。</p>\n<h2 id=\"Spring-Boot注解\"><a href=\"#Spring-Boot注解\" class=\"headerlink\" title=\"Spring Boot注解\"></a>Spring Boot注解</h2><h3 id=\"EnableAutoConfiguration\"><a href=\"#EnableAutoConfiguration\" class=\"headerlink\" title=\"@EnableAutoConfiguration\"></a>@EnableAutoConfiguration</h3><p>此注解通常被用在主应用class上，告诉<code>Spring Boot</code> 自动基于当前包添加Bean、对bean的属性进行设置等。</p>\n<h3 id=\"SpringBootApplication\"><a href=\"#SpringBootApplication\" class=\"headerlink\" title=\"@SpringBootApplication\"></a>@SpringBootApplication</h3><p>此注解用在Spring Boot项目的应用主类上（此类需要在base package中）。使用了此注解的类首先会让Spring Boot启动对base package下以及其sub-pacakages的类进行component scan。</p>\n<p>此注解同时添加了以下几个注解：</p>\n<ul>\n<li>@Configuration</li>\n<li>@EnableAutoConfiguration</li>\n<li>@ComponentScan</li>\n</ul>\n<h2 id=\"Spring-MVC和REST注解\"><a href=\"#Spring-MVC和REST注解\" class=\"headerlink\" title=\"Spring MVC和REST注解\"></a>Spring MVC和REST注解</h2><h3 id=\"Controller-1\"><a href=\"#Controller-1\" class=\"headerlink\" title=\"@Controller\"></a>@Controller</h3><p>上述已经提到过此注解。</p>\n<h3 id=\"RequestMapping\"><a href=\"#RequestMapping\" class=\"headerlink\" title=\"@RequestMapping\"></a>@RequestMapping</h3><p>此注解可以用在class和method上，用来映射web请求到某一个handler类或者handler方法上。当此注解用在Class上时，就创造了一个基础url，其所有的方法上的@RequestMapping都是在此url之上的。</p>\n<p>可以使用其method属性来限制请求匹配的http method。</p>\n<p>此外，Spring4.3之后引入了一系列@RequestMapping的变种。如下：c</p>\n<ul>\n<li>@GetMapping</li>\n<li>@PostMapping</li>\n<li>@PutMapping</li>\n<li>@PatchMapping</li>\n<li>@DeleteMapping</li>\n</ul>\n<p>分别对应了相应method的RequestMapping配置。</p>\n<h3 id=\"CrossOrigin\"><a href=\"#CrossOrigin\" class=\"headerlink\" title=\"@CrossOrigin\"></a>@CrossOrigin</h3><p>此注解用在class和method上用来支持跨域请求，是Spring 4.2后引入的。</p>\n<pre><code class=\"hljs undefined\"><span class=\"hljs-selector-tag\">CrossOrigin</span>(maxAge = <span class=\"hljs-number\">3600</span>)\n@<span class=\"hljs-selector-tag\">RestController</span>\n@<span class=\"hljs-selector-tag\">RequestMapping</span>(<span class=\"hljs-string\">\"/users\"</span>)\n<span class=\"hljs-selector-tag\">public</span> <span class=\"hljs-selector-tag\">class</span> <span class=\"hljs-selector-tag\">AccountController</span> &#123;    \n    <span class=\"hljs-variable\">@CrossOrigin</span>(origins = <span class=\"hljs-string\">\"http://xx.com\"</span>)\n    <span class=\"hljs-variable\">@RequestMapping</span>(<span class=\"hljs-string\">\"/login\"</span>)\n    public Result userLogin() &#123;\n        <span class=\"hljs-comment\">// ...    </span>\n        \n    &#125;\n    \n&#125;</code></pre>\n<h3 id=\"ExceptionHandler\"><a href=\"#ExceptionHandler\" class=\"headerlink\" title=\"@ExceptionHandler\"></a>@ExceptionHandler</h3><p>此注解使用在方法级别，声明对Exception的处理逻辑。可以指定目标Exception。</p>\n<h3 id=\"InitBinder\"><a href=\"#InitBinder\" class=\"headerlink\" title=\"@InitBinder\"></a>@InitBinder</h3><p>此注解使用在方法上，声明对WebDataBinder的初始化(绑定请求参数到JavaBean上的DataBinder)。在controller上使用此注解可以自定义请求参数的绑定。</p>\n<h3 id=\"MatrixVariable\"><a href=\"#MatrixVariable\" class=\"headerlink\" title=\"@MatrixVariable\"></a>@MatrixVariable</h3><p>此注解使用在请求handler方法的参数上，Spring可以注入matrix url中相关的值。这里的矩阵变量可以出现在url中的任何地方，变量之间用;分隔。如下：</p>\n<pre><code class=\"hljs undefined\"><span class=\"hljs-regexp\">//</span> GET <span class=\"hljs-regexp\">/pets/</span><span class=\"hljs-number\">42</span>;q=<span class=\"hljs-number\">11</span>;r=<span class=\"hljs-number\">22</span>@RequestMapping(value = <span class=\"hljs-string\">\"/pets/&#123;petId&#125;\"</span>)public void findPet(@PathVariable String petId, @MatrixVariable int q) &#123;    <span class=\"hljs-regexp\">//</span> petId == <span class=\"hljs-number\">42</span>    <span class=\"hljs-regexp\">//</span> q == <span class=\"hljs-number\">11</span>&#125;</code></pre>\n<p>需要注意的是默认Spring mvc是不支持矩阵变量的，需要开启。</p>\n<pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mvc:annotation-driven</span> <span class=\"hljs-attr\">enable-matrix-variables</span>=<span class=\"hljs-string\">\"true\"</span> /&gt;</span></code></pre>\n<p>注解配置则需要如下开启：</p>\n<pre><code class=\"hljs undefined\"><span class=\"hljs-meta\">@Configurationpublic</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">WebConfig</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">WebMvcConfigurerAdapter</span> </span>&#123;     <span class=\"hljs-meta\">@Override</span>    public void configurePathMatch(<span class=\"hljs-type\">PathMatchConfigurer</span> configurer) &#123;        <span class=\"hljs-type\">UrlPathHelper</span> urlPathHelper = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">UrlPathHelper</span>();        urlPathHelper.setRemoveSemicolonContent(<span class=\"hljs-literal\">false</span>);        configurer.setUrlPathHelper(urlPathHelper);    &#125;&#125;</code></pre>\n<h3 id=\"PathVariable\"><a href=\"#PathVariable\" class=\"headerlink\" title=\"@PathVariable\"></a>@PathVariable</h3><p>此注解使用在请求handler方法的参数上。@RequestMapping可以定义动态路径，如:</p>\n<pre><code class=\"hljs undefined\"><span class=\"hljs-selector-tag\">RequestMapping</span>(<span class=\"hljs-string\">\"/users/&#123;uid&#125;\"</span>)\n<span class=\"hljs-selector-tag\">public</span> <span class=\"hljs-selector-tag\">String</span> <span class=\"hljs-selector-tag\">execute</span>(<span class=\"hljs-variable\">@PathVariable</span>(<span class=\"hljs-string\">\"uid\"</span>) String uid)&#123;\n&#125;</code></pre>\n<h3 id=\"RequestAttribute\"><a href=\"#RequestAttribute\" class=\"headerlink\" title=\"@RequestAttribute\"></a>@RequestAttribute</h3><p>此注解用在请求handler方法的参数上，用于将web请求中的属性(requst attributes，是服务器放入的属性值)绑定到方法参数上。</p>\n<h3 id=\"RequestBody\"><a href=\"#RequestBody\" class=\"headerlink\" title=\"@RequestBody\"></a>@RequestBody</h3><p>此注解用在请求handler方法的参数上，用于将http请求的Body映射绑定到此参数上。HttpMessageConverter负责将对象转换为http请求。</p>\n<h3 id=\"RequestHeader\"><a href=\"#RequestHeader\" class=\"headerlink\" title=\"@RequestHeader\"></a>@RequestHeader</h3><p>此注解用在请求handler方法的参数上，用于将http请求头部的值绑定到参数上。</p>\n<h3 id=\"RequestParam\"><a href=\"#RequestParam\" class=\"headerlink\" title=\"@RequestParam\"></a>@RequestParam</h3><p>此注解用在请求handler方法的参数上，用于将http请求参数的值绑定到参数上。</p>\n<h3 id=\"RequestPart\"><a href=\"#RequestPart\" class=\"headerlink\" title=\"@RequestPart\"></a>@RequestPart</h3><p>此注解用在请求handler方法的参数上，用于将文件之类的multipart绑定到参数上。</p>\n<h3 id=\"ResponseBody\"><a href=\"#ResponseBody\" class=\"headerlink\" title=\"@ResponseBody\"></a>@ResponseBody</h3><p>此注解用在请求handler方法上。和@RequestBody作用类似，用于将方法的返回对象直接输出到http响应中。</p>\n<h3 id=\"ResponseStatus\"><a href=\"#ResponseStatus\" class=\"headerlink\" title=\"@ResponseStatus\"></a>@ResponseStatus</h3><p>此注解用于方法和exception类上，声明此方法或者异常类返回的http状态码。可以在Controller上使用此注解，这样所有的@RequestMapping都会继承。</p>\n<h3 id=\"ControllerAdvice\"><a href=\"#ControllerAdvice\" class=\"headerlink\" title=\"@ControllerAdvice\"></a>@ControllerAdvice</h3><p>此注解用于class上。前面说过可以对每一个controller声明一个ExceptionMethod。这里可以使用@ControllerAdvice来声明一个类来统一对所有@RequestMapping方法来做@ExceptionHandler, @InitBinder, and @ModelAttribute处理。</p>\n<h3 id=\"RestController\"><a href=\"#RestController\" class=\"headerlink\" title=\"@RestController\"></a>@RestController</h3><p>此注解用于class上，声明此controller返回的不是一个视图而是一个领域对象。其同时引入了@Controller and @ResponseBody两个注解。</p>\n<h3 id=\"RestControllerAdvice\"><a href=\"#RestControllerAdvice\" class=\"headerlink\" title=\"@RestControllerAdvice\"></a>@RestControllerAdvice</h3><p>此注解用于class上，同时引入了@ControllerAdvice and @ResponseBody两个注解。</p>\n<h3 id=\"SessionAttribute\"><a href=\"#SessionAttribute\" class=\"headerlink\" title=\"@SessionAttribute\"></a>@SessionAttribute</h3><p>此注解用于方法的参数上，用于将session中的属性绑定到参数。</p>\n<h3 id=\"SessionAttributes\"><a href=\"#SessionAttributes\" class=\"headerlink\" title=\"@SessionAttributes\"></a>@SessionAttributes</h3><p>此注解用于type级别，用于将JavaBean对象存储到session中。一般和@ModelAttribute注解一起使用。如下：</p>\n<pre><code class=\"hljs undefined\"><span class=\"hljs-variable\">@ModelAttribute</span>(<span class=\"hljs-string\">\"user\"</span>)\npublic PUser getUser() &#123;&#125;\n\n<span class=\"hljs-comment\">// controller和上面的代码在同一controller中</span>\n<span class=\"hljs-variable\">@Controller</span>\n<span class=\"hljs-variable\">@SessionAttributes</span>(value = <span class=\"hljs-string\">\"user\"</span>, types = &#123;\n    User.class\n&#125;)\npublic class UserController &#123;&#125;</code></pre>\n<h2 id=\"数据访问注解\"><a href=\"#数据访问注解\" class=\"headerlink\" title=\"数据访问注解\"></a>数据访问注解</h2><h3 id=\"Transactional\"><a href=\"#Transactional\" class=\"headerlink\" title=\"@Transactional\"></a>@Transactional</h3><p>此注解使用在接口定义、接口中的方法、类定义或者类中的public方法上。需要注意的是此注解并不激活事务行为，它仅仅是一个元数据，会被一些运行时基础设施来消费。</p>\n<h2 id=\"任务执行、调度注解\"><a href=\"#任务执行、调度注解\" class=\"headerlink\" title=\"任务执行、调度注解\"></a>任务执行、调度注解</h2><h3 id=\"Scheduled\"><a href=\"#Scheduled\" class=\"headerlink\" title=\"@Scheduled\"></a>@Scheduled</h3><p>此注解使用在方法上，声明此方法被定时调度。使用了此注解的方法返回类型需要是Void，并且不能接受任何参数。</p>\n<pre><code class=\"hljs undefined\"><span class=\"hljs-variable\">@Scheduled</span>(fixedDelay=<span class=\"hljs-number\">1000</span>)\npublic void schedule() &#123;&#125;\n\n<span class=\"hljs-variable\">@Scheduled</span>(fixedRate=<span class=\"hljs-number\">1000</span>)\npublic void schedulg() &#123;\n&#125;</code></pre>\n<p>第二个与第一个不同之处在于其不会等待上一次的任务执行结束。</p>\n<h3 id=\"Async\"><a href=\"#Async\" class=\"headerlink\" title=\"@Async\"></a>@Async</h3><p>此注解使用在方法上，声明此方法会在一个单独的线程中执行。不同于Scheduled注解，此注解可以接受参数。<br>使用此注解的方法的返回类型可以是Void也可是返回值。但是返回值的类型必须是一个Future。</p>\n<h2 id=\"测试注解\"><a href=\"#测试注解\" class=\"headerlink\" title=\"测试注解\"></a>测试注解</h2><h3 id=\"ContextConfiguration\"><a href=\"#ContextConfiguration\" class=\"headerlink\" title=\"@ContextConfiguration\"></a>@ContextConfiguration</h3><p>此注解使用在Class上，声明测试使用的配置文件，此外，也可以指定加载上下文的类。</p>\n<p>此注解一般需要搭配SpringJUnit4ClassRunner使用。</p>\n<pre><code class=\"hljs undefined\"><span class=\"hljs-variable\">@RunWith</span>(SpringJUnit4ClassRunner.class)\n<span class=\"hljs-variable\">@ContextConfiguration</span>(classes = SpringCoreConfig.class)\npublic class UserServiceTest &#123;&#125;</code></pre>\n"},{"title":"Squid 代理服务器配置","date":"2017-04-21T03:10:50.000Z","_content":"## 安装\n\n```shell\nyum -y install squid\n```\n\n\n安装`Mysql`\n\n\n\n```\nyum install perl-ExtUtils-CBuilder perl-ExtUtils-MakeMaker -y\n```\n\n\n\n安装`DBI-1.636.tar.gz` \n\n```\nwget http://search.cpan.org/CPAN/authors/id/T/TI/TIMB/DBI-1.636.tar.gz\ntar -xvf DBI-1.636.tar.gz \n\ncd DBI-1.636\n\nmake \nmake install\n```\n\n\n安装 `DBD-mysql-4.039.tar.gz` 时，需要设置\n```\nwget http://www.cpan.org/authors/id/C/CA/CAPTTOFU/DBD-mysql-4.039.tar.gz\ntar -xvf DBD-mysql-4.039.tar.gz \n\ncd DBD-mysql-4.039\n\nperl Makefile.PL --mysql_config=/usr/bin/mysql_config\nmake\nmake install\n```\n\n\n\n\n\n*配置文件 `squid.conf`*\n```\n#auth_param basic program /usr/lib64/squid/basic_ncsa_auth /etc/squid/passwd\nauth_param basic program /usr/lib64/squid/basic_db_auth --user root --password mysql2016 --plaintext --persist\nauth_param basic children 5\nauth_param basic realm Squid proxy-caching web server\nauth_param basic credentialsttl 2 hours\nacl normal proxy_auth REQUIRED\nhttp_access allow normal\n\n#\n# Recommended minimum configuration:\n#\n\n# Example rule allowing access from your local networks.\n# Adapt to list your (internal) IP networks from where browsing\n# should be allowed\nacl localnet src 10.0.0.0/8     # RFC1918 possible internal network\nacl localnet src 172.16.0.0/12  # RFC1918 possible internal network\nacl localnet src 192.168.0.0/16 # RFC1918 possible internal network\nacl localnet src fc00::/7       # RFC 4193 local private network range\nacl localnet src fe80::/10      # RFC 4291 link-local (directly plugged) machines\n\nacl SSL_ports port 443\nacl Safe_ports port 80          # http\nacl Safe_ports port 21          # ftp\nacl Safe_ports port 443         # https\nacl Safe_ports port 70          # gopher\nacl Safe_ports port 210         # wais\nacl Safe_ports port 1025-65535  # unregistered ports\nacl Safe_ports port 280         # http-mgmt\nacl Safe_ports port 488         # gss-http\nacl Safe_ports port 591         # filemaker\nacl Safe_ports port 777         # multiling http\nacl CONNECT method CONNECT\n\n\n#\n# Recommended minimum Access Permission configuration:\n#\n# Deny requests to certain unsafe ports\nhttp_access deny !Safe_ports\n\n# Deny CONNECT to other than secure SSL ports\nhttp_access deny CONNECT !SSL_ports\n\n# Only allow cachemgr access from localhost\nhttp_access allow localhost manager\nhttp_access deny manager\n\n# We strongly recommend the following be uncommented to protect innocent\n# web applications running on the proxy server who think the only\n# one who can access services on \"localhost\" is a local user\n#http_access deny to_localhost\n\n#\n# INSERT YOUR OWN RULE(S) HERE TO ALLOW ACCESS FROM YOUR CLIENTS\n#\n\n# Example rule allowing access from your local networks.\n# Adapt localnet in the ACL section to list your (internal) IP networks\n# from where browsing should be allowed\nhttp_access allow localnet\nhttp_access allow localhost\n\n# And finally deny all other access to this proxy\nhttp_access allow all\n\n# Squid normally listens to port 3128\nhttp_port 3128\n\n# Uncomment and adjust the following to add a disk cache directory.\n                                          \n# Uncomment and adjust the following to add a disk cache directory.\n#cache_dir ufs /var/spool/squid 100 16 256\n\n# Leave coredumps in the first cache dir\ncoredump_dir /var/spool/squid\n\n#\n# Add any of your own refresh_pattern entries above these.\n#\nrefresh_pattern ^ftp:           1440    20%     10080\nrefresh_pattern ^gopher:        1440    0%      1440\nrefresh_pattern -i (/cgi-bin/|\\?) 0     0%      0\nrefresh_pattern .               0       20%     4320\n\n#auth_param basic program /usr/lib64/squid/ncsa_auth /etc/squid/passwd\n#auth_param basic children 5        \n#auth_param basic credentialsttl 1 hours    \n#auth_param basic realm my test prosy         \n#acl test123 proxy_auth REQUIRED  \n#http_access allow test123    \n\n#auth_param basic program /usr/lib64/squid/basic_ncsa_auth /etc/squid/passwd \n#auth_param basic children 5\n#auth_param basic realm Squid proxy-caching web server\n#auth_param basic credentialsttl 2 hours\n#acl normal proxy_auth REQUIRED\n#http_access allow normal                                      \n```\n","source":"_posts/squid.md","raw":"---\ntitle: Squid 代理服务器配置\ndate: 2017-04-21 11:10:50\ntags:\n    - Squid\ncategories:\n    - 工具\n---\n## 安装\n\n```shell\nyum -y install squid\n```\n\n\n安装`Mysql`\n\n\n\n```\nyum install perl-ExtUtils-CBuilder perl-ExtUtils-MakeMaker -y\n```\n\n\n\n安装`DBI-1.636.tar.gz` \n\n```\nwget http://search.cpan.org/CPAN/authors/id/T/TI/TIMB/DBI-1.636.tar.gz\ntar -xvf DBI-1.636.tar.gz \n\ncd DBI-1.636\n\nmake \nmake install\n```\n\n\n安装 `DBD-mysql-4.039.tar.gz` 时，需要设置\n```\nwget http://www.cpan.org/authors/id/C/CA/CAPTTOFU/DBD-mysql-4.039.tar.gz\ntar -xvf DBD-mysql-4.039.tar.gz \n\ncd DBD-mysql-4.039\n\nperl Makefile.PL --mysql_config=/usr/bin/mysql_config\nmake\nmake install\n```\n\n\n\n\n\n*配置文件 `squid.conf`*\n```\n#auth_param basic program /usr/lib64/squid/basic_ncsa_auth /etc/squid/passwd\nauth_param basic program /usr/lib64/squid/basic_db_auth --user root --password mysql2016 --plaintext --persist\nauth_param basic children 5\nauth_param basic realm Squid proxy-caching web server\nauth_param basic credentialsttl 2 hours\nacl normal proxy_auth REQUIRED\nhttp_access allow normal\n\n#\n# Recommended minimum configuration:\n#\n\n# Example rule allowing access from your local networks.\n# Adapt to list your (internal) IP networks from where browsing\n# should be allowed\nacl localnet src 10.0.0.0/8     # RFC1918 possible internal network\nacl localnet src 172.16.0.0/12  # RFC1918 possible internal network\nacl localnet src 192.168.0.0/16 # RFC1918 possible internal network\nacl localnet src fc00::/7       # RFC 4193 local private network range\nacl localnet src fe80::/10      # RFC 4291 link-local (directly plugged) machines\n\nacl SSL_ports port 443\nacl Safe_ports port 80          # http\nacl Safe_ports port 21          # ftp\nacl Safe_ports port 443         # https\nacl Safe_ports port 70          # gopher\nacl Safe_ports port 210         # wais\nacl Safe_ports port 1025-65535  # unregistered ports\nacl Safe_ports port 280         # http-mgmt\nacl Safe_ports port 488         # gss-http\nacl Safe_ports port 591         # filemaker\nacl Safe_ports port 777         # multiling http\nacl CONNECT method CONNECT\n\n\n#\n# Recommended minimum Access Permission configuration:\n#\n# Deny requests to certain unsafe ports\nhttp_access deny !Safe_ports\n\n# Deny CONNECT to other than secure SSL ports\nhttp_access deny CONNECT !SSL_ports\n\n# Only allow cachemgr access from localhost\nhttp_access allow localhost manager\nhttp_access deny manager\n\n# We strongly recommend the following be uncommented to protect innocent\n# web applications running on the proxy server who think the only\n# one who can access services on \"localhost\" is a local user\n#http_access deny to_localhost\n\n#\n# INSERT YOUR OWN RULE(S) HERE TO ALLOW ACCESS FROM YOUR CLIENTS\n#\n\n# Example rule allowing access from your local networks.\n# Adapt localnet in the ACL section to list your (internal) IP networks\n# from where browsing should be allowed\nhttp_access allow localnet\nhttp_access allow localhost\n\n# And finally deny all other access to this proxy\nhttp_access allow all\n\n# Squid normally listens to port 3128\nhttp_port 3128\n\n# Uncomment and adjust the following to add a disk cache directory.\n                                          \n# Uncomment and adjust the following to add a disk cache directory.\n#cache_dir ufs /var/spool/squid 100 16 256\n\n# Leave coredumps in the first cache dir\ncoredump_dir /var/spool/squid\n\n#\n# Add any of your own refresh_pattern entries above these.\n#\nrefresh_pattern ^ftp:           1440    20%     10080\nrefresh_pattern ^gopher:        1440    0%      1440\nrefresh_pattern -i (/cgi-bin/|\\?) 0     0%      0\nrefresh_pattern .               0       20%     4320\n\n#auth_param basic program /usr/lib64/squid/ncsa_auth /etc/squid/passwd\n#auth_param basic children 5        \n#auth_param basic credentialsttl 1 hours    \n#auth_param basic realm my test prosy         \n#acl test123 proxy_auth REQUIRED  \n#http_access allow test123    \n\n#auth_param basic program /usr/lib64/squid/basic_ncsa_auth /etc/squid/passwd \n#auth_param basic children 5\n#auth_param basic realm Squid proxy-caching web server\n#auth_param basic credentialsttl 2 hours\n#acl normal proxy_auth REQUIRED\n#http_access allow normal                                      \n```\n","slug":"squid","published":1,"updated":"2020-07-17T02:32:01.209Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcpntui3004k04oi058w8fqv","content":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><pre><code class=\"hljs shell\">yum -y install squid</code></pre>\n<p>安装<code>Mysql</code></p>\n<pre><code class=\"hljs undefined\">yum <span class=\"hljs-keyword\">install </span>perl-<span class=\"hljs-keyword\">ExtUtils-CBuilder </span>perl-<span class=\"hljs-keyword\">ExtUtils-MakeMaker </span>-y</code></pre>\n<p>安装<code>DBI-1.636.tar.gz</code> </p>\n<pre><code class=\"hljs undefined\">wget http://<span class=\"hljs-built_in\">search</span>.cpan.org/CPAN/authors/id/T/TI/TIMB/DBI-<span class=\"hljs-number\">1.636</span>.tar.gz\ntar -xvf DBI-<span class=\"hljs-number\">1.636</span>.tar.gz \n\n<span class=\"hljs-keyword\">cd</span> DBI-<span class=\"hljs-number\">1.636</span>\n\n<span class=\"hljs-keyword\">make</span> \n<span class=\"hljs-keyword\">make</span> install</code></pre>\n<p>安装 <code>DBD-mysql-4.039.tar.gz</code> 时，需要设置<br><pre><code class=\"hljs undefined\">wget http:<span class=\"hljs-comment\">//www.cpan.org/authors/id/C/CA/CAPTTOFU/DBD-mysql-4.039.tar.gz</span>\ntar -xvf DBD-mysql-<span class=\"hljs-number\">4.039</span><span class=\"hljs-selector-class\">.tar</span><span class=\"hljs-selector-class\">.gz</span> \n\ncd DBD-mysql-<span class=\"hljs-number\">4.039</span>\n\nperl Makefile<span class=\"hljs-selector-class\">.PL</span> --mysql_config=/usr/bin/mysql_config\nmake\nmake install</code></pre></p>\n<p><em>配置文件 <code>squid.conf</code></em><br><pre><code class=\"hljs undefined\"><span class=\"hljs-comment\">#auth_param basic program /usr/lib64/squid/basic_ncsa_auth /etc/squid/passwd</span>\nauth_param basic program /usr/lib64/squid/basic_db_auth --user root --password mysql2016 --plaintext --persist\nauth_param basic children 5\nauth_param basic realm Squid proxy-caching web<span class=\"hljs-built_in\"> server\n</span>auth_param basic credentialsttl 2 hours\nacl normal proxy_auth REQUIRED\nhttp_access allow normal\n\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Recommended minimum configuration:</span>\n<span class=\"hljs-comment\">#</span>\n\n<span class=\"hljs-comment\"># Example rule allowing access from your local networks.</span>\n<span class=\"hljs-comment\"># Adapt to list your (internal) IP networks from where browsing</span>\n<span class=\"hljs-comment\"># should be allowed</span>\nacl localnet src 10.0.0.0/8     # RFC1918 possible internal<span class=\"hljs-built_in\"> network\n</span>acl localnet src 172.16.0.0/12  # RFC1918 possible internal<span class=\"hljs-built_in\"> network\n</span>acl localnet src 192.168.0.0/16 # RFC1918 possible internal<span class=\"hljs-built_in\"> network\n</span>acl localnet src fc00::/7       # RFC 4193 local private<span class=\"hljs-built_in\"> network </span>range\nacl localnet src fe80::/10      # RFC 4291 link-local (directly plugged) machines\n\nacl SSL_ports<span class=\"hljs-built_in\"> port </span>443\nacl Safe_ports<span class=\"hljs-built_in\"> port </span>80          # http\nacl Safe_ports<span class=\"hljs-built_in\"> port </span>21          # ftp\nacl Safe_ports<span class=\"hljs-built_in\"> port </span>443         # https\nacl Safe_ports<span class=\"hljs-built_in\"> port </span>70          # gopher\nacl Safe_ports<span class=\"hljs-built_in\"> port </span>210         # wais\nacl Safe_ports<span class=\"hljs-built_in\"> port </span>1025-65535  # unregistered ports\nacl Safe_ports<span class=\"hljs-built_in\"> port </span>280         # http-mgmt\nacl Safe_ports<span class=\"hljs-built_in\"> port </span>488         # gss-http\nacl Safe_ports<span class=\"hljs-built_in\"> port </span>591         # filemaker\nacl Safe_ports<span class=\"hljs-built_in\"> port </span>777         # multiling http\nacl CONNECT method CONNECT\n\n\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Recommended minimum Access Permission configuration:</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Deny requests to certain unsafe ports</span>\nhttp_access deny !Safe_ports\n\n<span class=\"hljs-comment\"># Deny CONNECT to other than secure SSL ports</span>\nhttp_access deny CONNECT !SSL_ports\n\n<span class=\"hljs-comment\"># Only allow cachemgr access from localhost</span>\nhttp_access allow localhost manager\nhttp_access deny manager\n\n<span class=\"hljs-comment\"># We strongly recommend the following be uncommented to protect innocent</span>\n<span class=\"hljs-comment\"># web applications running on the proxy server who think the only</span>\n<span class=\"hljs-comment\"># one who can access services on \"localhost\" is a local user</span>\n<span class=\"hljs-comment\">#http_access deny to_localhost</span>\n\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># INSERT YOUR OWN RULE(S) HERE TO ALLOW ACCESS FROM YOUR CLIENTS</span>\n<span class=\"hljs-comment\">#</span>\n\n<span class=\"hljs-comment\"># Example rule allowing access from your local networks.</span>\n<span class=\"hljs-comment\"># Adapt localnet in the ACL section to list your (internal) IP networks</span>\n<span class=\"hljs-comment\"># from where browsing should be allowed</span>\nhttp_access allow localnet\nhttp_access allow localhost\n\n<span class=\"hljs-comment\"># And finally deny all other access to this proxy</span>\nhttp_access allow all\n\n<span class=\"hljs-comment\"># Squid normally listens to port 3128</span>\nhttp_port 3128\n\n<span class=\"hljs-comment\"># Uncomment and adjust the following to add a disk cache directory.</span>\n                                          \n<span class=\"hljs-comment\"># Uncomment and adjust the following to add a disk cache directory.</span>\n<span class=\"hljs-comment\">#cache_dir ufs /var/spool/squid 100 16 256</span>\n\n<span class=\"hljs-comment\"># Leave coredumps in the first cache dir</span>\ncoredump_dir /var/spool/squid\n\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Add any of your own refresh_pattern entries above these.</span>\n<span class=\"hljs-comment\">#</span>\nrefresh_pattern ^ftp:           1440    20%     10080\nrefresh_pattern ^gopher:        1440    0%      1440\nrefresh_pattern -i (/cgi-bin/|\\?) 0     0%      0\nrefresh_pattern .               0       20%     4320\n\n<span class=\"hljs-comment\">#auth_param basic program /usr/lib64/squid/ncsa_auth /etc/squid/passwd</span>\n<span class=\"hljs-comment\">#auth_param basic children 5        </span>\n<span class=\"hljs-comment\">#auth_param basic credentialsttl 1 hours    </span>\n<span class=\"hljs-comment\">#auth_param basic realm my test prosy         </span>\n<span class=\"hljs-comment\">#acl test123 proxy_auth REQUIRED  </span>\n<span class=\"hljs-comment\">#http_access allow test123    </span>\n\n<span class=\"hljs-comment\">#auth_param basic program /usr/lib64/squid/basic_ncsa_auth /etc/squid/passwd </span>\n<span class=\"hljs-comment\">#auth_param basic children 5</span>\n<span class=\"hljs-comment\">#auth_param basic realm Squid proxy-caching web server</span>\n<span class=\"hljs-comment\">#auth_param basic credentialsttl 2 hours</span>\n<span class=\"hljs-comment\">#acl normal proxy_auth REQUIRED</span>\n<span class=\"hljs-comment\">#http_access allow normal</span></code></pre></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><pre><code class=\"hljs shell\">yum -y install squid</code></pre>\n<p>安装<code>Mysql</code></p>\n<pre><code class=\"hljs undefined\">yum <span class=\"hljs-keyword\">install </span>perl-<span class=\"hljs-keyword\">ExtUtils-CBuilder </span>perl-<span class=\"hljs-keyword\">ExtUtils-MakeMaker </span>-y</code></pre>\n<p>安装<code>DBI-1.636.tar.gz</code> </p>\n<pre><code class=\"hljs undefined\">wget http://<span class=\"hljs-built_in\">search</span>.cpan.org/CPAN/authors/id/T/TI/TIMB/DBI-<span class=\"hljs-number\">1.636</span>.tar.gz\ntar -xvf DBI-<span class=\"hljs-number\">1.636</span>.tar.gz \n\n<span class=\"hljs-keyword\">cd</span> DBI-<span class=\"hljs-number\">1.636</span>\n\n<span class=\"hljs-keyword\">make</span> \n<span class=\"hljs-keyword\">make</span> install</code></pre>\n<p>安装 <code>DBD-mysql-4.039.tar.gz</code> 时，需要设置<br><pre><code class=\"hljs undefined\">wget http:<span class=\"hljs-comment\">//www.cpan.org/authors/id/C/CA/CAPTTOFU/DBD-mysql-4.039.tar.gz</span>\ntar -xvf DBD-mysql-<span class=\"hljs-number\">4.039</span><span class=\"hljs-selector-class\">.tar</span><span class=\"hljs-selector-class\">.gz</span> \n\ncd DBD-mysql-<span class=\"hljs-number\">4.039</span>\n\nperl Makefile<span class=\"hljs-selector-class\">.PL</span> --mysql_config=/usr/bin/mysql_config\nmake\nmake install</code></pre></p>\n<p><em>配置文件 <code>squid.conf</code></em><br><pre><code class=\"hljs undefined\"><span class=\"hljs-comment\">#auth_param basic program /usr/lib64/squid/basic_ncsa_auth /etc/squid/passwd</span>\nauth_param basic program /usr/lib64/squid/basic_db_auth --user root --password mysql2016 --plaintext --persist\nauth_param basic children 5\nauth_param basic realm Squid proxy-caching web<span class=\"hljs-built_in\"> server\n</span>auth_param basic credentialsttl 2 hours\nacl normal proxy_auth REQUIRED\nhttp_access allow normal\n\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Recommended minimum configuration:</span>\n<span class=\"hljs-comment\">#</span>\n\n<span class=\"hljs-comment\"># Example rule allowing access from your local networks.</span>\n<span class=\"hljs-comment\"># Adapt to list your (internal) IP networks from where browsing</span>\n<span class=\"hljs-comment\"># should be allowed</span>\nacl localnet src 10.0.0.0/8     # RFC1918 possible internal<span class=\"hljs-built_in\"> network\n</span>acl localnet src 172.16.0.0/12  # RFC1918 possible internal<span class=\"hljs-built_in\"> network\n</span>acl localnet src 192.168.0.0/16 # RFC1918 possible internal<span class=\"hljs-built_in\"> network\n</span>acl localnet src fc00::/7       # RFC 4193 local private<span class=\"hljs-built_in\"> network </span>range\nacl localnet src fe80::/10      # RFC 4291 link-local (directly plugged) machines\n\nacl SSL_ports<span class=\"hljs-built_in\"> port </span>443\nacl Safe_ports<span class=\"hljs-built_in\"> port </span>80          # http\nacl Safe_ports<span class=\"hljs-built_in\"> port </span>21          # ftp\nacl Safe_ports<span class=\"hljs-built_in\"> port </span>443         # https\nacl Safe_ports<span class=\"hljs-built_in\"> port </span>70          # gopher\nacl Safe_ports<span class=\"hljs-built_in\"> port </span>210         # wais\nacl Safe_ports<span class=\"hljs-built_in\"> port </span>1025-65535  # unregistered ports\nacl Safe_ports<span class=\"hljs-built_in\"> port </span>280         # http-mgmt\nacl Safe_ports<span class=\"hljs-built_in\"> port </span>488         # gss-http\nacl Safe_ports<span class=\"hljs-built_in\"> port </span>591         # filemaker\nacl Safe_ports<span class=\"hljs-built_in\"> port </span>777         # multiling http\nacl CONNECT method CONNECT\n\n\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Recommended minimum Access Permission configuration:</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Deny requests to certain unsafe ports</span>\nhttp_access deny !Safe_ports\n\n<span class=\"hljs-comment\"># Deny CONNECT to other than secure SSL ports</span>\nhttp_access deny CONNECT !SSL_ports\n\n<span class=\"hljs-comment\"># Only allow cachemgr access from localhost</span>\nhttp_access allow localhost manager\nhttp_access deny manager\n\n<span class=\"hljs-comment\"># We strongly recommend the following be uncommented to protect innocent</span>\n<span class=\"hljs-comment\"># web applications running on the proxy server who think the only</span>\n<span class=\"hljs-comment\"># one who can access services on \"localhost\" is a local user</span>\n<span class=\"hljs-comment\">#http_access deny to_localhost</span>\n\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># INSERT YOUR OWN RULE(S) HERE TO ALLOW ACCESS FROM YOUR CLIENTS</span>\n<span class=\"hljs-comment\">#</span>\n\n<span class=\"hljs-comment\"># Example rule allowing access from your local networks.</span>\n<span class=\"hljs-comment\"># Adapt localnet in the ACL section to list your (internal) IP networks</span>\n<span class=\"hljs-comment\"># from where browsing should be allowed</span>\nhttp_access allow localnet\nhttp_access allow localhost\n\n<span class=\"hljs-comment\"># And finally deny all other access to this proxy</span>\nhttp_access allow all\n\n<span class=\"hljs-comment\"># Squid normally listens to port 3128</span>\nhttp_port 3128\n\n<span class=\"hljs-comment\"># Uncomment and adjust the following to add a disk cache directory.</span>\n                                          \n<span class=\"hljs-comment\"># Uncomment and adjust the following to add a disk cache directory.</span>\n<span class=\"hljs-comment\">#cache_dir ufs /var/spool/squid 100 16 256</span>\n\n<span class=\"hljs-comment\"># Leave coredumps in the first cache dir</span>\ncoredump_dir /var/spool/squid\n\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Add any of your own refresh_pattern entries above these.</span>\n<span class=\"hljs-comment\">#</span>\nrefresh_pattern ^ftp:           1440    20%     10080\nrefresh_pattern ^gopher:        1440    0%      1440\nrefresh_pattern -i (/cgi-bin/|\\?) 0     0%      0\nrefresh_pattern .               0       20%     4320\n\n<span class=\"hljs-comment\">#auth_param basic program /usr/lib64/squid/ncsa_auth /etc/squid/passwd</span>\n<span class=\"hljs-comment\">#auth_param basic children 5        </span>\n<span class=\"hljs-comment\">#auth_param basic credentialsttl 1 hours    </span>\n<span class=\"hljs-comment\">#auth_param basic realm my test prosy         </span>\n<span class=\"hljs-comment\">#acl test123 proxy_auth REQUIRED  </span>\n<span class=\"hljs-comment\">#http_access allow test123    </span>\n\n<span class=\"hljs-comment\">#auth_param basic program /usr/lib64/squid/basic_ncsa_auth /etc/squid/passwd </span>\n<span class=\"hljs-comment\">#auth_param basic children 5</span>\n<span class=\"hljs-comment\">#auth_param basic realm Squid proxy-caching web server</span>\n<span class=\"hljs-comment\">#auth_param basic credentialsttl 2 hours</span>\n<span class=\"hljs-comment\">#acl normal proxy_auth REQUIRED</span>\n<span class=\"hljs-comment\">#http_access allow normal</span></code></pre></p>\n"},{"title":"RocketMQ文档","date":"2017-05-17T01:06:25.000Z","comments":0,"_content":"\n> [官方文档](https://rocketmq.incubator.apache.org/docs/quick-start/)\n\n# 快速开始\n\n# 环境准备\n\n安装以下软件：\n\n1. 64位系统，推荐Linux/Unix/Mac\n2. 64位 JDK 1.7+\n3. Maven 3.2.x\n4. Git\n\n# 克隆&编译\n\n```\n> git clone -b develop https://github.com/apache/incubator-rocketmq.git\n> cd incubator-rocketmq\n> mvn -Prelease-all -DskipTests clean install -U\n> cd distribution/target/apache-rocketmq\n\n```\n\n# 启动Name Server\n\n```\n> nohup sh bin/mqnamesrv &\n> tail -f ~/logs/rocketmqlogs/namesrv.log\nThe Name Server boot success...\n```\n\n# 启动Broker\n\n```\n> nohup sh bin/mqbroker -n localhost:9876 &\n> tail -f ~/logs/rocketmqlogs/broker.log \nThe broker[%s, 172.30.30.233:10911] boot success...\n\n```\n\n需要提供一个可以网络访问的ip。\n\n\n# 发送&接受消息\n\n发送&接受消息之前需要通过设置环境变量`NAMESRV_ADDR`，用于通知客户端需要访问的服务地址。\n\n```\n> export NAMESRV_ADDR=localhost:9876\n> sh bin/tools.sh org.apache.rocketmq.example.quickstart.Producer\nSendResult [sendStatus=SEND_OK, msgId= ...\n\n> sh bin/tools.sh org.apache.rocketmq.example.quickstart.Consumer\nConsumeMessageThread_%d Receive New Messages: [MessageExt...\n```\n\n\n# 停止服务\n\n```\n> sh bin/mqshutdown broker\nThe mqbroker(36695) is running...\nSend shutdown request to mqbroker(36695) OK\n\n> sh bin/mqshutdown namesrv\nThe mqnamesrv(36664) is running...\nSend shutdown request to mqnamesrv(36664) OK\n```\n","source":"_posts/rocketmq-quickstart.md","raw":"---\ntitle: RocketMQ文档\ndate: 2017-05-17 09:06:25\ntags:\n    - MQ\ncategories:\n    - 后端\ncomments: false\n---\n\n> [官方文档](https://rocketmq.incubator.apache.org/docs/quick-start/)\n\n# 快速开始\n\n# 环境准备\n\n安装以下软件：\n\n1. 64位系统，推荐Linux/Unix/Mac\n2. 64位 JDK 1.7+\n3. Maven 3.2.x\n4. Git\n\n# 克隆&编译\n\n```\n> git clone -b develop https://github.com/apache/incubator-rocketmq.git\n> cd incubator-rocketmq\n> mvn -Prelease-all -DskipTests clean install -U\n> cd distribution/target/apache-rocketmq\n\n```\n\n# 启动Name Server\n\n```\n> nohup sh bin/mqnamesrv &\n> tail -f ~/logs/rocketmqlogs/namesrv.log\nThe Name Server boot success...\n```\n\n# 启动Broker\n\n```\n> nohup sh bin/mqbroker -n localhost:9876 &\n> tail -f ~/logs/rocketmqlogs/broker.log \nThe broker[%s, 172.30.30.233:10911] boot success...\n\n```\n\n需要提供一个可以网络访问的ip。\n\n\n# 发送&接受消息\n\n发送&接受消息之前需要通过设置环境变量`NAMESRV_ADDR`，用于通知客户端需要访问的服务地址。\n\n```\n> export NAMESRV_ADDR=localhost:9876\n> sh bin/tools.sh org.apache.rocketmq.example.quickstart.Producer\nSendResult [sendStatus=SEND_OK, msgId= ...\n\n> sh bin/tools.sh org.apache.rocketmq.example.quickstart.Consumer\nConsumeMessageThread_%d Receive New Messages: [MessageExt...\n```\n\n\n# 停止服务\n\n```\n> sh bin/mqshutdown broker\nThe mqbroker(36695) is running...\nSend shutdown request to mqbroker(36695) OK\n\n> sh bin/mqshutdown namesrv\nThe mqnamesrv(36664) is running...\nSend shutdown request to mqnamesrv(36664) OK\n```\n","slug":"rocketmq-quickstart","published":1,"updated":"2020-07-17T02:32:01.205Z","layout":"post","photos":[],"link":"","_id":"ckcpntui6004o04oifoheznj0","content":"<blockquote>\n<p><a href=\"https://rocketmq.incubator.apache.org/docs/quick-start/\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n</blockquote>\n<h1 id=\"快速开始\"><a href=\"#快速开始\" class=\"headerlink\" title=\"快速开始\"></a>快速开始</h1><h1 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h1><p>安装以下软件：</p>\n<ol>\n<li>64位系统，推荐Linux/Unix/Mac</li>\n<li>64位 JDK 1.7+</li>\n<li>Maven 3.2.x</li>\n<li>Git</li>\n</ol>\n<h1 id=\"克隆-amp-编译\"><a href=\"#克隆-amp-编译\" class=\"headerlink\" title=\"克隆&amp;编译\"></a>克隆&amp;编译</h1><pre><code class=\"hljs undefined\"><span class=\"hljs-meta\">&gt;</span><span class=\"bash\"> git <span class=\"hljs-built_in\">clone</span> -b develop https://github.com/apache/incubator-rocketmq.git</span>\n<span class=\"hljs-meta\">&gt;</span><span class=\"bash\"> <span class=\"hljs-built_in\">cd</span> incubator-rocketmq</span>\n<span class=\"hljs-meta\">&gt;</span><span class=\"bash\"> mvn -Prelease-all -DskipTests clean install -U</span>\n<span class=\"hljs-meta\">&gt;</span><span class=\"bash\"> <span class=\"hljs-built_in\">cd</span> distribution/target/apache-rocketmq</span></code></pre>\n<h1 id=\"启动Name-Server\"><a href=\"#启动Name-Server\" class=\"headerlink\" title=\"启动Name Server\"></a>启动Name Server</h1><pre><code class=\"hljs undefined\">&gt; nohup sh bin/mqnamesrv &amp;\n&gt; tail -f ~/logs/rocketmqlogs/namesrv.log\nThe Name<span class=\"hljs-built_in\"> Server </span>boot success<span class=\"hljs-built_in\">..</span>.</code></pre>\n<h1 id=\"启动Broker\"><a href=\"#启动Broker\" class=\"headerlink\" title=\"启动Broker\"></a>启动Broker</h1><pre><code class=\"hljs undefined\">&gt; nohup sh <span class=\"hljs-keyword\">bin/mqbroker </span>-n localhost:<span class=\"hljs-number\">9876</span> &amp;\n&gt; tail -f ~/logs/rocketmqlogs/<span class=\"hljs-keyword\">broker.log </span>\n<span class=\"hljs-symbol\">The</span> <span class=\"hljs-keyword\">broker[%s, </span><span class=\"hljs-number\">172</span>.<span class=\"hljs-number\">30</span>.<span class=\"hljs-number\">30</span>.<span class=\"hljs-number\">233</span>:<span class=\"hljs-number\">10911</span>] <span class=\"hljs-keyword\">boot </span>success...</code></pre>\n<p>需要提供一个可以网络访问的ip。</p>\n<h1 id=\"发送-amp-接受消息\"><a href=\"#发送-amp-接受消息\" class=\"headerlink\" title=\"发送&amp;接受消息\"></a>发送&amp;接受消息</h1><p>发送&amp;接受消息之前需要通过设置环境变量<code>NAMESRV_ADDR</code>，用于通知客户端需要访问的服务地址。</p>\n<pre><code class=\"hljs undefined\">&gt; <span class=\"hljs-builtin-name\">export</span> <span class=\"hljs-attribute\">NAMESRV_ADDR</span>=localhost:9876\n&gt; sh bin/tools.sh org.apache.rocketmq.example.quickstart.Producer\nSendResult [<span class=\"hljs-attribute\">sendStatus</span>=SEND_OK, msgId= <span class=\"hljs-built_in\">..</span>.\n\n&gt; sh bin/tools.sh org.apache.rocketmq.example.quickstart.Consumer\nConsumeMessageThread_%d Receive New Messages: [MessageExt<span class=\"hljs-built_in\">..</span>.</code></pre>\n<h1 id=\"停止服务\"><a href=\"#停止服务\" class=\"headerlink\" title=\"停止服务\"></a>停止服务</h1><pre><code class=\"hljs undefined\">&gt; <span class=\"hljs-keyword\">sh </span><span class=\"hljs-keyword\">bin/mqshutdown </span><span class=\"hljs-keyword\">broker\n</span>The mqbroker(<span class=\"hljs-number\">36695</span>) is running...\nSend <span class=\"hljs-keyword\">shutdown </span>request to mqbroker(<span class=\"hljs-number\">36695</span>) OK\n\n&gt; <span class=\"hljs-keyword\">sh </span><span class=\"hljs-keyword\">bin/mqshutdown </span>namesrv\nThe mqnamesrv(<span class=\"hljs-number\">36664</span>) is running...\nSend <span class=\"hljs-keyword\">shutdown </span>request to mqnamesrv(<span class=\"hljs-number\">36664</span>) OK</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p><a href=\"https://rocketmq.incubator.apache.org/docs/quick-start/\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n</blockquote>\n<h1 id=\"快速开始\"><a href=\"#快速开始\" class=\"headerlink\" title=\"快速开始\"></a>快速开始</h1><h1 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h1><p>安装以下软件：</p>\n<ol>\n<li>64位系统，推荐Linux/Unix/Mac</li>\n<li>64位 JDK 1.7+</li>\n<li>Maven 3.2.x</li>\n<li>Git</li>\n</ol>\n<h1 id=\"克隆-amp-编译\"><a href=\"#克隆-amp-编译\" class=\"headerlink\" title=\"克隆&amp;编译\"></a>克隆&amp;编译</h1><pre><code class=\"hljs undefined\"><span class=\"hljs-meta\">&gt;</span><span class=\"bash\"> git <span class=\"hljs-built_in\">clone</span> -b develop https://github.com/apache/incubator-rocketmq.git</span>\n<span class=\"hljs-meta\">&gt;</span><span class=\"bash\"> <span class=\"hljs-built_in\">cd</span> incubator-rocketmq</span>\n<span class=\"hljs-meta\">&gt;</span><span class=\"bash\"> mvn -Prelease-all -DskipTests clean install -U</span>\n<span class=\"hljs-meta\">&gt;</span><span class=\"bash\"> <span class=\"hljs-built_in\">cd</span> distribution/target/apache-rocketmq</span></code></pre>\n<h1 id=\"启动Name-Server\"><a href=\"#启动Name-Server\" class=\"headerlink\" title=\"启动Name Server\"></a>启动Name Server</h1><pre><code class=\"hljs undefined\">&gt; nohup sh bin/mqnamesrv &amp;\n&gt; tail -f ~/logs/rocketmqlogs/namesrv.log\nThe Name<span class=\"hljs-built_in\"> Server </span>boot success<span class=\"hljs-built_in\">..</span>.</code></pre>\n<h1 id=\"启动Broker\"><a href=\"#启动Broker\" class=\"headerlink\" title=\"启动Broker\"></a>启动Broker</h1><pre><code class=\"hljs undefined\">&gt; nohup sh <span class=\"hljs-keyword\">bin/mqbroker </span>-n localhost:<span class=\"hljs-number\">9876</span> &amp;\n&gt; tail -f ~/logs/rocketmqlogs/<span class=\"hljs-keyword\">broker.log </span>\n<span class=\"hljs-symbol\">The</span> <span class=\"hljs-keyword\">broker[%s, </span><span class=\"hljs-number\">172</span>.<span class=\"hljs-number\">30</span>.<span class=\"hljs-number\">30</span>.<span class=\"hljs-number\">233</span>:<span class=\"hljs-number\">10911</span>] <span class=\"hljs-keyword\">boot </span>success...</code></pre>\n<p>需要提供一个可以网络访问的ip。</p>\n<h1 id=\"发送-amp-接受消息\"><a href=\"#发送-amp-接受消息\" class=\"headerlink\" title=\"发送&amp;接受消息\"></a>发送&amp;接受消息</h1><p>发送&amp;接受消息之前需要通过设置环境变量<code>NAMESRV_ADDR</code>，用于通知客户端需要访问的服务地址。</p>\n<pre><code class=\"hljs undefined\">&gt; <span class=\"hljs-builtin-name\">export</span> <span class=\"hljs-attribute\">NAMESRV_ADDR</span>=localhost:9876\n&gt; sh bin/tools.sh org.apache.rocketmq.example.quickstart.Producer\nSendResult [<span class=\"hljs-attribute\">sendStatus</span>=SEND_OK, msgId= <span class=\"hljs-built_in\">..</span>.\n\n&gt; sh bin/tools.sh org.apache.rocketmq.example.quickstart.Consumer\nConsumeMessageThread_%d Receive New Messages: [MessageExt<span class=\"hljs-built_in\">..</span>.</code></pre>\n<h1 id=\"停止服务\"><a href=\"#停止服务\" class=\"headerlink\" title=\"停止服务\"></a>停止服务</h1><pre><code class=\"hljs undefined\">&gt; <span class=\"hljs-keyword\">sh </span><span class=\"hljs-keyword\">bin/mqshutdown </span><span class=\"hljs-keyword\">broker\n</span>The mqbroker(<span class=\"hljs-number\">36695</span>) is running...\nSend <span class=\"hljs-keyword\">shutdown </span>request to mqbroker(<span class=\"hljs-number\">36695</span>) OK\n\n&gt; <span class=\"hljs-keyword\">sh </span><span class=\"hljs-keyword\">bin/mqshutdown </span>namesrv\nThe mqnamesrv(<span class=\"hljs-number\">36664</span>) is running...\nSend <span class=\"hljs-keyword\">shutdown </span>request to mqnamesrv(<span class=\"hljs-number\">36664</span>) OK</code></pre>\n"},{"title":"spring主要组件","date":"2017-05-10T01:16:06.000Z","_content":"# Spring、Spring Cloud主要组件\n\n## spring 顶级项目：\n- Spring IO platform:用于系统部署，是可集成的，构建现代化应用的版本平台，具体来说当你使用maven dependency引入spring jar包时它就在工作了。\n- Spring Boot:旨在简化创建产品级的 Spring 应用和服务，简化了配置文件，使用嵌入式web服务器，含有诸多开箱即用微服务功能，可以和spring cloud联合部署。\n- Spring Framework:即通常所说的spring 框架，是一个开源的Java/Java EE全功能栈应用程序框架，其它spring项目如spring boot也依赖于此框架。\n- Spring Cloud：微服务工具包，为开发者提供了在分布式系统的配置管理、服务发现、断路器、智能路由、微代理、控制总线等开发工具包。\n- Spring XD：是一种运行时环境（服务器软件，非开发框架），组合spring技术，如spring batch、spring boot、spring data，采集大数据并处理。\n- Spring Data：是一个数据访问及操作的工具包，封装了很多种数据及数据库的访问相关技术，包括：jdbc、Redis、MongoDB、Neo4j等。\n- Spring Batch：批处理框架，或说是批量任务执行管理器，功能包括任务调度、日志记录/跟踪等。\n- Spring Security：是一个能够为基于Spring的企业应用系统提供声明式的安全访问控制解决方案的安全框架。\n- Spring Integration：面向企业应用集成（EAI/ESB）的编程框架，支持的通信方式包括HTTP、FTP、TCP/UDP、JMS、RabbitMQ、Email等。\n- Spring Social：一组工具包，一组连接社交服务API，如Twitter、Facebook、LinkedIn、GitHub等，有几十个。\n- Spring AMQP：消息队列操作的工具包，主要是封装了RabbitMQ的操作。\n- Spring HATEOAS：是一个用于支持实现超文本驱动的 REST Web 服务的开发库。\n- Spring Mobile：是Spring MVC的扩展，用来简化手机上的Web应用开发。\n- Spring for Android：是Spring框架的一个扩展，其主要目的在乎简化Android本地应用的开发，提供RestTemplate来访问Rest服务。\n- Spring Web Flow：目标是成为管理Web应用页面流程的最佳方案，将页面跳转流程单独管理，并可配置。\n- Spring LDAP：是一个用于操作LDAP的Java工具包，基于Spring的JdbcTemplate模式，简化LDAP访问。\n- Spring Session：session管理的开发工具包，让你可以把session保存到redis等，进行集群化session管理。\n- Spring Web Services：是基于Spring的Web服务框架，提供SOAP服务开发，允许通过多种方式创建Web服务。\n- Spring Shell：提供交互式的Shell可让你使用简单的基于Spring的编程模型来开发命令，比如Spring Roo命令。\n- Spring Roo：是一种Spring开发的辅助工具，使用命令行操作来生成自动化项目，操作非常类似于Rails。\n- Spring Scala：为Scala语言编程提供的spring框架的封装（新的编程语言，Java平台的Scala于2003年底/2004年初发布）。\n- Spring BlazeDS Integration：一个开发RIA工具包，可以集成Adobe Flex、BlazeDS、Spring以及Java技术创建RIA。\n- Spring Loaded：用于实现java程序和web应用的热部署的开源工具。\n- Spring REST Shell：可以调用Rest服务的命令行工具，敲命令行操作Rest服务。\n\n\n## 目前来说spring主要集中于spring boot（用于开发微服务）和spring cloud相关框架的开发，spring cloud子项目包括：\n\n\n- Spring Cloud Config：配置管理开发工具包，可以让你把配置放到远程服务器，目前支持本地存储、Git以及Subversion。\n- Spring Cloud Bus：事件、消息总线，用于在集群（例如，配置变化事件）中传播状态变化，可与Spring Cloud Config联合实现热部署。\n- Spring Cloud Netflix：针对多种Netflix组件提供的开发工具包，其中包括Eureka、Hystrix、Zuul、Archaius等。\n- Netflix Eureka：云端负载均衡，一个基于 REST 的服务，用于定位服务，以实现云端的负载均衡和中间层服务器的故障转移。\n- Netflix Hystrix：容错管理工具，旨在通过控制服务和第三方库的节点,从而对延迟和故障提供更强大的容错能力。\n- Netflix Zuul：边缘服务工具，是提供动态路由，监控，弹性，安全等的边缘服务。\n- Netflix Archaius：配置管理API，包含一系列配置管理API，提供动态类型化属性、线程安全配置操作、轮询框架、回调机制等功能。\n- Spring Cloud for Cloud Foundry：通过Oauth2协议绑定服务到CloudFoundry，CloudFoundry是VMware推出的开源PaaS云平台。\n- Spring Cloud Sleuth：日志收集工具包，封装了Dapper,Zipkin和HTrace操作。\n- Spring Cloud Data Flow：大数据操作工具，通过命令行方式操作数据流。\n- Spring Cloud Security：安全工具包，为你的应用程序添加安全控制，主要是指OAuth2。\n- Spring Cloud Consul：封装了Consul操作，consul是一个服务发现与配置工具，与Docker容器可以无缝集成。\n- Spring Cloud Zookeeper：操作Zookeeper的工具包，用于使用zookeeper方式的服务注册和发现。\n- Spring Cloud Stream：数据流操作开发包，封装了与Redis,Rabbit、Kafka等发送接收消息。\n- Spring Cloud CLI：基于 Spring Boot CLI，可以让你以命令行方式快速建立云组件。\n","source":"_posts/spring.md","raw":"---\ntitle: spring主要组件\ndate: 2017-05-10 09:16:06\ntags:\n    - spring\ncategories:\n    - 后端\n---\n# Spring、Spring Cloud主要组件\n\n## spring 顶级项目：\n- Spring IO platform:用于系统部署，是可集成的，构建现代化应用的版本平台，具体来说当你使用maven dependency引入spring jar包时它就在工作了。\n- Spring Boot:旨在简化创建产品级的 Spring 应用和服务，简化了配置文件，使用嵌入式web服务器，含有诸多开箱即用微服务功能，可以和spring cloud联合部署。\n- Spring Framework:即通常所说的spring 框架，是一个开源的Java/Java EE全功能栈应用程序框架，其它spring项目如spring boot也依赖于此框架。\n- Spring Cloud：微服务工具包，为开发者提供了在分布式系统的配置管理、服务发现、断路器、智能路由、微代理、控制总线等开发工具包。\n- Spring XD：是一种运行时环境（服务器软件，非开发框架），组合spring技术，如spring batch、spring boot、spring data，采集大数据并处理。\n- Spring Data：是一个数据访问及操作的工具包，封装了很多种数据及数据库的访问相关技术，包括：jdbc、Redis、MongoDB、Neo4j等。\n- Spring Batch：批处理框架，或说是批量任务执行管理器，功能包括任务调度、日志记录/跟踪等。\n- Spring Security：是一个能够为基于Spring的企业应用系统提供声明式的安全访问控制解决方案的安全框架。\n- Spring Integration：面向企业应用集成（EAI/ESB）的编程框架，支持的通信方式包括HTTP、FTP、TCP/UDP、JMS、RabbitMQ、Email等。\n- Spring Social：一组工具包，一组连接社交服务API，如Twitter、Facebook、LinkedIn、GitHub等，有几十个。\n- Spring AMQP：消息队列操作的工具包，主要是封装了RabbitMQ的操作。\n- Spring HATEOAS：是一个用于支持实现超文本驱动的 REST Web 服务的开发库。\n- Spring Mobile：是Spring MVC的扩展，用来简化手机上的Web应用开发。\n- Spring for Android：是Spring框架的一个扩展，其主要目的在乎简化Android本地应用的开发，提供RestTemplate来访问Rest服务。\n- Spring Web Flow：目标是成为管理Web应用页面流程的最佳方案，将页面跳转流程单独管理，并可配置。\n- Spring LDAP：是一个用于操作LDAP的Java工具包，基于Spring的JdbcTemplate模式，简化LDAP访问。\n- Spring Session：session管理的开发工具包，让你可以把session保存到redis等，进行集群化session管理。\n- Spring Web Services：是基于Spring的Web服务框架，提供SOAP服务开发，允许通过多种方式创建Web服务。\n- Spring Shell：提供交互式的Shell可让你使用简单的基于Spring的编程模型来开发命令，比如Spring Roo命令。\n- Spring Roo：是一种Spring开发的辅助工具，使用命令行操作来生成自动化项目，操作非常类似于Rails。\n- Spring Scala：为Scala语言编程提供的spring框架的封装（新的编程语言，Java平台的Scala于2003年底/2004年初发布）。\n- Spring BlazeDS Integration：一个开发RIA工具包，可以集成Adobe Flex、BlazeDS、Spring以及Java技术创建RIA。\n- Spring Loaded：用于实现java程序和web应用的热部署的开源工具。\n- Spring REST Shell：可以调用Rest服务的命令行工具，敲命令行操作Rest服务。\n\n\n## 目前来说spring主要集中于spring boot（用于开发微服务）和spring cloud相关框架的开发，spring cloud子项目包括：\n\n\n- Spring Cloud Config：配置管理开发工具包，可以让你把配置放到远程服务器，目前支持本地存储、Git以及Subversion。\n- Spring Cloud Bus：事件、消息总线，用于在集群（例如，配置变化事件）中传播状态变化，可与Spring Cloud Config联合实现热部署。\n- Spring Cloud Netflix：针对多种Netflix组件提供的开发工具包，其中包括Eureka、Hystrix、Zuul、Archaius等。\n- Netflix Eureka：云端负载均衡，一个基于 REST 的服务，用于定位服务，以实现云端的负载均衡和中间层服务器的故障转移。\n- Netflix Hystrix：容错管理工具，旨在通过控制服务和第三方库的节点,从而对延迟和故障提供更强大的容错能力。\n- Netflix Zuul：边缘服务工具，是提供动态路由，监控，弹性，安全等的边缘服务。\n- Netflix Archaius：配置管理API，包含一系列配置管理API，提供动态类型化属性、线程安全配置操作、轮询框架、回调机制等功能。\n- Spring Cloud for Cloud Foundry：通过Oauth2协议绑定服务到CloudFoundry，CloudFoundry是VMware推出的开源PaaS云平台。\n- Spring Cloud Sleuth：日志收集工具包，封装了Dapper,Zipkin和HTrace操作。\n- Spring Cloud Data Flow：大数据操作工具，通过命令行方式操作数据流。\n- Spring Cloud Security：安全工具包，为你的应用程序添加安全控制，主要是指OAuth2。\n- Spring Cloud Consul：封装了Consul操作，consul是一个服务发现与配置工具，与Docker容器可以无缝集成。\n- Spring Cloud Zookeeper：操作Zookeeper的工具包，用于使用zookeeper方式的服务注册和发现。\n- Spring Cloud Stream：数据流操作开发包，封装了与Redis,Rabbit、Kafka等发送接收消息。\n- Spring Cloud CLI：基于 Spring Boot CLI，可以让你以命令行方式快速建立云组件。\n","slug":"spring","published":1,"updated":"2020-07-17T02:32:01.207Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcpntui7004r04oil0ekreh6","content":"<h1 id=\"Spring、Spring-Cloud主要组件\"><a href=\"#Spring、Spring-Cloud主要组件\" class=\"headerlink\" title=\"Spring、Spring Cloud主要组件\"></a>Spring、Spring Cloud主要组件</h1><h2 id=\"spring-顶级项目：\"><a href=\"#spring-顶级项目：\" class=\"headerlink\" title=\"spring 顶级项目：\"></a>spring 顶级项目：</h2><ul>\n<li>Spring IO platform:用于系统部署，是可集成的，构建现代化应用的版本平台，具体来说当你使用maven dependency引入spring jar包时它就在工作了。</li>\n<li>Spring Boot:旨在简化创建产品级的 Spring 应用和服务，简化了配置文件，使用嵌入式web服务器，含有诸多开箱即用微服务功能，可以和spring cloud联合部署。</li>\n<li>Spring Framework:即通常所说的spring 框架，是一个开源的Java/Java EE全功能栈应用程序框架，其它spring项目如spring boot也依赖于此框架。</li>\n<li>Spring Cloud：微服务工具包，为开发者提供了在分布式系统的配置管理、服务发现、断路器、智能路由、微代理、控制总线等开发工具包。</li>\n<li>Spring XD：是一种运行时环境（服务器软件，非开发框架），组合spring技术，如spring batch、spring boot、spring data，采集大数据并处理。</li>\n<li>Spring Data：是一个数据访问及操作的工具包，封装了很多种数据及数据库的访问相关技术，包括：jdbc、Redis、MongoDB、Neo4j等。</li>\n<li>Spring Batch：批处理框架，或说是批量任务执行管理器，功能包括任务调度、日志记录/跟踪等。</li>\n<li>Spring Security：是一个能够为基于Spring的企业应用系统提供声明式的安全访问控制解决方案的安全框架。</li>\n<li>Spring Integration：面向企业应用集成（EAI/ESB）的编程框架，支持的通信方式包括HTTP、FTP、TCP/UDP、JMS、RabbitMQ、Email等。</li>\n<li>Spring Social：一组工具包，一组连接社交服务API，如Twitter、Facebook、LinkedIn、GitHub等，有几十个。</li>\n<li>Spring AMQP：消息队列操作的工具包，主要是封装了RabbitMQ的操作。</li>\n<li>Spring HATEOAS：是一个用于支持实现超文本驱动的 REST Web 服务的开发库。</li>\n<li>Spring Mobile：是Spring MVC的扩展，用来简化手机上的Web应用开发。</li>\n<li>Spring for Android：是Spring框架的一个扩展，其主要目的在乎简化Android本地应用的开发，提供RestTemplate来访问Rest服务。</li>\n<li>Spring Web Flow：目标是成为管理Web应用页面流程的最佳方案，将页面跳转流程单独管理，并可配置。</li>\n<li>Spring LDAP：是一个用于操作LDAP的Java工具包，基于Spring的JdbcTemplate模式，简化LDAP访问。</li>\n<li>Spring Session：session管理的开发工具包，让你可以把session保存到redis等，进行集群化session管理。</li>\n<li>Spring Web Services：是基于Spring的Web服务框架，提供SOAP服务开发，允许通过多种方式创建Web服务。</li>\n<li>Spring Shell：提供交互式的Shell可让你使用简单的基于Spring的编程模型来开发命令，比如Spring Roo命令。</li>\n<li>Spring Roo：是一种Spring开发的辅助工具，使用命令行操作来生成自动化项目，操作非常类似于Rails。</li>\n<li>Spring Scala：为Scala语言编程提供的spring框架的封装（新的编程语言，Java平台的Scala于2003年底/2004年初发布）。</li>\n<li>Spring BlazeDS Integration：一个开发RIA工具包，可以集成Adobe Flex、BlazeDS、Spring以及Java技术创建RIA。</li>\n<li>Spring Loaded：用于实现java程序和web应用的热部署的开源工具。</li>\n<li>Spring REST Shell：可以调用Rest服务的命令行工具，敲命令行操作Rest服务。</li>\n</ul>\n<h2 id=\"目前来说spring主要集中于spring-boot（用于开发微服务）和spring-cloud相关框架的开发，spring-cloud子项目包括：\"><a href=\"#目前来说spring主要集中于spring-boot（用于开发微服务）和spring-cloud相关框架的开发，spring-cloud子项目包括：\" class=\"headerlink\" title=\"目前来说spring主要集中于spring boot（用于开发微服务）和spring cloud相关框架的开发，spring cloud子项目包括：\"></a>目前来说spring主要集中于spring boot（用于开发微服务）和spring cloud相关框架的开发，spring cloud子项目包括：</h2><ul>\n<li>Spring Cloud Config：配置管理开发工具包，可以让你把配置放到远程服务器，目前支持本地存储、Git以及Subversion。</li>\n<li>Spring Cloud Bus：事件、消息总线，用于在集群（例如，配置变化事件）中传播状态变化，可与Spring Cloud Config联合实现热部署。</li>\n<li>Spring Cloud Netflix：针对多种Netflix组件提供的开发工具包，其中包括Eureka、Hystrix、Zuul、Archaius等。</li>\n<li>Netflix Eureka：云端负载均衡，一个基于 REST 的服务，用于定位服务，以实现云端的负载均衡和中间层服务器的故障转移。</li>\n<li>Netflix Hystrix：容错管理工具，旨在通过控制服务和第三方库的节点,从而对延迟和故障提供更强大的容错能力。</li>\n<li>Netflix Zuul：边缘服务工具，是提供动态路由，监控，弹性，安全等的边缘服务。</li>\n<li>Netflix Archaius：配置管理API，包含一系列配置管理API，提供动态类型化属性、线程安全配置操作、轮询框架、回调机制等功能。</li>\n<li>Spring Cloud for Cloud Foundry：通过Oauth2协议绑定服务到CloudFoundry，CloudFoundry是VMware推出的开源PaaS云平台。</li>\n<li>Spring Cloud Sleuth：日志收集工具包，封装了Dapper,Zipkin和HTrace操作。</li>\n<li>Spring Cloud Data Flow：大数据操作工具，通过命令行方式操作数据流。</li>\n<li>Spring Cloud Security：安全工具包，为你的应用程序添加安全控制，主要是指OAuth2。</li>\n<li>Spring Cloud Consul：封装了Consul操作，consul是一个服务发现与配置工具，与Docker容器可以无缝集成。</li>\n<li>Spring Cloud Zookeeper：操作Zookeeper的工具包，用于使用zookeeper方式的服务注册和发现。</li>\n<li>Spring Cloud Stream：数据流操作开发包，封装了与Redis,Rabbit、Kafka等发送接收消息。</li>\n<li>Spring Cloud CLI：基于 Spring Boot CLI，可以让你以命令行方式快速建立云组件。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Spring、Spring-Cloud主要组件\"><a href=\"#Spring、Spring-Cloud主要组件\" class=\"headerlink\" title=\"Spring、Spring Cloud主要组件\"></a>Spring、Spring Cloud主要组件</h1><h2 id=\"spring-顶级项目：\"><a href=\"#spring-顶级项目：\" class=\"headerlink\" title=\"spring 顶级项目：\"></a>spring 顶级项目：</h2><ul>\n<li>Spring IO platform:用于系统部署，是可集成的，构建现代化应用的版本平台，具体来说当你使用maven dependency引入spring jar包时它就在工作了。</li>\n<li>Spring Boot:旨在简化创建产品级的 Spring 应用和服务，简化了配置文件，使用嵌入式web服务器，含有诸多开箱即用微服务功能，可以和spring cloud联合部署。</li>\n<li>Spring Framework:即通常所说的spring 框架，是一个开源的Java/Java EE全功能栈应用程序框架，其它spring项目如spring boot也依赖于此框架。</li>\n<li>Spring Cloud：微服务工具包，为开发者提供了在分布式系统的配置管理、服务发现、断路器、智能路由、微代理、控制总线等开发工具包。</li>\n<li>Spring XD：是一种运行时环境（服务器软件，非开发框架），组合spring技术，如spring batch、spring boot、spring data，采集大数据并处理。</li>\n<li>Spring Data：是一个数据访问及操作的工具包，封装了很多种数据及数据库的访问相关技术，包括：jdbc、Redis、MongoDB、Neo4j等。</li>\n<li>Spring Batch：批处理框架，或说是批量任务执行管理器，功能包括任务调度、日志记录/跟踪等。</li>\n<li>Spring Security：是一个能够为基于Spring的企业应用系统提供声明式的安全访问控制解决方案的安全框架。</li>\n<li>Spring Integration：面向企业应用集成（EAI/ESB）的编程框架，支持的通信方式包括HTTP、FTP、TCP/UDP、JMS、RabbitMQ、Email等。</li>\n<li>Spring Social：一组工具包，一组连接社交服务API，如Twitter、Facebook、LinkedIn、GitHub等，有几十个。</li>\n<li>Spring AMQP：消息队列操作的工具包，主要是封装了RabbitMQ的操作。</li>\n<li>Spring HATEOAS：是一个用于支持实现超文本驱动的 REST Web 服务的开发库。</li>\n<li>Spring Mobile：是Spring MVC的扩展，用来简化手机上的Web应用开发。</li>\n<li>Spring for Android：是Spring框架的一个扩展，其主要目的在乎简化Android本地应用的开发，提供RestTemplate来访问Rest服务。</li>\n<li>Spring Web Flow：目标是成为管理Web应用页面流程的最佳方案，将页面跳转流程单独管理，并可配置。</li>\n<li>Spring LDAP：是一个用于操作LDAP的Java工具包，基于Spring的JdbcTemplate模式，简化LDAP访问。</li>\n<li>Spring Session：session管理的开发工具包，让你可以把session保存到redis等，进行集群化session管理。</li>\n<li>Spring Web Services：是基于Spring的Web服务框架，提供SOAP服务开发，允许通过多种方式创建Web服务。</li>\n<li>Spring Shell：提供交互式的Shell可让你使用简单的基于Spring的编程模型来开发命令，比如Spring Roo命令。</li>\n<li>Spring Roo：是一种Spring开发的辅助工具，使用命令行操作来生成自动化项目，操作非常类似于Rails。</li>\n<li>Spring Scala：为Scala语言编程提供的spring框架的封装（新的编程语言，Java平台的Scala于2003年底/2004年初发布）。</li>\n<li>Spring BlazeDS Integration：一个开发RIA工具包，可以集成Adobe Flex、BlazeDS、Spring以及Java技术创建RIA。</li>\n<li>Spring Loaded：用于实现java程序和web应用的热部署的开源工具。</li>\n<li>Spring REST Shell：可以调用Rest服务的命令行工具，敲命令行操作Rest服务。</li>\n</ul>\n<h2 id=\"目前来说spring主要集中于spring-boot（用于开发微服务）和spring-cloud相关框架的开发，spring-cloud子项目包括：\"><a href=\"#目前来说spring主要集中于spring-boot（用于开发微服务）和spring-cloud相关框架的开发，spring-cloud子项目包括：\" class=\"headerlink\" title=\"目前来说spring主要集中于spring boot（用于开发微服务）和spring cloud相关框架的开发，spring cloud子项目包括：\"></a>目前来说spring主要集中于spring boot（用于开发微服务）和spring cloud相关框架的开发，spring cloud子项目包括：</h2><ul>\n<li>Spring Cloud Config：配置管理开发工具包，可以让你把配置放到远程服务器，目前支持本地存储、Git以及Subversion。</li>\n<li>Spring Cloud Bus：事件、消息总线，用于在集群（例如，配置变化事件）中传播状态变化，可与Spring Cloud Config联合实现热部署。</li>\n<li>Spring Cloud Netflix：针对多种Netflix组件提供的开发工具包，其中包括Eureka、Hystrix、Zuul、Archaius等。</li>\n<li>Netflix Eureka：云端负载均衡，一个基于 REST 的服务，用于定位服务，以实现云端的负载均衡和中间层服务器的故障转移。</li>\n<li>Netflix Hystrix：容错管理工具，旨在通过控制服务和第三方库的节点,从而对延迟和故障提供更强大的容错能力。</li>\n<li>Netflix Zuul：边缘服务工具，是提供动态路由，监控，弹性，安全等的边缘服务。</li>\n<li>Netflix Archaius：配置管理API，包含一系列配置管理API，提供动态类型化属性、线程安全配置操作、轮询框架、回调机制等功能。</li>\n<li>Spring Cloud for Cloud Foundry：通过Oauth2协议绑定服务到CloudFoundry，CloudFoundry是VMware推出的开源PaaS云平台。</li>\n<li>Spring Cloud Sleuth：日志收集工具包，封装了Dapper,Zipkin和HTrace操作。</li>\n<li>Spring Cloud Data Flow：大数据操作工具，通过命令行方式操作数据流。</li>\n<li>Spring Cloud Security：安全工具包，为你的应用程序添加安全控制，主要是指OAuth2。</li>\n<li>Spring Cloud Consul：封装了Consul操作，consul是一个服务发现与配置工具，与Docker容器可以无缝集成。</li>\n<li>Spring Cloud Zookeeper：操作Zookeeper的工具包，用于使用zookeeper方式的服务注册和发现。</li>\n<li>Spring Cloud Stream：数据流操作开发包，封装了与Redis,Rabbit、Kafka等发送接收消息。</li>\n<li>Spring Cloud CLI：基于 Spring Boot CLI，可以让你以命令行方式快速建立云组件。</li>\n</ul>\n"},{"title":"【vue系列】安装nodejs","date":"2017-04-21T03:10:50.000Z","_content":"\n去官网下载安装包 \n\n\n\n\n\n\n## npm常用命令\n\n\n```\nnpm install xxx // 安装模块\n\nnpm install xxx -g  // 将模块安装到全局环境中 参考http://goddyzhao.tumblr.com/post/9835631010/no-direct-command-for-local-installed-command-line-modul\n\nnpm ls // 查看安装的模块及依赖\n\nnpm ls -g // 查看全局安装的模块及依赖\n\nnpm uninstall xxx  (-g) // 卸载模块\n\nnpm cache clean // 清理缓存\n```\n\n## 淘宝npm源\n\n```\n$ npm install -g cnpm --registry=https://registry.npm.taobao.org\n```\n\n然后就可以使用`cnpm`\n\n\n## 使用webpack server\n\n```\n./node_modules/.bin/webpack-dev-server --progress --colors\n```\n","source":"_posts/vue.md","raw":"---\ntitle: 【vue系列】安装nodejs\ndate: 2017-04-21 11:10:50\ntags:\n    - Vue\ncategories:\n    - 前端\n---\n\n去官网下载安装包 \n\n\n\n\n\n\n## npm常用命令\n\n\n```\nnpm install xxx // 安装模块\n\nnpm install xxx -g  // 将模块安装到全局环境中 参考http://goddyzhao.tumblr.com/post/9835631010/no-direct-command-for-local-installed-command-line-modul\n\nnpm ls // 查看安装的模块及依赖\n\nnpm ls -g // 查看全局安装的模块及依赖\n\nnpm uninstall xxx  (-g) // 卸载模块\n\nnpm cache clean // 清理缓存\n```\n\n## 淘宝npm源\n\n```\n$ npm install -g cnpm --registry=https://registry.npm.taobao.org\n```\n\n然后就可以使用`cnpm`\n\n\n## 使用webpack server\n\n```\n./node_modules/.bin/webpack-dev-server --progress --colors\n```\n","slug":"vue","published":1,"updated":"2020-07-17T02:32:01.210Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcpntui9004v04oi5rc9vauq","content":"<p>去官网下载安装包 </p>\n<h2 id=\"npm常用命令\"><a href=\"#npm常用命令\" class=\"headerlink\" title=\"npm常用命令\"></a>npm常用命令</h2><pre><code class=\"hljs undefined\">npm install xxx <span class=\"hljs-string\">//</span> 安装模块\n\nnpm install xxx -g  <span class=\"hljs-string\">//</span> 将模块安装到全局环境中 参考http:<span class=\"hljs-string\">//goddyzhao.tumblr.com/post/9835631010/no-direct-command-for-local-installed-command-line-modul</span>\n\nnpm <span class=\"hljs-keyword\">ls</span> <span class=\"hljs-string\">//</span> 查看安装的模块及依赖\n\nnpm <span class=\"hljs-keyword\">ls</span> -g <span class=\"hljs-string\">//</span> 查看全局安装的模块及依赖\n\nnpm uninstall xxx  <span class=\"hljs-params\">(-g)</span> <span class=\"hljs-string\">//</span> 卸载模块\n\nnpm cache clean <span class=\"hljs-string\">//</span> 清理缓存</code></pre>\n<h2 id=\"淘宝npm源\"><a href=\"#淘宝npm源\" class=\"headerlink\" title=\"淘宝npm源\"></a>淘宝npm源</h2><pre><code class=\"hljs undefined\">$ <span class=\"hljs-built_in\">npm</span> install -g cnpm --registry=https://registry.<span class=\"hljs-built_in\">npm</span>.taobao.org</code></pre>\n<p>然后就可以使用<code>cnpm</code></p>\n<h2 id=\"使用webpack-server\"><a href=\"#使用webpack-server\" class=\"headerlink\" title=\"使用webpack server\"></a>使用webpack server</h2><pre><code class=\"hljs undefined\"><span class=\"hljs-string\">./node_modules/.bin/webpack-dev-server</span> <span class=\"hljs-params\">--progress</span> <span class=\"hljs-params\">--colors</span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>去官网下载安装包 </p>\n<h2 id=\"npm常用命令\"><a href=\"#npm常用命令\" class=\"headerlink\" title=\"npm常用命令\"></a>npm常用命令</h2><pre><code class=\"hljs undefined\">npm install xxx <span class=\"hljs-string\">//</span> 安装模块\n\nnpm install xxx -g  <span class=\"hljs-string\">//</span> 将模块安装到全局环境中 参考http:<span class=\"hljs-string\">//goddyzhao.tumblr.com/post/9835631010/no-direct-command-for-local-installed-command-line-modul</span>\n\nnpm <span class=\"hljs-keyword\">ls</span> <span class=\"hljs-string\">//</span> 查看安装的模块及依赖\n\nnpm <span class=\"hljs-keyword\">ls</span> -g <span class=\"hljs-string\">//</span> 查看全局安装的模块及依赖\n\nnpm uninstall xxx  <span class=\"hljs-params\">(-g)</span> <span class=\"hljs-string\">//</span> 卸载模块\n\nnpm cache clean <span class=\"hljs-string\">//</span> 清理缓存</code></pre>\n<h2 id=\"淘宝npm源\"><a href=\"#淘宝npm源\" class=\"headerlink\" title=\"淘宝npm源\"></a>淘宝npm源</h2><pre><code class=\"hljs undefined\">$ <span class=\"hljs-built_in\">npm</span> install -g cnpm --registry=https://registry.<span class=\"hljs-built_in\">npm</span>.taobao.org</code></pre>\n<p>然后就可以使用<code>cnpm</code></p>\n<h2 id=\"使用webpack-server\"><a href=\"#使用webpack-server\" class=\"headerlink\" title=\"使用webpack server\"></a>使用webpack server</h2><pre><code class=\"hljs undefined\"><span class=\"hljs-string\">./node_modules/.bin/webpack-dev-server</span> <span class=\"hljs-params\">--progress</span> <span class=\"hljs-params\">--colors</span></code></pre>\n"},{"title":"Bootstrap模态框使WebUploader点击失效问题解决","date":"2017-04-21T05:10:50.000Z","_content":"\n在使用Bootstrap模态框页面上使用上传组件WebUploader，发现点击失效。\n\n解决方法：\n\n```javascript\nvar uploader;\n//在点击弹出模态框的时候再初始化WebUploader，解决点击上传无反应问题\n$(\"#myModal\").on(\"shown.bs.modal\",function(){\n    uploader = WebUploader.create({\n        swf : '/web/public/Uploader.swf',\n        server : $(\"#jumicontextPath\").val()+'/common/file/upload',// 后台路径\n        pick : '#filePicker', // 选择文件的按钮。可选。内部根据当前运行是创建，可能是input元素，也可能是flash.\n        resize : false,// 不压缩image, 默认如果是jpeg，文件上传前会压缩一把再上传！\n        chunked : true, // 是否分片\n        duplicate:true,//去重， 根据文件名字、文件大小和最后修改时间来生成hash Key.\n        chunkSize : 52428 * 100, // 分片大小， 5M\n        /*    fileSingleSizeLimit:100*1024,//文件大小限制*/\n        auto : true,\n        // 只允许选择图片文件。\n        accept: {\n            title: 'Images',\n            extensions: 'gif,jpg,jpeg,bmp,png',\n            mimeTypes: 'image/jpg,image/jpeg,image/png'\n        }\n    });\n\n    // 文件上传成功，给item添加成功class, 用样式标记上传成功。\n    uploader.on('uploadSuccess', function (file,response) {\n        var fileUrl = response.data.fileUrl;\n        //TODO\n        $(\"#responeseText\").text(\"上传成功,文件名：\"+response.data.fileName);\n    });\n\n    // 当文件上传出错时触发\n    uploader.on('uploadError', function (file) {\n        $(\"#responeseText\").text(\"上传失败\");\n    });\n\n    //当validate不通过时触发\n    uploader.on('error', function (type) {\n        if(type==\"F_EXCEED_SIZE\"){\n            alert(\"文件大小不能超过xxx KB!\");\n        }\n    });\n});\n```\n\n单单这样也会有问题，这样每次弹出模态框之后都加载一个边框，使按钮越来越大，所以需要在关闭模态框后销毁webuploader\n\n\n```javascript\n//关闭模态框销毁WebUploader，解决再次打开模态框时按钮越变越大问题\n$('#myModal').on('hide.bs.modal', function () {\n    $(\"#responeseText\").text(\"\");\n    uploader.destroy();\n});\n```\n\n\n-----\n\n        事件\t| 描述\n        ---     | ---\nshow.bs.modal\t| 在调用 show 方法后触发。\nshown.bs.modal\t| 当模态框对用户可见时触发（将等待 CSS 过渡效果完成）。\nhide.bs.modal\t| 当调用 hide 实例方法时触发。\nhidden.bs.modal\t| 当模态框完全对用户隐藏时触发。\n\n","source":"_posts/webupload.md","raw":"---\ntitle: Bootstrap模态框使WebUploader点击失效问题解决\ndate: 2017-04-21 13:10:50\ntags:\n    - Bootstrap\n    - webuploader\ncategories:\n    - 前端\n---\n\n在使用Bootstrap模态框页面上使用上传组件WebUploader，发现点击失效。\n\n解决方法：\n\n```javascript\nvar uploader;\n//在点击弹出模态框的时候再初始化WebUploader，解决点击上传无反应问题\n$(\"#myModal\").on(\"shown.bs.modal\",function(){\n    uploader = WebUploader.create({\n        swf : '/web/public/Uploader.swf',\n        server : $(\"#jumicontextPath\").val()+'/common/file/upload',// 后台路径\n        pick : '#filePicker', // 选择文件的按钮。可选。内部根据当前运行是创建，可能是input元素，也可能是flash.\n        resize : false,// 不压缩image, 默认如果是jpeg，文件上传前会压缩一把再上传！\n        chunked : true, // 是否分片\n        duplicate:true,//去重， 根据文件名字、文件大小和最后修改时间来生成hash Key.\n        chunkSize : 52428 * 100, // 分片大小， 5M\n        /*    fileSingleSizeLimit:100*1024,//文件大小限制*/\n        auto : true,\n        // 只允许选择图片文件。\n        accept: {\n            title: 'Images',\n            extensions: 'gif,jpg,jpeg,bmp,png',\n            mimeTypes: 'image/jpg,image/jpeg,image/png'\n        }\n    });\n\n    // 文件上传成功，给item添加成功class, 用样式标记上传成功。\n    uploader.on('uploadSuccess', function (file,response) {\n        var fileUrl = response.data.fileUrl;\n        //TODO\n        $(\"#responeseText\").text(\"上传成功,文件名：\"+response.data.fileName);\n    });\n\n    // 当文件上传出错时触发\n    uploader.on('uploadError', function (file) {\n        $(\"#responeseText\").text(\"上传失败\");\n    });\n\n    //当validate不通过时触发\n    uploader.on('error', function (type) {\n        if(type==\"F_EXCEED_SIZE\"){\n            alert(\"文件大小不能超过xxx KB!\");\n        }\n    });\n});\n```\n\n单单这样也会有问题，这样每次弹出模态框之后都加载一个边框，使按钮越来越大，所以需要在关闭模态框后销毁webuploader\n\n\n```javascript\n//关闭模态框销毁WebUploader，解决再次打开模态框时按钮越变越大问题\n$('#myModal').on('hide.bs.modal', function () {\n    $(\"#responeseText\").text(\"\");\n    uploader.destroy();\n});\n```\n\n\n-----\n\n        事件\t| 描述\n        ---     | ---\nshow.bs.modal\t| 在调用 show 方法后触发。\nshown.bs.modal\t| 当模态框对用户可见时触发（将等待 CSS 过渡效果完成）。\nhide.bs.modal\t| 当调用 hide 实例方法时触发。\nhidden.bs.modal\t| 当模态框完全对用户隐藏时触发。\n\n","slug":"webupload","published":1,"updated":"2020-07-17T02:32:01.212Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcpntuib004y04oi3g2cgpjc","content":"<p>在使用Bootstrap模态框页面上使用上传组件WebUploader，发现点击失效。</p>\n<p>解决方法：</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> uploader;\n<span class=\"hljs-comment\">//在点击弹出模态框的时候再初始化WebUploader，解决点击上传无反应问题</span>\n$(<span class=\"hljs-string\">\"#myModal\"</span>).on(<span class=\"hljs-string\">\"shown.bs.modal\"</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    uploader = WebUploader.create(&#123;\n        <span class=\"hljs-attr\">swf</span> : <span class=\"hljs-string\">'/web/public/Uploader.swf'</span>,\n        <span class=\"hljs-attr\">server</span> : $(<span class=\"hljs-string\">\"#jumicontextPath\"</span>).val()+<span class=\"hljs-string\">'/common/file/upload'</span>,<span class=\"hljs-comment\">// 后台路径</span>\n        <span class=\"hljs-attr\">pick</span> : <span class=\"hljs-string\">'#filePicker'</span>, <span class=\"hljs-comment\">// 选择文件的按钮。可选。内部根据当前运行是创建，可能是input元素，也可能是flash.</span>\n        <span class=\"hljs-attr\">resize</span> : <span class=\"hljs-literal\">false</span>,<span class=\"hljs-comment\">// 不压缩image, 默认如果是jpeg，文件上传前会压缩一把再上传！</span>\n        <span class=\"hljs-attr\">chunked</span> : <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">// 是否分片</span>\n        <span class=\"hljs-attr\">duplicate</span>:<span class=\"hljs-literal\">true</span>,<span class=\"hljs-comment\">//去重， 根据文件名字、文件大小和最后修改时间来生成hash Key.</span>\n        <span class=\"hljs-attr\">chunkSize</span> : <span class=\"hljs-number\">52428</span> * <span class=\"hljs-number\">100</span>, <span class=\"hljs-comment\">// 分片大小， 5M</span>\n        <span class=\"hljs-comment\">/*    fileSingleSizeLimit:100*1024,//文件大小限制*/</span>\n        <span class=\"hljs-attr\">auto</span> : <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-comment\">// 只允许选择图片文件。</span>\n        <span class=\"hljs-attr\">accept</span>: &#123;\n            <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">'Images'</span>,\n            <span class=\"hljs-attr\">extensions</span>: <span class=\"hljs-string\">'gif,jpg,jpeg,bmp,png'</span>,\n            <span class=\"hljs-attr\">mimeTypes</span>: <span class=\"hljs-string\">'image/jpg,image/jpeg,image/png'</span>\n        &#125;\n    &#125;);\n\n    <span class=\"hljs-comment\">// 文件上传成功，给item添加成功class, 用样式标记上传成功。</span>\n    uploader.on(<span class=\"hljs-string\">'uploadSuccess'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">file,response</span>) </span>&#123;\n        <span class=\"hljs-keyword\">var</span> fileUrl = response.data.fileUrl;\n        <span class=\"hljs-comment\">//TODO</span>\n        $(<span class=\"hljs-string\">\"#responeseText\"</span>).text(<span class=\"hljs-string\">\"上传成功,文件名：\"</span>+response.data.fileName);\n    &#125;);\n\n    <span class=\"hljs-comment\">// 当文件上传出错时触发</span>\n    uploader.on(<span class=\"hljs-string\">'uploadError'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">file</span>) </span>&#123;\n        $(<span class=\"hljs-string\">\"#responeseText\"</span>).text(<span class=\"hljs-string\">\"上传失败\"</span>);\n    &#125;);\n\n    <span class=\"hljs-comment\">//当validate不通过时触发</span>\n    uploader.on(<span class=\"hljs-string\">'error'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">type</span>) </span>&#123;\n        <span class=\"hljs-keyword\">if</span>(type==<span class=\"hljs-string\">\"F_EXCEED_SIZE\"</span>)&#123;\n            alert(<span class=\"hljs-string\">\"文件大小不能超过xxx KB!\"</span>);\n        &#125;\n    &#125;);\n&#125;);</code></pre>\n<p>单单这样也会有问题，这样每次弹出模态框之后都加载一个边框，使按钮越来越大，所以需要在关闭模态框后销毁webuploader</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//关闭模态框销毁WebUploader，解决再次打开模态框时按钮越变越大问题</span>\n$(<span class=\"hljs-string\">'#myModal'</span>).on(<span class=\"hljs-string\">'hide.bs.modal'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;\n    $(<span class=\"hljs-string\">\"#responeseText\"</span>).text(<span class=\"hljs-string\">\"\"</span>);\n    uploader.destroy();\n&#125;);</code></pre>\n<hr>\n<pre><code>事件    | 描述\n---     | ---\n</code></pre><p>show.bs.modal    | 在调用 show 方法后触发。<br>shown.bs.modal    | 当模态框对用户可见时触发（将等待 CSS 过渡效果完成）。<br>hide.bs.modal    | 当调用 hide 实例方法时触发。<br>hidden.bs.modal    | 当模态框完全对用户隐藏时触发。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在使用Bootstrap模态框页面上使用上传组件WebUploader，发现点击失效。</p>\n<p>解决方法：</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> uploader;\n<span class=\"hljs-comment\">//在点击弹出模态框的时候再初始化WebUploader，解决点击上传无反应问题</span>\n$(<span class=\"hljs-string\">\"#myModal\"</span>).on(<span class=\"hljs-string\">\"shown.bs.modal\"</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    uploader = WebUploader.create(&#123;\n        <span class=\"hljs-attr\">swf</span> : <span class=\"hljs-string\">'/web/public/Uploader.swf'</span>,\n        <span class=\"hljs-attr\">server</span> : $(<span class=\"hljs-string\">\"#jumicontextPath\"</span>).val()+<span class=\"hljs-string\">'/common/file/upload'</span>,<span class=\"hljs-comment\">// 后台路径</span>\n        <span class=\"hljs-attr\">pick</span> : <span class=\"hljs-string\">'#filePicker'</span>, <span class=\"hljs-comment\">// 选择文件的按钮。可选。内部根据当前运行是创建，可能是input元素，也可能是flash.</span>\n        <span class=\"hljs-attr\">resize</span> : <span class=\"hljs-literal\">false</span>,<span class=\"hljs-comment\">// 不压缩image, 默认如果是jpeg，文件上传前会压缩一把再上传！</span>\n        <span class=\"hljs-attr\">chunked</span> : <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">// 是否分片</span>\n        <span class=\"hljs-attr\">duplicate</span>:<span class=\"hljs-literal\">true</span>,<span class=\"hljs-comment\">//去重， 根据文件名字、文件大小和最后修改时间来生成hash Key.</span>\n        <span class=\"hljs-attr\">chunkSize</span> : <span class=\"hljs-number\">52428</span> * <span class=\"hljs-number\">100</span>, <span class=\"hljs-comment\">// 分片大小， 5M</span>\n        <span class=\"hljs-comment\">/*    fileSingleSizeLimit:100*1024,//文件大小限制*/</span>\n        <span class=\"hljs-attr\">auto</span> : <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-comment\">// 只允许选择图片文件。</span>\n        <span class=\"hljs-attr\">accept</span>: &#123;\n            <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">'Images'</span>,\n            <span class=\"hljs-attr\">extensions</span>: <span class=\"hljs-string\">'gif,jpg,jpeg,bmp,png'</span>,\n            <span class=\"hljs-attr\">mimeTypes</span>: <span class=\"hljs-string\">'image/jpg,image/jpeg,image/png'</span>\n        &#125;\n    &#125;);\n\n    <span class=\"hljs-comment\">// 文件上传成功，给item添加成功class, 用样式标记上传成功。</span>\n    uploader.on(<span class=\"hljs-string\">'uploadSuccess'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">file,response</span>) </span>&#123;\n        <span class=\"hljs-keyword\">var</span> fileUrl = response.data.fileUrl;\n        <span class=\"hljs-comment\">//TODO</span>\n        $(<span class=\"hljs-string\">\"#responeseText\"</span>).text(<span class=\"hljs-string\">\"上传成功,文件名：\"</span>+response.data.fileName);\n    &#125;);\n\n    <span class=\"hljs-comment\">// 当文件上传出错时触发</span>\n    uploader.on(<span class=\"hljs-string\">'uploadError'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">file</span>) </span>&#123;\n        $(<span class=\"hljs-string\">\"#responeseText\"</span>).text(<span class=\"hljs-string\">\"上传失败\"</span>);\n    &#125;);\n\n    <span class=\"hljs-comment\">//当validate不通过时触发</span>\n    uploader.on(<span class=\"hljs-string\">'error'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">type</span>) </span>&#123;\n        <span class=\"hljs-keyword\">if</span>(type==<span class=\"hljs-string\">\"F_EXCEED_SIZE\"</span>)&#123;\n            alert(<span class=\"hljs-string\">\"文件大小不能超过xxx KB!\"</span>);\n        &#125;\n    &#125;);\n&#125;);</code></pre>\n<p>单单这样也会有问题，这样每次弹出模态框之后都加载一个边框，使按钮越来越大，所以需要在关闭模态框后销毁webuploader</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//关闭模态框销毁WebUploader，解决再次打开模态框时按钮越变越大问题</span>\n$(<span class=\"hljs-string\">'#myModal'</span>).on(<span class=\"hljs-string\">'hide.bs.modal'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;\n    $(<span class=\"hljs-string\">\"#responeseText\"</span>).text(<span class=\"hljs-string\">\"\"</span>);\n    uploader.destroy();\n&#125;);</code></pre>\n<hr>\n<pre><code>事件    | 描述\n---     | ---\n</code></pre><p>show.bs.modal    | 在调用 show 方法后触发。<br>shown.bs.modal    | 当模态框对用户可见时触发（将等待 CSS 过渡效果完成）。<br>hide.bs.modal    | 当调用 hide 实例方法时触发。<br>hidden.bs.modal    | 当模态框完全对用户隐藏时触发。</p>\n"},{"title":"使用Prettier来规范你的Angular项目","photos":["https://static.xmt.cn/a8e918a8225c4bc9ac669a67aedaffaa.png"],"date":"2019-06-27T09:10:42.000Z","_content":"\n\n在实际项目中，我们经常会遇到团队人员写的代码风格不统一，尤其是前端代码。比如在JavaScript中，字符串可以是使用单引号`'This is string'`，也可以使用双引号`\"This is string\"`。对于JavaScript语言来说，这两种格式都是正确的，但是对于一个项目来讲，这就是没有规范的表现。\n\n今天，我们就来分享一个叫prettier的前端工具，来实现我们前端项目的规范化。\n\n## 接下来，我们一步一步的在Angular项目中集成prettier\n\n创建一个Angular项目\n\n```sh\nng new prettierProject\n```\n\n## 1. 安装prettier\n\n```sh\nnpm install --save-dev --save-exact prettier\n```\n\n## 2. 配置prettier\n\n在项目的根目录下创建`.prettierrc`文件\n\n```json\n{\n  \"singleQuote\": true,\n  \"tabWidth\": 2,\n  \"trailingComma\": \"none\",\n  \"semi\": true,\n  \"bracketSpacing\": false,\n  \"printWidth\": 140,\n  \"overrides\": [\n    {\n      \"files\": [\n        \"*.json\",\n        \".eslintrc\",\n        \".tslintrc\",\n        \".prettierrc\"\n      ],\n      \"options\": {\n        \"parser\": \"json\",\n        \"tabWidth\": 2\n      }\n    },\n    {\n      \"files\": [\n        \"*.ts\"\n      ],\n      \"options\": {\n        \"parser\": \"typescript\"\n      }\n    }\n  ]\n}\n\n```\n\n## 3. 配置prettier ignore\n\n在项目的根目录下创建`.prettierignore`文件:\n\n```text\npackage.json\npackage-lock.json\ndist\n.angulardoc.json\n.vscode/*\n```\n\n这个文件会告诉prettier那些文件不需要它进行格式化。\n\n## 4. VS Code集成prettier\n\n安装插件\n\n[Prettier — Code formatter](https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode)\n\n![Prettier — Code formatter](https://cdn.nlark.com/yuque/0/2019/png/269363/1561624825143-assets/web-upload/47f86bf5-f1e0-4335-8dc3-72442b366a74.png)\n\n在项目根目录创建`.vscode/settings.json`文件：\n\n```json\n{\n    \"editor.formatOnSave\": true\n}\n```\n\n通过这个配置可以让我们在保存文件的时候，VS Code自动帮我们格式化，这样我们在写代码的时候，就可以不必为调格式浪费太多的时间。\n\n## 5. 配置prettier和tslint共存\n\n```sh\nnpm install --save-dev tslint-config-prettier\n```\n\n在`tslint.json`文件中添加下面的配置：\n\n```json\n{\n    \"extends\": [\n        \"tslint:latest\",\n        \"tslint-config-prettier\"\n    ]\n}\n```\n\n## 6. 配置git hook\n\n安装`husky`，创建一个Git hook\n\n```sh\nnpm install  --save-dev pretty-quick husky\n```\n\n在`package.json`中添加下面的配置:\n\n```json\n\"husky\": {\n    \"hooks\": {\n      \"pre-commit\": \"pretty-quick --staged\"\n    }\n}\n```\n","source":"_posts/使用Prettier来规范你的Angular项目.md","raw":"---\ntitle: 使用Prettier来规范你的Angular项目\ntags:\n  - Angular\ncategories:\n  - 工具\nphotos:\n  - 'https://static.xmt.cn/a8e918a8225c4bc9ac669a67aedaffaa.png'\ndate: 2019-06-27 17:10:42\n---\n\n\n在实际项目中，我们经常会遇到团队人员写的代码风格不统一，尤其是前端代码。比如在JavaScript中，字符串可以是使用单引号`'This is string'`，也可以使用双引号`\"This is string\"`。对于JavaScript语言来说，这两种格式都是正确的，但是对于一个项目来讲，这就是没有规范的表现。\n\n今天，我们就来分享一个叫prettier的前端工具，来实现我们前端项目的规范化。\n\n## 接下来，我们一步一步的在Angular项目中集成prettier\n\n创建一个Angular项目\n\n```sh\nng new prettierProject\n```\n\n## 1. 安装prettier\n\n```sh\nnpm install --save-dev --save-exact prettier\n```\n\n## 2. 配置prettier\n\n在项目的根目录下创建`.prettierrc`文件\n\n```json\n{\n  \"singleQuote\": true,\n  \"tabWidth\": 2,\n  \"trailingComma\": \"none\",\n  \"semi\": true,\n  \"bracketSpacing\": false,\n  \"printWidth\": 140,\n  \"overrides\": [\n    {\n      \"files\": [\n        \"*.json\",\n        \".eslintrc\",\n        \".tslintrc\",\n        \".prettierrc\"\n      ],\n      \"options\": {\n        \"parser\": \"json\",\n        \"tabWidth\": 2\n      }\n    },\n    {\n      \"files\": [\n        \"*.ts\"\n      ],\n      \"options\": {\n        \"parser\": \"typescript\"\n      }\n    }\n  ]\n}\n\n```\n\n## 3. 配置prettier ignore\n\n在项目的根目录下创建`.prettierignore`文件:\n\n```text\npackage.json\npackage-lock.json\ndist\n.angulardoc.json\n.vscode/*\n```\n\n这个文件会告诉prettier那些文件不需要它进行格式化。\n\n## 4. VS Code集成prettier\n\n安装插件\n\n[Prettier — Code formatter](https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode)\n\n![Prettier — Code formatter](https://cdn.nlark.com/yuque/0/2019/png/269363/1561624825143-assets/web-upload/47f86bf5-f1e0-4335-8dc3-72442b366a74.png)\n\n在项目根目录创建`.vscode/settings.json`文件：\n\n```json\n{\n    \"editor.formatOnSave\": true\n}\n```\n\n通过这个配置可以让我们在保存文件的时候，VS Code自动帮我们格式化，这样我们在写代码的时候，就可以不必为调格式浪费太多的时间。\n\n## 5. 配置prettier和tslint共存\n\n```sh\nnpm install --save-dev tslint-config-prettier\n```\n\n在`tslint.json`文件中添加下面的配置：\n\n```json\n{\n    \"extends\": [\n        \"tslint:latest\",\n        \"tslint-config-prettier\"\n    ]\n}\n```\n\n## 6. 配置git hook\n\n安装`husky`，创建一个Git hook\n\n```sh\nnpm install  --save-dev pretty-quick husky\n```\n\n在`package.json`中添加下面的配置:\n\n```json\n\"husky\": {\n    \"hooks\": {\n      \"pre-commit\": \"pretty-quick --staged\"\n    }\n}\n```\n","slug":"使用Prettier来规范你的Angular项目","published":1,"updated":"2020-07-17T02:32:01.213Z","comments":1,"layout":"post","link":"","_id":"ckcpntuif005204oipln3rkn2","content":"<p>在实际项目中，我们经常会遇到团队人员写的代码风格不统一，尤其是前端代码。比如在JavaScript中，字符串可以是使用单引号<code>&#39;This is string&#39;</code>，也可以使用双引号<code>&quot;This is string&quot;</code>。对于JavaScript语言来说，这两种格式都是正确的，但是对于一个项目来讲，这就是没有规范的表现。</p>\n<p>今天，我们就来分享一个叫prettier的前端工具，来实现我们前端项目的规范化。</p>\n<h2 id=\"接下来，我们一步一步的在Angular项目中集成prettier\"><a href=\"#接下来，我们一步一步的在Angular项目中集成prettier\" class=\"headerlink\" title=\"接下来，我们一步一步的在Angular项目中集成prettier\"></a>接下来，我们一步一步的在Angular项目中集成prettier</h2><p>创建一个Angular项目</p>\n<pre><code class=\"hljs sh\">ng new prettierProject</code></pre>\n<h2 id=\"1-安装prettier\"><a href=\"#1-安装prettier\" class=\"headerlink\" title=\"1. 安装prettier\"></a>1. 安装prettier</h2><pre><code class=\"hljs sh\">npm install --save-dev --save-exact prettier</code></pre>\n<h2 id=\"2-配置prettier\"><a href=\"#2-配置prettier\" class=\"headerlink\" title=\"2. 配置prettier\"></a>2. 配置prettier</h2><p>在项目的根目录下创建<code>.prettierrc</code>文件</p>\n<pre><code class=\"hljs json\">&#123;\n  <span class=\"hljs-attr\">\"singleQuote\"</span>: <span class=\"hljs-literal\">true</span>,\n  <span class=\"hljs-attr\">\"tabWidth\"</span>: <span class=\"hljs-number\">2</span>,\n  <span class=\"hljs-attr\">\"trailingComma\"</span>: <span class=\"hljs-string\">\"none\"</span>,\n  <span class=\"hljs-attr\">\"semi\"</span>: <span class=\"hljs-literal\">true</span>,\n  <span class=\"hljs-attr\">\"bracketSpacing\"</span>: <span class=\"hljs-literal\">false</span>,\n  <span class=\"hljs-attr\">\"printWidth\"</span>: <span class=\"hljs-number\">140</span>,\n  <span class=\"hljs-attr\">\"overrides\"</span>: [\n    &#123;\n      <span class=\"hljs-attr\">\"files\"</span>: [\n        <span class=\"hljs-string\">\"*.json\"</span>,\n        <span class=\"hljs-string\">\".eslintrc\"</span>,\n        <span class=\"hljs-string\">\".tslintrc\"</span>,\n        <span class=\"hljs-string\">\".prettierrc\"</span>\n      ],\n      <span class=\"hljs-attr\">\"options\"</span>: &#123;\n        <span class=\"hljs-attr\">\"parser\"</span>: <span class=\"hljs-string\">\"json\"</span>,\n        <span class=\"hljs-attr\">\"tabWidth\"</span>: <span class=\"hljs-number\">2</span>\n      &#125;\n    &#125;,\n    &#123;\n      <span class=\"hljs-attr\">\"files\"</span>: [\n        <span class=\"hljs-string\">\"*.ts\"</span>\n      ],\n      <span class=\"hljs-attr\">\"options\"</span>: &#123;\n        <span class=\"hljs-attr\">\"parser\"</span>: <span class=\"hljs-string\">\"typescript\"</span>\n      &#125;\n    &#125;\n  ]\n&#125;</code></pre>\n<h2 id=\"3-配置prettier-ignore\"><a href=\"#3-配置prettier-ignore\" class=\"headerlink\" title=\"3. 配置prettier ignore\"></a>3. 配置prettier ignore</h2><p>在项目的根目录下创建<code>.prettierignore</code>文件:</p>\n<pre><code class=\"hljs text\">package.json\npackage-lock.json\ndist\n.angulardoc.json\n.vscode/*</code></pre>\n<p>这个文件会告诉prettier那些文件不需要它进行格式化。</p>\n<h2 id=\"4-VS-Code集成prettier\"><a href=\"#4-VS-Code集成prettier\" class=\"headerlink\" title=\"4. VS Code集成prettier\"></a>4. VS Code集成prettier</h2><p>安装插件</p>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode\" target=\"_blank\" rel=\"noopener\">Prettier — Code formatter</a></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/269363/1561624825143-assets/web-upload/47f86bf5-f1e0-4335-8dc3-72442b366a74.png\" srcset=\"/img/loading.gif\" alt=\"Prettier — Code formatter\"></p>\n<p>在项目根目录创建<code>.vscode/settings.json</code>文件：</p>\n<pre><code class=\"hljs json\">&#123;\n    <span class=\"hljs-attr\">\"editor.formatOnSave\"</span>: <span class=\"hljs-literal\">true</span>\n&#125;</code></pre>\n<p>通过这个配置可以让我们在保存文件的时候，VS Code自动帮我们格式化，这样我们在写代码的时候，就可以不必为调格式浪费太多的时间。</p>\n<h2 id=\"5-配置prettier和tslint共存\"><a href=\"#5-配置prettier和tslint共存\" class=\"headerlink\" title=\"5. 配置prettier和tslint共存\"></a>5. 配置prettier和tslint共存</h2><pre><code class=\"hljs sh\">npm install --save-dev tslint-config-prettier</code></pre>\n<p>在<code>tslint.json</code>文件中添加下面的配置：</p>\n<pre><code class=\"hljs json\">&#123;\n    <span class=\"hljs-attr\">\"extends\"</span>: [\n        <span class=\"hljs-string\">\"tslint:latest\"</span>,\n        <span class=\"hljs-string\">\"tslint-config-prettier\"</span>\n    ]\n&#125;</code></pre>\n<h2 id=\"6-配置git-hook\"><a href=\"#6-配置git-hook\" class=\"headerlink\" title=\"6. 配置git hook\"></a>6. 配置git hook</h2><p>安装<code>husky</code>，创建一个Git hook</p>\n<pre><code class=\"hljs sh\">npm install  --save-dev pretty-quick husky</code></pre>\n<p>在<code>package.json</code>中添加下面的配置:</p>\n<pre><code class=\"hljs json\">\"husky\": &#123;\n    \"hooks\": &#123;\n      \"pre-commit\": \"pretty-quick --staged\"\n    &#125;\n&#125;</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>在实际项目中，我们经常会遇到团队人员写的代码风格不统一，尤其是前端代码。比如在JavaScript中，字符串可以是使用单引号<code>&#39;This is string&#39;</code>，也可以使用双引号<code>&quot;This is string&quot;</code>。对于JavaScript语言来说，这两种格式都是正确的，但是对于一个项目来讲，这就是没有规范的表现。</p>\n<p>今天，我们就来分享一个叫prettier的前端工具，来实现我们前端项目的规范化。</p>\n<h2 id=\"接下来，我们一步一步的在Angular项目中集成prettier\"><a href=\"#接下来，我们一步一步的在Angular项目中集成prettier\" class=\"headerlink\" title=\"接下来，我们一步一步的在Angular项目中集成prettier\"></a>接下来，我们一步一步的在Angular项目中集成prettier</h2><p>创建一个Angular项目</p>\n<pre><code class=\"hljs sh\">ng new prettierProject</code></pre>\n<h2 id=\"1-安装prettier\"><a href=\"#1-安装prettier\" class=\"headerlink\" title=\"1. 安装prettier\"></a>1. 安装prettier</h2><pre><code class=\"hljs sh\">npm install --save-dev --save-exact prettier</code></pre>\n<h2 id=\"2-配置prettier\"><a href=\"#2-配置prettier\" class=\"headerlink\" title=\"2. 配置prettier\"></a>2. 配置prettier</h2><p>在项目的根目录下创建<code>.prettierrc</code>文件</p>\n<pre><code class=\"hljs json\">&#123;\n  <span class=\"hljs-attr\">\"singleQuote\"</span>: <span class=\"hljs-literal\">true</span>,\n  <span class=\"hljs-attr\">\"tabWidth\"</span>: <span class=\"hljs-number\">2</span>,\n  <span class=\"hljs-attr\">\"trailingComma\"</span>: <span class=\"hljs-string\">\"none\"</span>,\n  <span class=\"hljs-attr\">\"semi\"</span>: <span class=\"hljs-literal\">true</span>,\n  <span class=\"hljs-attr\">\"bracketSpacing\"</span>: <span class=\"hljs-literal\">false</span>,\n  <span class=\"hljs-attr\">\"printWidth\"</span>: <span class=\"hljs-number\">140</span>,\n  <span class=\"hljs-attr\">\"overrides\"</span>: [\n    &#123;\n      <span class=\"hljs-attr\">\"files\"</span>: [\n        <span class=\"hljs-string\">\"*.json\"</span>,\n        <span class=\"hljs-string\">\".eslintrc\"</span>,\n        <span class=\"hljs-string\">\".tslintrc\"</span>,\n        <span class=\"hljs-string\">\".prettierrc\"</span>\n      ],\n      <span class=\"hljs-attr\">\"options\"</span>: &#123;\n        <span class=\"hljs-attr\">\"parser\"</span>: <span class=\"hljs-string\">\"json\"</span>,\n        <span class=\"hljs-attr\">\"tabWidth\"</span>: <span class=\"hljs-number\">2</span>\n      &#125;\n    &#125;,\n    &#123;\n      <span class=\"hljs-attr\">\"files\"</span>: [\n        <span class=\"hljs-string\">\"*.ts\"</span>\n      ],\n      <span class=\"hljs-attr\">\"options\"</span>: &#123;\n        <span class=\"hljs-attr\">\"parser\"</span>: <span class=\"hljs-string\">\"typescript\"</span>\n      &#125;\n    &#125;\n  ]\n&#125;</code></pre>\n<h2 id=\"3-配置prettier-ignore\"><a href=\"#3-配置prettier-ignore\" class=\"headerlink\" title=\"3. 配置prettier ignore\"></a>3. 配置prettier ignore</h2><p>在项目的根目录下创建<code>.prettierignore</code>文件:</p>\n<pre><code class=\"hljs text\">package.json\npackage-lock.json\ndist\n.angulardoc.json\n.vscode/*</code></pre>\n<p>这个文件会告诉prettier那些文件不需要它进行格式化。</p>\n<h2 id=\"4-VS-Code集成prettier\"><a href=\"#4-VS-Code集成prettier\" class=\"headerlink\" title=\"4. VS Code集成prettier\"></a>4. VS Code集成prettier</h2><p>安装插件</p>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode\" target=\"_blank\" rel=\"noopener\">Prettier — Code formatter</a></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/269363/1561624825143-assets/web-upload/47f86bf5-f1e0-4335-8dc3-72442b366a74.png\" srcset=\"/img/loading.gif\" alt=\"Prettier — Code formatter\"></p>\n<p>在项目根目录创建<code>.vscode/settings.json</code>文件：</p>\n<pre><code class=\"hljs json\">&#123;\n    <span class=\"hljs-attr\">\"editor.formatOnSave\"</span>: <span class=\"hljs-literal\">true</span>\n&#125;</code></pre>\n<p>通过这个配置可以让我们在保存文件的时候，VS Code自动帮我们格式化，这样我们在写代码的时候，就可以不必为调格式浪费太多的时间。</p>\n<h2 id=\"5-配置prettier和tslint共存\"><a href=\"#5-配置prettier和tslint共存\" class=\"headerlink\" title=\"5. 配置prettier和tslint共存\"></a>5. 配置prettier和tslint共存</h2><pre><code class=\"hljs sh\">npm install --save-dev tslint-config-prettier</code></pre>\n<p>在<code>tslint.json</code>文件中添加下面的配置：</p>\n<pre><code class=\"hljs json\">&#123;\n    <span class=\"hljs-attr\">\"extends\"</span>: [\n        <span class=\"hljs-string\">\"tslint:latest\"</span>,\n        <span class=\"hljs-string\">\"tslint-config-prettier\"</span>\n    ]\n&#125;</code></pre>\n<h2 id=\"6-配置git-hook\"><a href=\"#6-配置git-hook\" class=\"headerlink\" title=\"6. 配置git hook\"></a>6. 配置git hook</h2><p>安装<code>husky</code>，创建一个Git hook</p>\n<pre><code class=\"hljs sh\">npm install  --save-dev pretty-quick husky</code></pre>\n<p>在<code>package.json</code>中添加下面的配置:</p>\n<pre><code class=\"hljs json\">\"husky\": &#123;\n    \"hooks\": &#123;\n      \"pre-commit\": \"pretty-quick --staged\"\n    &#125;\n&#125;</code></pre>\n"},{"title":"使用webpack-bundle-analyzer分析Angular应用","date":"2019-06-26T08:20:30.000Z","photos":["https://i.loli.net/2019/06/10/5cfdf6dca539f47762.png"],"_content":"\n## 概述\n\n`webpack-bundle-analyzer`是一个前端分析工具，可以生成可视化大小的webpack输出文件与互动缩放树形图，为开发人员对Application进行优化提供更为直观的指导依据。\n\n## Angular集成webpack-bundle-analyzer\n\n### 安装\n`webpack-bundle-analyzer`是一个开发者工具，实际发布的Application并不依赖于它，因此，我们需要将`webpack-bundle-analyzer`安装到`devDependencies`:\n\n```bash\nnpm i -D webpack-bundle-analyzer\n```\n\n### 配置\n\n修改package.json文件，在scripts中，增加新的执行命令：\n\n```json\n  \"scripts\": {\n    \"bundle-report\": \"ng build --configuration=production --stats-json && webpack-bundle-analyzer dist/stats.json\"\n  },\n```\n\n### 使用\n\n此时就可以使用新添加的命令对Angular Application进行分析了：\n\n```bash\nnpm run bundle-report\n```\n\n![](https://cdn.nlark.com/yuque/0/2019/png/269363/1561538113639-assets/web-upload/c6b3fa2a-2b5f-44aa-b14b-27d5f1cbe0e8.png)\n\n\n## 结论\n通过使用`webpack-bundle-analyzer`，我们可以直观的看到那些模块体积比较大，这样我们就可以有针对性的对其进行优化。对应Web应用来说，文件越小是越好的，性能也会更优。","source":"_posts/使用webpack-bundle-analyzer分析Angular应用.md","raw":"---\ntitle: 使用webpack-bundle-analyzer分析Angular应用\ndate: 2019-06-26 16:20:30\ntags:\n    - Angular\ncategories:\n  - 前端\nphotos:\n    - https://i.loli.net/2019/06/10/5cfdf6dca539f47762.png\n---\n\n## 概述\n\n`webpack-bundle-analyzer`是一个前端分析工具，可以生成可视化大小的webpack输出文件与互动缩放树形图，为开发人员对Application进行优化提供更为直观的指导依据。\n\n## Angular集成webpack-bundle-analyzer\n\n### 安装\n`webpack-bundle-analyzer`是一个开发者工具，实际发布的Application并不依赖于它，因此，我们需要将`webpack-bundle-analyzer`安装到`devDependencies`:\n\n```bash\nnpm i -D webpack-bundle-analyzer\n```\n\n### 配置\n\n修改package.json文件，在scripts中，增加新的执行命令：\n\n```json\n  \"scripts\": {\n    \"bundle-report\": \"ng build --configuration=production --stats-json && webpack-bundle-analyzer dist/stats.json\"\n  },\n```\n\n### 使用\n\n此时就可以使用新添加的命令对Angular Application进行分析了：\n\n```bash\nnpm run bundle-report\n```\n\n![](https://cdn.nlark.com/yuque/0/2019/png/269363/1561538113639-assets/web-upload/c6b3fa2a-2b5f-44aa-b14b-27d5f1cbe0e8.png)\n\n\n## 结论\n通过使用`webpack-bundle-analyzer`，我们可以直观的看到那些模块体积比较大，这样我们就可以有针对性的对其进行优化。对应Web应用来说，文件越小是越好的，性能也会更优。","slug":"使用webpack-bundle-analyzer分析Angular应用","published":1,"updated":"2020-07-17T02:32:01.214Z","comments":1,"layout":"post","link":"","_id":"ckcpntuij005504oimrqs2bzq","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p><code>webpack-bundle-analyzer</code>是一个前端分析工具，可以生成可视化大小的webpack输出文件与互动缩放树形图，为开发人员对Application进行优化提供更为直观的指导依据。</p>\n<h2 id=\"Angular集成webpack-bundle-analyzer\"><a href=\"#Angular集成webpack-bundle-analyzer\" class=\"headerlink\" title=\"Angular集成webpack-bundle-analyzer\"></a>Angular集成webpack-bundle-analyzer</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p><code>webpack-bundle-analyzer</code>是一个开发者工具，实际发布的Application并不依赖于它，因此，我们需要将<code>webpack-bundle-analyzer</code>安装到<code>devDependencies</code>:</p>\n<pre><code class=\"hljs bash\">npm i -D webpack-bundle-analyzer</code></pre>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p>修改package.json文件，在scripts中，增加新的执行命令：</p>\n<pre><code class=\"hljs json\">\"scripts\": &#123;\n  \"bundle-report\": \"ng build --configuration=production --stats-json &amp;&amp; webpack-bundle-analyzer dist/stats.json\"\n&#125;,</code></pre>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>此时就可以使用新添加的命令对Angular Application进行分析了：</p>\n<pre><code class=\"hljs bash\">npm run bundle-report</code></pre>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/269363/1561538113639-assets/web-upload/c6b3fa2a-2b5f-44aa-b14b-27d5f1cbe0e8.png\" srcset=\"/img/loading.gif\" alt></p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>通过使用<code>webpack-bundle-analyzer</code>，我们可以直观的看到那些模块体积比较大，这样我们就可以有针对性的对其进行优化。对应Web应用来说，文件越小是越好的，性能也会更优。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p><code>webpack-bundle-analyzer</code>是一个前端分析工具，可以生成可视化大小的webpack输出文件与互动缩放树形图，为开发人员对Application进行优化提供更为直观的指导依据。</p>\n<h2 id=\"Angular集成webpack-bundle-analyzer\"><a href=\"#Angular集成webpack-bundle-analyzer\" class=\"headerlink\" title=\"Angular集成webpack-bundle-analyzer\"></a>Angular集成webpack-bundle-analyzer</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p><code>webpack-bundle-analyzer</code>是一个开发者工具，实际发布的Application并不依赖于它，因此，我们需要将<code>webpack-bundle-analyzer</code>安装到<code>devDependencies</code>:</p>\n<pre><code class=\"hljs bash\">npm i -D webpack-bundle-analyzer</code></pre>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p>修改package.json文件，在scripts中，增加新的执行命令：</p>\n<pre><code class=\"hljs json\">\"scripts\": &#123;\n  \"bundle-report\": \"ng build --configuration=production --stats-json &amp;&amp; webpack-bundle-analyzer dist/stats.json\"\n&#125;,</code></pre>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>此时就可以使用新添加的命令对Angular Application进行分析了：</p>\n<pre><code class=\"hljs bash\">npm run bundle-report</code></pre>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/269363/1561538113639-assets/web-upload/c6b3fa2a-2b5f-44aa-b14b-27d5f1cbe0e8.png\" srcset=\"/img/loading.gif\" alt></p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>通过使用<code>webpack-bundle-analyzer</code>，我们可以直观的看到那些模块体积比较大，这样我们就可以有针对性的对其进行优化。对应Web应用来说，文件越小是越好的，性能也会更优。</p>\n"},{"title":"如何实现Angular Material自定义主题","date":"2019-08-02T10:08:21.000Z","_content":"## 什么是主题\n\n**主题**就是一组要应用于 Angular Material 的颜色，也可以理解成应用的皮肤。在以前使用 QQ 空间的时候，腾讯就做好多些空间皮肤（主题）进行出售。现在 Android 手机系统也都有好多主题，让用户自己手机系统的主题。\n\n在 Angular Material 中，主题由多个调色板组成。具体来说，包括：\n\n- 主调色板：那些在所有屏幕和组件中广泛使用的颜色。\n- 强调调色板：那些用于浮动按钮和可交互元素的颜色。\n- 警告调色板：那些用于传达出错状态的颜色。\n- 前景调色板：那些用于问题和图标的颜色。\n- 背景色调色板：那些用做原色背景色的颜色。\n\n<a name=\"93502147\"></a>\n## 预定义主题\n\nAngular Material 自带了几个预构建主题的 `css` 文件。这些主题文件包含了所有核心样式（所有组件中通用的），这样你的应用就只需要包含单个 `css` 文件了。\n\n有效的预定义主题有：\n\n- `deeppurple-amber.css`\n- `indigo-pink.css`\n- `pink-bluegrey.css`\n- `purple-green.css`\n\n你可以从 `@angular/material/prebuilt-themes` 直接把主题文件包含到应用中。\n\n如果你正在使用 Angular CLI，那么只需要在 `styles.css` 文件中添加一行就可以了：\n\n```scss\n@import '@angular/material/prebuilt-themes/deeppurple-amber.css';\n```\n\n如果你使用的 `ng add @angular/material` 添加的依赖，Material Schematics 会在控制台给出交互信息，在选择相应的主题后，会自动将样式添加到 `angular.json` 中：\n\n```json\n\"styles\": [\n              \"./node_modules/@angular/material/prebuilt-themes/indigo-pink.css\",\n              \"src/styles.scss\"\n   ],\n```\n\n<a name=\"76fe220f\"></a>\n## 自定义主题\n\n自定义主题文件要做两件事：\n\n1. 导入 `mat-core()` 混入器。它包括所有功能多个组件使用的公共样式。**在你的应用中，应该只包含一次该混入器。**如果包含多次，你的应用就会出现这些公共样式的多个副本。\n1. 定义一个主题数据结构，它由多个调色板组成。该对象可以用 `mat-light-theme` 或 `mat-dark-theme` 函数构建。然后，函数的输出会传给 `angular-material-theme` 混入器，它会输出所有该主题所对应的样式。\n\n典型的主题文件定义如下：\n\n```scss\n// 引入material的theming，其中包含了混入器\n@import '~@angular/material/theming';\n\n// 导入核心混入器，确保只导入一次\n@include mat-core();\n\n// 定义主调色板\n$candy-app-primary: mat-palette($mat-indigo);\n\n// 强调调色板\n$candy-app-accent:  mat-palette($mat-pink, A200, A100, A400);\n\n// 警告调色板\n$candy-app-warn:    mat-palette($mat-red);\n\n// 创建一个light主题\n$candy-app-theme: mat-light-theme($candy-app-primary, $candy-app-accent, $candy-app-warn);\n\n// 启动主题\n@include angular-material-theme($candy-app-theme);\n```\n\n<a name=\"a54b8e84\"></a>\n## 多重主题\n\n你可以通过多次调用 `angular-material-theme` 混入器，每次包含一些额外的 CSS 类，来为应用创建多个主题。\n\n记住，只能包含 `@mat-core` 一次；不应该让每个主题都包含它一次。\n\n多重主题的例子：\n\n```scss\n// 引入material的theming，其中包含了混入器\n@import '~@angular/material/theming';\n// Plus imports for other components in your app.\n\n// 导入核心混入器，确保只导入一次\n@include mat-core();\n\n// 定义主调色板\n$candy-app-primary: mat-palette($mat-indigo);\n// 强调调色板\n$candy-app-accent:  mat-palette($mat-pink, A200, A100, A400);\n// 创建一个light主题\n$candy-app-theme:   mat-light-theme($candy-app-primary, $candy-app-accent);\n\n// 将candy-app-theme定义成默认主题\n@include angular-material-theme($candy-app-theme);\n\n\n// 定义个深色主题.\n$dark-primary: mat-palette($mat-blue-grey);\n$dark-accent:  mat-palette($mat-amber, A200, A100, A400);\n$dark-warn:    mat-palette($mat-deep-orange);\n$dark-theme:   mat-dark-theme($dark-primary, $dark-accent, $dark-warn);\n\n// 所有在unicorn-dark-theme样式下的组件主题都将是深色的\n.unicorn-dark-theme {\n  @include angular-material-theme($dark-theme);\n}\n```\n\n<a name=\"be9cb3aa\"></a>\n## 基于浮层的组件\n\n由于某些组件（比如菜单、选择框、对话框等）位于全局的浮层容器中，所以想要让它们被主题的 css 类选择器（比如 `.unicorn-dark-theme`）影响到还需要做一个额外的步骤。\n\n要做到这一点，你可以给全局浮层容器添加一个合适的类。比如上面的例子要改成这样：\n\n```typescript\nimport {OverlayContainer} from '@angular/cdk/overlay';\n\n@NgModule({\n  // ...\n})\nexport class UnicornCandyAppModule {\n  constructor(overlayContainer: OverlayContainer) {\n    overlayContainer.getContainerElement().classList.add('unicorn-dark-theme');\n  }\n}\n```\n\n当然，浮层容器也是渲染在 body 中的，所以可以在 body 中添加样式\n\n```html\n<body class=\"unicorn-dark-theme\">\n    <!--....-->\n</body>\n```\n\n这样就不需要上面的 `ts` 类了。\n\n<a name=\"4b02068c\"></a>\n## 主题动态切换\n\n在上面多主题的基础上，我们实现主题的动态切换。可以通过修改 body 的 class，从而实现主题的切换。\n\n```typescript\nexport class AppComponent {\n  constructor(@Inject(DOCUMENT) private document: Document) {}\n\n  changeTheme() {\n    const theme = 'unicorn-dark-theme';\n    this.document.body.classList.toggle(theme);\n  }\n}\n```\n","source":"_posts/如何实现Angular-Material自定义主题.md","raw":"---\ntitle: 如何实现Angular Material自定义主题\ndate: 2019-08-02 18:08:21\ntags:\n---\n## 什么是主题\n\n**主题**就是一组要应用于 Angular Material 的颜色，也可以理解成应用的皮肤。在以前使用 QQ 空间的时候，腾讯就做好多些空间皮肤（主题）进行出售。现在 Android 手机系统也都有好多主题，让用户自己手机系统的主题。\n\n在 Angular Material 中，主题由多个调色板组成。具体来说，包括：\n\n- 主调色板：那些在所有屏幕和组件中广泛使用的颜色。\n- 强调调色板：那些用于浮动按钮和可交互元素的颜色。\n- 警告调色板：那些用于传达出错状态的颜色。\n- 前景调色板：那些用于问题和图标的颜色。\n- 背景色调色板：那些用做原色背景色的颜色。\n\n<a name=\"93502147\"></a>\n## 预定义主题\n\nAngular Material 自带了几个预构建主题的 `css` 文件。这些主题文件包含了所有核心样式（所有组件中通用的），这样你的应用就只需要包含单个 `css` 文件了。\n\n有效的预定义主题有：\n\n- `deeppurple-amber.css`\n- `indigo-pink.css`\n- `pink-bluegrey.css`\n- `purple-green.css`\n\n你可以从 `@angular/material/prebuilt-themes` 直接把主题文件包含到应用中。\n\n如果你正在使用 Angular CLI，那么只需要在 `styles.css` 文件中添加一行就可以了：\n\n```scss\n@import '@angular/material/prebuilt-themes/deeppurple-amber.css';\n```\n\n如果你使用的 `ng add @angular/material` 添加的依赖，Material Schematics 会在控制台给出交互信息，在选择相应的主题后，会自动将样式添加到 `angular.json` 中：\n\n```json\n\"styles\": [\n              \"./node_modules/@angular/material/prebuilt-themes/indigo-pink.css\",\n              \"src/styles.scss\"\n   ],\n```\n\n<a name=\"76fe220f\"></a>\n## 自定义主题\n\n自定义主题文件要做两件事：\n\n1. 导入 `mat-core()` 混入器。它包括所有功能多个组件使用的公共样式。**在你的应用中，应该只包含一次该混入器。**如果包含多次，你的应用就会出现这些公共样式的多个副本。\n1. 定义一个主题数据结构，它由多个调色板组成。该对象可以用 `mat-light-theme` 或 `mat-dark-theme` 函数构建。然后，函数的输出会传给 `angular-material-theme` 混入器，它会输出所有该主题所对应的样式。\n\n典型的主题文件定义如下：\n\n```scss\n// 引入material的theming，其中包含了混入器\n@import '~@angular/material/theming';\n\n// 导入核心混入器，确保只导入一次\n@include mat-core();\n\n// 定义主调色板\n$candy-app-primary: mat-palette($mat-indigo);\n\n// 强调调色板\n$candy-app-accent:  mat-palette($mat-pink, A200, A100, A400);\n\n// 警告调色板\n$candy-app-warn:    mat-palette($mat-red);\n\n// 创建一个light主题\n$candy-app-theme: mat-light-theme($candy-app-primary, $candy-app-accent, $candy-app-warn);\n\n// 启动主题\n@include angular-material-theme($candy-app-theme);\n```\n\n<a name=\"a54b8e84\"></a>\n## 多重主题\n\n你可以通过多次调用 `angular-material-theme` 混入器，每次包含一些额外的 CSS 类，来为应用创建多个主题。\n\n记住，只能包含 `@mat-core` 一次；不应该让每个主题都包含它一次。\n\n多重主题的例子：\n\n```scss\n// 引入material的theming，其中包含了混入器\n@import '~@angular/material/theming';\n// Plus imports for other components in your app.\n\n// 导入核心混入器，确保只导入一次\n@include mat-core();\n\n// 定义主调色板\n$candy-app-primary: mat-palette($mat-indigo);\n// 强调调色板\n$candy-app-accent:  mat-palette($mat-pink, A200, A100, A400);\n// 创建一个light主题\n$candy-app-theme:   mat-light-theme($candy-app-primary, $candy-app-accent);\n\n// 将candy-app-theme定义成默认主题\n@include angular-material-theme($candy-app-theme);\n\n\n// 定义个深色主题.\n$dark-primary: mat-palette($mat-blue-grey);\n$dark-accent:  mat-palette($mat-amber, A200, A100, A400);\n$dark-warn:    mat-palette($mat-deep-orange);\n$dark-theme:   mat-dark-theme($dark-primary, $dark-accent, $dark-warn);\n\n// 所有在unicorn-dark-theme样式下的组件主题都将是深色的\n.unicorn-dark-theme {\n  @include angular-material-theme($dark-theme);\n}\n```\n\n<a name=\"be9cb3aa\"></a>\n## 基于浮层的组件\n\n由于某些组件（比如菜单、选择框、对话框等）位于全局的浮层容器中，所以想要让它们被主题的 css 类选择器（比如 `.unicorn-dark-theme`）影响到还需要做一个额外的步骤。\n\n要做到这一点，你可以给全局浮层容器添加一个合适的类。比如上面的例子要改成这样：\n\n```typescript\nimport {OverlayContainer} from '@angular/cdk/overlay';\n\n@NgModule({\n  // ...\n})\nexport class UnicornCandyAppModule {\n  constructor(overlayContainer: OverlayContainer) {\n    overlayContainer.getContainerElement().classList.add('unicorn-dark-theme');\n  }\n}\n```\n\n当然，浮层容器也是渲染在 body 中的，所以可以在 body 中添加样式\n\n```html\n<body class=\"unicorn-dark-theme\">\n    <!--....-->\n</body>\n```\n\n这样就不需要上面的 `ts` 类了。\n\n<a name=\"4b02068c\"></a>\n## 主题动态切换\n\n在上面多主题的基础上，我们实现主题的动态切换。可以通过修改 body 的 class，从而实现主题的切换。\n\n```typescript\nexport class AppComponent {\n  constructor(@Inject(DOCUMENT) private document: Document) {}\n\n  changeTheme() {\n    const theme = 'unicorn-dark-theme';\n    this.document.body.classList.toggle(theme);\n  }\n}\n```\n","slug":"如何实现Angular-Material自定义主题","published":1,"updated":"2020-07-17T02:32:01.216Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcpntuip005904oijqfpifvs","content":"<h2 id=\"什么是主题\"><a href=\"#什么是主题\" class=\"headerlink\" title=\"什么是主题\"></a>什么是主题</h2><p><strong>主题</strong>就是一组要应用于 Angular Material 的颜色，也可以理解成应用的皮肤。在以前使用 QQ 空间的时候，腾讯就做好多些空间皮肤（主题）进行出售。现在 Android 手机系统也都有好多主题，让用户自己手机系统的主题。</p>\n<p>在 Angular Material 中，主题由多个调色板组成。具体来说，包括：</p>\n<ul>\n<li>主调色板：那些在所有屏幕和组件中广泛使用的颜色。</li>\n<li>强调调色板：那些用于浮动按钮和可交互元素的颜色。</li>\n<li>警告调色板：那些用于传达出错状态的颜色。</li>\n<li>前景调色板：那些用于问题和图标的颜色。</li>\n<li>背景色调色板：那些用做原色背景色的颜色。</li>\n</ul>\n<p><a name=\"93502147\"></a></p>\n<h2 id=\"预定义主题\"><a href=\"#预定义主题\" class=\"headerlink\" title=\"预定义主题\"></a>预定义主题</h2><p>Angular Material 自带了几个预构建主题的 <code>css</code> 文件。这些主题文件包含了所有核心样式（所有组件中通用的），这样你的应用就只需要包含单个 <code>css</code> 文件了。</p>\n<p>有效的预定义主题有：</p>\n<ul>\n<li><code>deeppurple-amber.css</code></li>\n<li><code>indigo-pink.css</code></li>\n<li><code>pink-bluegrey.css</code></li>\n<li><code>purple-green.css</code></li>\n</ul>\n<p>你可以从 <code>@angular/material/prebuilt-themes</code> 直接把主题文件包含到应用中。</p>\n<p>如果你正在使用 Angular CLI，那么只需要在 <code>styles.css</code> 文件中添加一行就可以了：</p>\n<pre><code class=\"hljs scss\"><span class=\"hljs-keyword\">@import</span> <span class=\"hljs-string\">'@angular/material/prebuilt-themes/deeppurple-amber.css'</span>;</code></pre>\n<p>如果你使用的 <code>ng add @angular/material</code> 添加的依赖，Material Schematics 会在控制台给出交互信息，在选择相应的主题后，会自动将样式添加到 <code>angular.json</code> 中：</p>\n<pre><code class=\"hljs json\">\"styles\": [\n              \"./node_modules/@angular/material/prebuilt-themes/indigo-pink.css\",\n              \"src/styles.scss\"\n   ],</code></pre>\n<p><a name=\"76fe220f\"></a></p>\n<h2 id=\"自定义主题\"><a href=\"#自定义主题\" class=\"headerlink\" title=\"自定义主题\"></a>自定义主题</h2><p>自定义主题文件要做两件事：</p>\n<ol>\n<li>导入 <code>mat-core()</code> 混入器。它包括所有功能多个组件使用的公共样式。<strong>在你的应用中，应该只包含一次该混入器。</strong>如果包含多次，你的应用就会出现这些公共样式的多个副本。</li>\n<li>定义一个主题数据结构，它由多个调色板组成。该对象可以用 <code>mat-light-theme</code> 或 <code>mat-dark-theme</code> 函数构建。然后，函数的输出会传给 <code>angular-material-theme</code> 混入器，它会输出所有该主题所对应的样式。</li>\n</ol>\n<p>典型的主题文件定义如下：</p>\n<pre><code class=\"hljs scss\"><span class=\"hljs-comment\">// 引入material的theming，其中包含了混入器</span>\n<span class=\"hljs-keyword\">@import</span> <span class=\"hljs-string\">'~@angular/material/theming'</span>;\n\n<span class=\"hljs-comment\">// 导入核心混入器，确保只导入一次</span>\n<span class=\"hljs-keyword\">@include</span> mat-core();\n\n<span class=\"hljs-comment\">// 定义主调色板</span>\n<span class=\"hljs-variable\">$candy-app-primary</span>: mat-palette(<span class=\"hljs-variable\">$mat-indigo</span>);\n\n<span class=\"hljs-comment\">// 强调调色板</span>\n<span class=\"hljs-variable\">$candy-app-accent</span>:  mat-palette(<span class=\"hljs-variable\">$mat-pink</span>, A200, A100, A400);\n\n<span class=\"hljs-comment\">// 警告调色板</span>\n<span class=\"hljs-variable\">$candy-app-warn</span>:    mat-palette(<span class=\"hljs-variable\">$mat-red</span>);\n\n<span class=\"hljs-comment\">// 创建一个light主题</span>\n<span class=\"hljs-variable\">$candy-app-theme</span>: mat-light-theme(<span class=\"hljs-variable\">$candy-app-primary</span>, <span class=\"hljs-variable\">$candy-app-accent</span>, <span class=\"hljs-variable\">$candy-app-warn</span>);\n\n<span class=\"hljs-comment\">// 启动主题</span>\n<span class=\"hljs-keyword\">@include</span> angular-material-theme(<span class=\"hljs-variable\">$candy-app-theme</span>);</code></pre>\n<p><a name=\"a54b8e84\"></a></p>\n<h2 id=\"多重主题\"><a href=\"#多重主题\" class=\"headerlink\" title=\"多重主题\"></a>多重主题</h2><p>你可以通过多次调用 <code>angular-material-theme</code> 混入器，每次包含一些额外的 CSS 类，来为应用创建多个主题。</p>\n<p>记住，只能包含 <code>@mat-core</code> 一次；不应该让每个主题都包含它一次。</p>\n<p>多重主题的例子：</p>\n<pre><code class=\"hljs scss\"><span class=\"hljs-comment\">// 引入material的theming，其中包含了混入器</span>\n<span class=\"hljs-keyword\">@import</span> <span class=\"hljs-string\">'~@angular/material/theming'</span>;\n<span class=\"hljs-comment\">// Plus imports for other components in your app.</span>\n\n<span class=\"hljs-comment\">// 导入核心混入器，确保只导入一次</span>\n<span class=\"hljs-keyword\">@include</span> mat-core();\n\n<span class=\"hljs-comment\">// 定义主调色板</span>\n<span class=\"hljs-variable\">$candy-app-primary</span>: mat-palette(<span class=\"hljs-variable\">$mat-indigo</span>);\n<span class=\"hljs-comment\">// 强调调色板</span>\n<span class=\"hljs-variable\">$candy-app-accent</span>:  mat-palette(<span class=\"hljs-variable\">$mat-pink</span>, A200, A100, A400);\n<span class=\"hljs-comment\">// 创建一个light主题</span>\n<span class=\"hljs-variable\">$candy-app-theme</span>:   mat-light-theme(<span class=\"hljs-variable\">$candy-app-primary</span>, <span class=\"hljs-variable\">$candy-app-accent</span>);\n\n<span class=\"hljs-comment\">// 将candy-app-theme定义成默认主题</span>\n<span class=\"hljs-keyword\">@include</span> angular-material-theme(<span class=\"hljs-variable\">$candy-app-theme</span>);\n\n\n<span class=\"hljs-comment\">// 定义个深色主题.</span>\n<span class=\"hljs-variable\">$dark-primary</span>: mat-palette(<span class=\"hljs-variable\">$mat-blue-grey</span>);\n<span class=\"hljs-variable\">$dark-accent</span>:  mat-palette(<span class=\"hljs-variable\">$mat-amber</span>, A200, A100, A400);\n<span class=\"hljs-variable\">$dark-warn</span>:    mat-palette(<span class=\"hljs-variable\">$mat-deep-orange</span>);\n<span class=\"hljs-variable\">$dark-theme</span>:   mat-dark-theme(<span class=\"hljs-variable\">$dark-primary</span>, <span class=\"hljs-variable\">$dark-accent</span>, <span class=\"hljs-variable\">$dark-warn</span>);\n\n<span class=\"hljs-comment\">// 所有在unicorn-dark-theme样式下的组件主题都将是深色的</span>\n<span class=\"hljs-selector-class\">.unicorn-dark-theme</span> &#123;\n  <span class=\"hljs-keyword\">@include</span> angular-material-theme(<span class=\"hljs-variable\">$dark-theme</span>);\n&#125;</code></pre>\n<p><a name=\"be9cb3aa\"></a></p>\n<h2 id=\"基于浮层的组件\"><a href=\"#基于浮层的组件\" class=\"headerlink\" title=\"基于浮层的组件\"></a>基于浮层的组件</h2><p>由于某些组件（比如菜单、选择框、对话框等）位于全局的浮层容器中，所以想要让它们被主题的 css 类选择器（比如 <code>.unicorn-dark-theme</code>）影响到还需要做一个额外的步骤。</p>\n<p>要做到这一点，你可以给全局浮层容器添加一个合适的类。比如上面的例子要改成这样：</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">import</span> &#123;OverlayContainer&#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/cdk/overlay'</span>;\n\n<span class=\"hljs-meta\">@NgModule</span>(&#123;\n  <span class=\"hljs-comment\">// ...</span>\n&#125;)\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> UnicornCandyAppModule &#123;\n  <span class=\"hljs-keyword\">constructor</span>(<span class=\"hljs-params\">overlayContainer: OverlayContainer</span>) &#123;\n    overlayContainer.getContainerElement().classList.add(<span class=\"hljs-string\">'unicorn-dark-theme'</span>);\n  &#125;\n&#125;</code></pre>\n<p>当然，浮层容器也是渲染在 body 中的，所以可以在 body 中添加样式</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"unicorn-dark-theme\"</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!--....--&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span></code></pre>\n<p>这样就不需要上面的 <code>ts</code> 类了。</p>\n<p><a name=\"4b02068c\"></a></p>\n<h2 id=\"主题动态切换\"><a href=\"#主题动态切换\" class=\"headerlink\" title=\"主题动态切换\"></a>主题动态切换</h2><p>在上面多主题的基础上，我们实现主题的动态切换。可以通过修改 body 的 class，从而实现主题的切换。</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> AppComponent &#123;\n  <span class=\"hljs-keyword\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-meta\">@Inject</span>(DOCUMENT) <span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">document</span>: Document</span>) &#123;&#125;\n\n  changeTheme() &#123;\n    <span class=\"hljs-keyword\">const</span> theme = <span class=\"hljs-string\">'unicorn-dark-theme'</span>;\n    <span class=\"hljs-keyword\">this</span>.document.body.classList.toggle(theme);\n  &#125;\n&#125;</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"什么是主题\"><a href=\"#什么是主题\" class=\"headerlink\" title=\"什么是主题\"></a>什么是主题</h2><p><strong>主题</strong>就是一组要应用于 Angular Material 的颜色，也可以理解成应用的皮肤。在以前使用 QQ 空间的时候，腾讯就做好多些空间皮肤（主题）进行出售。现在 Android 手机系统也都有好多主题，让用户自己手机系统的主题。</p>\n<p>在 Angular Material 中，主题由多个调色板组成。具体来说，包括：</p>\n<ul>\n<li>主调色板：那些在所有屏幕和组件中广泛使用的颜色。</li>\n<li>强调调色板：那些用于浮动按钮和可交互元素的颜色。</li>\n<li>警告调色板：那些用于传达出错状态的颜色。</li>\n<li>前景调色板：那些用于问题和图标的颜色。</li>\n<li>背景色调色板：那些用做原色背景色的颜色。</li>\n</ul>\n<p><a name=\"93502147\"></a></p>\n<h2 id=\"预定义主题\"><a href=\"#预定义主题\" class=\"headerlink\" title=\"预定义主题\"></a>预定义主题</h2><p>Angular Material 自带了几个预构建主题的 <code>css</code> 文件。这些主题文件包含了所有核心样式（所有组件中通用的），这样你的应用就只需要包含单个 <code>css</code> 文件了。</p>\n<p>有效的预定义主题有：</p>\n<ul>\n<li><code>deeppurple-amber.css</code></li>\n<li><code>indigo-pink.css</code></li>\n<li><code>pink-bluegrey.css</code></li>\n<li><code>purple-green.css</code></li>\n</ul>\n<p>你可以从 <code>@angular/material/prebuilt-themes</code> 直接把主题文件包含到应用中。</p>\n<p>如果你正在使用 Angular CLI，那么只需要在 <code>styles.css</code> 文件中添加一行就可以了：</p>\n<pre><code class=\"hljs scss\"><span class=\"hljs-keyword\">@import</span> <span class=\"hljs-string\">'@angular/material/prebuilt-themes/deeppurple-amber.css'</span>;</code></pre>\n<p>如果你使用的 <code>ng add @angular/material</code> 添加的依赖，Material Schematics 会在控制台给出交互信息，在选择相应的主题后，会自动将样式添加到 <code>angular.json</code> 中：</p>\n<pre><code class=\"hljs json\">\"styles\": [\n              \"./node_modules/@angular/material/prebuilt-themes/indigo-pink.css\",\n              \"src/styles.scss\"\n   ],</code></pre>\n<p><a name=\"76fe220f\"></a></p>\n<h2 id=\"自定义主题\"><a href=\"#自定义主题\" class=\"headerlink\" title=\"自定义主题\"></a>自定义主题</h2><p>自定义主题文件要做两件事：</p>\n<ol>\n<li>导入 <code>mat-core()</code> 混入器。它包括所有功能多个组件使用的公共样式。<strong>在你的应用中，应该只包含一次该混入器。</strong>如果包含多次，你的应用就会出现这些公共样式的多个副本。</li>\n<li>定义一个主题数据结构，它由多个调色板组成。该对象可以用 <code>mat-light-theme</code> 或 <code>mat-dark-theme</code> 函数构建。然后，函数的输出会传给 <code>angular-material-theme</code> 混入器，它会输出所有该主题所对应的样式。</li>\n</ol>\n<p>典型的主题文件定义如下：</p>\n<pre><code class=\"hljs scss\"><span class=\"hljs-comment\">// 引入material的theming，其中包含了混入器</span>\n<span class=\"hljs-keyword\">@import</span> <span class=\"hljs-string\">'~@angular/material/theming'</span>;\n\n<span class=\"hljs-comment\">// 导入核心混入器，确保只导入一次</span>\n<span class=\"hljs-keyword\">@include</span> mat-core();\n\n<span class=\"hljs-comment\">// 定义主调色板</span>\n<span class=\"hljs-variable\">$candy-app-primary</span>: mat-palette(<span class=\"hljs-variable\">$mat-indigo</span>);\n\n<span class=\"hljs-comment\">// 强调调色板</span>\n<span class=\"hljs-variable\">$candy-app-accent</span>:  mat-palette(<span class=\"hljs-variable\">$mat-pink</span>, A200, A100, A400);\n\n<span class=\"hljs-comment\">// 警告调色板</span>\n<span class=\"hljs-variable\">$candy-app-warn</span>:    mat-palette(<span class=\"hljs-variable\">$mat-red</span>);\n\n<span class=\"hljs-comment\">// 创建一个light主题</span>\n<span class=\"hljs-variable\">$candy-app-theme</span>: mat-light-theme(<span class=\"hljs-variable\">$candy-app-primary</span>, <span class=\"hljs-variable\">$candy-app-accent</span>, <span class=\"hljs-variable\">$candy-app-warn</span>);\n\n<span class=\"hljs-comment\">// 启动主题</span>\n<span class=\"hljs-keyword\">@include</span> angular-material-theme(<span class=\"hljs-variable\">$candy-app-theme</span>);</code></pre>\n<p><a name=\"a54b8e84\"></a></p>\n<h2 id=\"多重主题\"><a href=\"#多重主题\" class=\"headerlink\" title=\"多重主题\"></a>多重主题</h2><p>你可以通过多次调用 <code>angular-material-theme</code> 混入器，每次包含一些额外的 CSS 类，来为应用创建多个主题。</p>\n<p>记住，只能包含 <code>@mat-core</code> 一次；不应该让每个主题都包含它一次。</p>\n<p>多重主题的例子：</p>\n<pre><code class=\"hljs scss\"><span class=\"hljs-comment\">// 引入material的theming，其中包含了混入器</span>\n<span class=\"hljs-keyword\">@import</span> <span class=\"hljs-string\">'~@angular/material/theming'</span>;\n<span class=\"hljs-comment\">// Plus imports for other components in your app.</span>\n\n<span class=\"hljs-comment\">// 导入核心混入器，确保只导入一次</span>\n<span class=\"hljs-keyword\">@include</span> mat-core();\n\n<span class=\"hljs-comment\">// 定义主调色板</span>\n<span class=\"hljs-variable\">$candy-app-primary</span>: mat-palette(<span class=\"hljs-variable\">$mat-indigo</span>);\n<span class=\"hljs-comment\">// 强调调色板</span>\n<span class=\"hljs-variable\">$candy-app-accent</span>:  mat-palette(<span class=\"hljs-variable\">$mat-pink</span>, A200, A100, A400);\n<span class=\"hljs-comment\">// 创建一个light主题</span>\n<span class=\"hljs-variable\">$candy-app-theme</span>:   mat-light-theme(<span class=\"hljs-variable\">$candy-app-primary</span>, <span class=\"hljs-variable\">$candy-app-accent</span>);\n\n<span class=\"hljs-comment\">// 将candy-app-theme定义成默认主题</span>\n<span class=\"hljs-keyword\">@include</span> angular-material-theme(<span class=\"hljs-variable\">$candy-app-theme</span>);\n\n\n<span class=\"hljs-comment\">// 定义个深色主题.</span>\n<span class=\"hljs-variable\">$dark-primary</span>: mat-palette(<span class=\"hljs-variable\">$mat-blue-grey</span>);\n<span class=\"hljs-variable\">$dark-accent</span>:  mat-palette(<span class=\"hljs-variable\">$mat-amber</span>, A200, A100, A400);\n<span class=\"hljs-variable\">$dark-warn</span>:    mat-palette(<span class=\"hljs-variable\">$mat-deep-orange</span>);\n<span class=\"hljs-variable\">$dark-theme</span>:   mat-dark-theme(<span class=\"hljs-variable\">$dark-primary</span>, <span class=\"hljs-variable\">$dark-accent</span>, <span class=\"hljs-variable\">$dark-warn</span>);\n\n<span class=\"hljs-comment\">// 所有在unicorn-dark-theme样式下的组件主题都将是深色的</span>\n<span class=\"hljs-selector-class\">.unicorn-dark-theme</span> &#123;\n  <span class=\"hljs-keyword\">@include</span> angular-material-theme(<span class=\"hljs-variable\">$dark-theme</span>);\n&#125;</code></pre>\n<p><a name=\"be9cb3aa\"></a></p>\n<h2 id=\"基于浮层的组件\"><a href=\"#基于浮层的组件\" class=\"headerlink\" title=\"基于浮层的组件\"></a>基于浮层的组件</h2><p>由于某些组件（比如菜单、选择框、对话框等）位于全局的浮层容器中，所以想要让它们被主题的 css 类选择器（比如 <code>.unicorn-dark-theme</code>）影响到还需要做一个额外的步骤。</p>\n<p>要做到这一点，你可以给全局浮层容器添加一个合适的类。比如上面的例子要改成这样：</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">import</span> &#123;OverlayContainer&#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/cdk/overlay'</span>;\n\n<span class=\"hljs-meta\">@NgModule</span>(&#123;\n  <span class=\"hljs-comment\">// ...</span>\n&#125;)\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> UnicornCandyAppModule &#123;\n  <span class=\"hljs-keyword\">constructor</span>(<span class=\"hljs-params\">overlayContainer: OverlayContainer</span>) &#123;\n    overlayContainer.getContainerElement().classList.add(<span class=\"hljs-string\">'unicorn-dark-theme'</span>);\n  &#125;\n&#125;</code></pre>\n<p>当然，浮层容器也是渲染在 body 中的，所以可以在 body 中添加样式</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"unicorn-dark-theme\"</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!--....--&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span></code></pre>\n<p>这样就不需要上面的 <code>ts</code> 类了。</p>\n<p><a name=\"4b02068c\"></a></p>\n<h2 id=\"主题动态切换\"><a href=\"#主题动态切换\" class=\"headerlink\" title=\"主题动态切换\"></a>主题动态切换</h2><p>在上面多主题的基础上，我们实现主题的动态切换。可以通过修改 body 的 class，从而实现主题的切换。</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> AppComponent &#123;\n  <span class=\"hljs-keyword\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-meta\">@Inject</span>(DOCUMENT) <span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">document</span>: Document</span>) &#123;&#125;\n\n  changeTheme() &#123;\n    <span class=\"hljs-keyword\">const</span> theme = <span class=\"hljs-string\">'unicorn-dark-theme'</span>;\n    <span class=\"hljs-keyword\">this</span>.document.body.classList.toggle(theme);\n  &#125;\n&#125;</code></pre>\n"},{"title":"如何用Angular Reactive Form的实现领域模型one-to-many","date":"2019-06-14T12:57:53.000Z","photos":["https://i.loli.net/2019/06/10/5cfdf6dca539f47762.png"],"_content":"\n\n在应用系统中，必不可少的一样功能就是表单录入。在Angular中，提供了两种表单模式：**响应式表单**和**模板驱动表单**。\n\n\n## Angular表单\n\n### 模板驱动表单\n\n模板驱动表单是通过使用`ngModel`创建双向数据绑定，以读取和写入输入控件的值。如下：\n\n首先ts文件里面创建模型：\n```typescript\n model = new Hero(18, 'Dr IQ', this.powers[0], 'Chuck Overstreet');\n```\n\n然后再html文件中，通过ngModel指令，实现模型数据的双向绑定:\n\n```html\n<input type=\"text\" class=\"form-control\" id=\"name\"\n       required\n       [(ngModel)]=\"model.name\" name=\"name\">\n```\n\n应为在`input`上通过`ngModel`实现了对`model.name`的双向绑定，此时，我们在界面的`input`中输入的内容会实时的反应到ts中的`model`中。\n\n### 响应式表单\n\n响应式表单使用显式的、不可变的方式，管理表单在特定的时间点上的状态。对表单状态的每一次变更都会返回一个新的状态，这样可以在变化时维护模型的整体性。响应式表单是围绕 Observable 的流构建的，表单的输入和值都是通过这些输入值组成的流来提供的，它可以同步访问。\n\n当使用响应式表单时，FormControl 类是最基本的构造块。要注册单个的表单控件，请在组件中导入 FormControl 类，并创建一个 FormControl 的新实例，把它保存在类的某个属性中。\n\n```typescript\nimport { Component } from '@angular/core';\nimport { FormControl } from '@angular/forms';\n\n@Component({\n  selector: 'app-name-editor',\n  templateUrl: './name-editor.component.html',\n  styleUrls: ['./name-editor.component.css']\n})\nexport class NameEditorComponent {\n  name = new FormControl('');\n}\n```\n\n在组件类中创建了控件之后，你还要把它和模板中的一个表单控件关联起来。修改模板，为表单控件添加 formControl 绑定，formControl 是由 ReactiveFormsModule 中的 FormControlDirective 提供的。\n\n```html\n<label>\n  Name:\n  <input type=\"text\" [formControl]=\"name\">\n</label>\n```\n\n## one-to-many的领域模型\n\n我们现在有个数据字典的数据模型，每个字典又包含了多个字典项。我们用TypeScript描述下我们的模型:\n```typescript\nexport class Dict {\n    id: number;\n    code: string;\n    name: string;\n\n    items: Item[];\n}\n\nexport class Item {\n    code: string;\n    value: string;\n}\n\n```\n在这个数据字典的模型中，`Dict`和`Item`的关系就是`one-to-many`。\n\n## 响应式表单实现字典模型\n\n如果只是字典模型，没有字典项`Item`的话，在Angular的官方文档中已经给出了这样的模型实现方式：\n\n```typescript\n\n// 使用FormBuilder来实现\nexport class ReactiveFormDemoComponent implements OnInit {\n\n  formGroup: FormGroup = this.fb.group({\n    id: [''],\n    code: [''],\n    name: ['']\n  });\n\n  constructor(private fb: FormBuilder) { }\n\n  ngOnInit() {\n\n  }\n\n \n\n  doSubmit() {\n    console.log(this.formGroup.value);\n  }\n}\n```\n在上面的代码中，我们通过`FormBuilder`来创建`FormGroup`，然后我们就可以在html中使用它：\n\n```html\n<div>\n  <form [formGroup]=\"formGroup\" (ngSubmit)=\"doSubmit()\">\n\n    <div>\n      <span>code</span>\n      <input formControlName=\"code\">\n    </div>\n    <div>\n      <span>name</span>\n      <input formControlName=\"name\">\n    </div>\n    <button type=\"submit\"> Submit</button>\n  </form>\n</div>\n\n```\n这种常规的模型实现起来还是比较简单的。\n\n那么对于one-to-many的模型我们应该怎么去实现呢？\n\n首先，我们来分析这个Dict模型。我们会发现items是一个Item[]，此时，我们可以在官方文档中找到，在响应式表单中有一个FormArray用来表示FormControl的数组模式。\n\n接下来我们看Item，其实它本身也是一个简单模型，我们可以用FormGroup来与之对应。\n\n现在我们对上面的代码进行改造：\n\n```typescript\n\n// 使用FormBuilder来实现\nexport class ReactiveFormDemoComponent implements OnInit {\n\n  formGroup: FormGroup = this.fb.group({\n    id: [''],\n    code: [''],\n    name: ['']，\n    items: this.fb.array([])  // 使用FormBuilder创建一个FormArray\n  });\n\n  constructor(private fb: FormBuilder) { }\n\n  ngOnInit() {\n\n  }\n\n\n  doSubmit() {\n    console.log(this.formGroup.value);\n  }\n\n  get items() {\n    return this.formGroup.get('items') as FormArray;\n  }\n}\n```\n\n```html\n<div>\n  <form [formGroup]=\"formGroup\" (ngSubmit)=\"doSubmit()\">\n\n    <div>\n      <span>code</span>\n      <input formControlName=\"code\">\n    </div>\n    <div>\n      <span>name</span>\n      <input formControlName=\"name\">\n    </div>\n\n     <div formArrayName=\"items\">\n      <table border=\"1\">\n        <tr>\n          <th>CODE</th>\n          <th>Name</th>\n        </tr>\n        <ng-container *ngFor=\"let form of list.controls\" [formGroup]=\"form\">\n          <tr>\n            <td><input formControlName=\"code\"></td>\n            <td><input formControlName=\"value\"> </td>\n          </tr>\n        </ng-container>\n      </table>\n    </div>\n    <button type=\"submit\"> Submit</button>\n  </form>\n</div>\n\n```\n## 结论\n复杂的东西都是由简单的组成的。就是Java中的基本数据类型一样。通过数据结构+算法，我们可以组装出复杂的对象，最后以应用的方式展示出来。所以，任何复杂的东西，只要我们认真分析，总能找到简单的实现方法。\n","source":"_posts/如何用Angular-Reactive-Form的实现领域模型one-to-many.md","raw":"---\ntitle: 如何用Angular Reactive Form的实现领域模型one-to-many\ntags:\n  - Angular\ncategories:\n  - 前端\ndate: 2019-06-14 20:57:53\nphotos:\n    - https://i.loli.net/2019/06/10/5cfdf6dca539f47762.png\n---\n\n\n在应用系统中，必不可少的一样功能就是表单录入。在Angular中，提供了两种表单模式：**响应式表单**和**模板驱动表单**。\n\n\n## Angular表单\n\n### 模板驱动表单\n\n模板驱动表单是通过使用`ngModel`创建双向数据绑定，以读取和写入输入控件的值。如下：\n\n首先ts文件里面创建模型：\n```typescript\n model = new Hero(18, 'Dr IQ', this.powers[0], 'Chuck Overstreet');\n```\n\n然后再html文件中，通过ngModel指令，实现模型数据的双向绑定:\n\n```html\n<input type=\"text\" class=\"form-control\" id=\"name\"\n       required\n       [(ngModel)]=\"model.name\" name=\"name\">\n```\n\n应为在`input`上通过`ngModel`实现了对`model.name`的双向绑定，此时，我们在界面的`input`中输入的内容会实时的反应到ts中的`model`中。\n\n### 响应式表单\n\n响应式表单使用显式的、不可变的方式，管理表单在特定的时间点上的状态。对表单状态的每一次变更都会返回一个新的状态，这样可以在变化时维护模型的整体性。响应式表单是围绕 Observable 的流构建的，表单的输入和值都是通过这些输入值组成的流来提供的，它可以同步访问。\n\n当使用响应式表单时，FormControl 类是最基本的构造块。要注册单个的表单控件，请在组件中导入 FormControl 类，并创建一个 FormControl 的新实例，把它保存在类的某个属性中。\n\n```typescript\nimport { Component } from '@angular/core';\nimport { FormControl } from '@angular/forms';\n\n@Component({\n  selector: 'app-name-editor',\n  templateUrl: './name-editor.component.html',\n  styleUrls: ['./name-editor.component.css']\n})\nexport class NameEditorComponent {\n  name = new FormControl('');\n}\n```\n\n在组件类中创建了控件之后，你还要把它和模板中的一个表单控件关联起来。修改模板，为表单控件添加 formControl 绑定，formControl 是由 ReactiveFormsModule 中的 FormControlDirective 提供的。\n\n```html\n<label>\n  Name:\n  <input type=\"text\" [formControl]=\"name\">\n</label>\n```\n\n## one-to-many的领域模型\n\n我们现在有个数据字典的数据模型，每个字典又包含了多个字典项。我们用TypeScript描述下我们的模型:\n```typescript\nexport class Dict {\n    id: number;\n    code: string;\n    name: string;\n\n    items: Item[];\n}\n\nexport class Item {\n    code: string;\n    value: string;\n}\n\n```\n在这个数据字典的模型中，`Dict`和`Item`的关系就是`one-to-many`。\n\n## 响应式表单实现字典模型\n\n如果只是字典模型，没有字典项`Item`的话，在Angular的官方文档中已经给出了这样的模型实现方式：\n\n```typescript\n\n// 使用FormBuilder来实现\nexport class ReactiveFormDemoComponent implements OnInit {\n\n  formGroup: FormGroup = this.fb.group({\n    id: [''],\n    code: [''],\n    name: ['']\n  });\n\n  constructor(private fb: FormBuilder) { }\n\n  ngOnInit() {\n\n  }\n\n \n\n  doSubmit() {\n    console.log(this.formGroup.value);\n  }\n}\n```\n在上面的代码中，我们通过`FormBuilder`来创建`FormGroup`，然后我们就可以在html中使用它：\n\n```html\n<div>\n  <form [formGroup]=\"formGroup\" (ngSubmit)=\"doSubmit()\">\n\n    <div>\n      <span>code</span>\n      <input formControlName=\"code\">\n    </div>\n    <div>\n      <span>name</span>\n      <input formControlName=\"name\">\n    </div>\n    <button type=\"submit\"> Submit</button>\n  </form>\n</div>\n\n```\n这种常规的模型实现起来还是比较简单的。\n\n那么对于one-to-many的模型我们应该怎么去实现呢？\n\n首先，我们来分析这个Dict模型。我们会发现items是一个Item[]，此时，我们可以在官方文档中找到，在响应式表单中有一个FormArray用来表示FormControl的数组模式。\n\n接下来我们看Item，其实它本身也是一个简单模型，我们可以用FormGroup来与之对应。\n\n现在我们对上面的代码进行改造：\n\n```typescript\n\n// 使用FormBuilder来实现\nexport class ReactiveFormDemoComponent implements OnInit {\n\n  formGroup: FormGroup = this.fb.group({\n    id: [''],\n    code: [''],\n    name: ['']，\n    items: this.fb.array([])  // 使用FormBuilder创建一个FormArray\n  });\n\n  constructor(private fb: FormBuilder) { }\n\n  ngOnInit() {\n\n  }\n\n\n  doSubmit() {\n    console.log(this.formGroup.value);\n  }\n\n  get items() {\n    return this.formGroup.get('items') as FormArray;\n  }\n}\n```\n\n```html\n<div>\n  <form [formGroup]=\"formGroup\" (ngSubmit)=\"doSubmit()\">\n\n    <div>\n      <span>code</span>\n      <input formControlName=\"code\">\n    </div>\n    <div>\n      <span>name</span>\n      <input formControlName=\"name\">\n    </div>\n\n     <div formArrayName=\"items\">\n      <table border=\"1\">\n        <tr>\n          <th>CODE</th>\n          <th>Name</th>\n        </tr>\n        <ng-container *ngFor=\"let form of list.controls\" [formGroup]=\"form\">\n          <tr>\n            <td><input formControlName=\"code\"></td>\n            <td><input formControlName=\"value\"> </td>\n          </tr>\n        </ng-container>\n      </table>\n    </div>\n    <button type=\"submit\"> Submit</button>\n  </form>\n</div>\n\n```\n## 结论\n复杂的东西都是由简单的组成的。就是Java中的基本数据类型一样。通过数据结构+算法，我们可以组装出复杂的对象，最后以应用的方式展示出来。所以，任何复杂的东西，只要我们认真分析，总能找到简单的实现方法。\n","slug":"如何用Angular-Reactive-Form的实现领域模型one-to-many","published":1,"updated":"2020-07-17T02:32:01.226Z","comments":1,"layout":"post","link":"","_id":"ckcpntuiu005c04oivb3emhoo","content":"<p>在应用系统中，必不可少的一样功能就是表单录入。在Angular中，提供了两种表单模式：<strong>响应式表单</strong>和<strong>模板驱动表单</strong>。</p>\n<h2 id=\"Angular表单\"><a href=\"#Angular表单\" class=\"headerlink\" title=\"Angular表单\"></a>Angular表单</h2><h3 id=\"模板驱动表单\"><a href=\"#模板驱动表单\" class=\"headerlink\" title=\"模板驱动表单\"></a>模板驱动表单</h3><p>模板驱动表单是通过使用<code>ngModel</code>创建双向数据绑定，以读取和写入输入控件的值。如下：</p>\n<p>首先ts文件里面创建模型：<br><pre><code class=\"hljs typescript\">model = <span class=\"hljs-keyword\">new</span> Hero(<span class=\"hljs-number\">18</span>, <span class=\"hljs-string\">'Dr IQ'</span>, <span class=\"hljs-keyword\">this</span>.powers[<span class=\"hljs-number\">0</span>], <span class=\"hljs-string\">'Chuck Overstreet'</span>);</code></pre></p>\n<p>然后再html文件中，通过ngModel指令，实现模型数据的双向绑定:</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"form-control\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"name\"</span>\n       <span class=\"hljs-attr\">required</span>\n       [(<span class=\"hljs-attr\">ngModel</span>)]=<span class=\"hljs-string\">\"model.name\"</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"name\"</span>&gt;</span></code></pre>\n<p>应为在<code>input</code>上通过<code>ngModel</code>实现了对<code>model.name</code>的双向绑定，此时，我们在界面的<code>input</code>中输入的内容会实时的反应到ts中的<code>model</code>中。</p>\n<h3 id=\"响应式表单\"><a href=\"#响应式表单\" class=\"headerlink\" title=\"响应式表单\"></a>响应式表单</h3><p>响应式表单使用显式的、不可变的方式，管理表单在特定的时间点上的状态。对表单状态的每一次变更都会返回一个新的状态，这样可以在变化时维护模型的整体性。响应式表单是围绕 Observable 的流构建的，表单的输入和值都是通过这些输入值组成的流来提供的，它可以同步访问。</p>\n<p>当使用响应式表单时，FormControl 类是最基本的构造块。要注册单个的表单控件，请在组件中导入 FormControl 类，并创建一个 FormControl 的新实例，把它保存在类的某个属性中。</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">import</span> &#123; Component &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n<span class=\"hljs-keyword\">import</span> &#123; FormControl &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/forms'</span>;\n\n<span class=\"hljs-meta\">@Component</span>(&#123;\n  selector: <span class=\"hljs-string\">'app-name-editor'</span>,\n  templateUrl: <span class=\"hljs-string\">'./name-editor.component.html'</span>,\n  styleUrls: [<span class=\"hljs-string\">'./name-editor.component.css'</span>]\n&#125;)\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> NameEditorComponent &#123;\n  name = <span class=\"hljs-keyword\">new</span> FormControl(<span class=\"hljs-string\">''</span>);\n&#125;</code></pre>\n<p>在组件类中创建了控件之后，你还要把它和模板中的一个表单控件关联起来。修改模板，为表单控件添加 formControl 绑定，formControl 是由 ReactiveFormsModule 中的 FormControlDirective 提供的。</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span>&gt;</span>\n  Name:\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> [<span class=\"hljs-attr\">formControl</span>]=<span class=\"hljs-string\">\"name\"</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span></code></pre>\n<h2 id=\"one-to-many的领域模型\"><a href=\"#one-to-many的领域模型\" class=\"headerlink\" title=\"one-to-many的领域模型\"></a>one-to-many的领域模型</h2><p>我们现在有个数据字典的数据模型，每个字典又包含了多个字典项。我们用TypeScript描述下我们的模型:<br><pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> Dict &#123;\n    id: <span class=\"hljs-built_in\">number</span>;\n    code: <span class=\"hljs-built_in\">string</span>;\n    name: <span class=\"hljs-built_in\">string</span>;\n\n    items: Item[];\n&#125;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> Item &#123;\n    code: <span class=\"hljs-built_in\">string</span>;\n    value: <span class=\"hljs-built_in\">string</span>;\n&#125;</code></pre></p>\n<p>在这个数据字典的模型中，<code>Dict</code>和<code>Item</code>的关系就是<code>one-to-many</code>。</p>\n<h2 id=\"响应式表单实现字典模型\"><a href=\"#响应式表单实现字典模型\" class=\"headerlink\" title=\"响应式表单实现字典模型\"></a>响应式表单实现字典模型</h2><p>如果只是字典模型，没有字典项<code>Item</code>的话，在Angular的官方文档中已经给出了这样的模型实现方式：</p>\n<pre><code class=\"hljs typescript\">\n<span class=\"hljs-comment\">// 使用FormBuilder来实现</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> ReactiveFormDemoComponent <span class=\"hljs-keyword\">implements</span> OnInit &#123;\n\n  formGroup: FormGroup = <span class=\"hljs-keyword\">this</span>.fb.group(&#123;\n    id: [<span class=\"hljs-string\">''</span>],\n    code: [<span class=\"hljs-string\">''</span>],\n    name: [<span class=\"hljs-string\">''</span>]\n  &#125;);\n\n  <span class=\"hljs-keyword\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">private</span> fb: FormBuilder</span>) &#123; &#125;\n\n  ngOnInit() &#123;\n\n  &#125;\n\n \n\n  doSubmit() &#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>.formGroup.value);\n  &#125;\n&#125;</code></pre>\n<p>在上面的代码中，我们通过<code>FormBuilder</code>来创建<code>FormGroup</code>，然后我们就可以在html中使用它：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> [<span class=\"hljs-attr\">formGroup</span>]=<span class=\"hljs-string\">\"formGroup\"</span> (<span class=\"hljs-attr\">ngSubmit</span>)=<span class=\"hljs-string\">\"doSubmit()\"</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>code<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">formControlName</span>=<span class=\"hljs-string\">\"code\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>name<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">formControlName</span>=<span class=\"hljs-string\">\"name\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"submit\"</span>&gt;</span> Submit<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></code></pre>\n<p>这种常规的模型实现起来还是比较简单的。</p>\n<p>那么对于one-to-many的模型我们应该怎么去实现呢？</p>\n<p>首先，我们来分析这个Dict模型。我们会发现items是一个Item[]，此时，我们可以在官方文档中找到，在响应式表单中有一个FormArray用来表示FormControl的数组模式。</p>\n<p>接下来我们看Item，其实它本身也是一个简单模型，我们可以用FormGroup来与之对应。</p>\n<p>现在我们对上面的代码进行改造：</p>\n<pre><code class=\"hljs typescript\">\n<span class=\"hljs-comment\">// 使用FormBuilder来实现</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> ReactiveFormDemoComponent <span class=\"hljs-keyword\">implements</span> OnInit &#123;\n\n  formGroup: FormGroup = <span class=\"hljs-keyword\">this</span>.fb.group(&#123;\n    id: [<span class=\"hljs-string\">''</span>],\n    code: [<span class=\"hljs-string\">''</span>],\n    name: [<span class=\"hljs-string\">''</span>]，\n    items: <span class=\"hljs-keyword\">this</span>.fb.array([])  <span class=\"hljs-comment\">// 使用FormBuilder创建一个FormArray</span>\n  &#125;);\n\n  <span class=\"hljs-keyword\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">private</span> fb: FormBuilder</span>) &#123; &#125;\n\n  ngOnInit() &#123;\n\n  &#125;\n\n\n  doSubmit() &#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>.formGroup.value);\n  &#125;\n\n  <span class=\"hljs-keyword\">get</span> items() &#123;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.formGroup.get(<span class=\"hljs-string\">'items'</span>) <span class=\"hljs-keyword\">as</span> FormArray;\n  &#125;\n&#125;</code></pre>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> [<span class=\"hljs-attr\">formGroup</span>]=<span class=\"hljs-string\">\"formGroup\"</span> (<span class=\"hljs-attr\">ngSubmit</span>)=<span class=\"hljs-string\">\"doSubmit()\"</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>code<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">formControlName</span>=<span class=\"hljs-string\">\"code\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>name<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">formControlName</span>=<span class=\"hljs-string\">\"name\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">formArrayName</span>=<span class=\"hljs-string\">\"items\"</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span> <span class=\"hljs-attr\">border</span>=<span class=\"hljs-string\">\"1\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>CODE<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>Name<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ng-container</span> *<span class=\"hljs-attr\">ngFor</span>=<span class=\"hljs-string\">\"let form of list.controls\"</span> [<span class=\"hljs-attr\">formGroup</span>]=<span class=\"hljs-string\">\"form\"</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">formControlName</span>=<span class=\"hljs-string\">\"code\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">formControlName</span>=<span class=\"hljs-string\">\"value\"</span>&gt;</span> <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ng-container</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"submit\"</span>&gt;</span> Submit<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></code></pre>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>复杂的东西都是由简单的组成的。就是Java中的基本数据类型一样。通过数据结构+算法，我们可以组装出复杂的对象，最后以应用的方式展示出来。所以，任何复杂的东西，只要我们认真分析，总能找到简单的实现方法。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在应用系统中，必不可少的一样功能就是表单录入。在Angular中，提供了两种表单模式：<strong>响应式表单</strong>和<strong>模板驱动表单</strong>。</p>\n<h2 id=\"Angular表单\"><a href=\"#Angular表单\" class=\"headerlink\" title=\"Angular表单\"></a>Angular表单</h2><h3 id=\"模板驱动表单\"><a href=\"#模板驱动表单\" class=\"headerlink\" title=\"模板驱动表单\"></a>模板驱动表单</h3><p>模板驱动表单是通过使用<code>ngModel</code>创建双向数据绑定，以读取和写入输入控件的值。如下：</p>\n<p>首先ts文件里面创建模型：<br><pre><code class=\"hljs typescript\">model = <span class=\"hljs-keyword\">new</span> Hero(<span class=\"hljs-number\">18</span>, <span class=\"hljs-string\">'Dr IQ'</span>, <span class=\"hljs-keyword\">this</span>.powers[<span class=\"hljs-number\">0</span>], <span class=\"hljs-string\">'Chuck Overstreet'</span>);</code></pre></p>\n<p>然后再html文件中，通过ngModel指令，实现模型数据的双向绑定:</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"form-control\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"name\"</span>\n       <span class=\"hljs-attr\">required</span>\n       [(<span class=\"hljs-attr\">ngModel</span>)]=<span class=\"hljs-string\">\"model.name\"</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"name\"</span>&gt;</span></code></pre>\n<p>应为在<code>input</code>上通过<code>ngModel</code>实现了对<code>model.name</code>的双向绑定，此时，我们在界面的<code>input</code>中输入的内容会实时的反应到ts中的<code>model</code>中。</p>\n<h3 id=\"响应式表单\"><a href=\"#响应式表单\" class=\"headerlink\" title=\"响应式表单\"></a>响应式表单</h3><p>响应式表单使用显式的、不可变的方式，管理表单在特定的时间点上的状态。对表单状态的每一次变更都会返回一个新的状态，这样可以在变化时维护模型的整体性。响应式表单是围绕 Observable 的流构建的，表单的输入和值都是通过这些输入值组成的流来提供的，它可以同步访问。</p>\n<p>当使用响应式表单时，FormControl 类是最基本的构造块。要注册单个的表单控件，请在组件中导入 FormControl 类，并创建一个 FormControl 的新实例，把它保存在类的某个属性中。</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">import</span> &#123; Component &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n<span class=\"hljs-keyword\">import</span> &#123; FormControl &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/forms'</span>;\n\n<span class=\"hljs-meta\">@Component</span>(&#123;\n  selector: <span class=\"hljs-string\">'app-name-editor'</span>,\n  templateUrl: <span class=\"hljs-string\">'./name-editor.component.html'</span>,\n  styleUrls: [<span class=\"hljs-string\">'./name-editor.component.css'</span>]\n&#125;)\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> NameEditorComponent &#123;\n  name = <span class=\"hljs-keyword\">new</span> FormControl(<span class=\"hljs-string\">''</span>);\n&#125;</code></pre>\n<p>在组件类中创建了控件之后，你还要把它和模板中的一个表单控件关联起来。修改模板，为表单控件添加 formControl 绑定，formControl 是由 ReactiveFormsModule 中的 FormControlDirective 提供的。</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span>&gt;</span>\n  Name:\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> [<span class=\"hljs-attr\">formControl</span>]=<span class=\"hljs-string\">\"name\"</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span></code></pre>\n<h2 id=\"one-to-many的领域模型\"><a href=\"#one-to-many的领域模型\" class=\"headerlink\" title=\"one-to-many的领域模型\"></a>one-to-many的领域模型</h2><p>我们现在有个数据字典的数据模型，每个字典又包含了多个字典项。我们用TypeScript描述下我们的模型:<br><pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> Dict &#123;\n    id: <span class=\"hljs-built_in\">number</span>;\n    code: <span class=\"hljs-built_in\">string</span>;\n    name: <span class=\"hljs-built_in\">string</span>;\n\n    items: Item[];\n&#125;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> Item &#123;\n    code: <span class=\"hljs-built_in\">string</span>;\n    value: <span class=\"hljs-built_in\">string</span>;\n&#125;</code></pre></p>\n<p>在这个数据字典的模型中，<code>Dict</code>和<code>Item</code>的关系就是<code>one-to-many</code>。</p>\n<h2 id=\"响应式表单实现字典模型\"><a href=\"#响应式表单实现字典模型\" class=\"headerlink\" title=\"响应式表单实现字典模型\"></a>响应式表单实现字典模型</h2><p>如果只是字典模型，没有字典项<code>Item</code>的话，在Angular的官方文档中已经给出了这样的模型实现方式：</p>\n<pre><code class=\"hljs typescript\">\n<span class=\"hljs-comment\">// 使用FormBuilder来实现</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> ReactiveFormDemoComponent <span class=\"hljs-keyword\">implements</span> OnInit &#123;\n\n  formGroup: FormGroup = <span class=\"hljs-keyword\">this</span>.fb.group(&#123;\n    id: [<span class=\"hljs-string\">''</span>],\n    code: [<span class=\"hljs-string\">''</span>],\n    name: [<span class=\"hljs-string\">''</span>]\n  &#125;);\n\n  <span class=\"hljs-keyword\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">private</span> fb: FormBuilder</span>) &#123; &#125;\n\n  ngOnInit() &#123;\n\n  &#125;\n\n \n\n  doSubmit() &#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>.formGroup.value);\n  &#125;\n&#125;</code></pre>\n<p>在上面的代码中，我们通过<code>FormBuilder</code>来创建<code>FormGroup</code>，然后我们就可以在html中使用它：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> [<span class=\"hljs-attr\">formGroup</span>]=<span class=\"hljs-string\">\"formGroup\"</span> (<span class=\"hljs-attr\">ngSubmit</span>)=<span class=\"hljs-string\">\"doSubmit()\"</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>code<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">formControlName</span>=<span class=\"hljs-string\">\"code\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>name<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">formControlName</span>=<span class=\"hljs-string\">\"name\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"submit\"</span>&gt;</span> Submit<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></code></pre>\n<p>这种常规的模型实现起来还是比较简单的。</p>\n<p>那么对于one-to-many的模型我们应该怎么去实现呢？</p>\n<p>首先，我们来分析这个Dict模型。我们会发现items是一个Item[]，此时，我们可以在官方文档中找到，在响应式表单中有一个FormArray用来表示FormControl的数组模式。</p>\n<p>接下来我们看Item，其实它本身也是一个简单模型，我们可以用FormGroup来与之对应。</p>\n<p>现在我们对上面的代码进行改造：</p>\n<pre><code class=\"hljs typescript\">\n<span class=\"hljs-comment\">// 使用FormBuilder来实现</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> ReactiveFormDemoComponent <span class=\"hljs-keyword\">implements</span> OnInit &#123;\n\n  formGroup: FormGroup = <span class=\"hljs-keyword\">this</span>.fb.group(&#123;\n    id: [<span class=\"hljs-string\">''</span>],\n    code: [<span class=\"hljs-string\">''</span>],\n    name: [<span class=\"hljs-string\">''</span>]，\n    items: <span class=\"hljs-keyword\">this</span>.fb.array([])  <span class=\"hljs-comment\">// 使用FormBuilder创建一个FormArray</span>\n  &#125;);\n\n  <span class=\"hljs-keyword\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">private</span> fb: FormBuilder</span>) &#123; &#125;\n\n  ngOnInit() &#123;\n\n  &#125;\n\n\n  doSubmit() &#123;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>.formGroup.value);\n  &#125;\n\n  <span class=\"hljs-keyword\">get</span> items() &#123;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.formGroup.get(<span class=\"hljs-string\">'items'</span>) <span class=\"hljs-keyword\">as</span> FormArray;\n  &#125;\n&#125;</code></pre>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> [<span class=\"hljs-attr\">formGroup</span>]=<span class=\"hljs-string\">\"formGroup\"</span> (<span class=\"hljs-attr\">ngSubmit</span>)=<span class=\"hljs-string\">\"doSubmit()\"</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>code<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">formControlName</span>=<span class=\"hljs-string\">\"code\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>name<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">formControlName</span>=<span class=\"hljs-string\">\"name\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">formArrayName</span>=<span class=\"hljs-string\">\"items\"</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span> <span class=\"hljs-attr\">border</span>=<span class=\"hljs-string\">\"1\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>CODE<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>Name<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ng-container</span> *<span class=\"hljs-attr\">ngFor</span>=<span class=\"hljs-string\">\"let form of list.controls\"</span> [<span class=\"hljs-attr\">formGroup</span>]=<span class=\"hljs-string\">\"form\"</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">formControlName</span>=<span class=\"hljs-string\">\"code\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">formControlName</span>=<span class=\"hljs-string\">\"value\"</span>&gt;</span> <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ng-container</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"submit\"</span>&gt;</span> Submit<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></code></pre>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>复杂的东西都是由简单的组成的。就是Java中的基本数据类型一样。通过数据结构+算法，我们可以组装出复杂的对象，最后以应用的方式展示出来。所以，任何复杂的东西，只要我们认真分析，总能找到简单的实现方法。</p>\n"},{"title":"当ThreadLocal碰上线程池","date":"2019-08-02T10:05:32.000Z","_content":"ThreadLocal可以让线程拥有本地变量，在web环境中，为了方便代码解耦，我们通常用它来保存上下文信息，然后用一个util类提供访问入口，从controller层到service层可以很方便的获取上下文。下面我们通过代码来研究一下ThreadLocal。\n\n新建一个ThreadContext类，用于保存线程上下文信息\n\n```java\npublic class ThreadContext {\n    private static ThreadLocal<UserObj> userResource = new ThreadLocal<UserObj>();\n\n    public static UserObj getUser() {\n        return userResource.get();\n    }\n\n    public static void bindUser(UserObj user) {\n        userResource.set(user);\n    }\n\n    public static UserObj unbindUser() {\n        UserObj obj = userResource.get();\n        userResource.remove();\n        return obj;\n    }\n}\n```\n\n新建一个sessionFilter ，用来操作线程变量\n\n```java\n@Override\npublic void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {\n    HttpServletRequest request = (HttpServletRequest) servletRequest;\n    try {\n        // 假设这里是从cookie拿token信息, 调用服务/或者从缓存查询用户信息\n        // 为了避免后续逻辑中多次查询/请求缓存服务器, 这里拿到user后放到线程本地变量中\n        UserObj user = ThreadContext.getUser();\n        // 如果当前线程中没有绑定user对象,那么绑定一个新的user\n        if (user == null) {\n            ThreadContext.bindUser(new UserObj(\"usertest\"));\n        }\n\n        filterChain.doFilter(servletRequest, servletResponse);\n    } finally {\n        // ThreadLocal的生命周期不等于一次request请求的生命周期\n        // 每个request请求的响应是tomcat从线程池中分配的线程, 线程会被下个请求复用.\n        // 所以请求结束后必须删除线程本地变量\n        // ThreadContext.unbindUser();\n    }\n}\n```\n\n新建UserUtils工具类\n\n```java\n/**\n * 配合SessionFilter使用,从上下文中取user信息\n */\npublic class UserUtils {\n    public static UserObj getCurrentUser() {\n        return ThreadContext.getUser();\n    }\n}\n```\n\n新建一个servlet测试\n\n```java\npublic class HelloworldServlet extends HttpServlet {\n\n    private static Logger logger = LoggerFactory.getLogger(HelloworldServlet.class);\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        UserObj user = UserUtils.getCurrentUser();\n        logger.info(user.getName() + user.hashCode());\n        super.doGet(req, resp);\n    }\n\n    @Override\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        super.doGet(req, resp);\n    }\n}\n\n```\n\n循环请求servlet，控制台显示结果如下。可以发现tomcat线程池的初始大小是10个，后面的请求复用了前面的线程，ThreadContext中的user对象的hashcode也一样。\n\n```java\n2016-11-29 17:21:35.975  INFO 36672 --- [nio-8080-exec-2] com.zallds.xy.servlet.HelloworldServlet  : usertest818202673\n2016-11-29 17:21:38.923  INFO 36672 --- [nio-8080-exec-3] com.zallds.xy.servlet.HelloworldServlet  : usertest1582591702\n2016-11-29 17:21:45.810  INFO 36672 --- [nio-8080-exec-4] com.zallds.xy.servlet.HelloworldServlet  : usertest55755037\n2016-11-29 17:21:46.773  INFO 36672 --- [nio-8080-exec-5] com.zallds.xy.servlet.HelloworldServlet  : usertest1495466807\n2016-11-29 17:21:47.345  INFO 36672 --- [nio-8080-exec-6] com.zallds.xy.servlet.HelloworldServlet  : usertest1149360245\n2016-11-29 17:21:47.613  INFO 36672 --- [nio-8080-exec-7] com.zallds.xy.servlet.HelloworldServlet  : usertest518375339\n2016-11-29 17:21:47.837  INFO 36672 --- [nio-8080-exec-8] com.zallds.xy.servlet.HelloworldServlet  : usertest92458992\n2016-11-29 17:21:48.012  INFO 36672 --- [nio-8080-exec-9] com.zallds.xy.servlet.HelloworldServlet  : usertest944867034\n2016-11-29 17:21:48.199  INFO 36672 --- [io-8080-exec-10] com.zallds.xy.servlet.HelloworldServlet  : usertest1410972809\n2016-11-29 17:21:48.378  INFO 36672 --- [nio-8080-exec-1] com.zallds.xy.servlet.HelloworldServlet  : usertest805332046\n2016-11-29 17:21:48.552  INFO 36672 --- [nio-8080-exec-2] com.zallds.xy.servlet.HelloworldServlet  : usertest818202673\n2016-11-29 17:21:48.730  INFO 36672 --- [nio-8080-exec-3] com.zallds.xy.servlet.HelloworldServlet  : usertest1582591702\n2016-11-29 17:21:48.903  INFO 36672 --- [nio-8080-exec-4] com.zallds.xy.servlet.HelloworldServlet  : usertest55755037\n2016-11-29 17:21:49.072  INFO 36672 --- [nio-8080-exec-5] com.zallds.xy.servlet.HelloworldServlet  : usertest1495466807\n2016-11-29 17:21:49.247  INFO 36672 --- [nio-8080-exec-6] com.zallds.xy.servlet.HelloworldServlet  : usertest1149360245\n2016-11-29 17:21:49.402  INFO 36672 --- [nio-8080-exec-7] com.zallds.xy.servlet.HelloworldServlet  : usertest518375339\n```\n\n去掉注释// ThreadContext.unbindUser(); 重新请求，每次从ThreadLocal中拿到的user对象完全不一样了。\n\n```java\n2016-11-29 17:30:37.150  INFO 36903 --- [nio-8080-exec-1] com.zallds.xy.servlet.HelloworldServlet  : usertest413138571\n2016-11-29 17:30:42.932  INFO 36903 --- [nio-8080-exec-2] com.zallds.xy.servlet.HelloworldServlet  : usertest1402191945\n2016-11-29 17:30:43.124  INFO 36903 --- [nio-8080-exec-3] com.zallds.xy.servlet.HelloworldServlet  : usertest1957579173\n2016-11-29 17:30:43.313  INFO 36903 --- [nio-8080-exec-4] com.zallds.xy.servlet.HelloworldServlet  : usertest1582591702\n2016-11-29 17:30:43.501  INFO 36903 --- [nio-8080-exec-5] com.zallds.xy.servlet.HelloworldServlet  : usertest1917479582\n2016-11-29 17:30:43.679  INFO 36903 --- [nio-8080-exec-6] com.zallds.xy.servlet.HelloworldServlet  : usertest772036767\n2016-11-29 17:30:43.851  INFO 36903 --- [nio-8080-exec-7] com.zallds.xy.servlet.HelloworldServlet  : usertest162020761\n2016-11-29 17:30:44.024  INFO 36903 --- [nio-8080-exec-8] com.zallds.xy.servlet.HelloworldServlet  : usertest682232950\n2016-11-29 17:30:44.225  INFO 36903 --- [nio-8080-exec-9] com.zallds.xy.servlet.HelloworldServlet  : usertest2140650341\n2016-11-29 17:30:44.419  INFO 36903 --- [io-8080-exec-10] com.zallds.xy.servlet.HelloworldServlet  : usertest1327601763\n2016-11-29 17:30:44.593  INFO 36903 --- [nio-8080-exec-1] com.zallds.xy.servlet.HelloworldServlet  : usertest647738411\n2016-11-29 17:30:44.787  INFO 36903 --- [nio-8080-exec-2] com.zallds.xy.servlet.HelloworldServlet  : usertest944867034\n2016-11-29 17:30:45.045  INFO 36903 --- [nio-8080-exec-3] com.zallds.xy.servlet.HelloworldServlet  : usertest1886154520\n2016-11-29 17:30:45.317  INFO 36903 --- [nio-8080-exec-4] com.zallds.xy.servlet.HelloworldServlet  : usertest1592904273\n2016-11-29 17:30:46.380  INFO 36903 --- [nio-8080-exec-5] com.zallds.xy.servlet.HelloworldServlet  : usertest1410972809\n2016-11-29 17:30:46.524  INFO 36903 --- [nio-8080-exec-6] com.zallds.xy.servlet.HelloworldServlet  : usertest1705570689\n2016-11-29 17:30:46.692  INFO 36903 --- [nio-8080-exec-7] com.zallds.xy.servlet.HelloworldServlet  : usertest1105134375\n2016-11-29 17:30:46.802  INFO 36903 --- [nio-8080-exec-8] com.zallds.xy.servlet.HelloworldServlet  : usertest407377722\n```\n\n<a name=\"PAmaK\"></a>\n## ThreadLocal子线程场景\n需求新增， 需要在原有的业务逻辑中增加一个给用户发送邮件的操作。发送邮件我们采用异步处理，新建一个线程来执行。\n\n```java\nprotected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n    UserObj user = UserUtils.getCurrentUser();\n    logger.info(user.getName() + user.hashCode());\n\n    SendEmailTask emailThread = new SendEmailTask();\n    new Thread(emailThread).start();\n\n    super.doGet(req, resp);\n}\n\nclass SendEmailTask implements Runnable {\n\n    @Override\n    public void run() {\n        UserObj user = UserUtils.getCurrentUser();\n        logger.info(\"子线程中:\" + (user == null ? \"user为null\" : user.getName() + user.hashCode()));\n    }\n}\n```\n\n主线程中创建异步线程，子线程中能拿到吗？通过测试发现是不能的\n\n```java\n2016-11-29 18:09:16.482  INFO 38092 --- [nio-8080-exec-2] com.zallds.xy.servlet.HelloworldServlet  : usertest1425505918\n2016-11-29 18:09:16.483  INFO 38092 --- [       Thread-4] com.zallds.xy.servlet.HelloworldServlet  : 子线程中:user为null\n2016-11-29 18:09:20.995  INFO 38092 --- [nio-8080-exec-3] com.zallds.xy.servlet.HelloworldServlet  : usertest1280373552\n2016-11-29 18:09:20.996  INFO 38092 --- [       Thread-5] com.zallds.xy.servlet.HelloworldServlet  : 子线程中:user为null\n```\n\n子线程怎么拿到父线程的ThreadLocal数据？jdk给我们提供了解决办法，ThreadLocal有一个子类InheritableThreadLocal，创建ThreadLocal时候我们采用InheritableThreadLocal类可以实现子线程获取到父线程的本地变量。\n\n```java\nprivate static ThreadLocal<UserObj> userResource = new InheritableThreadLocal<UserObj>();\n```\n\n然后子线程中就可以正常拿到user对象了\n\n```java\n2016-11-29 19:07:01.518  INFO 39644 --- [nio-8080-exec-2] com.zallds.xy.servlet.HelloworldServlet  : usertest495550128\n2016-11-29 19:07:01.518  INFO 39644 --- [       Thread-4] com.zallds.xy.servlet.HelloworldServlet  : 子线程中:usertest495550128\n2016-11-29 19:07:05.839  INFO 39644 --- [nio-8080-exec-3] com.zallds.xy.servlet.HelloworldServlet  : usertest1851717404\n2016-11-29 19:07:05.840  INFO 39644 --- [       Thread-5] com.zallds.xy.servlet.HelloworldServlet  : 子线程中:usertest1851717404\n```\n\n<a name=\"I3PZJ\"></a>\n## ThreadLocal 子线程传递－线程池场景\n当我们执行异步任务时，大多会采用线程池的机制(如Executor)。这样就会存在一个问题，即使父线程已经结束，子线程依然存在并被池化。这样，线程池中的线程在下一次请求被执行的时候，ThreadLocal的get()方法返回的将不是当前线程中设定的变量，因为池中的“子线程”根本不是当前线程创建的，当前线程设定的ThreadLocal变量也就无法传递给线程池中的线程。<br />我们修改一下发送邮件的代码，改用线程池来实现。\n\n```java\n2016-11-29 19:51:51.973  INFO 40937 --- [nio-8080-exec-1] com.zallds.xy.servlet.HelloworldServlet  : usertest1417641261\n2016-11-29 19:51:51.974  INFO 40937 --- [pool-1-thread-1] com.zallds.xy.servlet.HelloworldServlet  : 子线程中:usertest1417641261\n2016-11-29 19:51:55.746  INFO 40937 --- [nio-8080-exec-2] com.zallds.xy.servlet.HelloworldServlet  : usertest1116537955\n2016-11-29 19:51:55.746  INFO 40937 --- [pool-1-thread-1] com.zallds.xy.servlet.HelloworldServlet  : 子线程中:usertest1417641261\n2016-11-29 19:51:58.825  INFO 40937 --- [nio-8080-exec-3] com.zallds.xy.servlet.HelloworldServlet  : usertest1489938856\n2016-11-29 19:51:58.826  INFO 40937 --- [pool-1-thread-1] com.zallds.xy.servlet.HelloworldServlet  : 子线程中:usertest1417641261\n```\n\n可以发现发送邮件的任务三次用的都是同一个线程[pool-1-thread-1]，第一次子线程和父线程中的user对象相同，后面的“子线程”（前面提到过，后面的已经不是子线程了）中的user对象都是和第一个父线程中的相同。<br />那么在线程池的场景下，怎么能让“子线程”正常拿到父线程传递过来的变量呢？如果我们能在创建task的时候主动传递过去就好了。按照这个想法我们来实施一下。<br />继续修改代码\n\n```java\nprotected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n    UserObj user = UserUtils.getCurrentUser();\n    logger.info(user.getName() + user.hashCode());\n\n    SendEmailTask emailThread = new SendEmailTask();\n\n    executor.execute(new UserRunnable(emailThread, user));\n    super.doGet(req, resp);\n}\n\n/**\n * 做一个wrapper, 将目标任务做一层包装, 在run方法中传递线程本地变量\n */\nclass UserRunnable implements Runnable {\n    /**\n     * 目标任务对象\n     */\n    Runnable runnable;\n    /**\n     * 要绑定的user对象\n     */\n    UserObj user;\n\n    public UserRunnable(Runnable runnable, UserObj user) {\n        this.runnable = runnable;\n        this.user = user;\n    }\n\n    @Override\n    public void run() {\n        ThreadContext.bindUser(user);\n        runnable.run();\n        ThreadContext.unbindUser();\n    }\n}\n\nclass SendEmailTask implements Runnable {\n\n    @Override\n    public void run() {\n        UserObj user = UserUtils.getCurrentUser();\n        logger.info(\"子线程中:\" + (user == null ? \"user为null\" : user.getName() + user.hashCode()));\n    }\n}\n```\n\n重新请求，得到我们想要的结果\n\n```java\n2016-11-29 20:04:12.153  INFO 41258 --- [nio-8080-exec-1] com.zallds.xy.servlet.HelloworldServlet  : usertest1565180744\n2016-11-29 20:04:12.154  INFO 41258 --- [pool-1-thread-1] com.zallds.xy.servlet.HelloworldServlet  : 子线程中:usertest1565180744\n2016-11-29 20:04:14.142  INFO 41258 --- [nio-8080-exec-2] com.zallds.xy.servlet.HelloworldServlet  : usertest481396704\n2016-11-29 20:04:14.142  INFO 41258 --- [pool-1-thread-1] com.zallds.xy.servlet.HelloworldServlet  : 子线程中:usertest481396704\n2016-11-29 20:04:15.248  INFO 41258 --- [nio-8080-exec-3] com.zallds.xy.servlet.HelloworldServlet  : usertest400717395\n2016-11-29 20:04:15.249  INFO 41258 --- [pool-1-thread-1] com.zallds.xy.servlet.HelloworldServlet  : 子线程中:usertest400717395\n```\n\n到此为止，ThreadLocal常见的场景和对应解决方案应该可以满足了。接下来就是怎么在实际应用中运用了。\n\n为了引出此文的初衷以及后面要讲的东西，针对最后一个解决方案，我们可以进一步完善一下。\n\n```java\nThreadContext.bindUser(user);\nrunnable.run();\nThreadContext.unbindUser();\n```\n\n这个地方在bind的时候是直接覆盖，无法对线程之前的状态进行保存和恢复。要实现这一点，我们可以抽象一个ThreadState来保存线程的状态，在bind之前保存original，任务执行完以后进行restore。\n\n```java\npublic interface ThreadState {\n    void bind();\n\n    void restore();\n\n    void clear();\n}\n\npublic class UserThreadState implements ThreadState {\n    private UserObj original;\n\n    private UserObj user;\n\n    public UserThreadState(UserObj user) {\n        this.user = user;\n    }\n\n    @Override\n    public void bind() {\n        this.original = ThreadContext.getUser();\n\n        ThreadContext.bindUser(this.user);\n    }\n\n    @Override\n    public void restore() {\n        ThreadContext.bindUser(this.original);\n    }\n\n    @Override\n    public void clear() {\n        ThreadContext.unbindUser();\n    }\n}\n\n\nprotected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n    UserObj user = UserUtils.getCurrentUser();\n    logger.info(user.getName() + user.hashCode());\n\n    SendEmailTask emailThread = new SendEmailTask();\n\n    executor.execute(new UserRunnable(emailThread, new UserThreadState(user)));\n    super.doGet(req, resp);\n}\n\n/**\n * 做一个wrapper, 将目标任务做一层包装, 在run方法中传递线程本地变量\n */\nclass UserRunnable implements Runnable {\n    /**\n     * 目标任务对象\n     */\n    Runnable runnable;\n    /**\n     * 要绑定的user对象\n     */\n    UserThreadState userThreadState;\n\n    public UserRunnable(Runnable runnable, UserThreadState userThreadState) {\n        this.runnable = runnable;\n        this.userThreadState = userThreadState;\n    }\n\n    @Override\n    public void run() {\n        userThreadState.bind();\n        runnable.run();\n        userThreadState.restore();\n        UserObj userOrig = UserUtils.getCurrentUser();\n        logger.info(\"original:\" + userOrig.getName() + userOrig.hashCode());\n    }\n}\n\nclass SendEmailTask implements Runnable {\n\n    @Override\n    public void run() {\n        UserObj user = UserUtils.getCurrentUser();\n        logger.info(\"子线程中:\" + (user == null ? \"user为null\" : user.getName() + user.hashCode()));\n    }\n}\n```\n\n实现效果是相同的，至于为什么三次的original对象都是一样的，通过前面的说明应该能够理解\n\n```java\n2016-11-29 20:19:48.694  INFO 41671 --- [nio-8080-exec-1] com.zallds.xy.servlet.HelloworldServlet  : usertest114760676\n2016-11-29 20:19:48.699  INFO 41671 --- [pool-1-thread-1] com.zallds.xy.servlet.HelloworldServlet  : 子线程中:usertest114760676\n2016-11-29 20:19:48.700  INFO 41671 --- [pool-1-thread-1] com.zallds.xy.servlet.HelloworldServlet  : original:usertest114760676\n2016-11-29 20:19:57.123  INFO 41671 --- [nio-8080-exec-2] com.zallds.xy.servlet.HelloworldServlet  : usertest941302199\n2016-11-29 20:19:57.123  INFO 41671 --- [pool-1-thread-1] com.zallds.xy.servlet.HelloworldServlet  : 子线程中:usertest941302199\n2016-11-29 20:19:57.123  INFO 41671 --- [pool-1-thread-1] com.zallds.xy.servlet.HelloworldServlet  : original:usertest114760676\n2016-11-29 20:20:04.385  INFO 41671 --- [nio-8080-exec-3] com.zallds.xy.servlet.HelloworldServlet  : usertest1489938856\n2016-11-29 20:20:04.385  INFO 41671 --- [pool-1-thread-1] com.zallds.xy.servlet.HelloworldServlet  : 子线程中:usertest1489938856\n2016-11-29 20:20:04.385  INFO 41671 --- [pool-1-thread-1] com.zallds.xy.servlet.HelloworldServlet  : original:usertest114760676\n```\n\n由于在使用shiro框架的SecurityUtils.getSubject()过程中碰到问题，才有了本文的示例，例子中的部分代码参考了shiro框架的实现机制。后面会再研究一下shiro的subject相关设计。\n\n[http://shiro.apache.org/subject.html](http://shiro.apache.org/subject.html)\n\n\n> 作者： 99793933e682\n> 原文地址： [https://www.jianshu.com/p/85d96fe9358b](https://www.jianshu.com/p/85d96fe9358b)\n\n\n---\n\n![微信图片_20190719095938.jpg](https://cdn.nlark.com/yuque/0/2019/jpeg/269363/1564727847078-00283633-d15e-4603-833c-be0c4c7ad83b.jpeg#align=left&display=inline&height=450&name=%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20190719095938.jpg&originHeight=450&originWidth=900&size=36931&status=done&width=900)\n","source":"_posts/当ThreadLocal碰上线程池.md","raw":"---\ntitle: 当ThreadLocal碰上线程池\ndate: 2019-08-02 18:05:32\ntags:\n---\nThreadLocal可以让线程拥有本地变量，在web环境中，为了方便代码解耦，我们通常用它来保存上下文信息，然后用一个util类提供访问入口，从controller层到service层可以很方便的获取上下文。下面我们通过代码来研究一下ThreadLocal。\n\n新建一个ThreadContext类，用于保存线程上下文信息\n\n```java\npublic class ThreadContext {\n    private static ThreadLocal<UserObj> userResource = new ThreadLocal<UserObj>();\n\n    public static UserObj getUser() {\n        return userResource.get();\n    }\n\n    public static void bindUser(UserObj user) {\n        userResource.set(user);\n    }\n\n    public static UserObj unbindUser() {\n        UserObj obj = userResource.get();\n        userResource.remove();\n        return obj;\n    }\n}\n```\n\n新建一个sessionFilter ，用来操作线程变量\n\n```java\n@Override\npublic void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {\n    HttpServletRequest request = (HttpServletRequest) servletRequest;\n    try {\n        // 假设这里是从cookie拿token信息, 调用服务/或者从缓存查询用户信息\n        // 为了避免后续逻辑中多次查询/请求缓存服务器, 这里拿到user后放到线程本地变量中\n        UserObj user = ThreadContext.getUser();\n        // 如果当前线程中没有绑定user对象,那么绑定一个新的user\n        if (user == null) {\n            ThreadContext.bindUser(new UserObj(\"usertest\"));\n        }\n\n        filterChain.doFilter(servletRequest, servletResponse);\n    } finally {\n        // ThreadLocal的生命周期不等于一次request请求的生命周期\n        // 每个request请求的响应是tomcat从线程池中分配的线程, 线程会被下个请求复用.\n        // 所以请求结束后必须删除线程本地变量\n        // ThreadContext.unbindUser();\n    }\n}\n```\n\n新建UserUtils工具类\n\n```java\n/**\n * 配合SessionFilter使用,从上下文中取user信息\n */\npublic class UserUtils {\n    public static UserObj getCurrentUser() {\n        return ThreadContext.getUser();\n    }\n}\n```\n\n新建一个servlet测试\n\n```java\npublic class HelloworldServlet extends HttpServlet {\n\n    private static Logger logger = LoggerFactory.getLogger(HelloworldServlet.class);\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        UserObj user = UserUtils.getCurrentUser();\n        logger.info(user.getName() + user.hashCode());\n        super.doGet(req, resp);\n    }\n\n    @Override\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        super.doGet(req, resp);\n    }\n}\n\n```\n\n循环请求servlet，控制台显示结果如下。可以发现tomcat线程池的初始大小是10个，后面的请求复用了前面的线程，ThreadContext中的user对象的hashcode也一样。\n\n```java\n2016-11-29 17:21:35.975  INFO 36672 --- [nio-8080-exec-2] com.zallds.xy.servlet.HelloworldServlet  : usertest818202673\n2016-11-29 17:21:38.923  INFO 36672 --- [nio-8080-exec-3] com.zallds.xy.servlet.HelloworldServlet  : usertest1582591702\n2016-11-29 17:21:45.810  INFO 36672 --- [nio-8080-exec-4] com.zallds.xy.servlet.HelloworldServlet  : usertest55755037\n2016-11-29 17:21:46.773  INFO 36672 --- [nio-8080-exec-5] com.zallds.xy.servlet.HelloworldServlet  : usertest1495466807\n2016-11-29 17:21:47.345  INFO 36672 --- [nio-8080-exec-6] com.zallds.xy.servlet.HelloworldServlet  : usertest1149360245\n2016-11-29 17:21:47.613  INFO 36672 --- [nio-8080-exec-7] com.zallds.xy.servlet.HelloworldServlet  : usertest518375339\n2016-11-29 17:21:47.837  INFO 36672 --- [nio-8080-exec-8] com.zallds.xy.servlet.HelloworldServlet  : usertest92458992\n2016-11-29 17:21:48.012  INFO 36672 --- [nio-8080-exec-9] com.zallds.xy.servlet.HelloworldServlet  : usertest944867034\n2016-11-29 17:21:48.199  INFO 36672 --- [io-8080-exec-10] com.zallds.xy.servlet.HelloworldServlet  : usertest1410972809\n2016-11-29 17:21:48.378  INFO 36672 --- [nio-8080-exec-1] com.zallds.xy.servlet.HelloworldServlet  : usertest805332046\n2016-11-29 17:21:48.552  INFO 36672 --- [nio-8080-exec-2] com.zallds.xy.servlet.HelloworldServlet  : usertest818202673\n2016-11-29 17:21:48.730  INFO 36672 --- [nio-8080-exec-3] com.zallds.xy.servlet.HelloworldServlet  : usertest1582591702\n2016-11-29 17:21:48.903  INFO 36672 --- [nio-8080-exec-4] com.zallds.xy.servlet.HelloworldServlet  : usertest55755037\n2016-11-29 17:21:49.072  INFO 36672 --- [nio-8080-exec-5] com.zallds.xy.servlet.HelloworldServlet  : usertest1495466807\n2016-11-29 17:21:49.247  INFO 36672 --- [nio-8080-exec-6] com.zallds.xy.servlet.HelloworldServlet  : usertest1149360245\n2016-11-29 17:21:49.402  INFO 36672 --- [nio-8080-exec-7] com.zallds.xy.servlet.HelloworldServlet  : usertest518375339\n```\n\n去掉注释// ThreadContext.unbindUser(); 重新请求，每次从ThreadLocal中拿到的user对象完全不一样了。\n\n```java\n2016-11-29 17:30:37.150  INFO 36903 --- [nio-8080-exec-1] com.zallds.xy.servlet.HelloworldServlet  : usertest413138571\n2016-11-29 17:30:42.932  INFO 36903 --- [nio-8080-exec-2] com.zallds.xy.servlet.HelloworldServlet  : usertest1402191945\n2016-11-29 17:30:43.124  INFO 36903 --- [nio-8080-exec-3] com.zallds.xy.servlet.HelloworldServlet  : usertest1957579173\n2016-11-29 17:30:43.313  INFO 36903 --- [nio-8080-exec-4] com.zallds.xy.servlet.HelloworldServlet  : usertest1582591702\n2016-11-29 17:30:43.501  INFO 36903 --- [nio-8080-exec-5] com.zallds.xy.servlet.HelloworldServlet  : usertest1917479582\n2016-11-29 17:30:43.679  INFO 36903 --- [nio-8080-exec-6] com.zallds.xy.servlet.HelloworldServlet  : usertest772036767\n2016-11-29 17:30:43.851  INFO 36903 --- [nio-8080-exec-7] com.zallds.xy.servlet.HelloworldServlet  : usertest162020761\n2016-11-29 17:30:44.024  INFO 36903 --- [nio-8080-exec-8] com.zallds.xy.servlet.HelloworldServlet  : usertest682232950\n2016-11-29 17:30:44.225  INFO 36903 --- [nio-8080-exec-9] com.zallds.xy.servlet.HelloworldServlet  : usertest2140650341\n2016-11-29 17:30:44.419  INFO 36903 --- [io-8080-exec-10] com.zallds.xy.servlet.HelloworldServlet  : usertest1327601763\n2016-11-29 17:30:44.593  INFO 36903 --- [nio-8080-exec-1] com.zallds.xy.servlet.HelloworldServlet  : usertest647738411\n2016-11-29 17:30:44.787  INFO 36903 --- [nio-8080-exec-2] com.zallds.xy.servlet.HelloworldServlet  : usertest944867034\n2016-11-29 17:30:45.045  INFO 36903 --- [nio-8080-exec-3] com.zallds.xy.servlet.HelloworldServlet  : usertest1886154520\n2016-11-29 17:30:45.317  INFO 36903 --- [nio-8080-exec-4] com.zallds.xy.servlet.HelloworldServlet  : usertest1592904273\n2016-11-29 17:30:46.380  INFO 36903 --- [nio-8080-exec-5] com.zallds.xy.servlet.HelloworldServlet  : usertest1410972809\n2016-11-29 17:30:46.524  INFO 36903 --- [nio-8080-exec-6] com.zallds.xy.servlet.HelloworldServlet  : usertest1705570689\n2016-11-29 17:30:46.692  INFO 36903 --- [nio-8080-exec-7] com.zallds.xy.servlet.HelloworldServlet  : usertest1105134375\n2016-11-29 17:30:46.802  INFO 36903 --- [nio-8080-exec-8] com.zallds.xy.servlet.HelloworldServlet  : usertest407377722\n```\n\n<a name=\"PAmaK\"></a>\n## ThreadLocal子线程场景\n需求新增， 需要在原有的业务逻辑中增加一个给用户发送邮件的操作。发送邮件我们采用异步处理，新建一个线程来执行。\n\n```java\nprotected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n    UserObj user = UserUtils.getCurrentUser();\n    logger.info(user.getName() + user.hashCode());\n\n    SendEmailTask emailThread = new SendEmailTask();\n    new Thread(emailThread).start();\n\n    super.doGet(req, resp);\n}\n\nclass SendEmailTask implements Runnable {\n\n    @Override\n    public void run() {\n        UserObj user = UserUtils.getCurrentUser();\n        logger.info(\"子线程中:\" + (user == null ? \"user为null\" : user.getName() + user.hashCode()));\n    }\n}\n```\n\n主线程中创建异步线程，子线程中能拿到吗？通过测试发现是不能的\n\n```java\n2016-11-29 18:09:16.482  INFO 38092 --- [nio-8080-exec-2] com.zallds.xy.servlet.HelloworldServlet  : usertest1425505918\n2016-11-29 18:09:16.483  INFO 38092 --- [       Thread-4] com.zallds.xy.servlet.HelloworldServlet  : 子线程中:user为null\n2016-11-29 18:09:20.995  INFO 38092 --- [nio-8080-exec-3] com.zallds.xy.servlet.HelloworldServlet  : usertest1280373552\n2016-11-29 18:09:20.996  INFO 38092 --- [       Thread-5] com.zallds.xy.servlet.HelloworldServlet  : 子线程中:user为null\n```\n\n子线程怎么拿到父线程的ThreadLocal数据？jdk给我们提供了解决办法，ThreadLocal有一个子类InheritableThreadLocal，创建ThreadLocal时候我们采用InheritableThreadLocal类可以实现子线程获取到父线程的本地变量。\n\n```java\nprivate static ThreadLocal<UserObj> userResource = new InheritableThreadLocal<UserObj>();\n```\n\n然后子线程中就可以正常拿到user对象了\n\n```java\n2016-11-29 19:07:01.518  INFO 39644 --- [nio-8080-exec-2] com.zallds.xy.servlet.HelloworldServlet  : usertest495550128\n2016-11-29 19:07:01.518  INFO 39644 --- [       Thread-4] com.zallds.xy.servlet.HelloworldServlet  : 子线程中:usertest495550128\n2016-11-29 19:07:05.839  INFO 39644 --- [nio-8080-exec-3] com.zallds.xy.servlet.HelloworldServlet  : usertest1851717404\n2016-11-29 19:07:05.840  INFO 39644 --- [       Thread-5] com.zallds.xy.servlet.HelloworldServlet  : 子线程中:usertest1851717404\n```\n\n<a name=\"I3PZJ\"></a>\n## ThreadLocal 子线程传递－线程池场景\n当我们执行异步任务时，大多会采用线程池的机制(如Executor)。这样就会存在一个问题，即使父线程已经结束，子线程依然存在并被池化。这样，线程池中的线程在下一次请求被执行的时候，ThreadLocal的get()方法返回的将不是当前线程中设定的变量，因为池中的“子线程”根本不是当前线程创建的，当前线程设定的ThreadLocal变量也就无法传递给线程池中的线程。<br />我们修改一下发送邮件的代码，改用线程池来实现。\n\n```java\n2016-11-29 19:51:51.973  INFO 40937 --- [nio-8080-exec-1] com.zallds.xy.servlet.HelloworldServlet  : usertest1417641261\n2016-11-29 19:51:51.974  INFO 40937 --- [pool-1-thread-1] com.zallds.xy.servlet.HelloworldServlet  : 子线程中:usertest1417641261\n2016-11-29 19:51:55.746  INFO 40937 --- [nio-8080-exec-2] com.zallds.xy.servlet.HelloworldServlet  : usertest1116537955\n2016-11-29 19:51:55.746  INFO 40937 --- [pool-1-thread-1] com.zallds.xy.servlet.HelloworldServlet  : 子线程中:usertest1417641261\n2016-11-29 19:51:58.825  INFO 40937 --- [nio-8080-exec-3] com.zallds.xy.servlet.HelloworldServlet  : usertest1489938856\n2016-11-29 19:51:58.826  INFO 40937 --- [pool-1-thread-1] com.zallds.xy.servlet.HelloworldServlet  : 子线程中:usertest1417641261\n```\n\n可以发现发送邮件的任务三次用的都是同一个线程[pool-1-thread-1]，第一次子线程和父线程中的user对象相同，后面的“子线程”（前面提到过，后面的已经不是子线程了）中的user对象都是和第一个父线程中的相同。<br />那么在线程池的场景下，怎么能让“子线程”正常拿到父线程传递过来的变量呢？如果我们能在创建task的时候主动传递过去就好了。按照这个想法我们来实施一下。<br />继续修改代码\n\n```java\nprotected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n    UserObj user = UserUtils.getCurrentUser();\n    logger.info(user.getName() + user.hashCode());\n\n    SendEmailTask emailThread = new SendEmailTask();\n\n    executor.execute(new UserRunnable(emailThread, user));\n    super.doGet(req, resp);\n}\n\n/**\n * 做一个wrapper, 将目标任务做一层包装, 在run方法中传递线程本地变量\n */\nclass UserRunnable implements Runnable {\n    /**\n     * 目标任务对象\n     */\n    Runnable runnable;\n    /**\n     * 要绑定的user对象\n     */\n    UserObj user;\n\n    public UserRunnable(Runnable runnable, UserObj user) {\n        this.runnable = runnable;\n        this.user = user;\n    }\n\n    @Override\n    public void run() {\n        ThreadContext.bindUser(user);\n        runnable.run();\n        ThreadContext.unbindUser();\n    }\n}\n\nclass SendEmailTask implements Runnable {\n\n    @Override\n    public void run() {\n        UserObj user = UserUtils.getCurrentUser();\n        logger.info(\"子线程中:\" + (user == null ? \"user为null\" : user.getName() + user.hashCode()));\n    }\n}\n```\n\n重新请求，得到我们想要的结果\n\n```java\n2016-11-29 20:04:12.153  INFO 41258 --- [nio-8080-exec-1] com.zallds.xy.servlet.HelloworldServlet  : usertest1565180744\n2016-11-29 20:04:12.154  INFO 41258 --- [pool-1-thread-1] com.zallds.xy.servlet.HelloworldServlet  : 子线程中:usertest1565180744\n2016-11-29 20:04:14.142  INFO 41258 --- [nio-8080-exec-2] com.zallds.xy.servlet.HelloworldServlet  : usertest481396704\n2016-11-29 20:04:14.142  INFO 41258 --- [pool-1-thread-1] com.zallds.xy.servlet.HelloworldServlet  : 子线程中:usertest481396704\n2016-11-29 20:04:15.248  INFO 41258 --- [nio-8080-exec-3] com.zallds.xy.servlet.HelloworldServlet  : usertest400717395\n2016-11-29 20:04:15.249  INFO 41258 --- [pool-1-thread-1] com.zallds.xy.servlet.HelloworldServlet  : 子线程中:usertest400717395\n```\n\n到此为止，ThreadLocal常见的场景和对应解决方案应该可以满足了。接下来就是怎么在实际应用中运用了。\n\n为了引出此文的初衷以及后面要讲的东西，针对最后一个解决方案，我们可以进一步完善一下。\n\n```java\nThreadContext.bindUser(user);\nrunnable.run();\nThreadContext.unbindUser();\n```\n\n这个地方在bind的时候是直接覆盖，无法对线程之前的状态进行保存和恢复。要实现这一点，我们可以抽象一个ThreadState来保存线程的状态，在bind之前保存original，任务执行完以后进行restore。\n\n```java\npublic interface ThreadState {\n    void bind();\n\n    void restore();\n\n    void clear();\n}\n\npublic class UserThreadState implements ThreadState {\n    private UserObj original;\n\n    private UserObj user;\n\n    public UserThreadState(UserObj user) {\n        this.user = user;\n    }\n\n    @Override\n    public void bind() {\n        this.original = ThreadContext.getUser();\n\n        ThreadContext.bindUser(this.user);\n    }\n\n    @Override\n    public void restore() {\n        ThreadContext.bindUser(this.original);\n    }\n\n    @Override\n    public void clear() {\n        ThreadContext.unbindUser();\n    }\n}\n\n\nprotected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n    UserObj user = UserUtils.getCurrentUser();\n    logger.info(user.getName() + user.hashCode());\n\n    SendEmailTask emailThread = new SendEmailTask();\n\n    executor.execute(new UserRunnable(emailThread, new UserThreadState(user)));\n    super.doGet(req, resp);\n}\n\n/**\n * 做一个wrapper, 将目标任务做一层包装, 在run方法中传递线程本地变量\n */\nclass UserRunnable implements Runnable {\n    /**\n     * 目标任务对象\n     */\n    Runnable runnable;\n    /**\n     * 要绑定的user对象\n     */\n    UserThreadState userThreadState;\n\n    public UserRunnable(Runnable runnable, UserThreadState userThreadState) {\n        this.runnable = runnable;\n        this.userThreadState = userThreadState;\n    }\n\n    @Override\n    public void run() {\n        userThreadState.bind();\n        runnable.run();\n        userThreadState.restore();\n        UserObj userOrig = UserUtils.getCurrentUser();\n        logger.info(\"original:\" + userOrig.getName() + userOrig.hashCode());\n    }\n}\n\nclass SendEmailTask implements Runnable {\n\n    @Override\n    public void run() {\n        UserObj user = UserUtils.getCurrentUser();\n        logger.info(\"子线程中:\" + (user == null ? \"user为null\" : user.getName() + user.hashCode()));\n    }\n}\n```\n\n实现效果是相同的，至于为什么三次的original对象都是一样的，通过前面的说明应该能够理解\n\n```java\n2016-11-29 20:19:48.694  INFO 41671 --- [nio-8080-exec-1] com.zallds.xy.servlet.HelloworldServlet  : usertest114760676\n2016-11-29 20:19:48.699  INFO 41671 --- [pool-1-thread-1] com.zallds.xy.servlet.HelloworldServlet  : 子线程中:usertest114760676\n2016-11-29 20:19:48.700  INFO 41671 --- [pool-1-thread-1] com.zallds.xy.servlet.HelloworldServlet  : original:usertest114760676\n2016-11-29 20:19:57.123  INFO 41671 --- [nio-8080-exec-2] com.zallds.xy.servlet.HelloworldServlet  : usertest941302199\n2016-11-29 20:19:57.123  INFO 41671 --- [pool-1-thread-1] com.zallds.xy.servlet.HelloworldServlet  : 子线程中:usertest941302199\n2016-11-29 20:19:57.123  INFO 41671 --- [pool-1-thread-1] com.zallds.xy.servlet.HelloworldServlet  : original:usertest114760676\n2016-11-29 20:20:04.385  INFO 41671 --- [nio-8080-exec-3] com.zallds.xy.servlet.HelloworldServlet  : usertest1489938856\n2016-11-29 20:20:04.385  INFO 41671 --- [pool-1-thread-1] com.zallds.xy.servlet.HelloworldServlet  : 子线程中:usertest1489938856\n2016-11-29 20:20:04.385  INFO 41671 --- [pool-1-thread-1] com.zallds.xy.servlet.HelloworldServlet  : original:usertest114760676\n```\n\n由于在使用shiro框架的SecurityUtils.getSubject()过程中碰到问题，才有了本文的示例，例子中的部分代码参考了shiro框架的实现机制。后面会再研究一下shiro的subject相关设计。\n\n[http://shiro.apache.org/subject.html](http://shiro.apache.org/subject.html)\n\n\n> 作者： 99793933e682\n> 原文地址： [https://www.jianshu.com/p/85d96fe9358b](https://www.jianshu.com/p/85d96fe9358b)\n\n\n---\n\n![微信图片_20190719095938.jpg](https://cdn.nlark.com/yuque/0/2019/jpeg/269363/1564727847078-00283633-d15e-4603-833c-be0c4c7ad83b.jpeg#align=left&display=inline&height=450&name=%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20190719095938.jpg&originHeight=450&originWidth=900&size=36931&status=done&width=900)\n","slug":"当ThreadLocal碰上线程池","published":1,"updated":"2020-07-17T02:32:01.232Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcpntuiw005g04oiv8k5ouk6","content":"<p>ThreadLocal可以让线程拥有本地变量，在web环境中，为了方便代码解耦，我们通常用它来保存上下文信息，然后用一个util类提供访问入口，从controller层到service层可以很方便的获取上下文。下面我们通过代码来研究一下ThreadLocal。</p>\n<p>新建一个ThreadContext类，用于保存线程上下文信息</p>\n<pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ThreadContext</span> </span>&#123;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> ThreadLocal&lt;UserObj&gt; userResource = <span class=\"hljs-keyword\">new</span> ThreadLocal&lt;UserObj&gt;();\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> UserObj <span class=\"hljs-title\">getUser</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-keyword\">return</span> userResource.get();\n    &#125;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">bindUser</span><span class=\"hljs-params\">(UserObj user)</span> </span>&#123;\n        userResource.set(user);\n    &#125;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> UserObj <span class=\"hljs-title\">unbindUser</span><span class=\"hljs-params\">()</span> </span>&#123;\n        UserObj obj = userResource.get();\n        userResource.remove();\n        <span class=\"hljs-keyword\">return</span> obj;\n    &#125;\n&#125;</code></pre>\n<p>新建一个sessionFilter ，用来操作线程变量</p>\n<pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doFilter</span><span class=\"hljs-params\">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class=\"hljs-keyword\">throws</span> IOException, ServletException </span>&#123;\n    HttpServletRequest request = (HttpServletRequest) servletRequest;\n    <span class=\"hljs-keyword\">try</span> &#123;\n        <span class=\"hljs-comment\">// 假设这里是从cookie拿token信息, 调用服务/或者从缓存查询用户信息</span>\n        <span class=\"hljs-comment\">// 为了避免后续逻辑中多次查询/请求缓存服务器, 这里拿到user后放到线程本地变量中</span>\n        UserObj user = ThreadContext.getUser();\n        <span class=\"hljs-comment\">// 如果当前线程中没有绑定user对象,那么绑定一个新的user</span>\n        <span class=\"hljs-keyword\">if</span> (user == <span class=\"hljs-keyword\">null</span>) &#123;\n            ThreadContext.bindUser(<span class=\"hljs-keyword\">new</span> UserObj(<span class=\"hljs-string\">\"usertest\"</span>));\n        &#125;\n\n        filterChain.doFilter(servletRequest, servletResponse);\n    &#125; <span class=\"hljs-keyword\">finally</span> &#123;\n        <span class=\"hljs-comment\">// ThreadLocal的生命周期不等于一次request请求的生命周期</span>\n        <span class=\"hljs-comment\">// 每个request请求的响应是tomcat从线程池中分配的线程, 线程会被下个请求复用.</span>\n        <span class=\"hljs-comment\">// 所以请求结束后必须删除线程本地变量</span>\n        <span class=\"hljs-comment\">// ThreadContext.unbindUser();</span>\n    &#125;\n&#125;</code></pre>\n<p>新建UserUtils工具类</p>\n<pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**\n * 配合SessionFilter使用,从上下文中取user信息\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserUtils</span> </span>&#123;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> UserObj <span class=\"hljs-title\">getCurrentUser</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-keyword\">return</span> ThreadContext.getUser();\n    &#125;\n&#125;</code></pre>\n<p>新建一个servlet测试</p>\n<pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HelloworldServlet</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">HttpServlet</span> </span>&#123;\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> Logger logger = LoggerFactory.getLogger(HelloworldServlet<span class=\"hljs-class\">.<span class=\"hljs-keyword\">class</span>)</span>;\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doGet</span><span class=\"hljs-params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"hljs-keyword\">throws</span> ServletException, IOException </span>&#123;\n        UserObj user = UserUtils.getCurrentUser();\n        logger.info(user.getName() + user.hashCode());\n        <span class=\"hljs-keyword\">super</span>.doGet(req, resp);\n    &#125;\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doPost</span><span class=\"hljs-params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"hljs-keyword\">throws</span> ServletException, IOException </span>&#123;\n        <span class=\"hljs-keyword\">super</span>.doGet(req, resp);\n    &#125;\n&#125;</code></pre>\n<p>循环请求servlet，控制台显示结果如下。可以发现tomcat线程池的初始大小是10个，后面的请求复用了前面的线程，ThreadContext中的user对象的hashcode也一样。</p>\n<pre><code class=\"hljs java\"><span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">21</span>:<span class=\"hljs-number\">35.975</span>  INFO <span class=\"hljs-number\">36672</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">2</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest818202673\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">21</span>:<span class=\"hljs-number\">38.923</span>  INFO <span class=\"hljs-number\">36672</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">3</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest1582591702\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">21</span>:<span class=\"hljs-number\">45.810</span>  INFO <span class=\"hljs-number\">36672</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">4</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest55755037\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">21</span>:<span class=\"hljs-number\">46.773</span>  INFO <span class=\"hljs-number\">36672</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">5</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest1495466807\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">21</span>:<span class=\"hljs-number\">47.345</span>  INFO <span class=\"hljs-number\">36672</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">6</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest1149360245\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">21</span>:<span class=\"hljs-number\">47.613</span>  INFO <span class=\"hljs-number\">36672</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">7</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest518375339\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">21</span>:<span class=\"hljs-number\">47.837</span>  INFO <span class=\"hljs-number\">36672</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">8</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest92458992\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">21</span>:<span class=\"hljs-number\">48.012</span>  INFO <span class=\"hljs-number\">36672</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">9</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest944867034\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">21</span>:<span class=\"hljs-number\">48.199</span>  INFO <span class=\"hljs-number\">36672</span> --- [io-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">10</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest1410972809\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">21</span>:<span class=\"hljs-number\">48.378</span>  INFO <span class=\"hljs-number\">36672</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">1</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest805332046\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">21</span>:<span class=\"hljs-number\">48.552</span>  INFO <span class=\"hljs-number\">36672</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">2</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest818202673\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">21</span>:<span class=\"hljs-number\">48.730</span>  INFO <span class=\"hljs-number\">36672</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">3</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest1582591702\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">21</span>:<span class=\"hljs-number\">48.903</span>  INFO <span class=\"hljs-number\">36672</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">4</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest55755037\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">21</span>:<span class=\"hljs-number\">49.072</span>  INFO <span class=\"hljs-number\">36672</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">5</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest1495466807\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">21</span>:<span class=\"hljs-number\">49.247</span>  INFO <span class=\"hljs-number\">36672</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">6</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest1149360245\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">21</span>:<span class=\"hljs-number\">49.402</span>  INFO <span class=\"hljs-number\">36672</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">7</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest518375339</code></pre>\n<p>去掉注释// ThreadContext.unbindUser(); 重新请求，每次从ThreadLocal中拿到的user对象完全不一样了。</p>\n<pre><code class=\"hljs java\"><span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">30</span>:<span class=\"hljs-number\">37.150</span>  INFO <span class=\"hljs-number\">36903</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">1</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest413138571\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">30</span>:<span class=\"hljs-number\">42.932</span>  INFO <span class=\"hljs-number\">36903</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">2</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest1402191945\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">30</span>:<span class=\"hljs-number\">43.124</span>  INFO <span class=\"hljs-number\">36903</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">3</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest1957579173\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">30</span>:<span class=\"hljs-number\">43.313</span>  INFO <span class=\"hljs-number\">36903</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">4</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest1582591702\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">30</span>:<span class=\"hljs-number\">43.501</span>  INFO <span class=\"hljs-number\">36903</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">5</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest1917479582\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">30</span>:<span class=\"hljs-number\">43.679</span>  INFO <span class=\"hljs-number\">36903</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">6</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest772036767\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">30</span>:<span class=\"hljs-number\">43.851</span>  INFO <span class=\"hljs-number\">36903</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">7</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest162020761\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">30</span>:<span class=\"hljs-number\">44.024</span>  INFO <span class=\"hljs-number\">36903</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">8</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest682232950\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">30</span>:<span class=\"hljs-number\">44.225</span>  INFO <span class=\"hljs-number\">36903</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">9</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest2140650341\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">30</span>:<span class=\"hljs-number\">44.419</span>  INFO <span class=\"hljs-number\">36903</span> --- [io-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">10</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest1327601763\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">30</span>:<span class=\"hljs-number\">44.593</span>  INFO <span class=\"hljs-number\">36903</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">1</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest647738411\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">30</span>:<span class=\"hljs-number\">44.787</span>  INFO <span class=\"hljs-number\">36903</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">2</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest944867034\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">30</span>:<span class=\"hljs-number\">45.045</span>  INFO <span class=\"hljs-number\">36903</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">3</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest1886154520\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">30</span>:<span class=\"hljs-number\">45.317</span>  INFO <span class=\"hljs-number\">36903</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">4</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest1592904273\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">30</span>:<span class=\"hljs-number\">46.380</span>  INFO <span class=\"hljs-number\">36903</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">5</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest1410972809\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">30</span>:<span class=\"hljs-number\">46.524</span>  INFO <span class=\"hljs-number\">36903</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">6</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest1705570689\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">30</span>:<span class=\"hljs-number\">46.692</span>  INFO <span class=\"hljs-number\">36903</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">7</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest1105134375\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">30</span>:<span class=\"hljs-number\">46.802</span>  INFO <span class=\"hljs-number\">36903</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">8</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest407377722</code></pre>\n<p><a name=\"PAmaK\"></a></p>\n<h2 id=\"ThreadLocal子线程场景\"><a href=\"#ThreadLocal子线程场景\" class=\"headerlink\" title=\"ThreadLocal子线程场景\"></a>ThreadLocal子线程场景</h2><p>需求新增， 需要在原有的业务逻辑中增加一个给用户发送邮件的操作。发送邮件我们采用异步处理，新建一个线程来执行。</p>\n<pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doGet</span><span class=\"hljs-params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"hljs-keyword\">throws</span> ServletException, IOException </span>&#123;\n    UserObj user = UserUtils.getCurrentUser();\n    logger.info(user.getName() + user.hashCode());\n\n    SendEmailTask emailThread = <span class=\"hljs-keyword\">new</span> SendEmailTask();\n    <span class=\"hljs-keyword\">new</span> Thread(emailThread).start();\n\n    <span class=\"hljs-keyword\">super</span>.doGet(req, resp);\n&#125;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SendEmailTask</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Runnable</span> </span>&#123;\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">()</span> </span>&#123;\n        UserObj user = UserUtils.getCurrentUser();\n        logger.info(<span class=\"hljs-string\">\"子线程中:\"</span> + (user == <span class=\"hljs-keyword\">null</span> ? <span class=\"hljs-string\">\"user为null\"</span> : user.getName() + user.hashCode()));\n    &#125;\n&#125;</code></pre>\n<p>主线程中创建异步线程，子线程中能拿到吗？通过测试发现是不能的</p>\n<pre><code class=\"hljs java\"><span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">18</span>:<span class=\"hljs-number\">09</span>:<span class=\"hljs-number\">16.482</span>  INFO <span class=\"hljs-number\">38092</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">2</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest1425505918\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">18</span>:<span class=\"hljs-number\">09</span>:<span class=\"hljs-number\">16.483</span>  INFO <span class=\"hljs-number\">38092</span> --- [       Thread-<span class=\"hljs-number\">4</span>] com.zallds.xy.servlet.HelloworldServlet  : 子线程中:user为<span class=\"hljs-keyword\">null</span>\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">18</span>:<span class=\"hljs-number\">09</span>:<span class=\"hljs-number\">20.995</span>  INFO <span class=\"hljs-number\">38092</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">3</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest1280373552\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">18</span>:<span class=\"hljs-number\">09</span>:<span class=\"hljs-number\">20.996</span>  INFO <span class=\"hljs-number\">38092</span> --- [       Thread-<span class=\"hljs-number\">5</span>] com.zallds.xy.servlet.HelloworldServlet  : 子线程中:user为<span class=\"hljs-keyword\">null</span></code></pre>\n<p>子线程怎么拿到父线程的ThreadLocal数据？jdk给我们提供了解决办法，ThreadLocal有一个子类InheritableThreadLocal，创建ThreadLocal时候我们采用InheritableThreadLocal类可以实现子线程获取到父线程的本地变量。</p>\n<pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> ThreadLocal&lt;UserObj&gt; userResource = <span class=\"hljs-keyword\">new</span> InheritableThreadLocal&lt;UserObj&gt;();</code></pre>\n<p>然后子线程中就可以正常拿到user对象了</p>\n<pre><code class=\"hljs java\"><span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">19</span>:<span class=\"hljs-number\">07</span>:<span class=\"hljs-number\">01.518</span>  INFO <span class=\"hljs-number\">39644</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">2</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest495550128\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">19</span>:<span class=\"hljs-number\">07</span>:<span class=\"hljs-number\">01.518</span>  INFO <span class=\"hljs-number\">39644</span> --- [       Thread-<span class=\"hljs-number\">4</span>] com.zallds.xy.servlet.HelloworldServlet  : 子线程中:usertest495550128\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">19</span>:<span class=\"hljs-number\">07</span>:<span class=\"hljs-number\">05.839</span>  INFO <span class=\"hljs-number\">39644</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">3</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest1851717404\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">19</span>:<span class=\"hljs-number\">07</span>:<span class=\"hljs-number\">05.840</span>  INFO <span class=\"hljs-number\">39644</span> --- [       Thread-<span class=\"hljs-number\">5</span>] com.zallds.xy.servlet.HelloworldServlet  : 子线程中:usertest1851717404</code></pre>\n<p><a name=\"I3PZJ\"></a></p>\n<h2 id=\"ThreadLocal-子线程传递－线程池场景\"><a href=\"#ThreadLocal-子线程传递－线程池场景\" class=\"headerlink\" title=\"ThreadLocal 子线程传递－线程池场景\"></a>ThreadLocal 子线程传递－线程池场景</h2><p>当我们执行异步任务时，大多会采用线程池的机制(如Executor)。这样就会存在一个问题，即使父线程已经结束，子线程依然存在并被池化。这样，线程池中的线程在下一次请求被执行的时候，ThreadLocal的get()方法返回的将不是当前线程中设定的变量，因为池中的“子线程”根本不是当前线程创建的，当前线程设定的ThreadLocal变量也就无法传递给线程池中的线程。<br>我们修改一下发送邮件的代码，改用线程池来实现。</p>\n<pre><code class=\"hljs java\"><span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">19</span>:<span class=\"hljs-number\">51</span>:<span class=\"hljs-number\">51.973</span>  INFO <span class=\"hljs-number\">40937</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">1</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest1417641261\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">19</span>:<span class=\"hljs-number\">51</span>:<span class=\"hljs-number\">51.974</span>  INFO <span class=\"hljs-number\">40937</span> --- [pool-<span class=\"hljs-number\">1</span>-thread-<span class=\"hljs-number\">1</span>] com.zallds.xy.servlet.HelloworldServlet  : 子线程中:usertest1417641261\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">19</span>:<span class=\"hljs-number\">51</span>:<span class=\"hljs-number\">55.746</span>  INFO <span class=\"hljs-number\">40937</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">2</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest1116537955\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">19</span>:<span class=\"hljs-number\">51</span>:<span class=\"hljs-number\">55.746</span>  INFO <span class=\"hljs-number\">40937</span> --- [pool-<span class=\"hljs-number\">1</span>-thread-<span class=\"hljs-number\">1</span>] com.zallds.xy.servlet.HelloworldServlet  : 子线程中:usertest1417641261\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">19</span>:<span class=\"hljs-number\">51</span>:<span class=\"hljs-number\">58.825</span>  INFO <span class=\"hljs-number\">40937</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">3</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest1489938856\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">19</span>:<span class=\"hljs-number\">51</span>:<span class=\"hljs-number\">58.826</span>  INFO <span class=\"hljs-number\">40937</span> --- [pool-<span class=\"hljs-number\">1</span>-thread-<span class=\"hljs-number\">1</span>] com.zallds.xy.servlet.HelloworldServlet  : 子线程中:usertest1417641261</code></pre>\n<p>可以发现发送邮件的任务三次用的都是同一个线程[pool-1-thread-1]，第一次子线程和父线程中的user对象相同，后面的“子线程”（前面提到过，后面的已经不是子线程了）中的user对象都是和第一个父线程中的相同。<br>那么在线程池的场景下，怎么能让“子线程”正常拿到父线程传递过来的变量呢？如果我们能在创建task的时候主动传递过去就好了。按照这个想法我们来实施一下。<br>继续修改代码</p>\n<pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doGet</span><span class=\"hljs-params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"hljs-keyword\">throws</span> ServletException, IOException </span>&#123;\n    UserObj user = UserUtils.getCurrentUser();\n    logger.info(user.getName() + user.hashCode());\n\n    SendEmailTask emailThread = <span class=\"hljs-keyword\">new</span> SendEmailTask();\n\n    executor.execute(<span class=\"hljs-keyword\">new</span> UserRunnable(emailThread, user));\n    <span class=\"hljs-keyword\">super</span>.doGet(req, resp);\n&#125;\n\n<span class=\"hljs-comment\">/**\n * 做一个wrapper, 将目标任务做一层包装, 在run方法中传递线程本地变量\n */</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserRunnable</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Runnable</span> </span>&#123;\n    <span class=\"hljs-comment\">/**\n     * 目标任务对象\n     */</span>\n    Runnable runnable;\n    <span class=\"hljs-comment\">/**\n     * 要绑定的user对象\n     */</span>\n    UserObj user;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">UserRunnable</span><span class=\"hljs-params\">(Runnable runnable, UserObj user)</span> </span>&#123;\n        <span class=\"hljs-keyword\">this</span>.runnable = runnable;\n        <span class=\"hljs-keyword\">this</span>.user = user;\n    &#125;\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">()</span> </span>&#123;\n        ThreadContext.bindUser(user);\n        runnable.run();\n        ThreadContext.unbindUser();\n    &#125;\n&#125;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SendEmailTask</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Runnable</span> </span>&#123;\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">()</span> </span>&#123;\n        UserObj user = UserUtils.getCurrentUser();\n        logger.info(<span class=\"hljs-string\">\"子线程中:\"</span> + (user == <span class=\"hljs-keyword\">null</span> ? <span class=\"hljs-string\">\"user为null\"</span> : user.getName() + user.hashCode()));\n    &#125;\n&#125;</code></pre>\n<p>重新请求，得到我们想要的结果</p>\n<pre><code class=\"hljs java\"><span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">04</span>:<span class=\"hljs-number\">12.153</span>  INFO <span class=\"hljs-number\">41258</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">1</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest1565180744\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">04</span>:<span class=\"hljs-number\">12.154</span>  INFO <span class=\"hljs-number\">41258</span> --- [pool-<span class=\"hljs-number\">1</span>-thread-<span class=\"hljs-number\">1</span>] com.zallds.xy.servlet.HelloworldServlet  : 子线程中:usertest1565180744\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">04</span>:<span class=\"hljs-number\">14.142</span>  INFO <span class=\"hljs-number\">41258</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">2</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest481396704\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">04</span>:<span class=\"hljs-number\">14.142</span>  INFO <span class=\"hljs-number\">41258</span> --- [pool-<span class=\"hljs-number\">1</span>-thread-<span class=\"hljs-number\">1</span>] com.zallds.xy.servlet.HelloworldServlet  : 子线程中:usertest481396704\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">04</span>:<span class=\"hljs-number\">15.248</span>  INFO <span class=\"hljs-number\">41258</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">3</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest400717395\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">04</span>:<span class=\"hljs-number\">15.249</span>  INFO <span class=\"hljs-number\">41258</span> --- [pool-<span class=\"hljs-number\">1</span>-thread-<span class=\"hljs-number\">1</span>] com.zallds.xy.servlet.HelloworldServlet  : 子线程中:usertest400717395</code></pre>\n<p>到此为止，ThreadLocal常见的场景和对应解决方案应该可以满足了。接下来就是怎么在实际应用中运用了。</p>\n<p>为了引出此文的初衷以及后面要讲的东西，针对最后一个解决方案，我们可以进一步完善一下。</p>\n<pre><code class=\"hljs java\">ThreadContext.bindUser(user);\nrunnable.run();\nThreadContext.unbindUser();</code></pre>\n<p>这个地方在bind的时候是直接覆盖，无法对线程之前的状态进行保存和恢复。要实现这一点，我们可以抽象一个ThreadState来保存线程的状态，在bind之前保存original，任务执行完以后进行restore。</p>\n<pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">ThreadState</span> </span>&#123;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">bind</span><span class=\"hljs-params\">()</span></span>;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">restore</span><span class=\"hljs-params\">()</span></span>;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">clear</span><span class=\"hljs-params\">()</span></span>;\n&#125;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserThreadState</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">ThreadState</span> </span>&#123;\n    <span class=\"hljs-keyword\">private</span> UserObj original;\n\n    <span class=\"hljs-keyword\">private</span> UserObj user;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">UserThreadState</span><span class=\"hljs-params\">(UserObj user)</span> </span>&#123;\n        <span class=\"hljs-keyword\">this</span>.user = user;\n    &#125;\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">bind</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-keyword\">this</span>.original = ThreadContext.getUser();\n\n        ThreadContext.bindUser(<span class=\"hljs-keyword\">this</span>.user);\n    &#125;\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">restore</span><span class=\"hljs-params\">()</span> </span>&#123;\n        ThreadContext.bindUser(<span class=\"hljs-keyword\">this</span>.original);\n    &#125;\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">clear</span><span class=\"hljs-params\">()</span> </span>&#123;\n        ThreadContext.unbindUser();\n    &#125;\n&#125;\n\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doGet</span><span class=\"hljs-params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"hljs-keyword\">throws</span> ServletException, IOException </span>&#123;\n    UserObj user = UserUtils.getCurrentUser();\n    logger.info(user.getName() + user.hashCode());\n\n    SendEmailTask emailThread = <span class=\"hljs-keyword\">new</span> SendEmailTask();\n\n    executor.execute(<span class=\"hljs-keyword\">new</span> UserRunnable(emailThread, <span class=\"hljs-keyword\">new</span> UserThreadState(user)));\n    <span class=\"hljs-keyword\">super</span>.doGet(req, resp);\n&#125;\n\n<span class=\"hljs-comment\">/**\n * 做一个wrapper, 将目标任务做一层包装, 在run方法中传递线程本地变量\n */</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserRunnable</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Runnable</span> </span>&#123;\n    <span class=\"hljs-comment\">/**\n     * 目标任务对象\n     */</span>\n    Runnable runnable;\n    <span class=\"hljs-comment\">/**\n     * 要绑定的user对象\n     */</span>\n    UserThreadState userThreadState;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">UserRunnable</span><span class=\"hljs-params\">(Runnable runnable, UserThreadState userThreadState)</span> </span>&#123;\n        <span class=\"hljs-keyword\">this</span>.runnable = runnable;\n        <span class=\"hljs-keyword\">this</span>.userThreadState = userThreadState;\n    &#125;\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">()</span> </span>&#123;\n        userThreadState.bind();\n        runnable.run();\n        userThreadState.restore();\n        UserObj userOrig = UserUtils.getCurrentUser();\n        logger.info(<span class=\"hljs-string\">\"original:\"</span> + userOrig.getName() + userOrig.hashCode());\n    &#125;\n&#125;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SendEmailTask</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Runnable</span> </span>&#123;\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">()</span> </span>&#123;\n        UserObj user = UserUtils.getCurrentUser();\n        logger.info(<span class=\"hljs-string\">\"子线程中:\"</span> + (user == <span class=\"hljs-keyword\">null</span> ? <span class=\"hljs-string\">\"user为null\"</span> : user.getName() + user.hashCode()));\n    &#125;\n&#125;</code></pre>\n<p>实现效果是相同的，至于为什么三次的original对象都是一样的，通过前面的说明应该能够理解</p>\n<pre><code class=\"hljs java\"><span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">19</span>:<span class=\"hljs-number\">48.694</span>  INFO <span class=\"hljs-number\">41671</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">1</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest114760676\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">19</span>:<span class=\"hljs-number\">48.699</span>  INFO <span class=\"hljs-number\">41671</span> --- [pool-<span class=\"hljs-number\">1</span>-thread-<span class=\"hljs-number\">1</span>] com.zallds.xy.servlet.HelloworldServlet  : 子线程中:usertest114760676\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">19</span>:<span class=\"hljs-number\">48.700</span>  INFO <span class=\"hljs-number\">41671</span> --- [pool-<span class=\"hljs-number\">1</span>-thread-<span class=\"hljs-number\">1</span>] com.zallds.xy.servlet.HelloworldServlet  : original:usertest114760676\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">19</span>:<span class=\"hljs-number\">57.123</span>  INFO <span class=\"hljs-number\">41671</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">2</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest941302199\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">19</span>:<span class=\"hljs-number\">57.123</span>  INFO <span class=\"hljs-number\">41671</span> --- [pool-<span class=\"hljs-number\">1</span>-thread-<span class=\"hljs-number\">1</span>] com.zallds.xy.servlet.HelloworldServlet  : 子线程中:usertest941302199\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">19</span>:<span class=\"hljs-number\">57.123</span>  INFO <span class=\"hljs-number\">41671</span> --- [pool-<span class=\"hljs-number\">1</span>-thread-<span class=\"hljs-number\">1</span>] com.zallds.xy.servlet.HelloworldServlet  : original:usertest114760676\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">04.385</span>  INFO <span class=\"hljs-number\">41671</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">3</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest1489938856\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">04.385</span>  INFO <span class=\"hljs-number\">41671</span> --- [pool-<span class=\"hljs-number\">1</span>-thread-<span class=\"hljs-number\">1</span>] com.zallds.xy.servlet.HelloworldServlet  : 子线程中:usertest1489938856\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">04.385</span>  INFO <span class=\"hljs-number\">41671</span> --- [pool-<span class=\"hljs-number\">1</span>-thread-<span class=\"hljs-number\">1</span>] com.zallds.xy.servlet.HelloworldServlet  : original:usertest114760676</code></pre>\n<p>由于在使用shiro框架的SecurityUtils.getSubject()过程中碰到问题，才有了本文的示例，例子中的部分代码参考了shiro框架的实现机制。后面会再研究一下shiro的subject相关设计。</p>\n<p><a href=\"http://shiro.apache.org/subject.html\" target=\"_blank\" rel=\"noopener\">http://shiro.apache.org/subject.html</a></p>\n<blockquote>\n<p>作者： 99793933e682<br>原文地址： <a href=\"https://www.jianshu.com/p/85d96fe9358b\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/85d96fe9358b</a></p>\n</blockquote>\n<hr>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/269363/1564727847078-00283633-d15e-4603-833c-be0c4c7ad83b.jpeg#align=left&amp;display=inline&amp;height=450&amp;name=%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20190719095938.jpg&amp;originHeight=450&amp;originWidth=900&amp;size=36931&amp;status=done&amp;width=900\" srcset=\"/img/loading.gif\" alt=\"微信图片_20190719095938.jpg\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>ThreadLocal可以让线程拥有本地变量，在web环境中，为了方便代码解耦，我们通常用它来保存上下文信息，然后用一个util类提供访问入口，从controller层到service层可以很方便的获取上下文。下面我们通过代码来研究一下ThreadLocal。</p>\n<p>新建一个ThreadContext类，用于保存线程上下文信息</p>\n<pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ThreadContext</span> </span>&#123;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> ThreadLocal&lt;UserObj&gt; userResource = <span class=\"hljs-keyword\">new</span> ThreadLocal&lt;UserObj&gt;();\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> UserObj <span class=\"hljs-title\">getUser</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-keyword\">return</span> userResource.get();\n    &#125;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">bindUser</span><span class=\"hljs-params\">(UserObj user)</span> </span>&#123;\n        userResource.set(user);\n    &#125;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> UserObj <span class=\"hljs-title\">unbindUser</span><span class=\"hljs-params\">()</span> </span>&#123;\n        UserObj obj = userResource.get();\n        userResource.remove();\n        <span class=\"hljs-keyword\">return</span> obj;\n    &#125;\n&#125;</code></pre>\n<p>新建一个sessionFilter ，用来操作线程变量</p>\n<pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doFilter</span><span class=\"hljs-params\">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class=\"hljs-keyword\">throws</span> IOException, ServletException </span>&#123;\n    HttpServletRequest request = (HttpServletRequest) servletRequest;\n    <span class=\"hljs-keyword\">try</span> &#123;\n        <span class=\"hljs-comment\">// 假设这里是从cookie拿token信息, 调用服务/或者从缓存查询用户信息</span>\n        <span class=\"hljs-comment\">// 为了避免后续逻辑中多次查询/请求缓存服务器, 这里拿到user后放到线程本地变量中</span>\n        UserObj user = ThreadContext.getUser();\n        <span class=\"hljs-comment\">// 如果当前线程中没有绑定user对象,那么绑定一个新的user</span>\n        <span class=\"hljs-keyword\">if</span> (user == <span class=\"hljs-keyword\">null</span>) &#123;\n            ThreadContext.bindUser(<span class=\"hljs-keyword\">new</span> UserObj(<span class=\"hljs-string\">\"usertest\"</span>));\n        &#125;\n\n        filterChain.doFilter(servletRequest, servletResponse);\n    &#125; <span class=\"hljs-keyword\">finally</span> &#123;\n        <span class=\"hljs-comment\">// ThreadLocal的生命周期不等于一次request请求的生命周期</span>\n        <span class=\"hljs-comment\">// 每个request请求的响应是tomcat从线程池中分配的线程, 线程会被下个请求复用.</span>\n        <span class=\"hljs-comment\">// 所以请求结束后必须删除线程本地变量</span>\n        <span class=\"hljs-comment\">// ThreadContext.unbindUser();</span>\n    &#125;\n&#125;</code></pre>\n<p>新建UserUtils工具类</p>\n<pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**\n * 配合SessionFilter使用,从上下文中取user信息\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserUtils</span> </span>&#123;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> UserObj <span class=\"hljs-title\">getCurrentUser</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-keyword\">return</span> ThreadContext.getUser();\n    &#125;\n&#125;</code></pre>\n<p>新建一个servlet测试</p>\n<pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HelloworldServlet</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">HttpServlet</span> </span>&#123;\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> Logger logger = LoggerFactory.getLogger(HelloworldServlet<span class=\"hljs-class\">.<span class=\"hljs-keyword\">class</span>)</span>;\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doGet</span><span class=\"hljs-params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"hljs-keyword\">throws</span> ServletException, IOException </span>&#123;\n        UserObj user = UserUtils.getCurrentUser();\n        logger.info(user.getName() + user.hashCode());\n        <span class=\"hljs-keyword\">super</span>.doGet(req, resp);\n    &#125;\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doPost</span><span class=\"hljs-params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"hljs-keyword\">throws</span> ServletException, IOException </span>&#123;\n        <span class=\"hljs-keyword\">super</span>.doGet(req, resp);\n    &#125;\n&#125;</code></pre>\n<p>循环请求servlet，控制台显示结果如下。可以发现tomcat线程池的初始大小是10个，后面的请求复用了前面的线程，ThreadContext中的user对象的hashcode也一样。</p>\n<pre><code class=\"hljs java\"><span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">21</span>:<span class=\"hljs-number\">35.975</span>  INFO <span class=\"hljs-number\">36672</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">2</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest818202673\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">21</span>:<span class=\"hljs-number\">38.923</span>  INFO <span class=\"hljs-number\">36672</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">3</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest1582591702\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">21</span>:<span class=\"hljs-number\">45.810</span>  INFO <span class=\"hljs-number\">36672</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">4</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest55755037\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">21</span>:<span class=\"hljs-number\">46.773</span>  INFO <span class=\"hljs-number\">36672</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">5</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest1495466807\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">21</span>:<span class=\"hljs-number\">47.345</span>  INFO <span class=\"hljs-number\">36672</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">6</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest1149360245\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">21</span>:<span class=\"hljs-number\">47.613</span>  INFO <span class=\"hljs-number\">36672</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">7</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest518375339\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">21</span>:<span class=\"hljs-number\">47.837</span>  INFO <span class=\"hljs-number\">36672</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">8</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest92458992\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">21</span>:<span class=\"hljs-number\">48.012</span>  INFO <span class=\"hljs-number\">36672</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">9</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest944867034\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">21</span>:<span class=\"hljs-number\">48.199</span>  INFO <span class=\"hljs-number\">36672</span> --- [io-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">10</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest1410972809\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">21</span>:<span class=\"hljs-number\">48.378</span>  INFO <span class=\"hljs-number\">36672</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">1</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest805332046\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">21</span>:<span class=\"hljs-number\">48.552</span>  INFO <span class=\"hljs-number\">36672</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">2</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest818202673\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">21</span>:<span class=\"hljs-number\">48.730</span>  INFO <span class=\"hljs-number\">36672</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">3</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest1582591702\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">21</span>:<span class=\"hljs-number\">48.903</span>  INFO <span class=\"hljs-number\">36672</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">4</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest55755037\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">21</span>:<span class=\"hljs-number\">49.072</span>  INFO <span class=\"hljs-number\">36672</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">5</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest1495466807\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">21</span>:<span class=\"hljs-number\">49.247</span>  INFO <span class=\"hljs-number\">36672</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">6</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest1149360245\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">21</span>:<span class=\"hljs-number\">49.402</span>  INFO <span class=\"hljs-number\">36672</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">7</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest518375339</code></pre>\n<p>去掉注释// ThreadContext.unbindUser(); 重新请求，每次从ThreadLocal中拿到的user对象完全不一样了。</p>\n<pre><code class=\"hljs java\"><span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">30</span>:<span class=\"hljs-number\">37.150</span>  INFO <span class=\"hljs-number\">36903</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">1</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest413138571\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">30</span>:<span class=\"hljs-number\">42.932</span>  INFO <span class=\"hljs-number\">36903</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">2</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest1402191945\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">30</span>:<span class=\"hljs-number\">43.124</span>  INFO <span class=\"hljs-number\">36903</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">3</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest1957579173\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">30</span>:<span class=\"hljs-number\">43.313</span>  INFO <span class=\"hljs-number\">36903</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">4</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest1582591702\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">30</span>:<span class=\"hljs-number\">43.501</span>  INFO <span class=\"hljs-number\">36903</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">5</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest1917479582\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">30</span>:<span class=\"hljs-number\">43.679</span>  INFO <span class=\"hljs-number\">36903</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">6</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest772036767\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">30</span>:<span class=\"hljs-number\">43.851</span>  INFO <span class=\"hljs-number\">36903</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">7</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest162020761\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">30</span>:<span class=\"hljs-number\">44.024</span>  INFO <span class=\"hljs-number\">36903</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">8</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest682232950\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">30</span>:<span class=\"hljs-number\">44.225</span>  INFO <span class=\"hljs-number\">36903</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">9</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest2140650341\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">30</span>:<span class=\"hljs-number\">44.419</span>  INFO <span class=\"hljs-number\">36903</span> --- [io-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">10</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest1327601763\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">30</span>:<span class=\"hljs-number\">44.593</span>  INFO <span class=\"hljs-number\">36903</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">1</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest647738411\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">30</span>:<span class=\"hljs-number\">44.787</span>  INFO <span class=\"hljs-number\">36903</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">2</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest944867034\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">30</span>:<span class=\"hljs-number\">45.045</span>  INFO <span class=\"hljs-number\">36903</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">3</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest1886154520\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">30</span>:<span class=\"hljs-number\">45.317</span>  INFO <span class=\"hljs-number\">36903</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">4</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest1592904273\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">30</span>:<span class=\"hljs-number\">46.380</span>  INFO <span class=\"hljs-number\">36903</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">5</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest1410972809\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">30</span>:<span class=\"hljs-number\">46.524</span>  INFO <span class=\"hljs-number\">36903</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">6</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest1705570689\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">30</span>:<span class=\"hljs-number\">46.692</span>  INFO <span class=\"hljs-number\">36903</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">7</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest1105134375\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">30</span>:<span class=\"hljs-number\">46.802</span>  INFO <span class=\"hljs-number\">36903</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">8</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest407377722</code></pre>\n<p><a name=\"PAmaK\"></a></p>\n<h2 id=\"ThreadLocal子线程场景\"><a href=\"#ThreadLocal子线程场景\" class=\"headerlink\" title=\"ThreadLocal子线程场景\"></a>ThreadLocal子线程场景</h2><p>需求新增， 需要在原有的业务逻辑中增加一个给用户发送邮件的操作。发送邮件我们采用异步处理，新建一个线程来执行。</p>\n<pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doGet</span><span class=\"hljs-params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"hljs-keyword\">throws</span> ServletException, IOException </span>&#123;\n    UserObj user = UserUtils.getCurrentUser();\n    logger.info(user.getName() + user.hashCode());\n\n    SendEmailTask emailThread = <span class=\"hljs-keyword\">new</span> SendEmailTask();\n    <span class=\"hljs-keyword\">new</span> Thread(emailThread).start();\n\n    <span class=\"hljs-keyword\">super</span>.doGet(req, resp);\n&#125;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SendEmailTask</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Runnable</span> </span>&#123;\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">()</span> </span>&#123;\n        UserObj user = UserUtils.getCurrentUser();\n        logger.info(<span class=\"hljs-string\">\"子线程中:\"</span> + (user == <span class=\"hljs-keyword\">null</span> ? <span class=\"hljs-string\">\"user为null\"</span> : user.getName() + user.hashCode()));\n    &#125;\n&#125;</code></pre>\n<p>主线程中创建异步线程，子线程中能拿到吗？通过测试发现是不能的</p>\n<pre><code class=\"hljs java\"><span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">18</span>:<span class=\"hljs-number\">09</span>:<span class=\"hljs-number\">16.482</span>  INFO <span class=\"hljs-number\">38092</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">2</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest1425505918\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">18</span>:<span class=\"hljs-number\">09</span>:<span class=\"hljs-number\">16.483</span>  INFO <span class=\"hljs-number\">38092</span> --- [       Thread-<span class=\"hljs-number\">4</span>] com.zallds.xy.servlet.HelloworldServlet  : 子线程中:user为<span class=\"hljs-keyword\">null</span>\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">18</span>:<span class=\"hljs-number\">09</span>:<span class=\"hljs-number\">20.995</span>  INFO <span class=\"hljs-number\">38092</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">3</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest1280373552\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">18</span>:<span class=\"hljs-number\">09</span>:<span class=\"hljs-number\">20.996</span>  INFO <span class=\"hljs-number\">38092</span> --- [       Thread-<span class=\"hljs-number\">5</span>] com.zallds.xy.servlet.HelloworldServlet  : 子线程中:user为<span class=\"hljs-keyword\">null</span></code></pre>\n<p>子线程怎么拿到父线程的ThreadLocal数据？jdk给我们提供了解决办法，ThreadLocal有一个子类InheritableThreadLocal，创建ThreadLocal时候我们采用InheritableThreadLocal类可以实现子线程获取到父线程的本地变量。</p>\n<pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> ThreadLocal&lt;UserObj&gt; userResource = <span class=\"hljs-keyword\">new</span> InheritableThreadLocal&lt;UserObj&gt;();</code></pre>\n<p>然后子线程中就可以正常拿到user对象了</p>\n<pre><code class=\"hljs java\"><span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">19</span>:<span class=\"hljs-number\">07</span>:<span class=\"hljs-number\">01.518</span>  INFO <span class=\"hljs-number\">39644</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">2</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest495550128\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">19</span>:<span class=\"hljs-number\">07</span>:<span class=\"hljs-number\">01.518</span>  INFO <span class=\"hljs-number\">39644</span> --- [       Thread-<span class=\"hljs-number\">4</span>] com.zallds.xy.servlet.HelloworldServlet  : 子线程中:usertest495550128\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">19</span>:<span class=\"hljs-number\">07</span>:<span class=\"hljs-number\">05.839</span>  INFO <span class=\"hljs-number\">39644</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">3</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest1851717404\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">19</span>:<span class=\"hljs-number\">07</span>:<span class=\"hljs-number\">05.840</span>  INFO <span class=\"hljs-number\">39644</span> --- [       Thread-<span class=\"hljs-number\">5</span>] com.zallds.xy.servlet.HelloworldServlet  : 子线程中:usertest1851717404</code></pre>\n<p><a name=\"I3PZJ\"></a></p>\n<h2 id=\"ThreadLocal-子线程传递－线程池场景\"><a href=\"#ThreadLocal-子线程传递－线程池场景\" class=\"headerlink\" title=\"ThreadLocal 子线程传递－线程池场景\"></a>ThreadLocal 子线程传递－线程池场景</h2><p>当我们执行异步任务时，大多会采用线程池的机制(如Executor)。这样就会存在一个问题，即使父线程已经结束，子线程依然存在并被池化。这样，线程池中的线程在下一次请求被执行的时候，ThreadLocal的get()方法返回的将不是当前线程中设定的变量，因为池中的“子线程”根本不是当前线程创建的，当前线程设定的ThreadLocal变量也就无法传递给线程池中的线程。<br>我们修改一下发送邮件的代码，改用线程池来实现。</p>\n<pre><code class=\"hljs java\"><span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">19</span>:<span class=\"hljs-number\">51</span>:<span class=\"hljs-number\">51.973</span>  INFO <span class=\"hljs-number\">40937</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">1</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest1417641261\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">19</span>:<span class=\"hljs-number\">51</span>:<span class=\"hljs-number\">51.974</span>  INFO <span class=\"hljs-number\">40937</span> --- [pool-<span class=\"hljs-number\">1</span>-thread-<span class=\"hljs-number\">1</span>] com.zallds.xy.servlet.HelloworldServlet  : 子线程中:usertest1417641261\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">19</span>:<span class=\"hljs-number\">51</span>:<span class=\"hljs-number\">55.746</span>  INFO <span class=\"hljs-number\">40937</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">2</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest1116537955\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">19</span>:<span class=\"hljs-number\">51</span>:<span class=\"hljs-number\">55.746</span>  INFO <span class=\"hljs-number\">40937</span> --- [pool-<span class=\"hljs-number\">1</span>-thread-<span class=\"hljs-number\">1</span>] com.zallds.xy.servlet.HelloworldServlet  : 子线程中:usertest1417641261\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">19</span>:<span class=\"hljs-number\">51</span>:<span class=\"hljs-number\">58.825</span>  INFO <span class=\"hljs-number\">40937</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">3</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest1489938856\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">19</span>:<span class=\"hljs-number\">51</span>:<span class=\"hljs-number\">58.826</span>  INFO <span class=\"hljs-number\">40937</span> --- [pool-<span class=\"hljs-number\">1</span>-thread-<span class=\"hljs-number\">1</span>] com.zallds.xy.servlet.HelloworldServlet  : 子线程中:usertest1417641261</code></pre>\n<p>可以发现发送邮件的任务三次用的都是同一个线程[pool-1-thread-1]，第一次子线程和父线程中的user对象相同，后面的“子线程”（前面提到过，后面的已经不是子线程了）中的user对象都是和第一个父线程中的相同。<br>那么在线程池的场景下，怎么能让“子线程”正常拿到父线程传递过来的变量呢？如果我们能在创建task的时候主动传递过去就好了。按照这个想法我们来实施一下。<br>继续修改代码</p>\n<pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doGet</span><span class=\"hljs-params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"hljs-keyword\">throws</span> ServletException, IOException </span>&#123;\n    UserObj user = UserUtils.getCurrentUser();\n    logger.info(user.getName() + user.hashCode());\n\n    SendEmailTask emailThread = <span class=\"hljs-keyword\">new</span> SendEmailTask();\n\n    executor.execute(<span class=\"hljs-keyword\">new</span> UserRunnable(emailThread, user));\n    <span class=\"hljs-keyword\">super</span>.doGet(req, resp);\n&#125;\n\n<span class=\"hljs-comment\">/**\n * 做一个wrapper, 将目标任务做一层包装, 在run方法中传递线程本地变量\n */</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserRunnable</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Runnable</span> </span>&#123;\n    <span class=\"hljs-comment\">/**\n     * 目标任务对象\n     */</span>\n    Runnable runnable;\n    <span class=\"hljs-comment\">/**\n     * 要绑定的user对象\n     */</span>\n    UserObj user;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">UserRunnable</span><span class=\"hljs-params\">(Runnable runnable, UserObj user)</span> </span>&#123;\n        <span class=\"hljs-keyword\">this</span>.runnable = runnable;\n        <span class=\"hljs-keyword\">this</span>.user = user;\n    &#125;\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">()</span> </span>&#123;\n        ThreadContext.bindUser(user);\n        runnable.run();\n        ThreadContext.unbindUser();\n    &#125;\n&#125;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SendEmailTask</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Runnable</span> </span>&#123;\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">()</span> </span>&#123;\n        UserObj user = UserUtils.getCurrentUser();\n        logger.info(<span class=\"hljs-string\">\"子线程中:\"</span> + (user == <span class=\"hljs-keyword\">null</span> ? <span class=\"hljs-string\">\"user为null\"</span> : user.getName() + user.hashCode()));\n    &#125;\n&#125;</code></pre>\n<p>重新请求，得到我们想要的结果</p>\n<pre><code class=\"hljs java\"><span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">04</span>:<span class=\"hljs-number\">12.153</span>  INFO <span class=\"hljs-number\">41258</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">1</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest1565180744\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">04</span>:<span class=\"hljs-number\">12.154</span>  INFO <span class=\"hljs-number\">41258</span> --- [pool-<span class=\"hljs-number\">1</span>-thread-<span class=\"hljs-number\">1</span>] com.zallds.xy.servlet.HelloworldServlet  : 子线程中:usertest1565180744\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">04</span>:<span class=\"hljs-number\">14.142</span>  INFO <span class=\"hljs-number\">41258</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">2</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest481396704\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">04</span>:<span class=\"hljs-number\">14.142</span>  INFO <span class=\"hljs-number\">41258</span> --- [pool-<span class=\"hljs-number\">1</span>-thread-<span class=\"hljs-number\">1</span>] com.zallds.xy.servlet.HelloworldServlet  : 子线程中:usertest481396704\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">04</span>:<span class=\"hljs-number\">15.248</span>  INFO <span class=\"hljs-number\">41258</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">3</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest400717395\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">04</span>:<span class=\"hljs-number\">15.249</span>  INFO <span class=\"hljs-number\">41258</span> --- [pool-<span class=\"hljs-number\">1</span>-thread-<span class=\"hljs-number\">1</span>] com.zallds.xy.servlet.HelloworldServlet  : 子线程中:usertest400717395</code></pre>\n<p>到此为止，ThreadLocal常见的场景和对应解决方案应该可以满足了。接下来就是怎么在实际应用中运用了。</p>\n<p>为了引出此文的初衷以及后面要讲的东西，针对最后一个解决方案，我们可以进一步完善一下。</p>\n<pre><code class=\"hljs java\">ThreadContext.bindUser(user);\nrunnable.run();\nThreadContext.unbindUser();</code></pre>\n<p>这个地方在bind的时候是直接覆盖，无法对线程之前的状态进行保存和恢复。要实现这一点，我们可以抽象一个ThreadState来保存线程的状态，在bind之前保存original，任务执行完以后进行restore。</p>\n<pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">ThreadState</span> </span>&#123;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">bind</span><span class=\"hljs-params\">()</span></span>;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">restore</span><span class=\"hljs-params\">()</span></span>;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">clear</span><span class=\"hljs-params\">()</span></span>;\n&#125;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserThreadState</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">ThreadState</span> </span>&#123;\n    <span class=\"hljs-keyword\">private</span> UserObj original;\n\n    <span class=\"hljs-keyword\">private</span> UserObj user;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">UserThreadState</span><span class=\"hljs-params\">(UserObj user)</span> </span>&#123;\n        <span class=\"hljs-keyword\">this</span>.user = user;\n    &#125;\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">bind</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-keyword\">this</span>.original = ThreadContext.getUser();\n\n        ThreadContext.bindUser(<span class=\"hljs-keyword\">this</span>.user);\n    &#125;\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">restore</span><span class=\"hljs-params\">()</span> </span>&#123;\n        ThreadContext.bindUser(<span class=\"hljs-keyword\">this</span>.original);\n    &#125;\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">clear</span><span class=\"hljs-params\">()</span> </span>&#123;\n        ThreadContext.unbindUser();\n    &#125;\n&#125;\n\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doGet</span><span class=\"hljs-params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"hljs-keyword\">throws</span> ServletException, IOException </span>&#123;\n    UserObj user = UserUtils.getCurrentUser();\n    logger.info(user.getName() + user.hashCode());\n\n    SendEmailTask emailThread = <span class=\"hljs-keyword\">new</span> SendEmailTask();\n\n    executor.execute(<span class=\"hljs-keyword\">new</span> UserRunnable(emailThread, <span class=\"hljs-keyword\">new</span> UserThreadState(user)));\n    <span class=\"hljs-keyword\">super</span>.doGet(req, resp);\n&#125;\n\n<span class=\"hljs-comment\">/**\n * 做一个wrapper, 将目标任务做一层包装, 在run方法中传递线程本地变量\n */</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserRunnable</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Runnable</span> </span>&#123;\n    <span class=\"hljs-comment\">/**\n     * 目标任务对象\n     */</span>\n    Runnable runnable;\n    <span class=\"hljs-comment\">/**\n     * 要绑定的user对象\n     */</span>\n    UserThreadState userThreadState;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">UserRunnable</span><span class=\"hljs-params\">(Runnable runnable, UserThreadState userThreadState)</span> </span>&#123;\n        <span class=\"hljs-keyword\">this</span>.runnable = runnable;\n        <span class=\"hljs-keyword\">this</span>.userThreadState = userThreadState;\n    &#125;\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">()</span> </span>&#123;\n        userThreadState.bind();\n        runnable.run();\n        userThreadState.restore();\n        UserObj userOrig = UserUtils.getCurrentUser();\n        logger.info(<span class=\"hljs-string\">\"original:\"</span> + userOrig.getName() + userOrig.hashCode());\n    &#125;\n&#125;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SendEmailTask</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Runnable</span> </span>&#123;\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">()</span> </span>&#123;\n        UserObj user = UserUtils.getCurrentUser();\n        logger.info(<span class=\"hljs-string\">\"子线程中:\"</span> + (user == <span class=\"hljs-keyword\">null</span> ? <span class=\"hljs-string\">\"user为null\"</span> : user.getName() + user.hashCode()));\n    &#125;\n&#125;</code></pre>\n<p>实现效果是相同的，至于为什么三次的original对象都是一样的，通过前面的说明应该能够理解</p>\n<pre><code class=\"hljs java\"><span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">19</span>:<span class=\"hljs-number\">48.694</span>  INFO <span class=\"hljs-number\">41671</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">1</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest114760676\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">19</span>:<span class=\"hljs-number\">48.699</span>  INFO <span class=\"hljs-number\">41671</span> --- [pool-<span class=\"hljs-number\">1</span>-thread-<span class=\"hljs-number\">1</span>] com.zallds.xy.servlet.HelloworldServlet  : 子线程中:usertest114760676\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">19</span>:<span class=\"hljs-number\">48.700</span>  INFO <span class=\"hljs-number\">41671</span> --- [pool-<span class=\"hljs-number\">1</span>-thread-<span class=\"hljs-number\">1</span>] com.zallds.xy.servlet.HelloworldServlet  : original:usertest114760676\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">19</span>:<span class=\"hljs-number\">57.123</span>  INFO <span class=\"hljs-number\">41671</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">2</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest941302199\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">19</span>:<span class=\"hljs-number\">57.123</span>  INFO <span class=\"hljs-number\">41671</span> --- [pool-<span class=\"hljs-number\">1</span>-thread-<span class=\"hljs-number\">1</span>] com.zallds.xy.servlet.HelloworldServlet  : 子线程中:usertest941302199\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">19</span>:<span class=\"hljs-number\">57.123</span>  INFO <span class=\"hljs-number\">41671</span> --- [pool-<span class=\"hljs-number\">1</span>-thread-<span class=\"hljs-number\">1</span>] com.zallds.xy.servlet.HelloworldServlet  : original:usertest114760676\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">04.385</span>  INFO <span class=\"hljs-number\">41671</span> --- [nio-<span class=\"hljs-number\">8080</span>-exec-<span class=\"hljs-number\">3</span>] com.zallds.xy.servlet.HelloworldServlet  : usertest1489938856\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">04.385</span>  INFO <span class=\"hljs-number\">41671</span> --- [pool-<span class=\"hljs-number\">1</span>-thread-<span class=\"hljs-number\">1</span>] com.zallds.xy.servlet.HelloworldServlet  : 子线程中:usertest1489938856\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">29</span> <span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">04.385</span>  INFO <span class=\"hljs-number\">41671</span> --- [pool-<span class=\"hljs-number\">1</span>-thread-<span class=\"hljs-number\">1</span>] com.zallds.xy.servlet.HelloworldServlet  : original:usertest114760676</code></pre>\n<p>由于在使用shiro框架的SecurityUtils.getSubject()过程中碰到问题，才有了本文的示例，例子中的部分代码参考了shiro框架的实现机制。后面会再研究一下shiro的subject相关设计。</p>\n<p><a href=\"http://shiro.apache.org/subject.html\" target=\"_blank\" rel=\"noopener\">http://shiro.apache.org/subject.html</a></p>\n<blockquote>\n<p>作者： 99793933e682<br>原文地址： <a href=\"https://www.jianshu.com/p/85d96fe9358b\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/85d96fe9358b</a></p>\n</blockquote>\n<hr>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/269363/1564727847078-00283633-d15e-4603-833c-be0c4c7ad83b.jpeg#align=left&amp;display=inline&amp;height=450&amp;name=%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20190719095938.jpg&amp;originHeight=450&amp;originWidth=900&amp;size=36931&amp;status=done&amp;width=900\" srcset=\"/img/loading.gif\" alt=\"微信图片_20190719095938.jpg\"></p>\n"},{"title":"Logback配置文件","date":"2017-04-21T05:10:50.000Z","_content":"\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n\t<!-- 定义变量 -->\n\t<property name=\"LOG_HOME\" value=\"/mnt/raid5/log/web\" />\n\t<property name=\"LOG_DEBUG_HOME\" value=\"${LOG_HOME}/debug\" />\n\t<property name=\"LOG_INFO_HOME\" value=\"${LOG_HOME}/info\" />\n\t<property name=\"LOG_WARN_HOME\" value=\"${LOG_HOME}/warn\" />\n\t<property name=\"LOG_ERROR_HOME\" value=\"${LOG_HOME}/error\" />\n\n\n\t<!-- 控制台输出 -->\n\t<appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\">\n\t\t<!-- 日志输出编码 -->\n\t\t<Encoding>UTF-8</Encoding>\n\t\t<layout class=\"ch.qos.logback.classic.PatternLayout\">\n\t\t\t<!-- 格式化输出: %d表示日期, %thread表示线程名, %-5level:级别从左显示5个字符宽度, %msg:日志消息, %n换行符 -->\n\t\t\t<pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}] %level [%thread] %logger{36} %X{medic.eventCode} %msg %ex%n</pattern>\n\t\t</layout>\n\t</appender>\n\n\t<!-- DEBUG输出 -->\n\t<appender name=\"FILE_DEBUG\"\n\t\tclass=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n\t\t<file>${LOG_DEBUG_HOME}/debug.log</file>\n\t\t<Encoding>UTF-8</Encoding>\n\t\t<rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n\t\t\t<!-- 日志文件输出的文件名 -->\n\t\t\t<FileNamePattern>${LOG_DEBUG_HOME}/debug.%d{yyyy-MM-dd}.log</FileNamePattern>\n\t\t\t<MaxHistory>30</MaxHistory>\n\t\t</rollingPolicy>\n\n\t\t<layout class=\"ch.qos.logback.classic.PatternLayout\">\n\t\t\t<!-- 格式化输出: %d表示日期, %thread表示线程名, %-5level:级别从左显示5个字符宽度, %msg:日志消息, %n换行符 -->\n\t\t\t<pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}] %level [%thread] %logger{36} %X{medic.eventCode} %msg %ex%n</pattern>\n\t\t</layout>\n\n\t\t<!--日志文件最大的大小 -->\n\t\t<triggeringPolicy\n\t\t\tclass=\"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy\">\n\t\t\t<MaxFileSize>100MB</MaxFileSize>\n\t\t</triggeringPolicy>\n\n\t\t<!-- <filter class=\"ch.qos.logback.classic.filter.LevelFilter\">\n\t\t\t<level>DEBUG</level>\n\t\t\t<onMatch>ACCEPT</onMatch>\n\t\t\t<onMismatch>DENY</onMismatch>\n\t\t</filter> -->\n\t</appender>\n\t\n\t<!-- INFO输出 -->\n\t<appender name=\"FILE_INFO\"\n\t\tclass=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n\t\t<file>${LOG_INFO_HOME}/info.log</file>\n\t\t<Encoding>UTF-8</Encoding>\n\t\t<rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n\t\t\t<!-- 日志文件输出的文件名 -->\n\t\t\t<FileNamePattern>${LOG_INFO_HOME}/info.%d{yyyy-MM-dd}.log</FileNamePattern>\n\t\t\t<MaxHistory>30</MaxHistory>\n\t\t</rollingPolicy>\n\n\t\t<layout class=\"ch.qos.logback.classic.PatternLayout\">\n\t\t\t<!-- 格式化输出: %d表示日期, %thread表示线程名, %-5level:级别从左显示5个字符宽度, %msg:日志消息, %n换行符 -->\n\t\t\t<pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}] %level [%thread] %logger{36} %X{medic.eventCode} %msg %ex%n</pattern>\n\t\t</layout>\n\n\t\t<!--日志文件最大的大小 -->\n\t\t<triggeringPolicy\n\t\t\tclass=\"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy\">\n\t\t\t<MaxFileSize>100MB</MaxFileSize>\n\t\t</triggeringPolicy>\n\n\t\t<filter class=\"ch.qos.logback.classic.filter.LevelFilter\">\n\t\t\t<level>INFO</level>\n\t\t\t<onMatch>ACCEPT</onMatch>\n\t\t\t<onMismatch>DENY</onMismatch>\n\t\t</filter>\n\t</appender>\n\t\n\t<!-- WARN输出 -->\n\t<appender name=\"FILE_WARN\"\n\t\tclass=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n\t\t<file>${LOG_WARN_HOME}/warn.log</file>\n\t\t<Encoding>UTF-8</Encoding>\n\t\t<rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n\t\t\t<!-- 日志文件输出的文件名 -->\n\t\t\t<FileNamePattern>${LOG_WARN_HOME}/warn.%d{yyyy-MM-dd}.log</FileNamePattern>\n\t\t\t<MaxHistory>30</MaxHistory>\n\t\t</rollingPolicy>\n\n\t\t<layout class=\"ch.qos.logback.classic.PatternLayout\">\n\t\t\t<!-- 格式化输出: %d表示日期, %thread表示线程名, %-5level:级别从左显示5个字符宽度, %msg:日志消息, %n换行符 -->\n\t\t\t<pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}] %level [%thread] %logger{36} %X{medic.eventCode} %msg %ex%n</pattern>\n\t\t</layout>\n\n\t\t<!--日志文件最大的大小 -->\n\t\t<triggeringPolicy\n\t\t\tclass=\"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy\">\n\t\t\t<MaxFileSize>100MB</MaxFileSize>\n\t\t</triggeringPolicy>\n\n\t\t<filter class=\"ch.qos.logback.classic.filter.LevelFilter\">\n\t\t\t<level>WARN</level>\n\t\t\t<onMatch>ACCEPT</onMatch>\n\t\t\t<onMismatch>DENY</onMismatch>\n\t\t</filter>\n\t</appender>\n\t\n\t<!-- ERROR输出 -->\n\t<appender name=\"FILE_ERROR\"\n\t\tclass=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n\t\t<file>${LOG_ERROR_HOME}/error.log</file>\n\t\t<Encoding>UTF-8</Encoding>\n\t\t<rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n\t\t\t<!-- 日志文件输出的文件名 -->\n\t\t\t<FileNamePattern>${LOG_ERROR_HOME}/error.%d{yyyy-MM-dd}.log</FileNamePattern>\n\t\t\t<MaxHistory>30</MaxHistory>\n\t\t</rollingPolicy>\n\n\t\t<layout class=\"ch.qos.logback.classic.PatternLayout\">\n\t\t\t<!-- 格式化输出: %d表示日期, %thread表示线程名, %-5level:级别从左显示5个字符宽度, %msg:日志消息, %n换行符 -->\n\t\t\t<pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}] %level [%thread] %logger{36} %X{medic.eventCode} %msg %ex%n</pattern>\n\t\t</layout>\n\n\t\t<!--日志文件最大的大小 -->\n\t\t<triggeringPolicy\n\t\t\tclass=\"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy\">\n\t\t\t<MaxFileSize>100MB</MaxFileSize>\n\t\t</triggeringPolicy>\n\n\t\t<filter class=\"ch.qos.logback.classic.filter.LevelFilter\">\n\t\t\t<level>ERROR</level>\n\t\t\t<onMatch>ACCEPT</onMatch>\n\t\t\t<onMismatch>DENY</onMismatch>\n\t\t</filter>\n\t</appender>\n\n\n\t<root level=\"DEBUG\">\n\t\t<appender-ref ref=\"STDOUT\" />\n\t\t<appender-ref ref=\"FILE_DEBUG\" />\n\t\t<appender-ref ref=\"FILE_INFO\" />\n\t\t<appender-ref ref=\"FILE_WARN\" />\n\t\t<appender-ref ref=\"FILE_ERROR\" />\n\t</root>\n\n</configuration>\n```\n","source":"_posts/logback-xml.md","raw":"---\ntitle: Logback配置文件\ndate: 2017-04-21 13:10:50\ntags: \n    - Java\n    - Log\n---\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n\t<!-- 定义变量 -->\n\t<property name=\"LOG_HOME\" value=\"/mnt/raid5/log/web\" />\n\t<property name=\"LOG_DEBUG_HOME\" value=\"${LOG_HOME}/debug\" />\n\t<property name=\"LOG_INFO_HOME\" value=\"${LOG_HOME}/info\" />\n\t<property name=\"LOG_WARN_HOME\" value=\"${LOG_HOME}/warn\" />\n\t<property name=\"LOG_ERROR_HOME\" value=\"${LOG_HOME}/error\" />\n\n\n\t<!-- 控制台输出 -->\n\t<appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\">\n\t\t<!-- 日志输出编码 -->\n\t\t<Encoding>UTF-8</Encoding>\n\t\t<layout class=\"ch.qos.logback.classic.PatternLayout\">\n\t\t\t<!-- 格式化输出: %d表示日期, %thread表示线程名, %-5level:级别从左显示5个字符宽度, %msg:日志消息, %n换行符 -->\n\t\t\t<pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}] %level [%thread] %logger{36} %X{medic.eventCode} %msg %ex%n</pattern>\n\t\t</layout>\n\t</appender>\n\n\t<!-- DEBUG输出 -->\n\t<appender name=\"FILE_DEBUG\"\n\t\tclass=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n\t\t<file>${LOG_DEBUG_HOME}/debug.log</file>\n\t\t<Encoding>UTF-8</Encoding>\n\t\t<rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n\t\t\t<!-- 日志文件输出的文件名 -->\n\t\t\t<FileNamePattern>${LOG_DEBUG_HOME}/debug.%d{yyyy-MM-dd}.log</FileNamePattern>\n\t\t\t<MaxHistory>30</MaxHistory>\n\t\t</rollingPolicy>\n\n\t\t<layout class=\"ch.qos.logback.classic.PatternLayout\">\n\t\t\t<!-- 格式化输出: %d表示日期, %thread表示线程名, %-5level:级别从左显示5个字符宽度, %msg:日志消息, %n换行符 -->\n\t\t\t<pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}] %level [%thread] %logger{36} %X{medic.eventCode} %msg %ex%n</pattern>\n\t\t</layout>\n\n\t\t<!--日志文件最大的大小 -->\n\t\t<triggeringPolicy\n\t\t\tclass=\"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy\">\n\t\t\t<MaxFileSize>100MB</MaxFileSize>\n\t\t</triggeringPolicy>\n\n\t\t<!-- <filter class=\"ch.qos.logback.classic.filter.LevelFilter\">\n\t\t\t<level>DEBUG</level>\n\t\t\t<onMatch>ACCEPT</onMatch>\n\t\t\t<onMismatch>DENY</onMismatch>\n\t\t</filter> -->\n\t</appender>\n\t\n\t<!-- INFO输出 -->\n\t<appender name=\"FILE_INFO\"\n\t\tclass=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n\t\t<file>${LOG_INFO_HOME}/info.log</file>\n\t\t<Encoding>UTF-8</Encoding>\n\t\t<rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n\t\t\t<!-- 日志文件输出的文件名 -->\n\t\t\t<FileNamePattern>${LOG_INFO_HOME}/info.%d{yyyy-MM-dd}.log</FileNamePattern>\n\t\t\t<MaxHistory>30</MaxHistory>\n\t\t</rollingPolicy>\n\n\t\t<layout class=\"ch.qos.logback.classic.PatternLayout\">\n\t\t\t<!-- 格式化输出: %d表示日期, %thread表示线程名, %-5level:级别从左显示5个字符宽度, %msg:日志消息, %n换行符 -->\n\t\t\t<pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}] %level [%thread] %logger{36} %X{medic.eventCode} %msg %ex%n</pattern>\n\t\t</layout>\n\n\t\t<!--日志文件最大的大小 -->\n\t\t<triggeringPolicy\n\t\t\tclass=\"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy\">\n\t\t\t<MaxFileSize>100MB</MaxFileSize>\n\t\t</triggeringPolicy>\n\n\t\t<filter class=\"ch.qos.logback.classic.filter.LevelFilter\">\n\t\t\t<level>INFO</level>\n\t\t\t<onMatch>ACCEPT</onMatch>\n\t\t\t<onMismatch>DENY</onMismatch>\n\t\t</filter>\n\t</appender>\n\t\n\t<!-- WARN输出 -->\n\t<appender name=\"FILE_WARN\"\n\t\tclass=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n\t\t<file>${LOG_WARN_HOME}/warn.log</file>\n\t\t<Encoding>UTF-8</Encoding>\n\t\t<rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n\t\t\t<!-- 日志文件输出的文件名 -->\n\t\t\t<FileNamePattern>${LOG_WARN_HOME}/warn.%d{yyyy-MM-dd}.log</FileNamePattern>\n\t\t\t<MaxHistory>30</MaxHistory>\n\t\t</rollingPolicy>\n\n\t\t<layout class=\"ch.qos.logback.classic.PatternLayout\">\n\t\t\t<!-- 格式化输出: %d表示日期, %thread表示线程名, %-5level:级别从左显示5个字符宽度, %msg:日志消息, %n换行符 -->\n\t\t\t<pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}] %level [%thread] %logger{36} %X{medic.eventCode} %msg %ex%n</pattern>\n\t\t</layout>\n\n\t\t<!--日志文件最大的大小 -->\n\t\t<triggeringPolicy\n\t\t\tclass=\"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy\">\n\t\t\t<MaxFileSize>100MB</MaxFileSize>\n\t\t</triggeringPolicy>\n\n\t\t<filter class=\"ch.qos.logback.classic.filter.LevelFilter\">\n\t\t\t<level>WARN</level>\n\t\t\t<onMatch>ACCEPT</onMatch>\n\t\t\t<onMismatch>DENY</onMismatch>\n\t\t</filter>\n\t</appender>\n\t\n\t<!-- ERROR输出 -->\n\t<appender name=\"FILE_ERROR\"\n\t\tclass=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n\t\t<file>${LOG_ERROR_HOME}/error.log</file>\n\t\t<Encoding>UTF-8</Encoding>\n\t\t<rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n\t\t\t<!-- 日志文件输出的文件名 -->\n\t\t\t<FileNamePattern>${LOG_ERROR_HOME}/error.%d{yyyy-MM-dd}.log</FileNamePattern>\n\t\t\t<MaxHistory>30</MaxHistory>\n\t\t</rollingPolicy>\n\n\t\t<layout class=\"ch.qos.logback.classic.PatternLayout\">\n\t\t\t<!-- 格式化输出: %d表示日期, %thread表示线程名, %-5level:级别从左显示5个字符宽度, %msg:日志消息, %n换行符 -->\n\t\t\t<pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}] %level [%thread] %logger{36} %X{medic.eventCode} %msg %ex%n</pattern>\n\t\t</layout>\n\n\t\t<!--日志文件最大的大小 -->\n\t\t<triggeringPolicy\n\t\t\tclass=\"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy\">\n\t\t\t<MaxFileSize>100MB</MaxFileSize>\n\t\t</triggeringPolicy>\n\n\t\t<filter class=\"ch.qos.logback.classic.filter.LevelFilter\">\n\t\t\t<level>ERROR</level>\n\t\t\t<onMatch>ACCEPT</onMatch>\n\t\t\t<onMismatch>DENY</onMismatch>\n\t\t</filter>\n\t</appender>\n\n\n\t<root level=\"DEBUG\">\n\t\t<appender-ref ref=\"STDOUT\" />\n\t\t<appender-ref ref=\"FILE_DEBUG\" />\n\t\t<appender-ref ref=\"FILE_INFO\" />\n\t\t<appender-ref ref=\"FILE_WARN\" />\n\t\t<appender-ref ref=\"FILE_ERROR\" />\n\t</root>\n\n</configuration>\n```\n","slug":"logback-xml","published":1,"updated":"2020-07-17T02:32:01.199Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcpntuiy005j04oik7xppjfq","content":"<pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">configuration</span>&gt;</span>\n\t<span class=\"hljs-comment\">&lt;!-- 定义变量 --&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"LOG_HOME\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"/mnt/raid5/log/web\"</span> /&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"LOG_DEBUG_HOME\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"$&#123;LOG_HOME&#125;/debug\"</span> /&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"LOG_INFO_HOME\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"$&#123;LOG_HOME&#125;/info\"</span> /&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"LOG_WARN_HOME\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"$&#123;LOG_HOME&#125;/warn\"</span> /&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"LOG_ERROR_HOME\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"$&#123;LOG_HOME&#125;/error\"</span> /&gt;</span>\n\n\n\t<span class=\"hljs-comment\">&lt;!-- 控制台输出 --&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">appender</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"STDOUT\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"ch.qos.logback.core.ConsoleAppender\"</span>&gt;</span>\n\t\t<span class=\"hljs-comment\">&lt;!-- 日志输出编码 --&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Encoding</span>&gt;</span>UTF-8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Encoding</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">layout</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"ch.qos.logback.classic.PatternLayout\"</span>&gt;</span>\n\t\t\t<span class=\"hljs-comment\">&lt;!-- 格式化输出: %d表示日期, %thread表示线程名, %-5level:级别从左显示5个字符宽度, %msg:日志消息, %n换行符 --&gt;</span>\n\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">pattern</span>&gt;</span>[%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;] %level [%thread] %logger&#123;36&#125; %X&#123;medic.eventCode&#125; %msg %ex%n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">pattern</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">layout</span>&gt;</span>\n\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">appender</span>&gt;</span>\n\n\t<span class=\"hljs-comment\">&lt;!-- DEBUG输出 --&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">appender</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"FILE_DEBUG\"</span>\n\t\t<span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"ch.qos.logback.core.rolling.RollingFileAppender\"</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">file</span>&gt;</span>$&#123;LOG_DEBUG_HOME&#125;/debug.log<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">file</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Encoding</span>&gt;</span>UTF-8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Encoding</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">rollingPolicy</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\"</span>&gt;</span>\n\t\t\t<span class=\"hljs-comment\">&lt;!-- 日志文件输出的文件名 --&gt;</span>\n\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FileNamePattern</span>&gt;</span>$&#123;LOG_DEBUG_HOME&#125;/debug.%d&#123;yyyy-MM-dd&#125;.log<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">FileNamePattern</span>&gt;</span>\n\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">MaxHistory</span>&gt;</span>30<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">MaxHistory</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">rollingPolicy</span>&gt;</span>\n\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">layout</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"ch.qos.logback.classic.PatternLayout\"</span>&gt;</span>\n\t\t\t<span class=\"hljs-comment\">&lt;!-- 格式化输出: %d表示日期, %thread表示线程名, %-5level:级别从左显示5个字符宽度, %msg:日志消息, %n换行符 --&gt;</span>\n\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">pattern</span>&gt;</span>[%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;] %level [%thread] %logger&#123;36&#125; %X&#123;medic.eventCode&#125; %msg %ex%n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">pattern</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">layout</span>&gt;</span>\n\n\t\t<span class=\"hljs-comment\">&lt;!--日志文件最大的大小 --&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">triggeringPolicy</span>\n\t\t\t<span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy\"</span>&gt;</span>\n\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">MaxFileSize</span>&gt;</span>100MB<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">MaxFileSize</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">triggeringPolicy</span>&gt;</span>\n\n\t\t<span class=\"hljs-comment\">&lt;!-- &lt;filter class=\"ch.qos.logback.classic.filter.LevelFilter\"&gt;\n\t\t\t&lt;level&gt;DEBUG&lt;/level&gt;\n\t\t\t&lt;onMatch&gt;ACCEPT&lt;/onMatch&gt;\n\t\t\t&lt;onMismatch&gt;DENY&lt;/onMismatch&gt;\n\t\t&lt;/filter&gt; --&gt;</span>\n\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">appender</span>&gt;</span>\n\t\n\t<span class=\"hljs-comment\">&lt;!-- INFO输出 --&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">appender</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"FILE_INFO\"</span>\n\t\t<span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"ch.qos.logback.core.rolling.RollingFileAppender\"</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">file</span>&gt;</span>$&#123;LOG_INFO_HOME&#125;/info.log<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">file</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Encoding</span>&gt;</span>UTF-8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Encoding</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">rollingPolicy</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\"</span>&gt;</span>\n\t\t\t<span class=\"hljs-comment\">&lt;!-- 日志文件输出的文件名 --&gt;</span>\n\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FileNamePattern</span>&gt;</span>$&#123;LOG_INFO_HOME&#125;/info.%d&#123;yyyy-MM-dd&#125;.log<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">FileNamePattern</span>&gt;</span>\n\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">MaxHistory</span>&gt;</span>30<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">MaxHistory</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">rollingPolicy</span>&gt;</span>\n\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">layout</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"ch.qos.logback.classic.PatternLayout\"</span>&gt;</span>\n\t\t\t<span class=\"hljs-comment\">&lt;!-- 格式化输出: %d表示日期, %thread表示线程名, %-5level:级别从左显示5个字符宽度, %msg:日志消息, %n换行符 --&gt;</span>\n\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">pattern</span>&gt;</span>[%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;] %level [%thread] %logger&#123;36&#125; %X&#123;medic.eventCode&#125; %msg %ex%n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">pattern</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">layout</span>&gt;</span>\n\n\t\t<span class=\"hljs-comment\">&lt;!--日志文件最大的大小 --&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">triggeringPolicy</span>\n\t\t\t<span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy\"</span>&gt;</span>\n\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">MaxFileSize</span>&gt;</span>100MB<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">MaxFileSize</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">triggeringPolicy</span>&gt;</span>\n\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">filter</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"ch.qos.logback.classic.filter.LevelFilter\"</span>&gt;</span>\n\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">level</span>&gt;</span>INFO<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">level</span>&gt;</span>\n\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">onMatch</span>&gt;</span>ACCEPT<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">onMatch</span>&gt;</span>\n\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">onMismatch</span>&gt;</span>DENY<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">onMismatch</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">filter</span>&gt;</span>\n\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">appender</span>&gt;</span>\n\t\n\t<span class=\"hljs-comment\">&lt;!-- WARN输出 --&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">appender</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"FILE_WARN\"</span>\n\t\t<span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"ch.qos.logback.core.rolling.RollingFileAppender\"</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">file</span>&gt;</span>$&#123;LOG_WARN_HOME&#125;/warn.log<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">file</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Encoding</span>&gt;</span>UTF-8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Encoding</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">rollingPolicy</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\"</span>&gt;</span>\n\t\t\t<span class=\"hljs-comment\">&lt;!-- 日志文件输出的文件名 --&gt;</span>\n\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FileNamePattern</span>&gt;</span>$&#123;LOG_WARN_HOME&#125;/warn.%d&#123;yyyy-MM-dd&#125;.log<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">FileNamePattern</span>&gt;</span>\n\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">MaxHistory</span>&gt;</span>30<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">MaxHistory</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">rollingPolicy</span>&gt;</span>\n\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">layout</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"ch.qos.logback.classic.PatternLayout\"</span>&gt;</span>\n\t\t\t<span class=\"hljs-comment\">&lt;!-- 格式化输出: %d表示日期, %thread表示线程名, %-5level:级别从左显示5个字符宽度, %msg:日志消息, %n换行符 --&gt;</span>\n\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">pattern</span>&gt;</span>[%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;] %level [%thread] %logger&#123;36&#125; %X&#123;medic.eventCode&#125; %msg %ex%n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">pattern</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">layout</span>&gt;</span>\n\n\t\t<span class=\"hljs-comment\">&lt;!--日志文件最大的大小 --&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">triggeringPolicy</span>\n\t\t\t<span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy\"</span>&gt;</span>\n\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">MaxFileSize</span>&gt;</span>100MB<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">MaxFileSize</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">triggeringPolicy</span>&gt;</span>\n\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">filter</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"ch.qos.logback.classic.filter.LevelFilter\"</span>&gt;</span>\n\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">level</span>&gt;</span>WARN<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">level</span>&gt;</span>\n\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">onMatch</span>&gt;</span>ACCEPT<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">onMatch</span>&gt;</span>\n\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">onMismatch</span>&gt;</span>DENY<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">onMismatch</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">filter</span>&gt;</span>\n\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">appender</span>&gt;</span>\n\t\n\t<span class=\"hljs-comment\">&lt;!-- ERROR输出 --&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">appender</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"FILE_ERROR\"</span>\n\t\t<span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"ch.qos.logback.core.rolling.RollingFileAppender\"</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">file</span>&gt;</span>$&#123;LOG_ERROR_HOME&#125;/error.log<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">file</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Encoding</span>&gt;</span>UTF-8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Encoding</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">rollingPolicy</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\"</span>&gt;</span>\n\t\t\t<span class=\"hljs-comment\">&lt;!-- 日志文件输出的文件名 --&gt;</span>\n\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FileNamePattern</span>&gt;</span>$&#123;LOG_ERROR_HOME&#125;/error.%d&#123;yyyy-MM-dd&#125;.log<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">FileNamePattern</span>&gt;</span>\n\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">MaxHistory</span>&gt;</span>30<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">MaxHistory</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">rollingPolicy</span>&gt;</span>\n\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">layout</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"ch.qos.logback.classic.PatternLayout\"</span>&gt;</span>\n\t\t\t<span class=\"hljs-comment\">&lt;!-- 格式化输出: %d表示日期, %thread表示线程名, %-5level:级别从左显示5个字符宽度, %msg:日志消息, %n换行符 --&gt;</span>\n\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">pattern</span>&gt;</span>[%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;] %level [%thread] %logger&#123;36&#125; %X&#123;medic.eventCode&#125; %msg %ex%n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">pattern</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">layout</span>&gt;</span>\n\n\t\t<span class=\"hljs-comment\">&lt;!--日志文件最大的大小 --&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">triggeringPolicy</span>\n\t\t\t<span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy\"</span>&gt;</span>\n\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">MaxFileSize</span>&gt;</span>100MB<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">MaxFileSize</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">triggeringPolicy</span>&gt;</span>\n\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">filter</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"ch.qos.logback.classic.filter.LevelFilter\"</span>&gt;</span>\n\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">level</span>&gt;</span>ERROR<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">level</span>&gt;</span>\n\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">onMatch</span>&gt;</span>ACCEPT<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">onMatch</span>&gt;</span>\n\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">onMismatch</span>&gt;</span>DENY<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">onMismatch</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">filter</span>&gt;</span>\n\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">appender</span>&gt;</span>\n\n\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">root</span> <span class=\"hljs-attr\">level</span>=<span class=\"hljs-string\">\"DEBUG\"</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">appender-ref</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"STDOUT\"</span> /&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">appender-ref</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"FILE_DEBUG\"</span> /&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">appender-ref</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"FILE_INFO\"</span> /&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">appender-ref</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"FILE_WARN\"</span> /&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">appender-ref</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"FILE_ERROR\"</span> /&gt;</span>\n\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">root</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">configuration</span>&gt;</span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">configuration</span>&gt;</span>\n\t<span class=\"hljs-comment\">&lt;!-- 定义变量 --&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"LOG_HOME\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"/mnt/raid5/log/web\"</span> /&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"LOG_DEBUG_HOME\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"$&#123;LOG_HOME&#125;/debug\"</span> /&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"LOG_INFO_HOME\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"$&#123;LOG_HOME&#125;/info\"</span> /&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"LOG_WARN_HOME\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"$&#123;LOG_HOME&#125;/warn\"</span> /&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"LOG_ERROR_HOME\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"$&#123;LOG_HOME&#125;/error\"</span> /&gt;</span>\n\n\n\t<span class=\"hljs-comment\">&lt;!-- 控制台输出 --&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">appender</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"STDOUT\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"ch.qos.logback.core.ConsoleAppender\"</span>&gt;</span>\n\t\t<span class=\"hljs-comment\">&lt;!-- 日志输出编码 --&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Encoding</span>&gt;</span>UTF-8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Encoding</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">layout</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"ch.qos.logback.classic.PatternLayout\"</span>&gt;</span>\n\t\t\t<span class=\"hljs-comment\">&lt;!-- 格式化输出: %d表示日期, %thread表示线程名, %-5level:级别从左显示5个字符宽度, %msg:日志消息, %n换行符 --&gt;</span>\n\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">pattern</span>&gt;</span>[%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;] %level [%thread] %logger&#123;36&#125; %X&#123;medic.eventCode&#125; %msg %ex%n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">pattern</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">layout</span>&gt;</span>\n\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">appender</span>&gt;</span>\n\n\t<span class=\"hljs-comment\">&lt;!-- DEBUG输出 --&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">appender</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"FILE_DEBUG\"</span>\n\t\t<span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"ch.qos.logback.core.rolling.RollingFileAppender\"</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">file</span>&gt;</span>$&#123;LOG_DEBUG_HOME&#125;/debug.log<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">file</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Encoding</span>&gt;</span>UTF-8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Encoding</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">rollingPolicy</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\"</span>&gt;</span>\n\t\t\t<span class=\"hljs-comment\">&lt;!-- 日志文件输出的文件名 --&gt;</span>\n\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FileNamePattern</span>&gt;</span>$&#123;LOG_DEBUG_HOME&#125;/debug.%d&#123;yyyy-MM-dd&#125;.log<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">FileNamePattern</span>&gt;</span>\n\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">MaxHistory</span>&gt;</span>30<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">MaxHistory</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">rollingPolicy</span>&gt;</span>\n\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">layout</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"ch.qos.logback.classic.PatternLayout\"</span>&gt;</span>\n\t\t\t<span class=\"hljs-comment\">&lt;!-- 格式化输出: %d表示日期, %thread表示线程名, %-5level:级别从左显示5个字符宽度, %msg:日志消息, %n换行符 --&gt;</span>\n\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">pattern</span>&gt;</span>[%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;] %level [%thread] %logger&#123;36&#125; %X&#123;medic.eventCode&#125; %msg %ex%n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">pattern</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">layout</span>&gt;</span>\n\n\t\t<span class=\"hljs-comment\">&lt;!--日志文件最大的大小 --&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">triggeringPolicy</span>\n\t\t\t<span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy\"</span>&gt;</span>\n\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">MaxFileSize</span>&gt;</span>100MB<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">MaxFileSize</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">triggeringPolicy</span>&gt;</span>\n\n\t\t<span class=\"hljs-comment\">&lt;!-- &lt;filter class=\"ch.qos.logback.classic.filter.LevelFilter\"&gt;\n\t\t\t&lt;level&gt;DEBUG&lt;/level&gt;\n\t\t\t&lt;onMatch&gt;ACCEPT&lt;/onMatch&gt;\n\t\t\t&lt;onMismatch&gt;DENY&lt;/onMismatch&gt;\n\t\t&lt;/filter&gt; --&gt;</span>\n\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">appender</span>&gt;</span>\n\t\n\t<span class=\"hljs-comment\">&lt;!-- INFO输出 --&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">appender</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"FILE_INFO\"</span>\n\t\t<span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"ch.qos.logback.core.rolling.RollingFileAppender\"</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">file</span>&gt;</span>$&#123;LOG_INFO_HOME&#125;/info.log<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">file</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Encoding</span>&gt;</span>UTF-8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Encoding</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">rollingPolicy</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\"</span>&gt;</span>\n\t\t\t<span class=\"hljs-comment\">&lt;!-- 日志文件输出的文件名 --&gt;</span>\n\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FileNamePattern</span>&gt;</span>$&#123;LOG_INFO_HOME&#125;/info.%d&#123;yyyy-MM-dd&#125;.log<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">FileNamePattern</span>&gt;</span>\n\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">MaxHistory</span>&gt;</span>30<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">MaxHistory</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">rollingPolicy</span>&gt;</span>\n\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">layout</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"ch.qos.logback.classic.PatternLayout\"</span>&gt;</span>\n\t\t\t<span class=\"hljs-comment\">&lt;!-- 格式化输出: %d表示日期, %thread表示线程名, %-5level:级别从左显示5个字符宽度, %msg:日志消息, %n换行符 --&gt;</span>\n\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">pattern</span>&gt;</span>[%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;] %level [%thread] %logger&#123;36&#125; %X&#123;medic.eventCode&#125; %msg %ex%n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">pattern</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">layout</span>&gt;</span>\n\n\t\t<span class=\"hljs-comment\">&lt;!--日志文件最大的大小 --&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">triggeringPolicy</span>\n\t\t\t<span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy\"</span>&gt;</span>\n\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">MaxFileSize</span>&gt;</span>100MB<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">MaxFileSize</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">triggeringPolicy</span>&gt;</span>\n\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">filter</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"ch.qos.logback.classic.filter.LevelFilter\"</span>&gt;</span>\n\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">level</span>&gt;</span>INFO<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">level</span>&gt;</span>\n\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">onMatch</span>&gt;</span>ACCEPT<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">onMatch</span>&gt;</span>\n\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">onMismatch</span>&gt;</span>DENY<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">onMismatch</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">filter</span>&gt;</span>\n\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">appender</span>&gt;</span>\n\t\n\t<span class=\"hljs-comment\">&lt;!-- WARN输出 --&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">appender</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"FILE_WARN\"</span>\n\t\t<span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"ch.qos.logback.core.rolling.RollingFileAppender\"</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">file</span>&gt;</span>$&#123;LOG_WARN_HOME&#125;/warn.log<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">file</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Encoding</span>&gt;</span>UTF-8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Encoding</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">rollingPolicy</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\"</span>&gt;</span>\n\t\t\t<span class=\"hljs-comment\">&lt;!-- 日志文件输出的文件名 --&gt;</span>\n\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FileNamePattern</span>&gt;</span>$&#123;LOG_WARN_HOME&#125;/warn.%d&#123;yyyy-MM-dd&#125;.log<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">FileNamePattern</span>&gt;</span>\n\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">MaxHistory</span>&gt;</span>30<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">MaxHistory</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">rollingPolicy</span>&gt;</span>\n\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">layout</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"ch.qos.logback.classic.PatternLayout\"</span>&gt;</span>\n\t\t\t<span class=\"hljs-comment\">&lt;!-- 格式化输出: %d表示日期, %thread表示线程名, %-5level:级别从左显示5个字符宽度, %msg:日志消息, %n换行符 --&gt;</span>\n\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">pattern</span>&gt;</span>[%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;] %level [%thread] %logger&#123;36&#125; %X&#123;medic.eventCode&#125; %msg %ex%n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">pattern</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">layout</span>&gt;</span>\n\n\t\t<span class=\"hljs-comment\">&lt;!--日志文件最大的大小 --&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">triggeringPolicy</span>\n\t\t\t<span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy\"</span>&gt;</span>\n\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">MaxFileSize</span>&gt;</span>100MB<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">MaxFileSize</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">triggeringPolicy</span>&gt;</span>\n\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">filter</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"ch.qos.logback.classic.filter.LevelFilter\"</span>&gt;</span>\n\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">level</span>&gt;</span>WARN<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">level</span>&gt;</span>\n\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">onMatch</span>&gt;</span>ACCEPT<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">onMatch</span>&gt;</span>\n\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">onMismatch</span>&gt;</span>DENY<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">onMismatch</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">filter</span>&gt;</span>\n\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">appender</span>&gt;</span>\n\t\n\t<span class=\"hljs-comment\">&lt;!-- ERROR输出 --&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">appender</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"FILE_ERROR\"</span>\n\t\t<span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"ch.qos.logback.core.rolling.RollingFileAppender\"</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">file</span>&gt;</span>$&#123;LOG_ERROR_HOME&#125;/error.log<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">file</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Encoding</span>&gt;</span>UTF-8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Encoding</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">rollingPolicy</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\"</span>&gt;</span>\n\t\t\t<span class=\"hljs-comment\">&lt;!-- 日志文件输出的文件名 --&gt;</span>\n\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FileNamePattern</span>&gt;</span>$&#123;LOG_ERROR_HOME&#125;/error.%d&#123;yyyy-MM-dd&#125;.log<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">FileNamePattern</span>&gt;</span>\n\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">MaxHistory</span>&gt;</span>30<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">MaxHistory</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">rollingPolicy</span>&gt;</span>\n\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">layout</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"ch.qos.logback.classic.PatternLayout\"</span>&gt;</span>\n\t\t\t<span class=\"hljs-comment\">&lt;!-- 格式化输出: %d表示日期, %thread表示线程名, %-5level:级别从左显示5个字符宽度, %msg:日志消息, %n换行符 --&gt;</span>\n\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">pattern</span>&gt;</span>[%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;] %level [%thread] %logger&#123;36&#125; %X&#123;medic.eventCode&#125; %msg %ex%n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">pattern</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">layout</span>&gt;</span>\n\n\t\t<span class=\"hljs-comment\">&lt;!--日志文件最大的大小 --&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">triggeringPolicy</span>\n\t\t\t<span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy\"</span>&gt;</span>\n\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">MaxFileSize</span>&gt;</span>100MB<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">MaxFileSize</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">triggeringPolicy</span>&gt;</span>\n\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">filter</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"ch.qos.logback.classic.filter.LevelFilter\"</span>&gt;</span>\n\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">level</span>&gt;</span>ERROR<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">level</span>&gt;</span>\n\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">onMatch</span>&gt;</span>ACCEPT<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">onMatch</span>&gt;</span>\n\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">onMismatch</span>&gt;</span>DENY<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">onMismatch</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">filter</span>&gt;</span>\n\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">appender</span>&gt;</span>\n\n\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">root</span> <span class=\"hljs-attr\">level</span>=<span class=\"hljs-string\">\"DEBUG\"</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">appender-ref</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"STDOUT\"</span> /&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">appender-ref</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"FILE_DEBUG\"</span> /&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">appender-ref</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"FILE_INFO\"</span> /&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">appender-ref</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"FILE_WARN\"</span> /&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">appender-ref</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"FILE_ERROR\"</span> /&gt;</span>\n\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">root</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">configuration</span>&gt;</span></code></pre>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckcpntuf4000304oi8x8q2nei","category_id":"ckcpntufa000804oiwo3idnwb","_id":"ckcpntufo000l04oirdppkvec"},{"post_id":"ckcpntufh000d04oialws7euj","category_id":"ckcpntufa000804oiwo3idnwb","_id":"ckcpntufq000o04oifkgp1m8m"},{"post_id":"ckcpntufk000g04oil3eb3d5n","category_id":"ckcpntufa000804oiwo3idnwb","_id":"ckcpntufs000t04oie59qbfzo"},{"post_id":"ckcpntuf8000604oiu32npwlf","category_id":"ckcpntufa000804oiwo3idnwb","_id":"ckcpntufu000w04oi3irwto3v"},{"post_id":"ckcpntufb000904oiamr7kcio","category_id":"ckcpntufa000804oiwo3idnwb","_id":"ckcpntufw000z04oin04d2mkw"},{"post_id":"ckcpntufc000a04oid3u12dsi","category_id":"ckcpntufs000s04oih4e8wttr","_id":"ckcpntufz001404oi5gl7uan3"},{"post_id":"ckcpntufv000y04oiuubm3ila","category_id":"ckcpntufs000s04oih4e8wttr","_id":"ckcpntug2001804oitdyjgghy"},{"post_id":"ckcpntufw001104oi7foqodqp","category_id":"ckcpntufs000s04oih4e8wttr","_id":"ckcpntug4001c04oidovg90r0"},{"post_id":"ckcpntufn000j04oikozmi137","category_id":"ckcpntufw001004oimy48q328","_id":"ckcpntug6001g04oi7ab332bk"},{"post_id":"ckcpntufy001304oia0744tzv","category_id":"ckcpntufw001004oimy48q328","_id":"ckcpntuga001k04oidjbs6noh"},{"post_id":"ckcpntug0001704oi4mjg41xb","category_id":"ckcpntufa000804oiwo3idnwb","_id":"ckcpntugc001o04oi9wjziou1"},{"post_id":"ckcpntufp000n04oirfs1gudr","category_id":"ckcpntufw001004oimy48q328","_id":"ckcpntuge001s04oipg62reyh"},{"post_id":"ckcpntug3001b04oiio9uezkt","category_id":"ckcpntufw001004oimy48q328","_id":"ckcpntugg001v04oialrp2sw6"},{"post_id":"ckcpntug5001f04oi7dixnhc4","category_id":"ckcpntufa000804oiwo3idnwb","_id":"ckcpntugi001z04oio4hsw0d5"},{"post_id":"ckcpntufr000r04oi5vas76q8","category_id":"ckcpntufw001004oimy48q328","_id":"ckcpntugk002204oiddqwium3"},{"post_id":"ckcpntug7001j04oi95e3jl2y","category_id":"ckcpntufs000s04oih4e8wttr","_id":"ckcpntugm002604oihi3xhiqj"},{"post_id":"ckcpntugb001n04oi4onmrltl","category_id":"ckcpntufa000804oiwo3idnwb","_id":"ckcpntugo002904oi6e7vjk0u"},{"post_id":"ckcpntuft000v04oi9ktdz5lp","category_id":"ckcpntufw001004oimy48q328","_id":"ckcpntugp002c04oiqf4q0xf0"},{"post_id":"ckcpntugd001r04oijcwo1euh","category_id":"ckcpntufa000804oiwo3idnwb","_id":"ckcpntugs002g04oik2kj18rk"},{"post_id":"ckcpntugf001u04oif6el9zyy","category_id":"ckcpntufw001004oimy48q328","_id":"ckcpntugt002j04oi04zdb8nh"},{"post_id":"ckcpntugj002104oith53ez8z","category_id":"ckcpntufw001004oimy48q328","_id":"ckcpntugv002n04oixus4uoqx"},{"post_id":"ckcpntugk002404oi902b4akh","category_id":"ckcpntufa000804oiwo3idnwb","_id":"ckcpntugx002q04oigiktwwen"},{"post_id":"ckcpntugs002i04oib94q216n","category_id":"ckcpntufa000804oiwo3idnwb","_id":"ckcpntugz002t04oi69kq22yb"},{"post_id":"ckcpntugw002p04oij5vd9z0j","category_id":"ckcpntufw001004oimy48q328","_id":"ckcpntuh2002y04oi2lpcq411"},{"post_id":"ckcpntugy002s04oiz73cpbp8","category_id":"ckcpntufs000s04oih4e8wttr","_id":"ckcpntuh4003204oivbx1opb6"},{"post_id":"ckcpntugz002v04oiydcesm1l","category_id":"ckcpntufa000804oiwo3idnwb","_id":"ckcpntuh5003404oiftsj68sq"},{"post_id":"ckcpntuh1002x04oiu5y83owc","category_id":"ckcpntufs000s04oih4e8wttr","_id":"ckcpntuh7003704oiwt3rst5i"},{"post_id":"ckcpntuh3003104oiwavz9l5j","category_id":"ckcpntufa000804oiwo3idnwb","_id":"ckcpntuh9003a04oivr32a5q9"},{"post_id":"ckcpntuh4003304oibsuf4epw","category_id":"ckcpntufw001004oimy48q328","_id":"ckcpntuhb003e04oie2qtuu4a"},{"post_id":"ckcpntuh6003604oitoq0mumd","category_id":"ckcpntufa000804oiwo3idnwb","_id":"ckcpntuhd003h04oik3jdz4q4"},{"post_id":"ckcpntuh8003904oi5vl3lzcp","category_id":"ckcpntufs000s04oih4e8wttr","_id":"ckcpntuhe003k04oigxzi242s"},{"post_id":"ckcpntuha003d04oiz1cfxoxp","category_id":"ckcpntufa000804oiwo3idnwb","_id":"ckcpntuhg003n04oi4xbr7dkn"},{"post_id":"ckcpntuhc003g04oi3fy2d95g","category_id":"ckcpntufw001004oimy48q328","_id":"ckcpntuhi003q04oi1nwvjm5j"},{"post_id":"ckcpntuhd003j04oiufbo0ofs","category_id":"ckcpntufw001004oimy48q328","_id":"ckcpntuho003u04oi6ym82xf8"},{"post_id":"ckcpntuhf003m04oiawtlonbq","category_id":"ckcpntufs000s04oih4e8wttr","_id":"ckcpntuhq003x04oim77ho70g"},{"post_id":"ckcpntuhh003p04oi9j04pt9t","category_id":"ckcpntufw001004oimy48q328","_id":"ckcpntuhs004104oilfex5y98"},{"post_id":"ckcpntuhm003t04oi1mv68ljx","category_id":"ckcpntufw001004oimy48q328","_id":"ckcpntuhu004404oic2mdjofy"},{"post_id":"ckcpntuhp003w04oiatfh1js9","category_id":"ckcpntufa000804oiwo3idnwb","_id":"ckcpntuhx004804oi1kcui5mm"},{"post_id":"ckcpntuhr004004oicyd8kmgd","category_id":"ckcpntufs000s04oih4e8wttr","_id":"ckcpntuhz004b04oi7wvuj1om"},{"post_id":"ckcpntuht004304oifkhkm83y","category_id":"ckcpntufs000s04oih4e8wttr","_id":"ckcpntui1004f04oirje1mzo2"},{"post_id":"ckcpntuhw004704oiw2kcaxek","category_id":"ckcpntufs000s04oih4e8wttr","_id":"ckcpntui2004i04oik8nawjyy"},{"post_id":"ckcpntuhy004a04oiuhcczq7p","category_id":"ckcpntufs000s04oih4e8wttr","_id":"ckcpntui4004l04oiv31m74y6"},{"post_id":"ckcpntui0004e04oizqx6wf2t","category_id":"ckcpntufw001004oimy48q328","_id":"ckcpntui7004p04oifeqsjpmu"},{"post_id":"ckcpntui2004h04oierrsgb9g","category_id":"ckcpntufw001004oimy48q328","_id":"ckcpntui8004s04oi65hcks07"},{"post_id":"ckcpntui3004k04oi058w8fqv","category_id":"ckcpntufs000s04oih4e8wttr","_id":"ckcpntuia004w04oijw25t7ck"},{"post_id":"ckcpntui6004o04oifoheznj0","category_id":"ckcpntufw001004oimy48q328","_id":"ckcpntuid004z04oil9bu05nf"},{"post_id":"ckcpntui7004r04oil0ekreh6","category_id":"ckcpntufw001004oimy48q328","_id":"ckcpntuii005304oivvzmbwqf"},{"post_id":"ckcpntui9004v04oi5rc9vauq","category_id":"ckcpntufa000804oiwo3idnwb","_id":"ckcpntuim005604oi4zp3bn8v"},{"post_id":"ckcpntuib004y04oi3g2cgpjc","category_id":"ckcpntufa000804oiwo3idnwb","_id":"ckcpntuit005a04oivjgedssd"},{"post_id":"ckcpntuif005204oipln3rkn2","category_id":"ckcpntufs000s04oih4e8wttr","_id":"ckcpntuiv005d04oidmnevduc"},{"post_id":"ckcpntuij005504oimrqs2bzq","category_id":"ckcpntufa000804oiwo3idnwb","_id":"ckcpntuix005h04oi1nv4v19t"},{"post_id":"ckcpntuiu005c04oivb3emhoo","category_id":"ckcpntufa000804oiwo3idnwb","_id":"ckcpntuj2005m04oicv4wttcc"}],"PostTag":[{"post_id":"ckcpntufb000904oiamr7kcio","tag_id":"ckcpntuf7000504oistxkm7r7","_id":"ckcpntufh000c04oid12ua0f6"},{"post_id":"ckcpntuey000104oirjzgtura","tag_id":"ckcpntuf7000504oistxkm7r7","_id":"ckcpntufk000f04oir5i9lq1s"},{"post_id":"ckcpntufh000d04oialws7euj","tag_id":"ckcpntuf7000504oistxkm7r7","_id":"ckcpntufm000i04oixchj7vjg"},{"post_id":"ckcpntuf4000304oi8x8q2nei","tag_id":"ckcpntuf7000504oistxkm7r7","_id":"ckcpntufp000m04oierjfm44j"},{"post_id":"ckcpntufk000g04oil3eb3d5n","tag_id":"ckcpntuf7000504oistxkm7r7","_id":"ckcpntufr000q04oigwfog845"},{"post_id":"ckcpntuf8000604oiu32npwlf","tag_id":"ckcpntuf7000504oistxkm7r7","_id":"ckcpntuft000u04oibsdnj9u9"},{"post_id":"ckcpntufc000a04oid3u12dsi","tag_id":"ckcpntufq000p04oi8s2arvd0","_id":"ckcpntug0001504oilgnch8k8"},{"post_id":"ckcpntufc000a04oid3u12dsi","tag_id":"ckcpntufu000x04oi76idmvah","_id":"ckcpntug2001904oiv22qgr9e"},{"post_id":"ckcpntufn000j04oikozmi137","tag_id":"ckcpntufu000x04oi76idmvah","_id":"ckcpntug4001d04oiemnagfr7"},{"post_id":"ckcpntug0001704oi4mjg41xb","tag_id":"ckcpntuf7000504oistxkm7r7","_id":"ckcpntug7001h04oivjhhm7oq"},{"post_id":"ckcpntug3001b04oiio9uezkt","tag_id":"ckcpntufu000x04oi76idmvah","_id":"ckcpntuga001l04oij8fkfeu0"},{"post_id":"ckcpntufp000n04oirfs1gudr","tag_id":"ckcpntug2001a04oiyd8jp027","_id":"ckcpntugc001p04oib1mbkqm4"},{"post_id":"ckcpntug5001f04oi7dixnhc4","tag_id":"ckcpntuf7000504oistxkm7r7","_id":"ckcpntuge001t04oi2hvqw7c1"},{"post_id":"ckcpntufr000r04oi5vas76q8","tag_id":"ckcpntufu000x04oi76idmvah","_id":"ckcpntugg001w04oiesafx0xb"},{"post_id":"ckcpntugb001n04oi4onmrltl","tag_id":"ckcpntuf7000504oistxkm7r7","_id":"ckcpntugi002004oi7ozdhk76"},{"post_id":"ckcpntugd001r04oijcwo1euh","tag_id":"ckcpntuf7000504oistxkm7r7","_id":"ckcpntugk002304oiqzh919rh"},{"post_id":"ckcpntuft000v04oi9ktdz5lp","tag_id":"ckcpntufu000x04oi76idmvah","_id":"ckcpntugm002704oiricjq8ij"},{"post_id":"ckcpntugf001u04oif6el9zyy","tag_id":"ckcpntufu000x04oi76idmvah","_id":"ckcpntugo002a04oiyijo7kdu"},{"post_id":"ckcpntufv000y04oiuubm3ila","tag_id":"ckcpntugh001x04oizg2t5hmo","_id":"ckcpntugq002e04ois9xe31lx"},{"post_id":"ckcpntufw001104oi7foqodqp","tag_id":"ckcpntugl002504oixmtimomt","_id":"ckcpntugs002h04oi9fg14dd3"},{"post_id":"ckcpntugo002b04oipqwt4vne","tag_id":"ckcpntuf7000504oistxkm7r7","_id":"ckcpntugu002k04oiq3s9kyf5"},{"post_id":"ckcpntugs002i04oib94q216n","tag_id":"ckcpntuf7000504oistxkm7r7","_id":"ckcpntugw002o04ois38nuc27"},{"post_id":"ckcpntufy001304oia0744tzv","tag_id":"ckcpntugq002d04oiripp3neo","_id":"ckcpntugz002u04oih6s8qjco"},{"post_id":"ckcpntufy001304oia0744tzv","tag_id":"ckcpntugu002l04oitz069v9s","_id":"ckcpntuh1002w04oircduvs1a"},{"post_id":"ckcpntugw002p04oij5vd9z0j","tag_id":"ckcpntufu000x04oi76idmvah","_id":"ckcpntuh3003004oiyvgk8tw6"},{"post_id":"ckcpntug7001j04oi95e3jl2y","tag_id":"ckcpntugx002r04oibndeeo1a","_id":"ckcpntuh7003804oiwg0wyx7j"},{"post_id":"ckcpntug7001j04oi95e3jl2y","tag_id":"ckcpntuh2002z04oicpi9f8hl","_id":"ckcpntuh9003b04oicvzsa2wu"},{"post_id":"ckcpntuh6003604oitoq0mumd","tag_id":"ckcpntuf7000504oistxkm7r7","_id":"ckcpntuhb003f04oi88z4soyj"},{"post_id":"ckcpntugj002104oith53ez8z","tag_id":"ckcpntuh6003504oisct8bphi","_id":"ckcpntuhf003l04oiq7qga3vo"},{"post_id":"ckcpntugj002104oith53ez8z","tag_id":"ckcpntuha003c04oifoh7j8x5","_id":"ckcpntuhg003o04oi4uqk1ie6"},{"post_id":"ckcpntuhc003g04oi3fy2d95g","tag_id":"ckcpntufu000x04oi76idmvah","_id":"ckcpntuhm003s04oi9vt29h9o"},{"post_id":"ckcpntuhd003j04oiufbo0ofs","tag_id":"ckcpntufu000x04oi76idmvah","_id":"ckcpntuho003v04oi17ppat1f"},{"post_id":"ckcpntuhf003m04oiawtlonbq","tag_id":"ckcpntufu000x04oi76idmvah","_id":"ckcpntuhr003z04oiyqwt27ol"},{"post_id":"ckcpntugk002404oi902b4akh","tag_id":"ckcpntuhd003i04oixzut2h1i","_id":"ckcpntuhs004204oi2je93xku"},{"post_id":"ckcpntuhm003t04oi1mv68ljx","tag_id":"ckcpntufu000x04oi76idmvah","_id":"ckcpntuhw004604oidpipw8xo"},{"post_id":"ckcpntugy002s04oiz73cpbp8","tag_id":"ckcpntuhi003r04oilu03r0hy","_id":"ckcpntuhy004904oi6v2eshdl"},{"post_id":"ckcpntugz002v04oiydcesm1l","tag_id":"ckcpntuf7000504oistxkm7r7","_id":"ckcpntui0004c04oi0oxxdmz5"},{"post_id":"ckcpntugz002v04oiydcesm1l","tag_id":"ckcpntuhq003y04oitn8k6wm3","_id":"ckcpntui1004g04oibmdfyyac"},{"post_id":"ckcpntuhw004704oiw2kcaxek","tag_id":"ckcpntugh001x04oizg2t5hmo","_id":"ckcpntui3004j04oiwfbwuivh"},{"post_id":"ckcpntuh3003104oiwavz9l5j","tag_id":"ckcpntuf7000504oistxkm7r7","_id":"ckcpntui5004n04oimjd6hk1y"},{"post_id":"ckcpntuh3003104oiwavz9l5j","tag_id":"ckcpntuhv004504oid2mkbphi","_id":"ckcpntui7004q04oirp284nzr"},{"post_id":"ckcpntui2004h04oierrsgb9g","tag_id":"ckcpntui0004d04oijkdhl4a1","_id":"ckcpntui9004u04oi11fnbk5z"},{"post_id":"ckcpntui2004h04oierrsgb9g","tag_id":"ckcpntufu000x04oi76idmvah","_id":"ckcpntuib004x04oij9v8sg81"},{"post_id":"ckcpntuh4003304oibsuf4epw","tag_id":"ckcpntui0004d04oijkdhl4a1","_id":"ckcpntuif005104oi400l8ouf"},{"post_id":"ckcpntuh8003904oi5vl3lzcp","tag_id":"ckcpntui4004m04oi1wjoprzh","_id":"ckcpntuij005404oirq0luoei"},{"post_id":"ckcpntuhh003p04oi9j04pt9t","tag_id":"ckcpntufu000x04oi76idmvah","_id":"ckcpntuin005704oimikftro7"},{"post_id":"ckcpntuhh003p04oi9j04pt9t","tag_id":"ckcpntui9004t04oivj982thw","_id":"ckcpntuit005b04oiotag68gu"},{"post_id":"ckcpntuif005204oipln3rkn2","tag_id":"ckcpntuf7000504oistxkm7r7","_id":"ckcpntuiw005e04oi6hfs6vgv"},{"post_id":"ckcpntuhp003w04oiatfh1js9","tag_id":"ckcpntuie005004oitmvhwdlh","_id":"ckcpntuiy005i04oiw9qt9don"},{"post_id":"ckcpntuij005504oimrqs2bzq","tag_id":"ckcpntuf7000504oistxkm7r7","_id":"ckcpntuj1005k04oi2engab18"},{"post_id":"ckcpntuhr004004oicyd8kmgd","tag_id":"ckcpntui4004m04oi1wjoprzh","_id":"ckcpntuj2005n04oido8zhlxo"},{"post_id":"ckcpntuiu005c04oivb3emhoo","tag_id":"ckcpntuf7000504oistxkm7r7","_id":"ckcpntuj3005o04oiuu1r95s5"},{"post_id":"ckcpntuht004304oifkhkm83y","tag_id":"ckcpntui4004m04oi1wjoprzh","_id":"ckcpntuj3005q04oishvla5a3"},{"post_id":"ckcpntuhy004a04oiuhcczq7p","tag_id":"ckcpntugl002504oixmtimomt","_id":"ckcpntuj4005r04oio6g0p6ui"},{"post_id":"ckcpntuhy004a04oiuhcczq7p","tag_id":"ckcpntuj1005l04oiwu0pvb4b","_id":"ckcpntuj4005t04oiti14j58p"},{"post_id":"ckcpntui0004e04oizqx6wf2t","tag_id":"ckcpntuj3005p04oipkuo68gg","_id":"ckcpntuj5005u04oitkwx7xc3"},{"post_id":"ckcpntui3004k04oi058w8fqv","tag_id":"ckcpntuj4005s04oi12fhbp92","_id":"ckcpntuj5005w04oij0e8wp51"},{"post_id":"ckcpntui6004o04oifoheznj0","tag_id":"ckcpntuj3005p04oipkuo68gg","_id":"ckcpntuj6005y04oiy6k5rr79"},{"post_id":"ckcpntui7004r04oil0ekreh6","tag_id":"ckcpntuj6005x04oijg538mgr","_id":"ckcpntuj7006004oinl7qxji0"},{"post_id":"ckcpntui9004v04oi5rc9vauq","tag_id":"ckcpntuj6005z04oi1d9x7qkc","_id":"ckcpntuja006204oirhrgsdbr"},{"post_id":"ckcpntuib004y04oi3g2cgpjc","tag_id":"ckcpntuj7006104oi0sx5xpnn","_id":"ckcpntujc006504oi9yn34n9h"},{"post_id":"ckcpntuib004y04oi3g2cgpjc","tag_id":"ckcpntuja006304oi52wj8z2t","_id":"ckcpntujc006604oijb3huh55"},{"post_id":"ckcpntuiy005j04oik7xppjfq","tag_id":"ckcpntufu000x04oi76idmvah","_id":"ckcpntujd006704oih3sot4ba"},{"post_id":"ckcpntuiy005j04oik7xppjfq","tag_id":"ckcpntujb006404oi10bd0myr","_id":"ckcpntujd006804oihtgz2fnp"}],"Tag":[{"name":"Angular","_id":"ckcpntuf7000504oistxkm7r7"},{"name":"Idea","_id":"ckcpntufq000p04oi8s2arvd0"},{"name":"Java","_id":"ckcpntufu000x04oi76idmvah"},{"name":"Oauth","_id":"ckcpntug2001a04oiyd8jp027"},{"name":"MySQL","_id":"ckcpntugh001x04oizg2t5hmo"},{"name":"Nginx","_id":"ckcpntugl002504oixmtimomt"},{"name":"Zuul","_id":"ckcpntugq002d04oiripp3neo"},{"name":"Spring Cloud","_id":"ckcpntugu002l04oitz069v9s"},{"name":"Npm","_id":"ckcpntugx002r04oibndeeo1a"},{"name":"Nexus","_id":"ckcpntuh2002z04oicpi9f8hl"},{"name":"Docker","_id":"ckcpntuh6003504oisct8bphi"},{"name":"Spring Boot","_id":"ckcpntuha003c04oifoh7j8x5"},{"name":"TypeScript","_id":"ckcpntuhd003i04oixzut2h1i"},{"name":"Keepalived","_id":"ckcpntuhi003r04oilu03r0hy"},{"name":"VS Code","_id":"ckcpntuhq003y04oitn8k6wm3"},{"name":"Electron","_id":"ckcpntuhv004504oid2mkbphi"},{"name":"Spring","_id":"ckcpntui0004d04oijkdhl4a1"},{"name":"Linux","_id":"ckcpntui4004m04oi1wjoprzh"},{"name":"GC","_id":"ckcpntui9004t04oivj982thw"},{"name":"JavaScript","_id":"ckcpntuie005004oitmvhwdlh"},{"name":"Tomcat","_id":"ckcpntuj1005l04oiwu0pvb4b"},{"name":"MQ","_id":"ckcpntuj3005p04oipkuo68gg"},{"name":"Squid","_id":"ckcpntuj4005s04oi12fhbp92"},{"name":"spring","_id":"ckcpntuj6005x04oijg538mgr"},{"name":"Vue","_id":"ckcpntuj6005z04oi1d9x7qkc"},{"name":"Bootstrap","_id":"ckcpntuj7006104oi0sx5xpnn"},{"name":"webuploader","_id":"ckcpntuja006304oi52wj8z2t"},{"name":"Log","_id":"ckcpntujb006404oi10bd0myr"}]}}